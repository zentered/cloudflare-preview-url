{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvtzmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/oBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjtLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClt2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvjvhMA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrvxnxjrhuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvlrrlfzglltlnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5knmjjvnroBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjvvYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClprRA;;;;;;;;ACAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdhtvpjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjhlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClxvvhovnhxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnnnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpjrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/CA;AACA;;;;;;;;;;;ACDA;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;ACJA;;;;ACAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpCA;AACA;;;;;ACDA;AACA;AACA;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/IA;AACA;AACA;;;;;;;ACFA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACRA;AACA;AACA;AACA;AACA;;;ACJA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtHA;AACA;AACA;AACA;AACA;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvzjzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvznJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpprCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzjzvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtvxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppzljIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrprCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzdzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfxhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxllrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClltDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfvvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthdhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClznBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrhpnnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvlvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChncsources":[".././node_modules/@actions/core/lib/command.js",".././node_modules/@actions/core/lib/core.js",".././node_modules/@actions/core/lib/file-command.js",".././node_modules/@actions/core/lib/oidc-utils.js",".././node_modules/@actions/core/lib/path-utils.js",".././node_modules/@actions/core/lib/platform.js",".././node_modules/@actions/core/lib/summary.js",".././node_modules/@actions/core/lib/utils.js",".././node_modules/@actions/exec/lib/exec.js",".././node_modules/@actions/exec/lib/toolrunner.js",".././node_modules/@actions/http-client/lib/auth.js",".././node_modules/@actions/http-client/lib/index.js",".././node_modules/@actions/http-client/lib/proxy.js",".././node_modules/@actions/io/lib/io-util.js",".././node_modules/@actions/io/lib/io.js",".././node_modules/abort-controller/dist/abort-controller.js",".././node_modules/agentkeepalive/index.js",".././node_modules/agentkeepalive/lib/agent.js",".././node_modules/agentkeepalive/lib/constants.js",".././node_modules/agentkeepalive/lib/https_agent.js",".././node_modules/event-target-shim/dist/event-target-shim.js",".././node_modules/humanize-ms/index.js",".././node_modules/ms/index.js",".././node_modules/node-fetch/lib/index.js",".././node_modules/tr46/index.js",".././node_modules/tunnel/index.js",".././node_modules/tunnel/lib/tunnel.js",".././node_modules/undici/index.js",".././node_modules/undici/lib/agent.js",".././node_modules/undici/lib/api/abort-signal.js",".././node_modules/undici/lib/api/api-connect.js",".././node_modules/undici/lib/api/api-pipeline.js",".././node_modules/undici/lib/api/api-request.js",".././node_modules/undici/lib/api/api-stream.js",".././node_modules/undici/lib/api/api-upgrade.js",".././node_modules/undici/lib/api/index.js",".././node_modules/undici/lib/api/readable.js",".././node_modules/undici/lib/api/util.js",".././node_modules/undici/lib/balanced-pool.js",".././node_modules/undici/lib/cache/cache.js",".././node_modules/undici/lib/cache/cachestorage.js",".././node_modules/undici/lib/cache/symbols.js",".././node_modules/undici/lib/cache/util.js",".././node_modules/undici/lib/client.js",".././node_modules/undici/lib/compat/dispatcher-weakref.js",".././node_modules/undici/lib/cookies/constants.js",".././node_modules/undici/lib/cookies/index.js",".././node_modules/undici/lib/cookies/parse.js",".././node_modules/undici/lib/cookies/util.js",".././node_modules/undici/lib/core/connect.js",".././node_modules/undici/lib/core/constants.js",".././node_modules/undici/lib/core/errors.js",".././node_modules/undici/lib/core/request.js",".././node_modules/undici/lib/core/symbols.js",".././node_modules/undici/lib/core/util.js",".././node_modules/undici/lib/dispatcher-base.js",".././node_modules/undici/lib/dispatcher.js",".././node_modules/undici/lib/fetch/body.js",".././node_modules/undici/lib/fetch/constants.js",".././node_modules/undici/lib/fetch/dataURL.js",".././node_modules/undici/lib/fetch/file.js",".././node_modules/undici/lib/fetch/formdata.js",".././node_modules/undici/lib/fetch/global.js",".././node_modules/undici/lib/fetch/headers.js",".././node_modules/undici/lib/fetch/index.js",".././node_modules/undici/lib/fetch/request.js",".././node_modules/undici/lib/fetch/response.js",".././node_modules/undici/lib/fetch/symbols.js",".././node_modules/undici/lib/fetch/util.js",".././node_modules/undici/lib/fetch/webidl.js",".././node_modules/undici/lib/fileapi/encoding.js",".././node_modules/undici/lib/fileapi/filereader.js",".././node_modules/undici/lib/fileapi/progressevent.js",".././node_modules/undici/lib/fileapi/symbols.js",".././node_modules/undici/lib/fileapi/util.js",".././node_modules/undici/lib/global.js",".././node_modules/undici/lib/handler/DecoratorHandler.js",".././node_modules/undici/lib/handler/RedirectHandler.js",".././node_modules/undici/lib/handler/RetryHandler.js",".././node_modules/undici/lib/interceptor/redirectInterceptor.js",".././node_modules/undici/lib/llhttp/constants.js",".././node_modules/undici/lib/llhttp/llhttp-wasm.js",".././node_modules/undici/lib/llhttp/llhttp_simd-wasm.js",".././node_modules/undici/lib/llhttp/utils.js",".././node_modules/undici/lib/mock/mock-agent.js",".././node_modules/undici/lib/mock/mock-client.js",".././node_modules/undici/lib/mock/mock-errors.js",".././node_modules/undici/lib/mock/mock-interceptor.js",".././node_modules/undici/lib/mock/mock-pool.js",".././node_modules/undici/lib/mock/mock-symbols.js",".././node_modules/undici/lib/mock/mock-utils.js",".././node_modules/undici/lib/mock/pending-interceptors-formatter.js",".././node_modules/undici/lib/mock/pluralizer.js",".././node_modules/undici/lib/node/fixed-queue.js",".././node_modules/undici/lib/pool-base.js",".././node_modules/undici/lib/pool-stats.js",".././node_modules/undici/lib/pool.js",".././node_modules/undici/lib/proxy-agent.js",".././node_modules/undici/lib/timers.js",".././node_modules/undici/lib/websocket/connection.js",".././node_modules/undici/lib/websocket/constants.js",".././node_modules/undici/lib/websocket/events.js",".././node_modules/undici/lib/websocket/frame.js",".././node_modules/undici/lib/websocket/receiver.js",".././node_modules/undici/lib/websocket/symbols.js",".././node_modules/undici/lib/websocket/util.js",".././node_modules/undici/lib/websocket/websocket.js",".././node_modules/webidl-conversions/lib/index.js",".././node_modules/whatwg-url/lib/URL-impl.js",".././node_modules/whatwg-url/lib/URL.js",".././node_modules/whatwg-url/lib/public-api.js",".././node_modules/whatwg-url/lib/url-state-machine.js",".././node_modules/whatwg-url/lib/utils.js",".././node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"assert\"","../external node-commonjs \"async_hooks\"","../external node-commonjs \"buffer\"","../external node-commonjs \"child_process\"","../external node-commonjs \"console\"","../external node-commonjs \"crypto\"","../external node-commonjs \"diagnostics_channel\"","../external node-commonjs \"events\"","../external node-commonjs \"fs\"","../external node-commonjs \"http\"","../external node-commonjs \"http2\"","../external node-commonjs \"https\"","../external node-commonjs \"net\"","../external node-commonjs \"node:events\"","../external node-commonjs \"node:stream\"","../external node-commonjs \"node:util\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../external node-commonjs \"perf_hooks\"","../external node-commonjs \"punycode\"","../external node-commonjs \"querystring\"","../external node-commonjs \"stream\"","../external node-commonjs \"stream/web\"","../external node-commonjs \"string_decoder\"","../external node-commonjs \"timers\"","../external node-commonjs \"tls\"","../external node-commonjs \"url\"","../external node-commonjs \"util\"","../external node-commonjs \"util/types\"","../external node-commonjs \"worker_threads\"","../external node-commonjs \"zlib\"",".././node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js",".././node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js",".././node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js",".././node_modules/@fastify/busboy/deps/streamsearch/sbmh.js",".././node_modules/@fastify/busboy/lib/main.js",".././node_modules/@fastify/busboy/lib/types/multipart.js",".././node_modules/@fastify/busboy/lib/types/urlencoded.js",".././node_modules/@fastify/busboy/lib/utils/Decoder.js",".././node_modules/@fastify/busboy/lib/utils/basename.js",".././node_modules/@fastify/busboy/lib/utils/decodeText.js",".././node_modules/@fastify/busboy/lib/utils/getLimit.js",".././node_modules/@fastify/busboy/lib/utils/parseParams.js",".././node_modules/web-streams-polyfill/dist/ponyfill.mjs",".././node_modules/formdata-node/lib/esm/blobHelpers.js",".././node_modules/formdata-node/lib/esm/Blob.js",".././node_modules/formdata-node/lib/esm/File.js",".././node_modules/formdata-node/lib/esm/isFile.js",".././node_modules/formdata-node/lib/esm/isFunction.js","../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/compat","../webpack/runtime/import chunk loading",".././node_modules/cloudflare/internal/qs/formats.mjs",".././node_modules/cloudflare/internal/qs/utils.mjs",".././node_modules/cloudflare/internal/qs/stringify.mjs",".././node_modules/cloudflare/version.mjs",".././node_modules/cloudflare/error.mjs",".././node_modules/cloudflare/_shims/registry.mjs",".././node_modules/formdata-node/lib/esm/isBlob.js",".././node_modules/formdata-node/lib/esm/deprecateConstructorEntries.js",".././node_modules/formdata-node/lib/esm/FormData.js",".././node_modules/formdata-node/lib/esm/index.js","../external node-commonjs \"node:fs\"",".././node_modules/form-data-encoder/lib/esm/util/createBoundary.js",".././node_modules/form-data-encoder/lib/esm/util/isPlainObject.js",".././node_modules/form-data-encoder/lib/esm/util/normalizeValue.js",".././node_modules/form-data-encoder/lib/esm/util/escapeName.js",".././node_modules/form-data-encoder/lib/esm/util/isFunction.js",".././node_modules/form-data-encoder/lib/esm/util/isFileLike.js",".././node_modules/form-data-encoder/lib/esm/util/isFormData.js",".././node_modules/form-data-encoder/lib/esm/FormDataEncoder.js",".././node_modules/form-data-encoder/lib/esm/index.js",".././node_modules/cloudflare/_shims/MultipartBody.mjs","../external node-commonjs \"node:stream/web\"",".././node_modules/cloudflare/_shims/node-runtime.mjs",".././node_modules/cloudflare/_shims/index.mjs",".././node_modules/cloudflare/uploads.mjs",".././node_modules/cloudflare/core.mjs",".././node_modules/cloudflare/resource.mjs",".././node_modules/cloudflare/pagination.mjs",".././node_modules/cloudflare/resources/shared.mjs",".././node_modules/cloudflare/resources/accounts/members.mjs",".././node_modules/cloudflare/resources/accounts/roles.mjs",".././node_modules/cloudflare/resources/accounts/subscriptions.mjs",".././node_modules/cloudflare/resources/accounts/logs/audit.mjs",".././node_modules/cloudflare/resources/accounts/logs/logs.mjs",".././node_modules/cloudflare/resources/accounts/tokens/permission-groups.mjs",".././node_modules/cloudflare/resources/accounts/tokens/value.mjs",".././node_modules/cloudflare/resources/accounts/tokens/tokens.mjs",".././node_modules/cloudflare/resources/accounts/accounts.mjs",".././node_modules/cloudflare/resources/origin-ca-certificates.mjs",".././node_modules/cloudflare/resources/ips.mjs",".././node_modules/cloudflare/resources/memberships.mjs",".././node_modules/cloudflare/resources/user/audit-logs.mjs",".././node_modules/cloudflare/resources/user/invites.mjs",".././node_modules/cloudflare/resources/user/organizations.mjs",".././node_modules/cloudflare/resources/user/subscriptions.mjs",".././node_modules/cloudflare/resources/user/billing/history.mjs",".././node_modules/cloudflare/resources/user/billing/profile.mjs",".././node_modules/cloudflare/resources/user/billing/billing.mjs",".././node_modules/cloudflare/resources/user/tokens/permission-groups.mjs",".././node_modules/cloudflare/resources/user/tokens/value.mjs",".././node_modules/cloudflare/resources/user/tokens/tokens.mjs",".././node_modules/cloudflare/resources/user/user.mjs",".././node_modules/cloudflare/resources/zones/activation-check.mjs",".././node_modules/cloudflare/resources/zones/custom-nameservers.mjs",".././node_modules/cloudflare/resources/zones/holds.mjs",".././node_modules/cloudflare/resources/zones/plans.mjs",".././node_modules/cloudflare/resources/zones/rate-plans.mjs",".././node_modules/cloudflare/resources/zones/settings.mjs",".././node_modules/cloudflare/resources/zones/subscriptions.mjs",".././node_modules/cloudflare/resources/zones/zones.mjs",".././node_modules/cloudflare/resources/load-balancers/previews.mjs",".././node_modules/cloudflare/resources/load-balancers/regions.mjs",".././node_modules/cloudflare/resources/load-balancers/searches.mjs",".././node_modules/cloudflare/resources/load-balancers/monitors/previews.mjs",".././node_modules/cloudflare/resources/load-balancers/monitors/references.mjs",".././node_modules/cloudflare/resources/load-balancers/monitors/monitors.mjs",".././node_modules/cloudflare/resources/load-balancers/pools/health.mjs",".././node_modules/cloudflare/resources/load-balancers/pools/references.mjs",".././node_modules/cloudflare/resources/load-balancers/pools/pools.mjs",".././node_modules/cloudflare/resources/load-balancers/load-balancers.mjs",".././node_modules/cloudflare/resources/cache/cache-reserve.mjs",".././node_modules/cloudflare/resources/cache/regional-tiered-cache.mjs",".././node_modules/cloudflare/resources/cache/smart-tiered-cache.mjs",".././node_modules/cloudflare/resources/cache/variants.mjs",".././node_modules/cloudflare/resources/cache/cache.mjs",".././node_modules/cloudflare/resources/ssl/analyze.mjs",".././node_modules/cloudflare/resources/ssl/recommendations.mjs",".././node_modules/cloudflare/resources/ssl/verification.mjs",".././node_modules/cloudflare/resources/ssl/certificate-packs/quota.mjs",".././node_modules/cloudflare/resources/ssl/certificate-packs/certificate-packs.mjs",".././node_modules/cloudflare/resources/ssl/universal/settings.mjs",".././node_modules/cloudflare/resources/ssl/universal/universal.mjs",".././node_modules/cloudflare/resources/ssl/ssl.mjs",".././node_modules/cloudflare/resources/acm/total-tls.mjs",".././node_modules/cloudflare/resources/acm/acm.mjs",".././node_modules/cloudflare/resources/argo/smart-routing.mjs",".././node_modules/cloudflare/resources/argo/tiered-caching.mjs",".././node_modules/cloudflare/resources/argo/argo.mjs",".././node_modules/cloudflare/resources/certificate-authorities/hostname-associations.mjs",".././node_modules/cloudflare/resources/certificate-authorities/certificate-authorities.mjs",".././node_modules/cloudflare/resources/client-certificates.mjs",".././node_modules/cloudflare/resources/custom-certificates/prioritize.mjs",".././node_modules/cloudflare/resources/custom-certificates/custom-certificates.mjs",".././node_modules/cloudflare/resources/custom-hostnames/fallback-origin.mjs",".././node_modules/cloudflare/resources/custom-hostnames/certificate-pack/certificates.mjs",".././node_modules/cloudflare/resources/custom-hostnames/certificate-pack/certificate-pack.mjs",".././node_modules/cloudflare/resources/custom-hostnames/custom-hostnames.mjs",".././node_modules/cloudflare/resources/custom-nameservers.mjs",".././node_modules/cloudflare/resources/dns-firewall/reverse-dns.mjs",".././node_modules/cloudflare/resources/dns-firewall/analytics/reports/bytimes.mjs",".././node_modules/cloudflare/resources/dns-firewall/analytics/reports/reports.mjs",".././node_modules/cloudflare/resources/dns-firewall/analytics/analytics.mjs",".././node_modules/cloudflare/resources/dns-firewall/dns-firewall.mjs",".././node_modules/cloudflare/resources/dns/dnssec.mjs",".././node_modules/cloudflare/resources/dns/records.mjs",".././node_modules/cloudflare/resources/dns/analytics/reports/bytimes.mjs",".././node_modules/cloudflare/resources/dns/analytics/reports/reports.mjs",".././node_modules/cloudflare/resources/dns/analytics/analytics.mjs",".././node_modules/cloudflare/resources/dns/settings/zone.mjs",".././node_modules/cloudflare/resources/dns/settings/account/views.mjs",".././node_modules/cloudflare/resources/dns/settings/account/account.mjs",".././node_modules/cloudflare/resources/dns/settings/settings.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/acls.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/force-axfr.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/incoming.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/peers.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/tsigs.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/outgoing/status.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/outgoing/outgoing.mjs",".././node_modules/cloudflare/resources/dns/zone-transfers/zone-transfers.mjs",".././node_modules/cloudflare/resources/dns/dns.mjs",".././node_modules/cloudflare/resources/email-security/submissions.mjs",".././node_modules/cloudflare/resources/email-security/investigate/detections.mjs",".././node_modules/cloudflare/resources/email-security/investigate/move.mjs",".././node_modules/cloudflare/resources/email-security/investigate/preview.mjs",".././node_modules/cloudflare/resources/email-security/investigate/raw.mjs",".././node_modules/cloudflare/resources/email-security/investigate/reclassify.mjs",".././node_modules/cloudflare/resources/email-security/investigate/release.mjs",".././node_modules/cloudflare/resources/email-security/investigate/trace.mjs",".././node_modules/cloudflare/resources/email-security/investigate/investigate.mjs",".././node_modules/cloudflare/resources/email-security/settings/allow-policies.mjs",".././node_modules/cloudflare/resources/email-security/settings/block-senders.mjs",".././node_modules/cloudflare/resources/email-security/settings/domains.mjs",".././node_modules/cloudflare/resources/email-security/settings/impersonation-registry.mjs",".././node_modules/cloudflare/resources/email-security/settings/trusted-domains.mjs",".././node_modules/cloudflare/resources/email-security/settings/settings.mjs",".././node_modules/cloudflare/resources/email-security/email-security.mjs",".././node_modules/cloudflare/resources/email-routing/addresses.mjs",".././node_modules/cloudflare/resources/email-routing/dns.mjs",".././node_modules/cloudflare/resources/email-routing/rules/catch-alls.mjs",".././node_modules/cloudflare/resources/email-routing/rules/rules.mjs",".././node_modules/cloudflare/resources/email-routing/email-routing.mjs",".././node_modules/cloudflare/resources/filters.mjs",".././node_modules/cloudflare/resources/firewall/access-rules.mjs",".././node_modules/cloudflare/resources/firewall/lockdowns.mjs",".././node_modules/cloudflare/resources/firewall/rules.mjs",".././node_modules/cloudflare/resources/firewall/ua-rules.mjs",".././node_modules/cloudflare/resources/firewall/waf/overrides.mjs",".././node_modules/cloudflare/resources/firewall/waf/packages/groups.mjs",".././node_modules/cloudflare/resources/firewall/waf/packages/rules.mjs",".././node_modules/cloudflare/resources/firewall/waf/packages/packages.mjs",".././node_modules/cloudflare/resources/firewall/waf/waf.mjs",".././node_modules/cloudflare/resources/firewall/firewall.mjs",".././node_modules/cloudflare/resources/healthchecks/previews.mjs",".././node_modules/cloudflare/resources/healthchecks/healthchecks.mjs",".././node_modules/cloudflare/resources/keyless-certificates.mjs",".././node_modules/cloudflare/resources/logpush/edge.mjs",".././node_modules/cloudflare/resources/logpush/jobs.mjs",".././node_modules/cloudflare/resources/logpush/ownership.mjs",".././node_modules/cloudflare/resources/logpush/validate.mjs",".././node_modules/cloudflare/resources/logpush/datasets/fields.mjs",".././node_modules/cloudflare/resources/logpush/datasets/jobs.mjs",".././node_modules/cloudflare/resources/logpush/datasets/datasets.mjs",".././node_modules/cloudflare/resources/logpush/logpush.mjs",".././node_modules/cloudflare/resources/logs/rayid.mjs",".././node_modules/cloudflare/resources/logs/control/retention.mjs",".././node_modules/cloudflare/resources/logs/control/cmb/config.mjs",".././node_modules/cloudflare/resources/logs/control/cmb/cmb.mjs",".././node_modules/cloudflare/resources/logs/control/control.mjs",".././node_modules/cloudflare/resources/logs/received/fields.mjs",".././node_modules/cloudflare/resources/logs/received/received.mjs",".././node_modules/cloudflare/resources/logs/logs.mjs",".././node_modules/cloudflare/resources/origin-tls-client-auth/settings.mjs",".././node_modules/cloudflare/resources/origin-tls-client-auth/hostnames/certificates.mjs",".././node_modules/cloudflare/resources/origin-tls-client-auth/hostnames/hostnames.mjs",".././node_modules/cloudflare/resources/origin-tls-client-auth/origin-tls-client-auth.mjs",".././node_modules/cloudflare/resources/page-rules.mjs",".././node_modules/cloudflare/resources/rate-limits.mjs",".././node_modules/cloudflare/resources/waiting-rooms/page.mjs",".././node_modules/cloudflare/resources/waiting-rooms/rules.mjs",".././node_modules/cloudflare/resources/waiting-rooms/settings.mjs",".././node_modules/cloudflare/resources/waiting-rooms/statuses.mjs",".././node_modules/cloudflare/resources/waiting-rooms/events/details.mjs",".././node_modules/cloudflare/resources/waiting-rooms/events/events.mjs",".././node_modules/cloudflare/resources/waiting-rooms/waiting-rooms.mjs",".././node_modules/cloudflare/resources/web3/hostnames/ipfs-universal-paths/content-lists/entries.mjs",".././node_modules/cloudflare/resources/web3/hostnames/ipfs-universal-paths/content-lists/content-lists.mjs",".././node_modules/cloudflare/resources/web3/hostnames/ipfs-universal-paths/ipfs-universal-paths.mjs",".././node_modules/cloudflare/resources/web3/hostnames/hostnames.mjs",".././node_modules/cloudflare/resources/web3/web3.mjs",".././node_modules/cloudflare/resources/workers/account-settings.mjs",".././node_modules/cloudflare/resources/workers/domains.mjs",".././node_modules/cloudflare/resources/workers/routes.mjs",".././node_modules/cloudflare/resources/workers/subdomains.mjs",".././node_modules/cloudflare/resources/workers/assets/upload.mjs",".././node_modules/cloudflare/resources/workers/assets/assets.mjs",".././node_modules/cloudflare/resources/workers/beta/workers/versions.mjs",".././node_modules/cloudflare/resources/workers/beta/workers/workers.mjs",".././node_modules/cloudflare/resources/workers/beta/beta.mjs",".././node_modules/cloudflare/resources/workers/observability/telemetry.mjs",".././node_modules/cloudflare/resources/workers/observability/observability.mjs",".././node_modules/cloudflare/resources/workers/scripts/content.mjs",".././node_modules/cloudflare/resources/workers/scripts/deployments.mjs",".././node_modules/cloudflare/resources/workers/scripts/schedules.mjs",".././node_modules/cloudflare/resources/workers/scripts/script-and-version-settings.mjs",".././node_modules/cloudflare/resources/workers/scripts/secrets.mjs",".././node_modules/cloudflare/resources/workers/scripts/settings.mjs",".././node_modules/cloudflare/resources/workers/scripts/subdomain.mjs",".././node_modules/cloudflare/resources/workers/scripts/tail.mjs",".././node_modules/cloudflare/resources/workers/scripts/versions.mjs",".././node_modules/cloudflare/resources/workers/scripts/assets/upload.mjs",".././node_modules/cloudflare/resources/workers/scripts/assets/assets.mjs",".././node_modules/cloudflare/resources/workers/scripts/scripts.mjs",".././node_modules/cloudflare/resources/workers/workers.mjs",".././node_modules/cloudflare/resources/kv/namespaces/keys.mjs",".././node_modules/cloudflare/resources/kv/namespaces/metadata.mjs",".././node_modules/cloudflare/resources/kv/namespaces/values.mjs",".././node_modules/cloudflare/resources/kv/namespaces/namespaces.mjs",".././node_modules/cloudflare/resources/kv/kv.mjs",".././node_modules/cloudflare/resources/durable-objects/namespaces/objects.mjs",".././node_modules/cloudflare/resources/durable-objects/namespaces/namespaces.mjs",".././node_modules/cloudflare/resources/durable-objects/durable-objects.mjs",".././node_modules/cloudflare/resources/queues/consumers.mjs",".././node_modules/cloudflare/resources/queues/messages.mjs",".././node_modules/cloudflare/resources/queues/purge.mjs",".././node_modules/cloudflare/resources/queues/subscriptions.mjs",".././node_modules/cloudflare/resources/queues/queues.mjs",".././node_modules/cloudflare/resources/api-gateway/configurations.mjs",".././node_modules/cloudflare/resources/api-gateway/schemas.mjs",".././node_modules/cloudflare/resources/api-gateway/discovery/operations.mjs",".././node_modules/cloudflare/resources/api-gateway/discovery/discovery.mjs",".././node_modules/cloudflare/resources/api-gateway/expression-template/fallthrough.mjs",".././node_modules/cloudflare/resources/api-gateway/expression-template/expression-template.mjs",".././node_modules/cloudflare/resources/api-gateway/operations/schema-validation.mjs",".././node_modules/cloudflare/resources/api-gateway/operations/operations.mjs",".././node_modules/cloudflare/resources/api-gateway/settings/schema-validation.mjs",".././node_modules/cloudflare/resources/api-gateway/settings/settings.mjs",".././node_modules/cloudflare/resources/api-gateway/user-schemas/hosts.mjs",".././node_modules/cloudflare/resources/api-gateway/user-schemas/operations.mjs",".././node_modules/cloudflare/resources/api-gateway/user-schemas/user-schemas.mjs",".././node_modules/cloudflare/resources/api-gateway/api-gateway.mjs",".././node_modules/cloudflare/resources/managed-transforms.mjs",".././node_modules/cloudflare/resources/page-shield/connections.mjs",".././node_modules/cloudflare/resources/page-shield/cookies.mjs",".././node_modules/cloudflare/resources/page-shield/policies.mjs",".././node_modules/cloudflare/resources/page-shield/scripts.mjs",".././node_modules/cloudflare/resources/page-shield/page-shield.mjs",".././node_modules/cloudflare/resources/rulesets/rules.mjs",".././node_modules/cloudflare/resources/rulesets/versions.mjs",".././node_modules/cloudflare/resources/rulesets/phases/versions.mjs",".././node_modules/cloudflare/resources/rulesets/phases/phases.mjs",".././node_modules/cloudflare/resources/rulesets/rulesets.mjs",".././node_modules/cloudflare/resources/url-normalization.mjs",".././node_modules/cloudflare/resources/spectrum/apps.mjs",".././node_modules/cloudflare/resources/spectrum/analytics/aggregates/currents.mjs",".././node_modules/cloudflare/resources/spectrum/analytics/aggregates/aggregates.mjs",".././node_modules/cloudflare/resources/spectrum/analytics/events/bytimes.mjs",".././node_modules/cloudflare/resources/spectrum/analytics/events/summaries.mjs",".././node_modules/cloudflare/resources/spectrum/analytics/events/events.mjs",".././node_modules/cloudflare/resources/spectrum/analytics/analytics.mjs",".././node_modules/cloudflare/resources/spectrum/spectrum.mjs",".././node_modules/cloudflare/resources/addressing/loa-documents.mjs",".././node_modules/cloudflare/resources/addressing/services.mjs",".././node_modules/cloudflare/resources/addressing/address-maps/accounts.mjs",".././node_modules/cloudflare/resources/addressing/address-maps/ips.mjs",".././node_modules/cloudflare/resources/addressing/address-maps/zones.mjs",".././node_modules/cloudflare/resources/addressing/address-maps/address-maps.mjs",".././node_modules/cloudflare/resources/addressing/prefixes/advertisement-status.mjs",".././node_modules/cloudflare/resources/addressing/prefixes/bgp-prefixes.mjs",".././node_modules/cloudflare/resources/addressing/prefixes/delegations.mjs",".././node_modules/cloudflare/resources/addressing/prefixes/service-bindings.mjs",".././node_modules/cloudflare/resources/addressing/prefixes/prefixes.mjs",".././node_modules/cloudflare/resources/addressing/regional-hostnames/regions.mjs",".././node_modules/cloudflare/resources/addressing/regional-hostnames/regional-hostnames.mjs",".././node_modules/cloudflare/resources/addressing/addressing.mjs",".././node_modules/cloudflare/resources/audit-logs.mjs",".././node_modules/cloudflare/resources/billing/profiles.mjs",".././node_modules/cloudflare/resources/billing/billing.mjs",".././node_modules/cloudflare/resources/brand-protection/logo-matches.mjs",".././node_modules/cloudflare/resources/brand-protection/logos.mjs",".././node_modules/cloudflare/resources/brand-protection/matches.mjs",".././node_modules/cloudflare/resources/brand-protection/queries.mjs",".././node_modules/cloudflare/resources/brand-protection/brand-protection.mjs",".././node_modules/cloudflare/resources/diagnostics/endpoint-healthchecks.mjs",".././node_modules/cloudflare/resources/diagnostics/traceroutes.mjs",".././node_modules/cloudflare/resources/diagnostics/diagnostics.mjs",".././node_modules/cloudflare/resources/images/v1/blobs.mjs",".././node_modules/cloudflare/resources/images/v1/keys.mjs",".././node_modules/cloudflare/resources/images/v1/stats.mjs",".././node_modules/cloudflare/resources/images/v1/variants.mjs",".././node_modules/cloudflare/resources/images/v1/v1.mjs",".././node_modules/cloudflare/resources/images/v2/direct-uploads.mjs",".././node_modules/cloudflare/resources/images/v2/v2.mjs",".././node_modules/cloudflare/resources/images/images.mjs",".././node_modules/cloudflare/resources/intel/dns.mjs",".././node_modules/cloudflare/resources/intel/domain-history.mjs",".././node_modules/cloudflare/resources/intel/ip-lists.mjs",".././node_modules/cloudflare/resources/intel/ips.mjs",".././node_modules/cloudflare/resources/intel/miscategorizations.mjs",".././node_modules/cloudflare/resources/intel/sinkholes.mjs",".././node_modules/cloudflare/resources/intel/whois.mjs",".././node_modules/cloudflare/resources/intel/asn/subnets.mjs",".././node_modules/cloudflare/resources/intel/asn/asn.mjs",".././node_modules/cloudflare/resources/intel/attack-surface-report/issue-types.mjs",".././node_modules/cloudflare/resources/intel/attack-surface-report/issues.mjs",".././node_modules/cloudflare/resources/intel/attack-surface-report/attack-surface-report.mjs",".././node_modules/cloudflare/resources/intel/domains/bulks.mjs",".././node_modules/cloudflare/resources/intel/domains/domains.mjs",".././node_modules/cloudflare/resources/intel/indicator-feeds/downloads.mjs",".././node_modules/cloudflare/resources/intel/indicator-feeds/permissions.mjs",".././node_modules/cloudflare/resources/intel/indicator-feeds/snapshots.mjs",".././node_modules/cloudflare/resources/intel/indicator-feeds/indicator-feeds.mjs",".././node_modules/cloudflare/resources/intel/intel.mjs",".././node_modules/cloudflare/resources/magic-transit/apps.mjs",".././node_modules/cloudflare/resources/magic-transit/cf-interconnects.mjs",".././node_modules/cloudflare/resources/magic-transit/gre-tunnels.mjs",".././node_modules/cloudflare/resources/magic-transit/ipsec-tunnels.mjs",".././node_modules/cloudflare/resources/magic-transit/routes.mjs",".././node_modules/cloudflare/resources/magic-transit/connectors/events/latest.mjs",".././node_modules/cloudflare/resources/magic-transit/connectors/events/events.mjs",".././node_modules/cloudflare/resources/magic-transit/connectors/snapshots/latest.mjs",".././node_modules/cloudflare/resources/magic-transit/connectors/snapshots/snapshots.mjs",".././node_modules/cloudflare/resources/magic-transit/connectors/connectors.mjs",".././node_modules/cloudflare/resources/magic-transit/pcaps/download.mjs",".././node_modules/cloudflare/resources/magic-transit/pcaps/ownership.mjs",".././node_modules/cloudflare/resources/magic-transit/pcaps/pcaps.mjs",".././node_modules/cloudflare/resources/magic-transit/sites/acls.mjs",".././node_modules/cloudflare/resources/magic-transit/sites/lans.mjs",".././node_modules/cloudflare/resources/magic-transit/sites/wans.mjs",".././node_modules/cloudflare/resources/magic-transit/sites/sites.mjs",".././node_modules/cloudflare/resources/magic-transit/magic-transit.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/configs/full.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/configs/configs.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/rules/advertisements.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/rules/rules.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/vpc-flows/tokens.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/vpc-flows/vpc-flows.mjs",".././node_modules/cloudflare/resources/magic-network-monitoring/magic-network-monitoring.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/cloud-integrations.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/resources.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/catalog-syncs/prebuilt-policies.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/catalog-syncs/catalog-syncs.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/on-ramps/address-spaces.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/on-ramps/on-ramps.mjs",".././node_modules/cloudflare/resources/magic-cloud-networking/magic-cloud-networking.mjs",".././node_modules/cloudflare/resources/network-interconnects/cnis.mjs",".././node_modules/cloudflare/resources/network-interconnects/interconnects.mjs",".././node_modules/cloudflare/resources/network-interconnects/settings.mjs",".././node_modules/cloudflare/resources/network-interconnects/slots.mjs",".././node_modules/cloudflare/resources/network-interconnects/network-interconnects.mjs",".././node_modules/cloudflare/resources/mtls-certificates/associations.mjs",".././node_modules/cloudflare/resources/mtls-certificates/mtls-certificates.mjs",".././node_modules/cloudflare/resources/pages/projects/domains.mjs",".././node_modules/cloudflare/resources/pages/projects/deployments/history/logs.mjs",".././node_modules/cloudflare/resources/pages/projects/deployments/history/history.mjs",".././node_modules/cloudflare/resources/pages/projects/deployments/deployments.mjs",".././node_modules/cloudflare/resources/pages/projects/projects.mjs",".././node_modules/cloudflare/resources/pages/pages.mjs",".././node_modules/cloudflare/resources/registrar/domains.mjs",".././node_modules/cloudflare/resources/registrar/registrar.mjs",".././node_modules/cloudflare/resources/request-tracers/traces.mjs",".././node_modules/cloudflare/resources/request-tracers/request-tracers.mjs",".././node_modules/cloudflare/resources/rules/lists/bulk-operations.mjs",".././node_modules/cloudflare/resources/rules/lists/items.mjs",".././node_modules/cloudflare/resources/rules/lists/lists.mjs",".././node_modules/cloudflare/resources/rules/rules.mjs",".././node_modules/cloudflare/resources/stream/audio-tracks.mjs",".././node_modules/cloudflare/resources/stream/clip.mjs",".././node_modules/cloudflare/resources/stream/copy.mjs",".././node_modules/cloudflare/resources/stream/direct-upload.mjs",".././node_modules/cloudflare/resources/stream/downloads.mjs",".././node_modules/cloudflare/resources/stream/embed.mjs",".././node_modules/cloudflare/resources/stream/keys.mjs",".././node_modules/cloudflare/resources/stream/token.mjs",".././node_modules/cloudflare/resources/stream/videos.mjs",".././node_modules/cloudflare/resources/stream/watermarks.mjs",".././node_modules/cloudflare/resources/stream/webhooks.mjs",".././node_modules/cloudflare/resources/stream/captions/language/vtt.mjs",".././node_modules/cloudflare/resources/stream/captions/language/language.mjs",".././node_modules/cloudflare/resources/stream/captions/captions.mjs",".././node_modules/cloudflare/resources/stream/live-inputs/outputs.mjs",".././node_modules/cloudflare/resources/stream/live-inputs/live-inputs.mjs",".././node_modules/cloudflare/resources/stream/stream.mjs",".././node_modules/cloudflare/resources/alerting/available-alerts.mjs",".././node_modules/cloudflare/resources/alerting/history.mjs",".././node_modules/cloudflare/resources/alerting/policies.mjs",".././node_modules/cloudflare/resources/alerting/destinations/eligible.mjs",".././node_modules/cloudflare/resources/alerting/destinations/pagerduty.mjs",".././node_modules/cloudflare/resources/alerting/destinations/webhooks.mjs",".././node_modules/cloudflare/resources/alerting/destinations/destinations.mjs",".././node_modules/cloudflare/resources/alerting/alerting.mjs",".././node_modules/cloudflare/resources/d1/database.mjs",".././node_modules/cloudflare/resources/d1/d1.mjs",".././node_modules/cloudflare/resources/r2/temporary-credentials.mjs",".././node_modules/cloudflare/resources/r2/buckets/cors.mjs",".././node_modules/cloudflare/resources/r2/buckets/event-notifications.mjs",".././node_modules/cloudflare/resources/r2/buckets/lifecycle.mjs",".././node_modules/cloudflare/resources/r2/buckets/locks.mjs",".././node_modules/cloudflare/resources/r2/buckets/metrics.mjs",".././node_modules/cloudflare/resources/r2/buckets/sippy.mjs",".././node_modules/cloudflare/resources/r2/buckets/domains/custom.mjs",".././node_modules/cloudflare/resources/r2/buckets/domains/managed.mjs",".././node_modules/cloudflare/resources/r2/buckets/domains/domains.mjs",".././node_modules/cloudflare/resources/r2/buckets/buckets.mjs",".././node_modules/cloudflare/resources/r2/super-slurper/connectivity-precheck.mjs",".././node_modules/cloudflare/resources/r2/super-slurper/jobs/logs.mjs",".././node_modules/cloudflare/resources/r2/super-slurper/jobs/jobs.mjs",".././node_modules/cloudflare/resources/r2/super-slurper/super-slurper.mjs",".././node_modules/cloudflare/resources/r2/r2.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/asset-upload.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/bindings.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/content.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/secrets.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/settings.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/tags.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/scripts/scripts.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/namespaces/namespaces.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/dispatch/dispatch.mjs",".././node_modules/cloudflare/resources/workers-for-platforms/workers-for-platforms.mjs",".././node_modules/cloudflare/resources/zero-trust/connectivity-settings.mjs",".././node_modules/cloudflare/resources/zero-trust/seats.mjs",".././node_modules/cloudflare/resources/zero-trust/access/bookmarks.mjs",".././node_modules/cloudflare/resources/zero-trust/access/custom-pages.mjs",".././node_modules/cloudflare/resources/zero-trust/access/gateway-ca.mjs",".././node_modules/cloudflare/resources/zero-trust/access/groups.mjs",".././node_modules/cloudflare/resources/zero-trust/access/keys.mjs",".././node_modules/cloudflare/resources/zero-trust/access/policies.mjs",".././node_modules/cloudflare/resources/zero-trust/access/service-tokens.mjs",".././node_modules/cloudflare/resources/zero-trust/access/tags.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/cas.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/policies.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/settings.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/user-policy-checks.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/policy-tests/users.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/policy-tests/policy-tests.mjs",".././node_modules/cloudflare/resources/zero-trust/access/applications/applications.mjs",".././node_modules/cloudflare/resources/zero-trust/access/certificates/settings.mjs",".././node_modules/cloudflare/resources/zero-trust/access/certificates/certificates.mjs",".././node_modules/cloudflare/resources/zero-trust/access/infrastructure/targets.mjs",".././node_modules/cloudflare/resources/zero-trust/access/infrastructure/infrastructure.mjs",".././node_modules/cloudflare/resources/zero-trust/access/logs/access-requests.mjs",".././node_modules/cloudflare/resources/zero-trust/access/logs/scim/updates.mjs",".././node_modules/cloudflare/resources/zero-trust/access/logs/scim/scim.mjs",".././node_modules/cloudflare/resources/zero-trust/access/logs/logs.mjs",".././node_modules/cloudflare/resources/zero-trust/access/users/active-sessions.mjs",".././node_modules/cloudflare/resources/zero-trust/access/users/failed-logins.mjs",".././node_modules/cloudflare/resources/zero-trust/access/users/last-seen-identity.mjs",".././node_modules/cloudflare/resources/zero-trust/access/users/users.mjs",".././node_modules/cloudflare/resources/zero-trust/access/access.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/devices_.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/dex-tests.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/fleet-status.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/networks.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/override-codes.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/registrations.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/revoke.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/settings.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/unrevoke.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/custom/excludes.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/custom/fallback-domains.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/custom/includes.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/custom/custom.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/default/certificates.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/default/excludes.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/default/fallback-domains.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/default/includes.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/default/default.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/policies/policies.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/posture/integrations.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/posture/posture.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/resilience/global-warp-override.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/resilience/resilience.mjs",".././node_modules/cloudflare/resources/zero-trust/devices/devices.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/colos.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/traceroute-tests.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/warp-change-events.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/commands/devices.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/commands/downloads.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/commands/quota.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/commands/commands.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/fleet-status/devices.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/fleet-status/fleet-status.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/http-tests/percentiles.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/http-tests/http-tests.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/tests/unique-devices.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/tests/tests.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/traceroute-test-results/network-path.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/traceroute-test-results/traceroute-test-results.mjs",".././node_modules/cloudflare/resources/zero-trust/dex/dex.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/limits.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/patterns.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/payload-logs.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/datasets/upload.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/datasets/versions/entries.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/datasets/versions/versions.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/datasets/datasets.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/email/account-mapping.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/email/rules.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/email/email.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/entries/custom.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/entries/integration.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/entries/predefined.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/entries/entries.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/profiles/custom.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/profiles/predefined.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/profiles/profiles.mjs",".././node_modules/cloudflare/resources/zero-trust/dlp/dlp.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/app-types.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/audit-ssh-settings.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/categories.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/certificates.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/locations.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/logging.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/proxy-endpoints.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/rules.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/configurations/custom-certificate.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/configurations/configurations.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/lists/items.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/lists/lists.mjs",".././node_modules/cloudflare/resources/zero-trust/gateway/gateway.mjs",".././node_modules/cloudflare/resources/zero-trust/identity-providers/scim/groups.mjs",".././node_modules/cloudflare/resources/zero-trust/identity-providers/scim/users.mjs",".././node_modules/cloudflare/resources/zero-trust/identity-providers/scim/scim.mjs",".././node_modules/cloudflare/resources/zero-trust/identity-providers/identity-providers.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/virtual-networks.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/routes/ips.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/routes/networks.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/routes/routes.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/subnets/cloudflare-source.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/subnets/subnets.mjs",".././node_modules/cloudflare/resources/zero-trust/networks/networks.mjs",".././node_modules/cloudflare/resources/zero-trust/organizations/doh.mjs",".././node_modules/cloudflare/resources/zero-trust/organizations/organizations.mjs",".././node_modules/cloudflare/resources/zero-trust/risk-scoring/behaviours.mjs",".././node_modules/cloudflare/resources/zero-trust/risk-scoring/summary.mjs",".././node_modules/cloudflare/resources/zero-trust/risk-scoring/integrations/references.mjs",".././node_modules/cloudflare/resources/zero-trust/risk-scoring/integrations/integrations.mjs",".././node_modules/cloudflare/resources/zero-trust/risk-scoring/risk-scoring.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/cloudflared/configurations.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/cloudflared/connections.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/cloudflared/connectors.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/cloudflared/management.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/cloudflared/token.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/cloudflared/cloudflared.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/warp-connector/token.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/warp-connector/warp-connector.mjs",".././node_modules/cloudflare/resources/zero-trust/tunnels/tunnels.mjs",".././node_modules/cloudflare/resources/zero-trust/zero-trust.mjs",".././node_modules/cloudflare/resources/turnstile/widgets.mjs",".././node_modules/cloudflare/resources/turnstile/turnstile.mjs",".././node_modules/cloudflare/resources/hyperdrive/configs.mjs",".././node_modules/cloudflare/resources/hyperdrive/hyperdrive.mjs",".././node_modules/cloudflare/resources/rum/rules.mjs",".././node_modules/cloudflare/resources/rum/site-info.mjs",".././node_modules/cloudflare/resources/rum/rum.mjs",".././node_modules/cloudflare/resources/vectorize/indexes/metadata-index.mjs",".././node_modules/cloudflare/resources/vectorize/indexes/indexes.mjs",".././node_modules/cloudflare/resources/vectorize/vectorize.mjs",".././node_modules/cloudflare/resources/url-scanner/responses.mjs",".././node_modules/cloudflare/resources/url-scanner/scans.mjs",".././node_modules/cloudflare/resources/url-scanner/url-scanner.mjs",".././node_modules/cloudflare/resources/radar/datasets.mjs",".././node_modules/cloudflare/resources/radar/search.mjs",".././node_modules/cloudflare/resources/radar/tcp-resets-timeouts.mjs",".././node_modules/cloudflare/resources/radar/ai/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/ai/to-markdown.mjs",".././node_modules/cloudflare/resources/radar/ai/bots/summary.mjs",".././node_modules/cloudflare/resources/radar/ai/bots/bots.mjs",".././node_modules/cloudflare/resources/radar/ai/inference/summary.mjs",".././node_modules/cloudflare/resources/radar/ai/inference/timeseries-groups/summary.mjs",".././node_modules/cloudflare/resources/radar/ai/inference/timeseries-groups/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/ai/inference/inference.mjs",".././node_modules/cloudflare/resources/radar/ai/ai.mjs",".././node_modules/cloudflare/resources/radar/annotations/outages.mjs",".././node_modules/cloudflare/resources/radar/annotations/annotations.mjs",".././node_modules/cloudflare/resources/radar/as112/summary.mjs",".././node_modules/cloudflare/resources/radar/as112/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/as112/top.mjs",".././node_modules/cloudflare/resources/radar/as112/as112.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer3/summary.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer3/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer3/top/locations.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer3/top/top.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer3/layer3.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer7/summary.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer7/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer7/top/ases.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer7/top/locations.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer7/top/top.mjs",".././node_modules/cloudflare/resources/radar/attacks/layer7/layer7.mjs",".././node_modules/cloudflare/resources/radar/attacks/attacks.mjs",".././node_modules/cloudflare/resources/radar/bgp/ips.mjs",".././node_modules/cloudflare/resources/radar/bgp/routes.mjs",".././node_modules/cloudflare/resources/radar/bgp/hijacks/events.mjs",".././node_modules/cloudflare/resources/radar/bgp/hijacks/hijacks.mjs",".././node_modules/cloudflare/resources/radar/bgp/leaks/events.mjs",".././node_modules/cloudflare/resources/radar/bgp/leaks/leaks.mjs",".././node_modules/cloudflare/resources/radar/bgp/top/ases.mjs",".././node_modules/cloudflare/resources/radar/bgp/top/top.mjs",".././node_modules/cloudflare/resources/radar/bgp/bgp.mjs",".././node_modules/cloudflare/resources/radar/bots/web-crawlers.mjs",".././node_modules/cloudflare/resources/radar/bots/bots.mjs",".././node_modules/cloudflare/resources/radar/ct/authorities.mjs",".././node_modules/cloudflare/resources/radar/ct/logs.mjs",".././node_modules/cloudflare/resources/radar/ct/ct.mjs",".././node_modules/cloudflare/resources/radar/dns/summary.mjs",".././node_modules/cloudflare/resources/radar/dns/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/dns/top.mjs",".././node_modules/cloudflare/resources/radar/dns/dns.mjs",".././node_modules/cloudflare/resources/radar/email/routing/summary.mjs",".././node_modules/cloudflare/resources/radar/email/routing/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/email/routing/routing.mjs",".././node_modules/cloudflare/resources/radar/email/security/summary.mjs",".././node_modules/cloudflare/resources/radar/email/security/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/email/security/top/tlds/malicious.mjs",".././node_modules/cloudflare/resources/radar/email/security/top/tlds/spam.mjs",".././node_modules/cloudflare/resources/radar/email/security/top/tlds/spoof.mjs",".././node_modules/cloudflare/resources/radar/email/security/top/tlds/tlds.mjs",".././node_modules/cloudflare/resources/radar/email/security/top/top.mjs",".././node_modules/cloudflare/resources/radar/email/security/security.mjs",".././node_modules/cloudflare/resources/radar/email/email.mjs",".././node_modules/cloudflare/resources/radar/entities/asns.mjs",".././node_modules/cloudflare/resources/radar/entities/locations.mjs",".././node_modules/cloudflare/resources/radar/entities/entities.mjs",".././node_modules/cloudflare/resources/radar/http/summary.mjs",".././node_modules/cloudflare/resources/radar/http/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/http/top.mjs",".././node_modules/cloudflare/resources/radar/http/ases/bot-class.mjs",".././node_modules/cloudflare/resources/radar/http/ases/browser-family.mjs",".././node_modules/cloudflare/resources/radar/http/ases/device-type.mjs",".././node_modules/cloudflare/resources/radar/http/ases/http-method.mjs",".././node_modules/cloudflare/resources/radar/http/ases/http-protocol.mjs",".././node_modules/cloudflare/resources/radar/http/ases/ip-version.mjs",".././node_modules/cloudflare/resources/radar/http/ases/os.mjs",".././node_modules/cloudflare/resources/radar/http/ases/tls-version.mjs",".././node_modules/cloudflare/resources/radar/http/ases/ases.mjs",".././node_modules/cloudflare/resources/radar/http/locations/bot-class.mjs",".././node_modules/cloudflare/resources/radar/http/locations/browser-family.mjs",".././node_modules/cloudflare/resources/radar/http/locations/device-type.mjs",".././node_modules/cloudflare/resources/radar/http/locations/http-method.mjs",".././node_modules/cloudflare/resources/radar/http/locations/http-protocol.mjs",".././node_modules/cloudflare/resources/radar/http/locations/ip-version.mjs",".././node_modules/cloudflare/resources/radar/http/locations/os.mjs",".././node_modules/cloudflare/resources/radar/http/locations/tls-version.mjs",".././node_modules/cloudflare/resources/radar/http/locations/locations.mjs",".././node_modules/cloudflare/resources/radar/http/http.mjs",".././node_modules/cloudflare/resources/radar/leaked-credentials/summary.mjs",".././node_modules/cloudflare/resources/radar/leaked-credentials/timeseries-groups.mjs",".././node_modules/cloudflare/resources/radar/leaked-credentials/leaked-credentials.mjs",".././node_modules/cloudflare/resources/radar/netflows/top.mjs",".././node_modules/cloudflare/resources/radar/netflows/netflows.mjs",".././node_modules/cloudflare/resources/radar/quality/iqi.mjs",".././node_modules/cloudflare/resources/radar/quality/speed/top.mjs",".././node_modules/cloudflare/resources/radar/quality/speed/speed.mjs",".././node_modules/cloudflare/resources/radar/quality/quality.mjs",".././node_modules/cloudflare/resources/radar/ranking/domain.mjs",".././node_modules/cloudflare/resources/radar/ranking/internet-services.mjs",".././node_modules/cloudflare/resources/radar/ranking/ranking.mjs",".././node_modules/cloudflare/resources/radar/robots-txt/top/user-agents.mjs",".././node_modules/cloudflare/resources/radar/robots-txt/top/top.mjs",".././node_modules/cloudflare/resources/radar/robots-txt/robots-txt.mjs",".././node_modules/cloudflare/resources/radar/traffic-anomalies/locations.mjs",".././node_modules/cloudflare/resources/radar/traffic-anomalies/traffic-anomalies.mjs",".././node_modules/cloudflare/resources/radar/verified-bots/top.mjs",".././node_modules/cloudflare/resources/radar/verified-bots/verified-bots.mjs",".././node_modules/cloudflare/resources/radar/radar.mjs",".././node_modules/cloudflare/resources/bot-management.mjs",".././node_modules/cloudflare/resources/origin-post-quantum-encryption.mjs",".././node_modules/cloudflare/resources/zaraz/config.mjs",".././node_modules/cloudflare/resources/zaraz/default.mjs",".././node_modules/cloudflare/resources/zaraz/export.mjs",".././node_modules/cloudflare/resources/zaraz/publish.mjs",".././node_modules/cloudflare/resources/zaraz/workflow.mjs",".././node_modules/cloudflare/resources/zaraz/history/configs.mjs",".././node_modules/cloudflare/resources/zaraz/history/history.mjs",".././node_modules/cloudflare/resources/zaraz/zaraz.mjs",".././node_modules/cloudflare/resources/speed/availabilities.mjs",".././node_modules/cloudflare/resources/speed/schedule.mjs",".././node_modules/cloudflare/resources/speed/pages/tests.mjs",".././node_modules/cloudflare/resources/speed/pages/pages.mjs",".././node_modules/cloudflare/resources/speed/speed.mjs",".././node_modules/cloudflare/resources/dcv-delegation.mjs",".././node_modules/cloudflare/resources/hostnames/settings/tls.mjs",".././node_modules/cloudflare/resources/hostnames/settings/settings.mjs",".././node_modules/cloudflare/resources/hostnames/hostnames.mjs",".././node_modules/cloudflare/resources/snippets/content.mjs",".././node_modules/cloudflare/resources/snippets/rules.mjs",".././node_modules/cloudflare/resources/snippets/snippets.mjs",".././node_modules/cloudflare/resources/calls/sfu.mjs",".././node_modules/cloudflare/resources/calls/turn.mjs",".././node_modules/cloudflare/resources/calls/calls.mjs",".././node_modules/cloudflare/resources/cloudforce-one/binary-storage.mjs",".././node_modules/cloudflare/resources/cloudforce-one/requests/assets.mjs",".././node_modules/cloudflare/resources/cloudforce-one/requests/message.mjs",".././node_modules/cloudflare/resources/cloudforce-one/requests/priority.mjs",".././node_modules/cloudflare/resources/cloudforce-one/requests/requests.mjs",".././node_modules/cloudflare/resources/cloudforce-one/scans/config.mjs",".././node_modules/cloudflare/resources/cloudforce-one/scans/results.mjs",".././node_modules/cloudflare/resources/cloudforce-one/scans/scans.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/attackers.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/categories.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/countries.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/crons.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/event-tags.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/indicator-types.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/insights.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/raw.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/relate.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/tags.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/target-industries.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/datasets/health.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/datasets/datasets.mjs",".././node_modules/cloudflare/resources/cloudforce-one/threat-events/threat-events.mjs",".././node_modules/cloudflare/resources/cloudforce-one/cloudforce-one.mjs",".././node_modules/cloudflare/resources/ai-gateway/datasets.mjs",".././node_modules/cloudflare/resources/ai-gateway/evaluation-types.mjs",".././node_modules/cloudflare/resources/ai-gateway/evaluations.mjs",".././node_modules/cloudflare/resources/ai-gateway/logs.mjs",".././node_modules/cloudflare/resources/ai-gateway/urls.mjs",".././node_modules/cloudflare/resources/ai-gateway/ai-gateway.mjs",".././node_modules/cloudflare/resources/iam/permission-groups.mjs",".././node_modules/cloudflare/resources/iam/resource-groups.mjs",".././node_modules/cloudflare/resources/iam/user-groups/members.mjs",".././node_modules/cloudflare/resources/iam/user-groups/user-groups.mjs",".././node_modules/cloudflare/resources/iam/iam.mjs",".././node_modules/cloudflare/resources/cloud-connector/rules.mjs",".././node_modules/cloudflare/resources/cloud-connector/cloud-connector.mjs",".././node_modules/cloudflare/resources/botnet-feed/asn.mjs",".././node_modules/cloudflare/resources/botnet-feed/configs/asn.mjs",".././node_modules/cloudflare/resources/botnet-feed/configs/configs.mjs",".././node_modules/cloudflare/resources/botnet-feed/botnet-feed.mjs",".././node_modules/cloudflare/resources/security-txt.mjs",".././node_modules/cloudflare/resources/workflows/versions.mjs",".././node_modules/cloudflare/resources/workflows/instances/events.mjs",".././node_modules/cloudflare/resources/workflows/instances/status.mjs",".././node_modules/cloudflare/resources/workflows/instances/instances.mjs",".././node_modules/cloudflare/resources/workflows/workflows.mjs",".././node_modules/cloudflare/resources/resource-sharing/recipients.mjs",".././node_modules/cloudflare/resources/resource-sharing/resources.mjs",".././node_modules/cloudflare/resources/resource-sharing/resource-sharing.mjs",".././node_modules/cloudflare/resources/leaked-credential-checks/detections.mjs",".././node_modules/cloudflare/resources/leaked-credential-checks/leaked-credential-checks.mjs",".././node_modules/cloudflare/resources/content-scanning/payloads.mjs",".././node_modules/cloudflare/resources/content-scanning/settings.mjs",".././node_modules/cloudflare/resources/content-scanning/content-scanning.mjs",".././node_modules/cloudflare/resources/abuse-reports.mjs",".././node_modules/cloudflare/resources/ai/authors.mjs",".././node_modules/cloudflare/resources/ai/tasks.mjs",".././node_modules/cloudflare/resources/ai/finetunes/assets.mjs",".././node_modules/cloudflare/resources/ai/finetunes/public.mjs",".././node_modules/cloudflare/resources/ai/finetunes/finetunes.mjs",".././node_modules/cloudflare/resources/ai/models/schema.mjs",".././node_modules/cloudflare/resources/ai/models/models.mjs",".././node_modules/cloudflare/resources/ai/ai.mjs",".././node_modules/cloudflare/resources/security-center/insights/class.mjs",".././node_modules/cloudflare/resources/security-center/insights/severity.mjs",".././node_modules/cloudflare/resources/security-center/insights/type.mjs",".././node_modules/cloudflare/resources/security-center/insights/insights.mjs",".././node_modules/cloudflare/resources/security-center/security-center.mjs",".././node_modules/cloudflare/resources/browser-rendering/content.mjs",".././node_modules/cloudflare/resources/browser-rendering/json.mjs",".././node_modules/cloudflare/resources/browser-rendering/links.mjs",".././node_modules/cloudflare/resources/browser-rendering/markdown.mjs",".././node_modules/cloudflare/resources/browser-rendering/pdf.mjs",".././node_modules/cloudflare/resources/browser-rendering/scrape.mjs",".././node_modules/cloudflare/resources/browser-rendering/screenshot.mjs",".././node_modules/cloudflare/resources/browser-rendering/snapshot.mjs",".././node_modules/cloudflare/resources/browser-rendering/browser-rendering.mjs",".././node_modules/cloudflare/resources/custom-pages.mjs",".././node_modules/cloudflare/resources/secrets-store/quota.mjs",".././node_modules/cloudflare/resources/secrets-store/stores/secrets.mjs",".././node_modules/cloudflare/resources/secrets-store/stores/stores.mjs",".././node_modules/cloudflare/resources/secrets-store/secrets-store.mjs",".././node_modules/cloudflare/resources/pipelines.mjs",".././node_modules/cloudflare/resources/schema-validation/schemas.mjs",".././node_modules/cloudflare/resources/schema-validation/settings/operations.mjs",".././node_modules/cloudflare/resources/schema-validation/settings/settings.mjs",".././node_modules/cloudflare/resources/schema-validation/schema-validation.mjs",".././node_modules/cloudflare/index.mjs",".././src/cloudflare.js",".././src/cloudflare-statuscheck.js",".././src/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return (0, utils_1.toCommandValue)(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return (0, utils_1.toCommandValue)(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode || (exports.ExitCode = ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = (0, utils_1.toCommandValue)(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return (0, file_command_1.issueFileCommand)('ENV', (0, file_command_1.prepareKeyValueMessage)(name, val));\n    }\n    (0, command_1.issueCommand)('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    (0, command_1.issueCommand)('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        (0, file_command_1.issueFileCommand)('PATH', inputPath);\n    }\n    else {\n        (0, command_1.issueCommand)('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return (0, file_command_1.issueFileCommand)('OUTPUT', (0, file_command_1.prepareKeyValueMessage)(name, value));\n    }\n    process.stdout.write(os.EOL);\n    (0, command_1.issueCommand)('set-output', { name }, (0, utils_1.toCommandValue)(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    (0, command_1.issue)('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    (0, command_1.issueCommand)('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    (0, command_1.issueCommand)('error', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    (0, command_1.issueCommand)('warning', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    (0, command_1.issueCommand)('notice', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    (0, command_1.issue)('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    (0, command_1.issue)('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return (0, file_command_1.issueFileCommand)('STATE', (0, file_command_1.prepareKeyValueMessage)(name, value));\n    }\n    (0, command_1.issueCommand)('save-state', { name }, (0, utils_1.toCommandValue)(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n/**\n * Platform utilities exports\n */\nexports.platform = __importStar(require(\"./platform\"));\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst crypto = __importStar(require(\"crypto\"));\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${crypto.randomUUID()}`;\n    const convertedValue = (0, utils_1.toCommandValue)(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                (0, core_1.debug)(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                (0, core_1.setSecret)(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst exec = __importStar(require(\"@actions/exec\"));\nconst getWindowsInfo = () => __awaiter(void 0, void 0, void 0, function* () {\n    const { stdout: version } = yield exec.getExecOutput('powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Version\"', undefined, {\n        silent: true\n    });\n    const { stdout: name } = yield exec.getExecOutput('powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"', undefined, {\n        silent: true\n    });\n    return {\n        name: name.trim(),\n        version: version.trim()\n    };\n});\nconst getMacOsInfo = () => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, _b, _c, _d;\n    const { stdout } = yield exec.getExecOutput('sw_vers', undefined, {\n        silent: true\n    });\n    const version = (_b = (_a = stdout.match(/ProductVersion:\\s*(.+)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : '';\n    const name = (_d = (_c = stdout.match(/ProductName:\\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '';\n    return {\n        name,\n        version\n    };\n});\nconst getLinuxInfo = () => __awaiter(void 0, void 0, void 0, function* () {\n    const { stdout } = yield exec.getExecOutput('lsb_release', ['-i', '-r', '-s'], {\n        silent: true\n    });\n    const [name, version] = stdout.trim().split('\\n');\n    return {\n        name,\n        version\n    };\n});\nexports.platform = os_1.default.platform();\nexports.arch = os_1.default.arch();\nexports.isWindows = exports.platform === 'win32';\nexports.isMacOS = exports.platform === 'darwin';\nexports.isLinux = exports.platform === 'linux';\nfunction getDetails() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return Object.assign(Object.assign({}, (yield (exports.isWindows\n            ? getWindowsInfo()\n            : exports.isMacOS\n                ? getMacOsInfo()\n                : getLinuxInfo()))), { platform: exports.platform,\n            arch: exports.arch,\n            isWindows: exports.isWindows,\n            isMacOS: exports.isMacOS,\n            isLinux: exports.isLinux });\n    });\n}\nexports.getDetails = getDetails;\n//# sourceMappingURL=platform.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getExecOutput = exports.exec = void 0;\nconst string_decoder_1 = require(\"string_decoder\");\nconst tr = __importStar(require(\"./toolrunner\"));\n/**\n * Exec a command.\n * Output will be streamed to the live console.\n * Returns promise with return code\n *\n * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.\n * @param     args               optional arguments for tool. Escaping is handled by the lib.\n * @param     options            optional exec options.  See ExecOptions\n * @returns   Promise<number>    exit code\n */\nfunction exec(commandLine, args, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const commandArgs = tr.argStringToArray(commandLine);\n        if (commandArgs.length === 0) {\n            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);\n        }\n        // Path to tool to execute should be first arg\n        const toolPath = commandArgs[0];\n        args = commandArgs.slice(1).concat(args || []);\n        const runner = new tr.ToolRunner(toolPath, args, options);\n        return runner.exec();\n    });\n}\nexports.exec = exec;\n/**\n * Exec a command and get the output.\n * Output will be streamed to the live console.\n * Returns promise with the exit code and collected stdout and stderr\n *\n * @param     commandLine           command to execute (can include additional args). Must be correctly escaped.\n * @param     args                  optional arguments for tool. Escaping is handled by the lib.\n * @param     options               optional exec options.  See ExecOptions\n * @returns   Promise<ExecOutput>   exit code, stdout, and stderr\n */\nfunction getExecOutput(commandLine, args, options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        let stdout = '';\n        let stderr = '';\n        //Using string decoder covers the case where a mult-byte character is split\n        const stdoutDecoder = new string_decoder_1.StringDecoder('utf8');\n        const stderrDecoder = new string_decoder_1.StringDecoder('utf8');\n        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;\n        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;\n        const stdErrListener = (data) => {\n            stderr += stderrDecoder.write(data);\n            if (originalStdErrListener) {\n                originalStdErrListener(data);\n            }\n        };\n        const stdOutListener = (data) => {\n            stdout += stdoutDecoder.write(data);\n            if (originalStdoutListener) {\n                originalStdoutListener(data);\n            }\n        };\n        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });\n        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));\n        //flush any remaining characters\n        stdout += stdoutDecoder.end();\n        stderr += stderrDecoder.end();\n        return {\n            exitCode,\n            stdout,\n            stderr\n        };\n    });\n}\nexports.getExecOutput = getExecOutput;\n//# sourceMappingURL=exec.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.argStringToArray = exports.ToolRunner = void 0;\nconst os = __importStar(require(\"os\"));\nconst events = __importStar(require(\"events\"));\nconst child = __importStar(require(\"child_process\"));\nconst path = __importStar(require(\"path\"));\nconst io = __importStar(require(\"@actions/io\"));\nconst ioUtil = __importStar(require(\"@actions/io/lib/io-util\"));\nconst timers_1 = require(\"timers\");\n/* eslint-disable @typescript-eslint/unbound-method */\nconst IS_WINDOWS = process.platform === 'win32';\n/*\n * Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.\n */\nclass ToolRunner extends events.EventEmitter {\n    constructor(toolPath, args, options) {\n        super();\n        if (!toolPath) {\n            throw new Error(\"Parameter 'toolPath' cannot be null or empty.\");\n        }\n        this.toolPath = toolPath;\n        this.args = args || [];\n        this.options = options || {};\n    }\n    _debug(message) {\n        if (this.options.listeners && this.options.listeners.debug) {\n            this.options.listeners.debug(message);\n        }\n    }\n    _getCommandString(options, noPrefix) {\n        const toolPath = this._getSpawnFileName();\n        const args = this._getSpawnArgs(options);\n        let cmd = noPrefix ? '' : '[command]'; // omit prefix when piped to a second tool\n        if (IS_WINDOWS) {\n            // Windows + cmd file\n            if (this._isCmdFile()) {\n                cmd += toolPath;\n                for (const a of args) {\n                    cmd += ` ${a}`;\n                }\n            }\n            // Windows + verbatim\n            else if (options.windowsVerbatimArguments) {\n                cmd += `\"${toolPath}\"`;\n                for (const a of args) {\n                    cmd += ` ${a}`;\n                }\n            }\n            // Windows (regular)\n            else {\n                cmd += this._windowsQuoteCmdArg(toolPath);\n                for (const a of args) {\n                    cmd += ` ${this._windowsQuoteCmdArg(a)}`;\n                }\n            }\n        }\n        else {\n            // OSX/Linux - this can likely be improved with some form of quoting.\n            // creating processes on Unix is fundamentally different than Windows.\n            // on Unix, execvp() takes an arg array.\n            cmd += toolPath;\n            for (const a of args) {\n                cmd += ` ${a}`;\n            }\n        }\n        return cmd;\n    }\n    _processLineBuffer(data, strBuffer, onLine) {\n        try {\n            let s = strBuffer + data.toString();\n            let n = s.indexOf(os.EOL);\n            while (n > -1) {\n                const line = s.substring(0, n);\n                onLine(line);\n                // the rest of the string ...\n                s = s.substring(n + os.EOL.length);\n                n = s.indexOf(os.EOL);\n            }\n            return s;\n        }\n        catch (err) {\n            // streaming lines to console is best effort.  Don't fail a build.\n            this._debug(`error processing line. Failed with error ${err}`);\n            return '';\n        }\n    }\n    _getSpawnFileName() {\n        if (IS_WINDOWS) {\n            if (this._isCmdFile()) {\n                return process.env['COMSPEC'] || 'cmd.exe';\n            }\n        }\n        return this.toolPath;\n    }\n    _getSpawnArgs(options) {\n        if (IS_WINDOWS) {\n            if (this._isCmdFile()) {\n                let argline = `/D /S /C \"${this._windowsQuoteCmdArg(this.toolPath)}`;\n                for (const a of this.args) {\n                    argline += ' ';\n                    argline += options.windowsVerbatimArguments\n                        ? a\n                        : this._windowsQuoteCmdArg(a);\n                }\n                argline += '\"';\n                return [argline];\n            }\n        }\n        return this.args;\n    }\n    _endsWith(str, end) {\n        return str.endsWith(end);\n    }\n    _isCmdFile() {\n        const upperToolPath = this.toolPath.toUpperCase();\n        return (this._endsWith(upperToolPath, '.CMD') ||\n            this._endsWith(upperToolPath, '.BAT'));\n    }\n    _windowsQuoteCmdArg(arg) {\n        // for .exe, apply the normal quoting rules that libuv applies\n        if (!this._isCmdFile()) {\n            return this._uvQuoteCmdArg(arg);\n        }\n        // otherwise apply quoting rules specific to the cmd.exe command line parser.\n        // the libuv rules are generic and are not designed specifically for cmd.exe\n        // command line parser.\n        //\n        // for a detailed description of the cmd.exe command line parser, refer to\n        // http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912\n        // need quotes for empty arg\n        if (!arg) {\n            return '\"\"';\n        }\n        // determine whether the arg needs to be quoted\n        const cmdSpecialChars = [\n            ' ',\n            '\\t',\n            '&',\n            '(',\n            ')',\n            '[',\n            ']',\n            '{',\n            '}',\n            '^',\n            '=',\n            ';',\n            '!',\n            \"'\",\n            '+',\n            ',',\n            '`',\n            '~',\n            '|',\n            '<',\n            '>',\n            '\"'\n        ];\n        let needsQuotes = false;\n        for (const char of arg) {\n            if (cmdSpecialChars.some(x => x === char)) {\n                needsQuotes = true;\n                break;\n            }\n        }\n        // short-circuit if quotes not needed\n        if (!needsQuotes) {\n            return arg;\n        }\n        // the following quoting rules are very similar to the rules that by libuv applies.\n        //\n        // 1) wrap the string in quotes\n        //\n        // 2) double-up quotes - i.e. \" => \"\"\n        //\n        //    this is different from the libuv quoting rules. libuv replaces \" with \\\", which unfortunately\n        //    doesn't work well with a cmd.exe command line.\n        //\n        //    note, replacing \" with \"\" also works well if the arg is passed to a downstream .NET console app.\n        //    for example, the command line:\n        //          foo.exe \"myarg:\"\"my val\"\"\"\n        //    is parsed by a .NET console app into an arg array:\n        //          [ \"myarg:\\\"my val\\\"\" ]\n        //    which is the same end result when applying libuv quoting rules. although the actual\n        //    command line from libuv quoting rules would look like:\n        //          foo.exe \"myarg:\\\"my val\\\"\"\n        //\n        // 3) double-up slashes that precede a quote,\n        //    e.g.  hello \\world    => \"hello \\world\"\n        //          hello\\\"world    => \"hello\\\\\"\"world\"\n        //          hello\\\\\"world   => \"hello\\\\\\\\\"\"world\"\n        //          hello world\\    => \"hello world\\\\\"\n        //\n        //    technically this is not required for a cmd.exe command line, or the batch argument parser.\n        //    the reasons for including this as a .cmd quoting rule are:\n        //\n        //    a) this is optimized for the scenario where the argument is passed from the .cmd file to an\n        //       external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.\n        //\n        //    b) it's what we've been doing previously (by deferring to node default behavior) and we\n        //       haven't heard any complaints about that aspect.\n        //\n        // note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be\n        // escaped when used on the command line directly - even though within a .cmd file % can be escaped\n        // by using %%.\n        //\n        // the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts\n        // the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.\n        //\n        // one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would\n        // often work, since it is unlikely that var^ would exist, and the ^ character is removed when the\n        // variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args\n        // to an external program.\n        //\n        // an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.\n        // % can be escaped within a .cmd file.\n        let reverse = '\"';\n        let quoteHit = true;\n        for (let i = arg.length; i > 0; i--) {\n            // walk the string in reverse\n            reverse += arg[i - 1];\n            if (quoteHit && arg[i - 1] === '\\\\') {\n                reverse += '\\\\'; // double the slash\n            }\n            else if (arg[i - 1] === '\"') {\n                quoteHit = true;\n                reverse += '\"'; // double the quote\n            }\n            else {\n                quoteHit = false;\n            }\n        }\n        reverse += '\"';\n        return reverse\n            .split('')\n            .reverse()\n            .join('');\n    }\n    _uvQuoteCmdArg(arg) {\n        // Tool runner wraps child_process.spawn() and needs to apply the same quoting as\n        // Node in certain cases where the undocumented spawn option windowsVerbatimArguments\n        // is used.\n        //\n        // Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,\n        // see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),\n        // pasting copyright notice from Node within this function:\n        //\n        //      Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n        //\n        //      Permission is hereby granted, free of charge, to any person obtaining a copy\n        //      of this software and associated documentation files (the \"Software\"), to\n        //      deal in the Software without restriction, including without limitation the\n        //      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n        //      sell copies of the Software, and to permit persons to whom the Software is\n        //      furnished to do so, subject to the following conditions:\n        //\n        //      The above copyright notice and this permission notice shall be included in\n        //      all copies or substantial portions of the Software.\n        //\n        //      THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        //      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        //      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        //      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        //      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n        //      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n        //      IN THE SOFTWARE.\n        if (!arg) {\n            // Need double quotation for empty argument\n            return '\"\"';\n        }\n        if (!arg.includes(' ') && !arg.includes('\\t') && !arg.includes('\"')) {\n            // No quotation needed\n            return arg;\n        }\n        if (!arg.includes('\"') && !arg.includes('\\\\')) {\n            // No embedded double quotes or backslashes, so I can just wrap\n            // quote marks around the whole thing.\n            return `\"${arg}\"`;\n        }\n        // Expected input/output:\n        //   input : hello\"world\n        //   output: \"hello\\\"world\"\n        //   input : hello\"\"world\n        //   output: \"hello\\\"\\\"world\"\n        //   input : hello\\world\n        //   output: hello\\world\n        //   input : hello\\\\world\n        //   output: hello\\\\world\n        //   input : hello\\\"world\n        //   output: \"hello\\\\\\\"world\"\n        //   input : hello\\\\\"world\n        //   output: \"hello\\\\\\\\\\\"world\"\n        //   input : hello world\\\n        //   output: \"hello world\\\\\" - note the comment in libuv actually reads \"hello world\\\"\n        //                             but it appears the comment is wrong, it should be \"hello world\\\\\"\n        let reverse = '\"';\n        let quoteHit = true;\n        for (let i = arg.length; i > 0; i--) {\n            // walk the string in reverse\n            reverse += arg[i - 1];\n            if (quoteHit && arg[i - 1] === '\\\\') {\n                reverse += '\\\\';\n            }\n            else if (arg[i - 1] === '\"') {\n                quoteHit = true;\n                reverse += '\\\\';\n            }\n            else {\n                quoteHit = false;\n            }\n        }\n        reverse += '\"';\n        return reverse\n            .split('')\n            .reverse()\n            .join('');\n    }\n    _cloneExecOptions(options) {\n        options = options || {};\n        const result = {\n            cwd: options.cwd || process.cwd(),\n            env: options.env || process.env,\n            silent: options.silent || false,\n            windowsVerbatimArguments: options.windowsVerbatimArguments || false,\n            failOnStdErr: options.failOnStdErr || false,\n            ignoreReturnCode: options.ignoreReturnCode || false,\n            delay: options.delay || 10000\n        };\n        result.outStream = options.outStream || process.stdout;\n        result.errStream = options.errStream || process.stderr;\n        return result;\n    }\n    _getSpawnOptions(options, toolPath) {\n        options = options || {};\n        const result = {};\n        result.cwd = options.cwd;\n        result.env = options.env;\n        result['windowsVerbatimArguments'] =\n            options.windowsVerbatimArguments || this._isCmdFile();\n        if (options.windowsVerbatimArguments) {\n            result.argv0 = `\"${toolPath}\"`;\n        }\n        return result;\n    }\n    /**\n     * Exec a tool.\n     * Output will be streamed to the live console.\n     * Returns promise with return code\n     *\n     * @param     tool     path to tool to exec\n     * @param     options  optional exec options.  See ExecOptions\n     * @returns   number\n     */\n    exec() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // root the tool path if it is unrooted and contains relative pathing\n            if (!ioUtil.isRooted(this.toolPath) &&\n                (this.toolPath.includes('/') ||\n                    (IS_WINDOWS && this.toolPath.includes('\\\\')))) {\n                // prefer options.cwd if it is specified, however options.cwd may also need to be rooted\n                this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);\n            }\n            // if the tool is only a file name, then resolve it from the PATH\n            // otherwise verify it exists (add extension on Windows if necessary)\n            this.toolPath = yield io.which(this.toolPath, true);\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                this._debug(`exec tool: ${this.toolPath}`);\n                this._debug('arguments:');\n                for (const arg of this.args) {\n                    this._debug(`   ${arg}`);\n                }\n                const optionsNonNull = this._cloneExecOptions(this.options);\n                if (!optionsNonNull.silent && optionsNonNull.outStream) {\n                    optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);\n                }\n                const state = new ExecState(optionsNonNull, this.toolPath);\n                state.on('debug', (message) => {\n                    this._debug(message);\n                });\n                if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {\n                    return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));\n                }\n                const fileName = this._getSpawnFileName();\n                const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));\n                let stdbuffer = '';\n                if (cp.stdout) {\n                    cp.stdout.on('data', (data) => {\n                        if (this.options.listeners && this.options.listeners.stdout) {\n                            this.options.listeners.stdout(data);\n                        }\n                        if (!optionsNonNull.silent && optionsNonNull.outStream) {\n                            optionsNonNull.outStream.write(data);\n                        }\n                        stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {\n                            if (this.options.listeners && this.options.listeners.stdline) {\n                                this.options.listeners.stdline(line);\n                            }\n                        });\n                    });\n                }\n                let errbuffer = '';\n                if (cp.stderr) {\n                    cp.stderr.on('data', (data) => {\n                        state.processStderr = true;\n                        if (this.options.listeners && this.options.listeners.stderr) {\n                            this.options.listeners.stderr(data);\n                        }\n                        if (!optionsNonNull.silent &&\n                            optionsNonNull.errStream &&\n                            optionsNonNull.outStream) {\n                            const s = optionsNonNull.failOnStdErr\n                                ? optionsNonNull.errStream\n                                : optionsNonNull.outStream;\n                            s.write(data);\n                        }\n                        errbuffer = this._processLineBuffer(data, errbuffer, (line) => {\n                            if (this.options.listeners && this.options.listeners.errline) {\n                                this.options.listeners.errline(line);\n                            }\n                        });\n                    });\n                }\n                cp.on('error', (err) => {\n                    state.processError = err.message;\n                    state.processExited = true;\n                    state.processClosed = true;\n                    state.CheckComplete();\n                });\n                cp.on('exit', (code) => {\n                    state.processExitCode = code;\n                    state.processExited = true;\n                    this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);\n                    state.CheckComplete();\n                });\n                cp.on('close', (code) => {\n                    state.processExitCode = code;\n                    state.processExited = true;\n                    state.processClosed = true;\n                    this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);\n                    state.CheckComplete();\n                });\n                state.on('done', (error, exitCode) => {\n                    if (stdbuffer.length > 0) {\n                        this.emit('stdline', stdbuffer);\n                    }\n                    if (errbuffer.length > 0) {\n                        this.emit('errline', errbuffer);\n                    }\n                    cp.removeAllListeners();\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        resolve(exitCode);\n                    }\n                });\n                if (this.options.input) {\n                    if (!cp.stdin) {\n                        throw new Error('child process missing stdin');\n                    }\n                    cp.stdin.end(this.options.input);\n                }\n            }));\n        });\n    }\n}\nexports.ToolRunner = ToolRunner;\n/**\n * Convert an arg string to an array of args. Handles escaping\n *\n * @param    argString   string of arguments\n * @returns  string[]    array of arguments\n */\nfunction argStringToArray(argString) {\n    const args = [];\n    let inQuotes = false;\n    let escaped = false;\n    let arg = '';\n    function append(c) {\n        // we only escape double quotes.\n        if (escaped && c !== '\"') {\n            arg += '\\\\';\n        }\n        arg += c;\n        escaped = false;\n    }\n    for (let i = 0; i < argString.length; i++) {\n        const c = argString.charAt(i);\n        if (c === '\"') {\n            if (!escaped) {\n                inQuotes = !inQuotes;\n            }\n            else {\n                append(c);\n            }\n            continue;\n        }\n        if (c === '\\\\' && escaped) {\n            append(c);\n            continue;\n        }\n        if (c === '\\\\' && inQuotes) {\n            escaped = true;\n            continue;\n        }\n        if (c === ' ' && !inQuotes) {\n            if (arg.length > 0) {\n                args.push(arg);\n                arg = '';\n            }\n            continue;\n        }\n        append(c);\n    }\n    if (arg.length > 0) {\n        args.push(arg.trim());\n    }\n    return args;\n}\nexports.argStringToArray = argStringToArray;\nclass ExecState extends events.EventEmitter {\n    constructor(options, toolPath) {\n        super();\n        this.processClosed = false; // tracks whether the process has exited and stdio is closed\n        this.processError = '';\n        this.processExitCode = 0;\n        this.processExited = false; // tracks whether the process has exited\n        this.processStderr = false; // tracks whether stderr was written to\n        this.delay = 10000; // 10 seconds\n        this.done = false;\n        this.timeout = null;\n        if (!toolPath) {\n            throw new Error('toolPath must not be empty');\n        }\n        this.options = options;\n        this.toolPath = toolPath;\n        if (options.delay) {\n            this.delay = options.delay;\n        }\n    }\n    CheckComplete() {\n        if (this.done) {\n            return;\n        }\n        if (this.processClosed) {\n            this._setResult();\n        }\n        else if (this.processExited) {\n            this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);\n        }\n    }\n    _debug(message) {\n        this.emit('debug', message);\n    }\n    _setResult() {\n        // determine whether there is an error\n        let error;\n        if (this.processExited) {\n            if (this.processError) {\n                error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);\n            }\n            else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {\n                error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);\n            }\n            else if (this.processStderr && this.options.failOnStdErr) {\n                error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);\n            }\n        }\n        // clear the timeout\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n        this.done = true;\n        this.emit('done', error, this.processExitCode);\n    }\n    static HandleTimeout(state) {\n        if (state.done) {\n            return;\n        }\n        if (!state.processClosed && state.processExited) {\n            const message = `The STDIO streams did not close within ${state.delay /\n                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;\n            state._debug(message);\n        }\n        state._setResult();\n    }\n}\n//# sourceMappingURL=toolrunner.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nconst undici_1 = require(\"undici\");\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers || (exports.Headers = Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n    readBodyBuffer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                const chunks = [];\n                this.message.on('data', (chunk) => {\n                    chunks.push(chunk);\n                });\n                this.message.on('end', () => {\n                    resolve(Buffer.concat(chunks));\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    getAgentDispatcher(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (!useProxy) {\n            return;\n        }\n        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {\n        let proxyAgent;\n        if (this._keepAlive) {\n            proxyAgent = this._proxyAgentDispatcher;\n        }\n        // if agent is already assigned use that agent.\n        if (proxyAgent) {\n            return proxyAgent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, ((proxyUrl.username || proxyUrl.password) && {\n            token: `${proxyUrl.username}:${proxyUrl.password}`\n        })));\n        this._proxyAgentDispatcher = proxyAgent;\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return proxyAgent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        try {\n            return new URL(proxyVar);\n        }\n        catch (_a) {\n            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))\n                return new URL(`http://${proxyVar}`);\n        }\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const reqHost = reqUrl.hostname;\n    if (isLoopbackAddress(reqHost)) {\n        return true;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperNoProxyItem === '*' ||\n            upperReqHosts.some(x => x === upperNoProxyItem ||\n                x.endsWith(`.${upperNoProxyItem}`) ||\n                (upperNoProxyItem.startsWith('.') &&\n                    x.endsWith(`${upperNoProxyItem}`)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\nfunction isLoopbackAddress(host) {\n    const hostLower = host.toLowerCase();\n    return (hostLower === 'localhost' ||\n        hostLower.startsWith('127.') ||\n        hostLower.startsWith('[::1]') ||\n        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));\n}\n//# sourceMappingURL=proxy.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\n_a = fs.promises\n// export const {open} = 'fs'\n, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;\n// export const {open} = 'fs'\nexports.IS_WINDOWS = process.platform === 'win32';\n// See https://github.com/nodejs/node/blob/d0153aee367422d0858105abec186da4dff0a0c5/deps/uv/include/uv/win.h#L691\nexports.UV_FS_O_EXLOCK = 0x10000000;\nexports.READONLY = fs.constants.O_RDONLY;\nfunction exists(fsPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield exports.stat(fsPath);\n        }\n        catch (err) {\n            if (err.code === 'ENOENT') {\n                return false;\n            }\n            throw err;\n        }\n        return true;\n    });\n}\nexports.exists = exists;\nfunction isDirectory(fsPath, useStat = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);\n        return stats.isDirectory();\n    });\n}\nexports.isDirectory = isDirectory;\n/**\n * On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:\n * \\, \\hello, \\\\hello\\share, C:, and C:\\hello (and corresponding alternate separator cases).\n */\nfunction isRooted(p) {\n    p = normalizeSeparators(p);\n    if (!p) {\n        throw new Error('isRooted() parameter \"p\" cannot be empty');\n    }\n    if (exports.IS_WINDOWS) {\n        return (p.startsWith('\\\\') || /^[A-Z]:/i.test(p) // e.g. \\ or \\hello or \\\\hello\n        ); // e.g. C: or C:\\hello\n    }\n    return p.startsWith('/');\n}\nexports.isRooted = isRooted;\n/**\n * Best effort attempt to determine whether a file exists and is executable.\n * @param filePath    file path to check\n * @param extensions  additional file extensions to try\n * @return if file exists and is executable, returns the file path. otherwise empty string.\n */\nfunction tryGetExecutablePath(filePath, extensions) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let stats = undefined;\n        try {\n            // test file exists\n            stats = yield exports.stat(filePath);\n        }\n        catch (err) {\n            if (err.code !== 'ENOENT') {\n                // eslint-disable-next-line no-console\n                console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);\n            }\n        }\n        if (stats && stats.isFile()) {\n            if (exports.IS_WINDOWS) {\n                // on Windows, test for valid extension\n                const upperExt = path.extname(filePath).toUpperCase();\n                if (extensions.some(validExt => validExt.toUpperCase() === upperExt)) {\n                    return filePath;\n                }\n            }\n            else {\n                if (isUnixExecutable(stats)) {\n                    return filePath;\n                }\n            }\n        }\n        // try each extension\n        const originalFilePath = filePath;\n        for (const extension of extensions) {\n            filePath = originalFilePath + extension;\n            stats = undefined;\n            try {\n                stats = yield exports.stat(filePath);\n            }\n            catch (err) {\n                if (err.code !== 'ENOENT') {\n                    // eslint-disable-next-line no-console\n                    console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);\n                }\n            }\n            if (stats && stats.isFile()) {\n                if (exports.IS_WINDOWS) {\n                    // preserve the case of the actual file (since an extension was appended)\n                    try {\n                        const directory = path.dirname(filePath);\n                        const upperName = path.basename(filePath).toUpperCase();\n                        for (const actualName of yield exports.readdir(directory)) {\n                            if (upperName === actualName.toUpperCase()) {\n                                filePath = path.join(directory, actualName);\n                                break;\n                            }\n                        }\n                    }\n                    catch (err) {\n                        // eslint-disable-next-line no-console\n                        console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);\n                    }\n                    return filePath;\n                }\n                else {\n                    if (isUnixExecutable(stats)) {\n                        return filePath;\n                    }\n                }\n            }\n        }\n        return '';\n    });\n}\nexports.tryGetExecutablePath = tryGetExecutablePath;\nfunction normalizeSeparators(p) {\n    p = p || '';\n    if (exports.IS_WINDOWS) {\n        // convert slashes on Windows\n        p = p.replace(/\\//g, '\\\\');\n        // remove redundant slashes\n        return p.replace(/\\\\\\\\+/g, '\\\\');\n    }\n    // remove redundant slashes\n    return p.replace(/\\/\\/+/g, '/');\n}\n// on Mac/Linux, test the execute bit\n//     R   W  X  R  W X R W X\n//   256 128 64 32 16 8 4 2 1\nfunction isUnixExecutable(stats) {\n    return ((stats.mode & 1) > 0 ||\n        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||\n        ((stats.mode & 64) > 0 && stats.uid === process.getuid()));\n}\n// Get the path of cmd.exe in windows\nfunction getCmdPath() {\n    var _a;\n    return (_a = process.env['COMSPEC']) !== null && _a !== void 0 ? _a : `cmd.exe`;\n}\nexports.getCmdPath = getCmdPath;\n//# sourceMappingURL=io-util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;\nconst assert_1 = require(\"assert\");\nconst path = __importStar(require(\"path\"));\nconst ioUtil = __importStar(require(\"./io-util\"));\n/**\n * Copies a file or folder.\n * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js\n *\n * @param     source    source path\n * @param     dest      destination path\n * @param     options   optional. See CopyOptions.\n */\nfunction cp(source, dest, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { force, recursive, copySourceDirectory } = readCopyOptions(options);\n        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;\n        // Dest is an existing file, but not forcing\n        if (destStat && destStat.isFile() && !force) {\n            return;\n        }\n        // If dest is an existing directory, should copy inside.\n        const newDest = destStat && destStat.isDirectory() && copySourceDirectory\n            ? path.join(dest, path.basename(source))\n            : dest;\n        if (!(yield ioUtil.exists(source))) {\n            throw new Error(`no such file or directory: ${source}`);\n        }\n        const sourceStat = yield ioUtil.stat(source);\n        if (sourceStat.isDirectory()) {\n            if (!recursive) {\n                throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);\n            }\n            else {\n                yield cpDirRecursive(source, newDest, 0, force);\n            }\n        }\n        else {\n            if (path.relative(source, newDest) === '') {\n                // a file cannot be copied to itself\n                throw new Error(`'${newDest}' and '${source}' are the same file`);\n            }\n            yield copyFile(source, newDest, force);\n        }\n    });\n}\nexports.cp = cp;\n/**\n * Moves a path.\n *\n * @param     source    source path\n * @param     dest      destination path\n * @param     options   optional. See MoveOptions.\n */\nfunction mv(source, dest, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (yield ioUtil.exists(dest)) {\n            let destExists = true;\n            if (yield ioUtil.isDirectory(dest)) {\n                // If dest is directory copy src into dest\n                dest = path.join(dest, path.basename(source));\n                destExists = yield ioUtil.exists(dest);\n            }\n            if (destExists) {\n                if (options.force == null || options.force) {\n                    yield rmRF(dest);\n                }\n                else {\n                    throw new Error('Destination already exists');\n                }\n            }\n        }\n        yield mkdirP(path.dirname(dest));\n        yield ioUtil.rename(source, dest);\n    });\n}\nexports.mv = mv;\n/**\n * Remove a path recursively with force\n *\n * @param inputPath path to remove\n */\nfunction rmRF(inputPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (ioUtil.IS_WINDOWS) {\n            // Check for invalid characters\n            // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\n            if (/[*\"<>|]/.test(inputPath)) {\n                throw new Error('File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows');\n            }\n        }\n        try {\n            // note if path does not exist, error is silent\n            yield ioUtil.rm(inputPath, {\n                force: true,\n                maxRetries: 3,\n                recursive: true,\n                retryDelay: 300\n            });\n        }\n        catch (err) {\n            throw new Error(`File was unable to be removed ${err}`);\n        }\n    });\n}\nexports.rmRF = rmRF;\n/**\n * Make a directory.  Creates the full path with folders in between\n * Will throw if it fails\n *\n * @param   fsPath        path to create\n * @returns Promise<void>\n */\nfunction mkdirP(fsPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        assert_1.ok(fsPath, 'a path argument must be provided');\n        yield ioUtil.mkdir(fsPath, { recursive: true });\n    });\n}\nexports.mkdirP = mkdirP;\n/**\n * Returns path of a tool had the tool actually been invoked.  Resolves via paths.\n * If you check and the tool does not exist, it will throw.\n *\n * @param     tool              name of the tool\n * @param     check             whether to check if tool exists\n * @returns   Promise<string>   path to tool\n */\nfunction which(tool, check) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!tool) {\n            throw new Error(\"parameter 'tool' is required\");\n        }\n        // recursive when check=true\n        if (check) {\n            const result = yield which(tool, false);\n            if (!result) {\n                if (ioUtil.IS_WINDOWS) {\n                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);\n                }\n                else {\n                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);\n                }\n            }\n            return result;\n        }\n        const matches = yield findInPath(tool);\n        if (matches && matches.length > 0) {\n            return matches[0];\n        }\n        return '';\n    });\n}\nexports.which = which;\n/**\n * Returns a list of all occurrences of the given tool on the system path.\n *\n * @returns   Promise<string[]>  the paths of the tool\n */\nfunction findInPath(tool) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!tool) {\n            throw new Error(\"parameter 'tool' is required\");\n        }\n        // build the list of extensions to try\n        const extensions = [];\n        if (ioUtil.IS_WINDOWS && process.env['PATHEXT']) {\n            for (const extension of process.env['PATHEXT'].split(path.delimiter)) {\n                if (extension) {\n                    extensions.push(extension);\n                }\n            }\n        }\n        // if it's rooted, return it if exists. otherwise return empty.\n        if (ioUtil.isRooted(tool)) {\n            const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);\n            if (filePath) {\n                return [filePath];\n            }\n            return [];\n        }\n        // if any path separators, return empty\n        if (tool.includes(path.sep)) {\n            return [];\n        }\n        // build the list of directories\n        //\n        // Note, technically \"where\" checks the current directory on Windows. From a toolkit perspective,\n        // it feels like we should not do this. Checking the current directory seems like more of a use\n        // case of a shell, and the which() function exposed by the toolkit should strive for consistency\n        // across platforms.\n        const directories = [];\n        if (process.env.PATH) {\n            for (const p of process.env.PATH.split(path.delimiter)) {\n                if (p) {\n                    directories.push(p);\n                }\n            }\n        }\n        // find all matches\n        const matches = [];\n        for (const directory of directories) {\n            const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);\n            if (filePath) {\n                matches.push(filePath);\n            }\n        }\n        return matches;\n    });\n}\nexports.findInPath = findInPath;\nfunction readCopyOptions(options) {\n    const force = options.force == null ? true : options.force;\n    const recursive = Boolean(options.recursive);\n    const copySourceDirectory = options.copySourceDirectory == null\n        ? true\n        : Boolean(options.copySourceDirectory);\n    return { force, recursive, copySourceDirectory };\n}\nfunction cpDirRecursive(sourceDir, destDir, currentDepth, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Ensure there is not a run away recursive copy\n        if (currentDepth >= 255)\n            return;\n        currentDepth++;\n        yield mkdirP(destDir);\n        const files = yield ioUtil.readdir(sourceDir);\n        for (const fileName of files) {\n            const srcFile = `${sourceDir}/${fileName}`;\n            const destFile = `${destDir}/${fileName}`;\n            const srcFileStat = yield ioUtil.lstat(srcFile);\n            if (srcFileStat.isDirectory()) {\n                // Recurse\n                yield cpDirRecursive(srcFile, destFile, currentDepth, force);\n            }\n            else {\n                yield copyFile(srcFile, destFile, force);\n            }\n        }\n        // Change the mode for the newly created directory\n        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);\n    });\n}\n// Buffered file copy\nfunction copyFile(srcFile, destFile, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {\n            // unlink/re-link it\n            try {\n                yield ioUtil.lstat(destFile);\n                yield ioUtil.unlink(destFile);\n            }\n            catch (e) {\n                // Try to override file permission\n                if (e.code === 'EPERM') {\n                    yield ioUtil.chmod(destFile, '0666');\n                    yield ioUtil.unlink(destFile);\n                }\n                // other errors = it doesn't exist, no work to do\n            }\n            // Copy over symlink\n            const symlinkFull = yield ioUtil.readlink(srcFile);\n            yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);\n        }\n        else if (!(yield ioUtil.exists(destFile)) || force) {\n            yield ioUtil.copyFile(srcFile, destFile);\n        }\n    });\n}\n//# sourceMappingURL=io.js.map","/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar eventTargetShim = require('event-target-shim');\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nclass AbortSignal extends eventTargetShim.EventTarget {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    constructor() {\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\neventTargetShim.defineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */\nfunction createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    eventTargetShim.EventTarget.call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */\nfunction abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({ type: \"abort\" });\n}\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    });\n}\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nclass AbortController {\n    /**\n     * Initialize this controller.\n     */\n    constructor() {\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */\nconst signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    });\n}\n\nexports.AbortController = AbortController;\nexports.AbortSignal = AbortSignal;\nexports.default = AbortController;\n\nmodule.exports = AbortController\nmodule.exports.AbortController = module.exports[\"default\"] = AbortController\nmodule.exports.AbortSignal = AbortSignal\n//# sourceMappingURL=abort-controller.js.map\n","'use strict';\n\nconst HttpAgent = require('./lib/agent');\nmodule.exports = HttpAgent;\nmodule.exports.HttpAgent = HttpAgent;\nmodule.exports.HttpsAgent = require('./lib/https_agent');\nmodule.exports.constants = require('./lib/constants');\n","'use strict';\n\nconst OriginalAgent = require('http').Agent;\nconst ms = require('humanize-ms');\nconst debug = require('util').debuglog('agentkeepalive');\nconst {\n  INIT_SOCKET,\n  CURRENT_ID,\n  CREATE_ID,\n  SOCKET_CREATED_TIME,\n  SOCKET_NAME,\n  SOCKET_REQUEST_COUNT,\n  SOCKET_REQUEST_FINISHED_COUNT,\n} = require('./constants');\n\n// OriginalAgent come from\n// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js\n// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js\n\n// node <= 10\nlet defaultTimeoutListenerCount = 1;\nconst majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));\nif (majorVersion >= 11 && majorVersion <= 12) {\n  defaultTimeoutListenerCount = 2;\n} else if (majorVersion >= 13) {\n  defaultTimeoutListenerCount = 3;\n}\n\nfunction deprecate(message) {\n  console.log('[agentkeepalive:deprecated] %s', message);\n}\n\nclass Agent extends OriginalAgent {\n  constructor(options) {\n    options = options || {};\n    options.keepAlive = options.keepAlive !== false;\n    // default is keep-alive and 4s free socket timeout\n    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83\n    if (options.freeSocketTimeout === undefined) {\n      options.freeSocketTimeout = 4000;\n    }\n    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.keepAliveTimeout) {\n      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.keepAliveTimeout;\n      delete options.keepAliveTimeout;\n    }\n    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.freeSocketKeepAliveTimeout) {\n      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;\n      delete options.freeSocketKeepAliveTimeout;\n    }\n\n    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.\n    // By default is double free socket timeout.\n    if (options.timeout === undefined) {\n      // make sure socket default inactivity timeout >= 8s\n      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);\n    }\n\n    // support humanize format\n    options.timeout = ms(options.timeout);\n    options.freeSocketTimeout = ms(options.freeSocketTimeout);\n    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;\n\n    super(options);\n\n    this[CURRENT_ID] = 0;\n\n    // create socket success counter\n    this.createSocketCount = 0;\n    this.createSocketCountLastCheck = 0;\n\n    this.createSocketErrorCount = 0;\n    this.createSocketErrorCountLastCheck = 0;\n\n    this.closeSocketCount = 0;\n    this.closeSocketCountLastCheck = 0;\n\n    // socket error event count\n    this.errorSocketCount = 0;\n    this.errorSocketCountLastCheck = 0;\n\n    // request finished counter\n    this.requestCount = 0;\n    this.requestCountLastCheck = 0;\n\n    // including free socket timeout counter\n    this.timeoutSocketCount = 0;\n    this.timeoutSocketCountLastCheck = 0;\n\n    this.on('free', socket => {\n      // https://github.com/nodejs/node/pull/32000\n      // Node.js native agent will check socket timeout eqs agent.options.timeout.\n      // Use the ttl or freeSocketTimeout to overwrite.\n      const timeout = this.calcSocketTimeout(socket);\n      if (timeout > 0 && socket.timeout !== timeout) {\n        socket.setTimeout(timeout);\n      }\n    });\n  }\n\n  get freeSocketKeepAliveTimeout() {\n    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');\n    return this.options.freeSocketTimeout;\n  }\n\n  get timeout() {\n    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');\n    return this.options.timeout;\n  }\n\n  get socketActiveTTL() {\n    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');\n    return this.options.socketActiveTTL;\n  }\n\n  calcSocketTimeout(socket) {\n    /**\n     * return <= 0: should free socket\n     * return > 0: should update socket timeout\n     * return undefined: not find custom timeout\n     */\n    let freeSocketTimeout = this.options.freeSocketTimeout;\n    const socketActiveTTL = this.options.socketActiveTTL;\n    if (socketActiveTTL) {\n      // check socketActiveTTL\n      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];\n      const diff = socketActiveTTL - aliveTime;\n      if (diff <= 0) {\n        return diff;\n      }\n      if (freeSocketTimeout && diff < freeSocketTimeout) {\n        freeSocketTimeout = diff;\n      }\n    }\n    // set freeSocketTimeout\n    if (freeSocketTimeout) {\n      // set free keepalive timer\n      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']\n      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498\n      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;\n      return customFreeSocketTimeout || freeSocketTimeout;\n    }\n  }\n\n  keepSocketAlive(socket) {\n    const result = super.keepSocketAlive(socket);\n    // should not keepAlive, do nothing\n    if (!result) return result;\n\n    const customTimeout = this.calcSocketTimeout(socket);\n    if (typeof customTimeout === 'undefined') {\n      return true;\n    }\n    if (customTimeout <= 0) {\n      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);\n      return false;\n    }\n    if (socket.timeout !== customTimeout) {\n      socket.setTimeout(customTimeout);\n    }\n    return true;\n  }\n\n  // only call on addRequest\n  reuseSocket(...args) {\n    // reuseSocket(socket, req)\n    super.reuseSocket(...args);\n    const socket = args[0];\n    const req = args[1];\n    req.reusedSocket = true;\n    const agentTimeout = this.options.timeout;\n    if (getSocketTimeout(socket) !== agentTimeout) {\n      // reset timeout before use\n      socket.setTimeout(agentTimeout);\n      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);\n    }\n    socket[SOCKET_REQUEST_COUNT]++;\n    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      getSocketTimeout(socket));\n  }\n\n  [CREATE_ID]() {\n    const id = this[CURRENT_ID]++;\n    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;\n    return id;\n  }\n\n  [INIT_SOCKET](socket, options) {\n    // bugfix here.\n    // https on node 8, 10 won't set agent.options.timeout by default\n    // TODO: need to fix on node itself\n    if (options.timeout) {\n      const timeout = getSocketTimeout(socket);\n      if (!timeout) {\n        socket.setTimeout(options.timeout);\n      }\n    }\n\n    if (this.options.keepAlive) {\n      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\n      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html\n      socket.setNoDelay(true);\n    }\n    this.createSocketCount++;\n    if (this.options.socketActiveTTL) {\n      socket[SOCKET_CREATED_TIME] = Date.now();\n    }\n    // don't show the hole '-----BEGIN CERTIFICATE----' key string\n    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];\n    socket[SOCKET_REQUEST_COUNT] = 1;\n    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;\n    installListeners(this, socket, options);\n  }\n\n  createConnection(options, oncreate) {\n    let called = false;\n    const onNewCreate = (err, socket) => {\n      if (called) return;\n      called = true;\n\n      if (err) {\n        this.createSocketErrorCount++;\n        return oncreate(err);\n      }\n      this[INIT_SOCKET](socket, options);\n      oncreate(err, socket);\n    };\n\n    const newSocket = super.createConnection(options, onNewCreate);\n    if (newSocket) onNewCreate(null, newSocket);\n    return newSocket;\n  }\n\n  get statusChanged() {\n    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||\n      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||\n      this.closeSocketCount !== this.closeSocketCountLastCheck ||\n      this.errorSocketCount !== this.errorSocketCountLastCheck ||\n      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||\n      this.requestCount !== this.requestCountLastCheck;\n    if (changed) {\n      this.createSocketCountLastCheck = this.createSocketCount;\n      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;\n      this.closeSocketCountLastCheck = this.closeSocketCount;\n      this.errorSocketCountLastCheck = this.errorSocketCount;\n      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;\n      this.requestCountLastCheck = this.requestCount;\n    }\n    return changed;\n  }\n\n  getCurrentStatus() {\n    return {\n      createSocketCount: this.createSocketCount,\n      createSocketErrorCount: this.createSocketErrorCount,\n      closeSocketCount: this.closeSocketCount,\n      errorSocketCount: this.errorSocketCount,\n      timeoutSocketCount: this.timeoutSocketCount,\n      requestCount: this.requestCount,\n      freeSockets: inspect(this.freeSockets),\n      sockets: inspect(this.sockets),\n      requests: inspect(this.requests),\n    };\n  }\n}\n\n// node 8 don't has timeout attribute on socket\n// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408\nfunction getSocketTimeout(socket) {\n  return socket.timeout || socket._idleTimeout;\n}\n\nfunction installListeners(agent, socket, options) {\n  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));\n\n  // listener socket events: close, timeout, error, free\n  function onFree() {\n    // create and socket.emit('free') logic\n    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311\n    // no req on the socket, it should be the new socket\n    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;\n\n    socket[SOCKET_REQUEST_FINISHED_COUNT]++;\n    agent.requestCount++;\n    debug('%s(requests: %s, finished: %s) free',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\n    // should reuse on pedding requests?\n    const name = agent.getName(options);\n    if (socket.writable && agent.requests[name] && agent.requests[name].length) {\n      // will be reuse on agent free listener\n      socket[SOCKET_REQUEST_COUNT]++;\n      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    }\n  }\n  socket.on('free', onFree);\n\n  function onClose(isError) {\n    debug('%s(requests: %s, finished: %s) close, isError: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);\n    agent.closeSocketCount++;\n  }\n  socket.on('close', onClose);\n\n  // start socket timeout handler\n  function onTimeout() {\n    // onTimeout and emitRequestTimeout(_http_client.js)\n    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711\n    const listenerCount = socket.listeners('timeout').length;\n    // node <= 10, default listenerCount is 1, onTimeout\n    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout\n    // node >= 13, default listenerCount is 3, onTimeout,\n    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)\n    //   and emitRequestTimeout\n    const timeout = getSocketTimeout(socket);\n    const req = socket._httpMessage;\n    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;\n    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);\n    if (debug.enabled) {\n      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));\n    }\n    agent.timeoutSocketCount++;\n    const name = agent.getName(options);\n    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {\n      // free socket timeout, destroy quietly\n      socket.destroy();\n      // Remove it from freeSockets list immediately to prevent new requests\n      // from being sent through this socket.\n      agent.removeSocket(socket, options);\n      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);\n    } else {\n      // if there is no any request socket timeout handler,\n      // agent need to handle socket timeout itself.\n      //\n      // custom request socket timeout handle logic must follow these rules:\n      //  1. Destroy socket first\n      //  2. Must emit socket 'agentRemove' event tell agent remove socket\n      //     from freeSockets list immediately.\n      //     Otherise you may be get 'socket hang up' error when reuse\n      //     free socket and timeout happen in the same time.\n      if (reqTimeoutListenerCount === 0) {\n        const error = new Error('Socket timeout');\n        error.code = 'ERR_SOCKET_TIMEOUT';\n        error.timeout = timeout;\n        // must manually call socket.end() or socket.destroy() to end the connection.\n        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback\n        socket.destroy(error);\n        agent.removeSocket(socket, options);\n        debug('%s destroy with timeout error', socket[SOCKET_NAME]);\n      }\n    }\n  }\n  socket.on('timeout', onTimeout);\n\n  function onError(err) {\n    const listenerCount = socket.listeners('error').length;\n    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      err, listenerCount);\n    agent.errorSocketCount++;\n    if (listenerCount === 1) {\n      // if socket don't contain error event handler, don't catch it, emit it again\n      debug('%s emit uncaught error event', socket[SOCKET_NAME]);\n      socket.removeListener('error', onError);\n      socket.emit('error', err);\n    }\n  }\n  socket.on('error', onError);\n\n  function onRemove() {\n    debug('%s(requests: %s, finished: %s) agentRemove',\n      socket[SOCKET_NAME],\n      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    // We need this function for cases like HTTP 'upgrade'\n    // (defined by WebSockets) where we need to remove a socket from the\n    // pool because it'll be locked up indefinitely\n    socket.removeListener('close', onClose);\n    socket.removeListener('error', onError);\n    socket.removeListener('free', onFree);\n    socket.removeListener('timeout', onTimeout);\n    socket.removeListener('agentRemove', onRemove);\n  }\n  socket.on('agentRemove', onRemove);\n}\n\nmodule.exports = Agent;\n\nfunction inspect(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key].length;\n  }\n  return res;\n}\n","'use strict';\n\nmodule.exports = {\n  // agent\n  CURRENT_ID: Symbol('agentkeepalive#currentId'),\n  CREATE_ID: Symbol('agentkeepalive#createId'),\n  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),\n  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),\n  // socket\n  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),\n  SOCKET_NAME: Symbol('agentkeepalive#socketName'),\n  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),\n  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),\n};\n","'use strict';\n\nconst OriginalHttpsAgent = require('https').Agent;\nconst HttpAgent = require('./agent');\nconst {\n  INIT_SOCKET,\n  CREATE_HTTPS_CONNECTION,\n} = require('./constants');\n\nclass HttpsAgent extends HttpAgent {\n  constructor(options) {\n    super(options);\n\n    this.defaultPort = 443;\n    this.protocol = 'https:';\n    this.maxCachedSessions = this.options.maxCachedSessions;\n    /* istanbul ignore next */\n    if (this.maxCachedSessions === undefined) {\n      this.maxCachedSessions = 100;\n    }\n\n    this._sessionCache = {\n      map: {},\n      list: [],\n    };\n  }\n\n  createConnection(options, oncreate) {\n    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);\n    this[INIT_SOCKET](socket, options);\n    return socket;\n  }\n}\n\n// https://github.com/nodejs/node/blob/master/lib/https.js#L89\nHttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;\n\n[\n  'getName',\n  '_getSession',\n  '_cacheSession',\n  // https://github.com/nodejs/node/pull/4982\n  '_evictSession',\n].forEach(function(method) {\n  /* istanbul ignore next */\n  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {\n    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];\n  }\n});\n\nmodule.exports = HttpsAgent;\n","/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap();\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap();\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event);\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    );\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            );\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    });\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true });\n\n    // Define accessors\n    const keys = Object.keys(event);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this));\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype);\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event);\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value;\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    });\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            );\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nfunction wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nfunction isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nfunction setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nfunction setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nfunction setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap();\n\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next;\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n\n                node = node.next;\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    );\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        };\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node;\n            node = node.next;\n        }\n\n        // Add it.\n        prev.next = newNode;\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this);\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n\n        let prev = null;\n        let node = listeners.get(eventName);\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return\n            }\n\n            prev = node;\n            node = node.next;\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            );\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err);\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent);\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n\n        return !wrappedEvent.defaultPrevented\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);\n}\n\nexports.defineEventAttribute = defineEventAttribute;\nexports.EventTarget = EventTarget;\nexports.default = EventTarget;\n\nmodule.exports = EventTarget\nmodule.exports.EventTarget = module.exports[\"default\"] = EventTarget\nmodule.exports.defineEventAttribute = defineEventAttribute\n//# sourceMappingURL=event-target-shim.js.map\n","/*!\n * humanize-ms - index.js\n * Copyright(c) 2014 dead_horse <dead_horse@qq.com>\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar ms = require('ms');\n\nmodule.exports = function (t) {\n  if (typeof t === 'number') return t;\n  var r = ms(t);\n  if (r === undefined) {\n    var err = new Error(util.format('humanize-ms(%j) result undefined', t));\n    console.warn(err.stack);\n  }\n  return r;\n};\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Stream = _interopDefault(require('stream'));\nvar http = _interopDefault(require('http'));\nvar Url = _interopDefault(require('url'));\nvar whatwgUrl = _interopDefault(require('whatwg-url'));\nvar https = _interopDefault(require('https'));\nvar zlib = _interopDefault(require('zlib'));\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = Stream.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = Stream.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof Stream) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof Stream) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof Stream)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\t\tif (!res) {\n\t\t\tres = /<meta[\\s]+?content=(['\"])(.+?)\\1[\\s]+?http-equiv=(['\"])content-type\\3/i.exec(str);\n\t\t\tif (res) {\n\t\t\t\tres.pop(); // drop last quote\n\t\t\t}\n\t\t}\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof Stream) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\nconst URL = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = Url.parse;\nconst format_url = Url.format;\n\n/**\n * Wrapper around `new URL` to handle arbitrary URLs\n *\n * @param  {string} urlStr\n * @return {void}\n */\nfunction parseURL(urlStr) {\n\t/*\n \tCheck whether the URL is absolute or not\n \t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\n \tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n */\n\tif (/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.exec(urlStr)) {\n\t\turlStr = new URL(urlStr).toString();\n\t}\n\n\t// Fallback to old implementation for arbitrary URLs\n\treturn parse_url(urlStr);\n}\n\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parseURL(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parseURL(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parseURL(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\nconst URL$1 = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = Stream.PassThrough;\n\nconst isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {\n\tconst orig = new URL$1(original).hostname;\n\tconst dest = new URL$1(destination).hostname;\n\n\treturn orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = function isSameProtocol(destination, original) {\n\tconst orig = new URL$1(original).protocol;\n\tconst dest = new URL$1(destination).protocol;\n\n\treturn orig === dest;\n};\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\tdestroyStream(request.body, error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(req, function (err) {\n\t\t\tif (signal && signal.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (parseInt(process.version.substring(1)) < 14) {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\treq.on('socket', function (s) {\n\t\t\t\ts.addListener('close', function (hadError) {\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0;\n\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n\t\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL$1(location, request.url).toString();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOpts.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.on('end', function () {\n\t\t\t\t\t// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tlet socket;\n\n\trequest.on('socket', function (s) {\n\t\tsocket = s;\n\t});\n\n\trequest.on('response', function (response) {\n\t\tconst headers = response.headers;\n\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n\t\t\tresponse.once('close', function (hadError) {\n\t\t\t\t// tests for socket presence, as in some situations the\n\t\t\t\t// the 'socket' event is not triggered for the request\n\t\t\t\t// (happens in deno), avoids `TypeError`\n\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\tconst hasDataListener = socket && socket.listenerCount('data') > 0;\n\n\t\t\t\tif (hasDataListener && !hadError) {\n\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction destroyStream(stream, err) {\n\tif (stream.destroy) {\n\t\tstream.destroy(err);\n\t} else {\n\t\t// node < 8\n\t\tstream.emit('error', err);\n\t\tstream.end();\n\t}\n}\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\nmodule.exports = exports = fetch;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports.FetchError = FetchError;\nexports.AbortError = AbortError;\n","\"use strict\";\n\nvar punycode = require(\"punycode\");\nvar mappingTable = require(\"./lib/mappingTable.json\");\n\nvar PROCESSING_OPTIONS = {\n  TRANSITIONAL: 0,\n  NONTRANSITIONAL: 1\n};\n\nfunction normalize(str) { // fix bug in v8\n  return str.split('\\u0000').map(function (s) { return s.normalize('NFC'); }).join('\\u0000');\n}\n\nfunction findStatus(val) {\n  var start = 0;\n  var end = mappingTable.length - 1;\n\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n\n    var target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      return target;\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction countSymbols(string) {\n  return string\n    // replace every surrogate pair with a BMP symbol\n    .replace(regexAstralSymbols, '_')\n    // then get the length\n    .length;\n}\n\nfunction mapChars(domain_name, useSTD3, processing_option) {\n  var hasError = false;\n  var processed = \"\";\n\n  var len = countSymbols(domain_name);\n  for (var i = 0; i < len; ++i) {\n    var codePoint = domain_name.codePointAt(i);\n    var status = findStatus(codePoint);\n\n    switch (status[1]) {\n      case \"disallowed\":\n        hasError = true;\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += String.fromCodePoint.apply(String, status[2]);\n        break;\n      case \"deviation\":\n        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        } else {\n          processed += String.fromCodePoint(codePoint);\n        }\n        break;\n      case \"valid\":\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"disallowed_STD3_mapped\":\n        if (useSTD3) {\n          hasError = true;\n          processed += String.fromCodePoint(codePoint);\n        } else {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        }\n        break;\n      case \"disallowed_STD3_valid\":\n        if (useSTD3) {\n          hasError = true;\n        }\n\n        processed += String.fromCodePoint(codePoint);\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nvar combiningMarksRegex = /[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2D]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDE2C-\\uDE37\\uDEDF-\\uDEEA\\uDF01-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDE30-\\uDE40\\uDEAB-\\uDEB7]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nfunction validateLabel(label, processing_option) {\n  if (label.substr(0, 4) === \"xn--\") {\n    label = punycode.toUnicode(label);\n    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;\n  }\n\n  var error = false;\n\n  if (normalize(label) !== label ||\n      (label[3] === \"-\" && label[4] === \"-\") ||\n      label[0] === \"-\" || label[label.length - 1] === \"-\" ||\n      label.indexOf(\".\") !== -1 ||\n      label.search(combiningMarksRegex) === 0) {\n    error = true;\n  }\n\n  var len = countSymbols(label);\n  for (var i = 0; i < len; ++i) {\n    var status = findStatus(label.codePointAt(i));\n    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== \"valid\") ||\n        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&\n         status[1] !== \"valid\" && status[1] !== \"deviation\")) {\n      error = true;\n      break;\n    }\n  }\n\n  return {\n    label: label,\n    error: error\n  };\n}\n\nfunction processing(domain_name, useSTD3, processing_option) {\n  var result = mapChars(domain_name, useSTD3, processing_option);\n  result.string = normalize(result.string);\n\n  var labels = result.string.split(\".\");\n  for (var i = 0; i < labels.length; ++i) {\n    try {\n      var validation = validateLabel(labels[i]);\n      labels[i] = validation.label;\n      result.error = result.error || validation.error;\n    } catch(e) {\n      result.error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error: result.error\n  };\n}\n\nmodule.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {\n  var result = processing(domain_name, useSTD3, processing_option);\n  var labels = result.string.split(\".\");\n  labels = labels.map(function(l) {\n    try {\n      return punycode.toASCII(l);\n    } catch(e) {\n      result.error = true;\n      return l;\n    }\n  });\n\n  if (verifyDnsLength) {\n    var total = labels.slice(0, labels.length - 1).join(\".\").length;\n    if (total.length > 253 || total.length === 0) {\n      result.error = true;\n    }\n\n    for (var i=0; i < labels.length; ++i) {\n      if (labels.length > 63 || labels.length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) return null;\n  return labels.join(\".\");\n};\n\nmodule.exports.toUnicode = function(domain_name, useSTD3) {\n  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n};\n\nmodule.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","'use strict'\n\nconst Client = require('./lib/client')\nconst Dispatcher = require('./lib/dispatcher')\nconst errors = require('./lib/core/errors')\nconst Pool = require('./lib/pool')\nconst BalancedPool = require('./lib/balanced-pool')\nconst Agent = require('./lib/agent')\nconst util = require('./lib/core/util')\nconst { InvalidArgumentError } = errors\nconst api = require('./lib/api')\nconst buildConnector = require('./lib/core/connect')\nconst MockClient = require('./lib/mock/mock-client')\nconst MockAgent = require('./lib/mock/mock-agent')\nconst MockPool = require('./lib/mock/mock-pool')\nconst mockErrors = require('./lib/mock/mock-errors')\nconst ProxyAgent = require('./lib/proxy-agent')\nconst RetryHandler = require('./lib/handler/RetryHandler')\nconst { getGlobalDispatcher, setGlobalDispatcher } = require('./lib/global')\nconst DecoratorHandler = require('./lib/handler/DecoratorHandler')\nconst RedirectHandler = require('./lib/handler/RedirectHandler')\nconst createRedirectInterceptor = require('./lib/interceptor/redirectInterceptor')\n\nlet hasCrypto\ntry {\n  require('crypto')\n  hasCrypto = true\n} catch {\n  hasCrypto = false\n}\n\nObject.assign(Dispatcher.prototype, api)\n\nmodule.exports.Dispatcher = Dispatcher\nmodule.exports.Client = Client\nmodule.exports.Pool = Pool\nmodule.exports.BalancedPool = BalancedPool\nmodule.exports.Agent = Agent\nmodule.exports.ProxyAgent = ProxyAgent\nmodule.exports.RetryHandler = RetryHandler\n\nmodule.exports.DecoratorHandler = DecoratorHandler\nmodule.exports.RedirectHandler = RedirectHandler\nmodule.exports.createRedirectInterceptor = createRedirectInterceptor\n\nmodule.exports.buildConnector = buildConnector\nmodule.exports.errors = errors\n\nfunction makeDispatcher (fn) {\n  return (url, opts, handler) => {\n    if (typeof opts === 'function') {\n      handler = opts\n      opts = null\n    }\n\n    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {\n      throw new InvalidArgumentError('invalid url')\n    }\n\n    if (opts != null && typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (opts && opts.path != null) {\n      if (typeof opts.path !== 'string') {\n        throw new InvalidArgumentError('invalid opts.path')\n      }\n\n      let path = opts.path\n      if (!opts.path.startsWith('/')) {\n        path = `/${path}`\n      }\n\n      url = new URL(util.parseOrigin(url).origin + path)\n    } else {\n      if (!opts) {\n        opts = typeof url === 'object' ? url : {}\n      }\n\n      url = util.parseURL(url)\n    }\n\n    const { agent, dispatcher = getGlobalDispatcher() } = opts\n\n    if (agent) {\n      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')\n    }\n\n    return fn.call(dispatcher, {\n      ...opts,\n      origin: url.origin,\n      path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n      method: opts.method || (opts.body ? 'PUT' : 'GET')\n    }, handler)\n  }\n}\n\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher\n\nif (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {\n  let fetchImpl = null\n  module.exports.fetch = async function fetch (resource) {\n    if (!fetchImpl) {\n      fetchImpl = require('./lib/fetch').fetch\n    }\n\n    try {\n      return await fetchImpl(...arguments)\n    } catch (err) {\n      if (typeof err === 'object') {\n        Error.captureStackTrace(err, this)\n      }\n\n      throw err\n    }\n  }\n  module.exports.Headers = require('./lib/fetch/headers').Headers\n  module.exports.Response = require('./lib/fetch/response').Response\n  module.exports.Request = require('./lib/fetch/request').Request\n  module.exports.FormData = require('./lib/fetch/formdata').FormData\n  module.exports.File = require('./lib/fetch/file').File\n  module.exports.FileReader = require('./lib/fileapi/filereader').FileReader\n\n  const { setGlobalOrigin, getGlobalOrigin } = require('./lib/fetch/global')\n\n  module.exports.setGlobalOrigin = setGlobalOrigin\n  module.exports.getGlobalOrigin = getGlobalOrigin\n\n  const { CacheStorage } = require('./lib/cache/cachestorage')\n  const { kConstruct } = require('./lib/cache/symbols')\n\n  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n  // in an older version of Node, it doesn't have any use without fetch.\n  module.exports.caches = new CacheStorage(kConstruct)\n}\n\nif (util.nodeMajor >= 16) {\n  const { deleteCookie, getCookies, getSetCookies, setCookie } = require('./lib/cookies')\n\n  module.exports.deleteCookie = deleteCookie\n  module.exports.getCookies = getCookies\n  module.exports.getSetCookies = getSetCookies\n  module.exports.setCookie = setCookie\n\n  const { parseMIMEType, serializeAMimeType } = require('./lib/fetch/dataURL')\n\n  module.exports.parseMIMEType = parseMIMEType\n  module.exports.serializeAMimeType = serializeAMimeType\n}\n\nif (util.nodeMajor >= 18 && hasCrypto) {\n  const { WebSocket } = require('./lib/websocket/websocket')\n\n  module.exports.WebSocket = WebSocket\n}\n\nmodule.exports.request = makeDispatcher(api.request)\nmodule.exports.stream = makeDispatcher(api.stream)\nmodule.exports.pipeline = makeDispatcher(api.pipeline)\nmodule.exports.connect = makeDispatcher(api.connect)\nmodule.exports.upgrade = makeDispatcher(api.upgrade)\n\nmodule.exports.MockClient = MockClient\nmodule.exports.MockPool = MockPool\nmodule.exports.MockAgent = MockAgent\nmodule.exports.mockErrors = mockErrors\n","'use strict'\n\nconst { InvalidArgumentError } = require('./core/errors')\nconst { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require('./core/symbols')\nconst DispatcherBase = require('./dispatcher-base')\nconst Pool = require('./pool')\nconst Client = require('./client')\nconst util = require('./core/util')\nconst createRedirectInterceptor = require('./interceptor/redirectInterceptor')\nconst { WeakRef, FinalizationRegistry } = require('./compat/dispatcher-weakref')()\n\nconst kOnConnect = Symbol('onConnect')\nconst kOnDisconnect = Symbol('onDisconnect')\nconst kOnConnectionError = Symbol('onConnectionError')\nconst kMaxRedirections = Symbol('maxRedirections')\nconst kOnDrain = Symbol('onDrain')\nconst kFactory = Symbol('factory')\nconst kFinalizer = Symbol('finalizer')\nconst kOptions = Symbol('options')\n\nfunction defaultFactory (origin, opts) {\n  return opts && opts.connections === 1\n    ? new Client(origin, opts)\n    : new Pool(origin, opts)\n}\n\nclass Agent extends DispatcherBase {\n  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {\n    super()\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    if (connect && typeof connect !== 'function') {\n      connect = { ...connect }\n    }\n\n    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)\n      ? options.interceptors.Agent\n      : [createRedirectInterceptor({ maxRedirections })]\n\n    this[kOptions] = { ...util.deepClone(options), connect }\n    this[kOptions].interceptors = options.interceptors\n      ? { ...options.interceptors }\n      : undefined\n    this[kMaxRedirections] = maxRedirections\n    this[kFactory] = factory\n    this[kClients] = new Map()\n    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {\n      const ref = this[kClients].get(key)\n      if (ref !== undefined && ref.deref() === undefined) {\n        this[kClients].delete(key)\n      }\n    })\n\n    const agent = this\n\n    this[kOnDrain] = (origin, targets) => {\n      agent.emit('drain', origin, [agent, ...targets])\n    }\n\n    this[kOnConnect] = (origin, targets) => {\n      agent.emit('connect', origin, [agent, ...targets])\n    }\n\n    this[kOnDisconnect] = (origin, targets, err) => {\n      agent.emit('disconnect', origin, [agent, ...targets], err)\n    }\n\n    this[kOnConnectionError] = (origin, targets, err) => {\n      agent.emit('connectionError', origin, [agent, ...targets], err)\n    }\n  }\n\n  get [kRunning] () {\n    let ret = 0\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore next: gc is undeterministic */\n      if (client) {\n        ret += client[kRunning]\n      }\n    }\n    return ret\n  }\n\n  [kDispatch] (opts, handler) {\n    let key\n    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {\n      key = String(opts.origin)\n    } else {\n      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')\n    }\n\n    const ref = this[kClients].get(key)\n\n    let dispatcher = ref ? ref.deref() : null\n    if (!dispatcher) {\n      dispatcher = this[kFactory](opts.origin, this[kOptions])\n        .on('drain', this[kOnDrain])\n        .on('connect', this[kOnConnect])\n        .on('disconnect', this[kOnDisconnect])\n        .on('connectionError', this[kOnConnectionError])\n\n      this[kClients].set(key, new WeakRef(dispatcher))\n      this[kFinalizer].register(dispatcher, key)\n    }\n\n    return dispatcher.dispatch(opts, handler)\n  }\n\n  async [kClose] () {\n    const closePromises = []\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore else: gc is undeterministic */\n      if (client) {\n        closePromises.push(client.close())\n      }\n    }\n\n    await Promise.all(closePromises)\n  }\n\n  async [kDestroy] (err) {\n    const destroyPromises = []\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore else: gc is undeterministic */\n      if (client) {\n        destroyPromises.push(client.destroy(err))\n      }\n    }\n\n    await Promise.all(destroyPromises)\n  }\n}\n\nmodule.exports = Agent\n","const { addAbortListener } = require('../core/util')\nconst { RequestAbortedError } = require('../core/errors')\n\nconst kListener = Symbol('kListener')\nconst kSignal = Symbol('kSignal')\n\nfunction abort (self) {\n  if (self.abort) {\n    self.abort()\n  } else {\n    self.onError(new RequestAbortedError())\n  }\n}\n\nfunction addSignal (self, signal) {\n  self[kSignal] = null\n  self[kListener] = null\n\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    abort(self)\n    return\n  }\n\n  self[kSignal] = signal\n  self[kListener] = () => {\n    abort(self)\n  }\n\n  addAbortListener(self[kSignal], self[kListener])\n}\n\nfunction removeSignal (self) {\n  if (!self[kSignal]) {\n    return\n  }\n\n  if ('removeEventListener' in self[kSignal]) {\n    self[kSignal].removeEventListener('abort', self[kListener])\n  } else {\n    self[kSignal].removeListener('abort', self[kListener])\n  }\n\n  self[kSignal] = null\n  self[kListener] = null\n}\n\nmodule.exports = {\n  addSignal,\n  removeSignal\n}\n","'use strict'\n\nconst { AsyncResource } = require('async_hooks')\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = require('../core/errors')\nconst util = require('../core/util')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass ConnectHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    const { signal, opaque, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    super('UNDICI_CONNECT')\n\n    this.opaque = opaque || null\n    this.responseHeaders = responseHeaders || null\n    this.callback = callback\n    this.abort = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders () {\n    throw new SocketError('bad connect', null)\n  }\n\n  onUpgrade (statusCode, rawHeaders, socket) {\n    const { callback, opaque, context } = this\n\n    removeSignal(this)\n\n    this.callback = null\n\n    let headers = rawHeaders\n    // Indicates is an HTTP2Session\n    if (headers != null) {\n      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n    }\n\n    this.runInAsyncScope(callback, null, null, {\n      statusCode,\n      headers,\n      socket,\n      opaque,\n      context\n    })\n  }\n\n  onError (err) {\n    const { callback, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n  }\n}\n\nfunction connect (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      connect.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    const connectHandler = new ConnectHandler(opts, callback)\n    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = connect\n","'use strict'\n\nconst {\n  Readable,\n  Duplex,\n  PassThrough\n} = require('stream')\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\nconst assert = require('assert')\n\nconst kResume = Symbol('resume')\n\nclass PipelineRequest extends Readable {\n  constructor () {\n    super({ autoDestroy: true })\n\n    this[kResume] = null\n  }\n\n  _read () {\n    const { [kResume]: resume } = this\n\n    if (resume) {\n      this[kResume] = null\n      resume()\n    }\n  }\n\n  _destroy (err, callback) {\n    this._read()\n\n    callback(err)\n  }\n}\n\nclass PipelineResponse extends Readable {\n  constructor (resume) {\n    super({ autoDestroy: true })\n    this[kResume] = resume\n  }\n\n  _read () {\n    this[kResume]()\n  }\n\n  _destroy (err, callback) {\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError()\n    }\n\n    callback(err)\n  }\n}\n\nclass PipelineHandler extends AsyncResource {\n  constructor (opts, handler) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new InvalidArgumentError('invalid handler')\n    }\n\n    const { signal, method, opaque, onInfo, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    if (method === 'CONNECT') {\n      throw new InvalidArgumentError('invalid method')\n    }\n\n    if (onInfo && typeof onInfo !== 'function') {\n      throw new InvalidArgumentError('invalid onInfo callback')\n    }\n\n    super('UNDICI_PIPELINE')\n\n    this.opaque = opaque || null\n    this.responseHeaders = responseHeaders || null\n    this.handler = handler\n    this.abort = null\n    this.context = null\n    this.onInfo = onInfo || null\n\n    this.req = new PipelineRequest().on('error', util.nop)\n\n    this.ret = new Duplex({\n      readableObjectMode: opts.objectMode,\n      autoDestroy: true,\n      read: () => {\n        const { body } = this\n\n        if (body && body.resume) {\n          body.resume()\n        }\n      },\n      write: (chunk, encoding, callback) => {\n        const { req } = this\n\n        if (req.push(chunk, encoding) || req._readableState.destroyed) {\n          callback()\n        } else {\n          req[kResume] = callback\n        }\n      },\n      destroy: (err, callback) => {\n        const { body, req, res, ret, abort } = this\n\n        if (!err && !ret._readableState.endEmitted) {\n          err = new RequestAbortedError()\n        }\n\n        if (abort && err) {\n          abort()\n        }\n\n        util.destroy(body, err)\n        util.destroy(req, err)\n        util.destroy(res, err)\n\n        removeSignal(this)\n\n        callback(err)\n      }\n    }).on('prefinish', () => {\n      const { req } = this\n\n      // Node < 15 does not call _final in same tick.\n      req.push(null)\n    })\n\n    this.res = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    const { ret, res } = this\n\n    assert(!res, 'pipeline cannot be retried')\n\n    if (ret.destroyed) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume) {\n    const { opaque, handler, context } = this\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    this.res = new PipelineResponse(resume)\n\n    let body\n    try {\n      this.handler = null\n      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n      body = this.runInAsyncScope(handler, null, {\n        statusCode,\n        headers,\n        opaque,\n        body: this.res,\n        context\n      })\n    } catch (err) {\n      this.res.on('error', util.nop)\n      throw err\n    }\n\n    if (!body || typeof body.on !== 'function') {\n      throw new InvalidReturnValueError('expected Readable')\n    }\n\n    body\n      .on('data', (chunk) => {\n        const { ret, body } = this\n\n        if (!ret.push(chunk) && body.pause) {\n          body.pause()\n        }\n      })\n      .on('error', (err) => {\n        const { ret } = this\n\n        util.destroy(ret, err)\n      })\n      .on('end', () => {\n        const { ret } = this\n\n        ret.push(null)\n      })\n      .on('close', () => {\n        const { ret } = this\n\n        if (!ret._readableState.ended) {\n          util.destroy(ret, new RequestAbortedError())\n        }\n      })\n\n    this.body = body\n  }\n\n  onData (chunk) {\n    const { res } = this\n    return res.push(chunk)\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n    res.push(null)\n  }\n\n  onError (err) {\n    const { ret } = this\n    this.handler = null\n    util.destroy(ret, err)\n  }\n}\n\nfunction pipeline (opts, handler) {\n  try {\n    const pipelineHandler = new PipelineHandler(opts, handler)\n    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)\n    return pipelineHandler.ret\n  } catch (err) {\n    return new PassThrough().destroy(err)\n  }\n}\n\nmodule.exports = pipeline\n","'use strict'\n\nconst Readable = require('./readable')\nconst {\n  InvalidArgumentError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { getResolveErrorBodyCallback } = require('./util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass RequestHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts\n\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback')\n      }\n\n      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {\n        throw new InvalidArgumentError('invalid highWaterMark')\n      }\n\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n      }\n\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method')\n      }\n\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback')\n      }\n\n      super('UNDICI_REQUEST')\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err)\n      }\n      throw err\n    }\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.callback = callback\n    this.res = null\n    this.abort = null\n    this.body = body\n    this.trailers = {}\n    this.context = null\n    this.onInfo = onInfo || null\n    this.throwOnError = throwOnError\n    this.highWaterMark = highWaterMark\n\n    if (util.isStream(body)) {\n      body.on('error', (err) => {\n        this.onError(err)\n      })\n    }\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this\n\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers\n    const contentType = parsedHeaders['content-type']\n    const body = new Readable({ resume, abort, contentType, highWaterMark })\n\n    this.callback = null\n    this.res = body\n    if (callback !== null) {\n      if (this.throwOnError && statusCode >= 400) {\n        this.runInAsyncScope(getResolveErrorBodyCallback, null,\n          { callback, body, contentType, statusCode, statusMessage, headers }\n        )\n      } else {\n        this.runInAsyncScope(callback, null, null, {\n          statusCode,\n          headers,\n          trailers: this.trailers,\n          opaque,\n          body,\n          context\n        })\n      }\n    }\n  }\n\n  onData (chunk) {\n    const { res } = this\n    return res.push(chunk)\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n\n    removeSignal(this)\n\n    util.parseHeaders(trailers, this.trailers)\n\n    res.push(null)\n  }\n\n  onError (err) {\n    const { res, callback, body, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      // TODO: Does this need queueMicrotask?\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n\n    if (res) {\n      this.res = null\n      // Ensure all queued handlers are invoked before destroying res.\n      queueMicrotask(() => {\n        util.destroy(res, err)\n      })\n    }\n\n    if (body) {\n      this.body = null\n      util.destroy(body, err)\n    }\n  }\n}\n\nfunction request (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      request.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    this.dispatch(opts, new RequestHandler(opts, callback))\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = request\nmodule.exports.RequestHandler = RequestHandler\n","'use strict'\n\nconst { finished, PassThrough } = require('stream')\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { getResolveErrorBodyCallback } = require('./util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass StreamHandler extends AsyncResource {\n  constructor (opts, factory, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts\n\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback')\n      }\n\n      if (typeof factory !== 'function') {\n        throw new InvalidArgumentError('invalid factory')\n      }\n\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n      }\n\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method')\n      }\n\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback')\n      }\n\n      super('UNDICI_STREAM')\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err)\n      }\n      throw err\n    }\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.factory = factory\n    this.callback = callback\n    this.res = null\n    this.abort = null\n    this.context = null\n    this.trailers = null\n    this.body = body\n    this.onInfo = onInfo || null\n    this.throwOnError = throwOnError || false\n\n    if (util.isStream(body)) {\n      body.on('error', (err) => {\n        this.onError(err)\n      })\n    }\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const { factory, opaque, context, callback, responseHeaders } = this\n\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    this.factory = null\n\n    let res\n\n    if (this.throwOnError && statusCode >= 400) {\n      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers\n      const contentType = parsedHeaders['content-type']\n      res = new PassThrough()\n\n      this.callback = null\n      this.runInAsyncScope(getResolveErrorBodyCallback, null,\n        { callback, body: res, contentType, statusCode, statusMessage, headers }\n      )\n    } else {\n      if (factory === null) {\n        return\n      }\n\n      res = this.runInAsyncScope(factory, null, {\n        statusCode,\n        headers,\n        opaque,\n        context\n      })\n\n      if (\n        !res ||\n        typeof res.write !== 'function' ||\n        typeof res.end !== 'function' ||\n        typeof res.on !== 'function'\n      ) {\n        throw new InvalidReturnValueError('expected Writable')\n      }\n\n      // TODO: Avoid finished. It registers an unnecessary amount of listeners.\n      finished(res, { readable: false }, (err) => {\n        const { callback, res, opaque, trailers, abort } = this\n\n        this.res = null\n        if (err || !res.readable) {\n          util.destroy(res, err)\n        }\n\n        this.callback = null\n        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })\n\n        if (err) {\n          abort()\n        }\n      })\n    }\n\n    res.on('drain', resume)\n\n    this.res = res\n\n    const needDrain = res.writableNeedDrain !== undefined\n      ? res.writableNeedDrain\n      : res._writableState && res._writableState.needDrain\n\n    return needDrain !== true\n  }\n\n  onData (chunk) {\n    const { res } = this\n\n    return res ? res.write(chunk) : true\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n\n    removeSignal(this)\n\n    if (!res) {\n      return\n    }\n\n    this.trailers = util.parseHeaders(trailers)\n\n    res.end()\n  }\n\n  onError (err) {\n    const { res, callback, opaque, body } = this\n\n    removeSignal(this)\n\n    this.factory = null\n\n    if (res) {\n      this.res = null\n      util.destroy(res, err)\n    } else if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n\n    if (body) {\n      this.body = null\n      util.destroy(body, err)\n    }\n  }\n}\n\nfunction stream (opts, factory, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      stream.call(this, opts, factory, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    this.dispatch(opts, new StreamHandler(opts, factory, callback))\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = stream\n","'use strict'\n\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = require('../core/errors')\nconst { AsyncResource } = require('async_hooks')\nconst util = require('../core/util')\nconst { addSignal, removeSignal } = require('./abort-signal')\nconst assert = require('assert')\n\nclass UpgradeHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    const { signal, opaque, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    super('UNDICI_UPGRADE')\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.callback = callback\n    this.abort = null\n    this.context = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = null\n  }\n\n  onHeaders () {\n    throw new SocketError('bad upgrade', null)\n  }\n\n  onUpgrade (statusCode, rawHeaders, socket) {\n    const { callback, opaque, context } = this\n\n    assert.strictEqual(statusCode, 101)\n\n    removeSignal(this)\n\n    this.callback = null\n    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n    this.runInAsyncScope(callback, null, null, {\n      headers,\n      socket,\n      opaque,\n      context\n    })\n  }\n\n  onError (err) {\n    const { callback, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n  }\n}\n\nfunction upgrade (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      upgrade.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    const upgradeHandler = new UpgradeHandler(opts, callback)\n    this.dispatch({\n      ...opts,\n      method: opts.method || 'GET',\n      upgrade: opts.protocol || 'Websocket'\n    }, upgradeHandler)\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = upgrade\n","'use strict'\n\nmodule.exports.request = require('./api-request')\nmodule.exports.stream = require('./api-stream')\nmodule.exports.pipeline = require('./api-pipeline')\nmodule.exports.upgrade = require('./api-upgrade')\nmodule.exports.connect = require('./api-connect')\n","// Ported from https://github.com/nodejs/undici/pull/907\n\n'use strict'\n\nconst assert = require('assert')\nconst { Readable } = require('stream')\nconst { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require('../core/errors')\nconst util = require('../core/util')\nconst { ReadableStreamFrom, toUSVString } = require('../core/util')\n\nlet Blob\n\nconst kConsume = Symbol('kConsume')\nconst kReading = Symbol('kReading')\nconst kBody = Symbol('kBody')\nconst kAbort = Symbol('abort')\nconst kContentType = Symbol('kContentType')\n\nconst noop = () => {}\n\nmodule.exports = class BodyReadable extends Readable {\n  constructor ({\n    resume,\n    abort,\n    contentType = '',\n    highWaterMark = 64 * 1024 // Same as nodejs fs streams.\n  }) {\n    super({\n      autoDestroy: true,\n      read: resume,\n      highWaterMark\n    })\n\n    this._readableState.dataEmitted = false\n\n    this[kAbort] = abort\n    this[kConsume] = null\n    this[kBody] = null\n    this[kContentType] = contentType\n\n    // Is stream being consumed through Readable API?\n    // This is an optimization so that we avoid checking\n    // for 'data' and 'readable' listeners in the hot path\n    // inside push().\n    this[kReading] = false\n  }\n\n  destroy (err) {\n    if (this.destroyed) {\n      // Node < 16\n      return this\n    }\n\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError()\n    }\n\n    if (err) {\n      this[kAbort]()\n    }\n\n    return super.destroy(err)\n  }\n\n  emit (ev, ...args) {\n    if (ev === 'data') {\n      // Node < 16.7\n      this._readableState.dataEmitted = true\n    } else if (ev === 'error') {\n      // Node < 16\n      this._readableState.errorEmitted = true\n    }\n    return super.emit(ev, ...args)\n  }\n\n  on (ev, ...args) {\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = true\n    }\n    return super.on(ev, ...args)\n  }\n\n  addListener (ev, ...args) {\n    return this.on(ev, ...args)\n  }\n\n  off (ev, ...args) {\n    const ret = super.off(ev, ...args)\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = (\n        this.listenerCount('data') > 0 ||\n        this.listenerCount('readable') > 0\n      )\n    }\n    return ret\n  }\n\n  removeListener (ev, ...args) {\n    return this.off(ev, ...args)\n  }\n\n  push (chunk) {\n    if (this[kConsume] && chunk !== null && this.readableLength === 0) {\n      consumePush(this[kConsume], chunk)\n      return this[kReading] ? super.push(chunk) : true\n    }\n    return super.push(chunk)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-text\n  async text () {\n    return consume(this, 'text')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-json\n  async json () {\n    return consume(this, 'json')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-blob\n  async blob () {\n    return consume(this, 'blob')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n  async arrayBuffer () {\n    return consume(this, 'arrayBuffer')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-formdata\n  async formData () {\n    // TODO: Implement.\n    throw new NotSupportedError()\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-bodyused\n  get bodyUsed () {\n    return util.isDisturbed(this)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-body\n  get body () {\n    if (!this[kBody]) {\n      this[kBody] = ReadableStreamFrom(this)\n      if (this[kConsume]) {\n        // TODO: Is this the best way to force a lock?\n        this[kBody].getReader() // Ensure stream is locked.\n        assert(this[kBody].locked)\n      }\n    }\n    return this[kBody]\n  }\n\n  dump (opts) {\n    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144\n    const signal = opts && opts.signal\n\n    if (signal) {\n      try {\n        if (typeof signal !== 'object' || !('aborted' in signal)) {\n          throw new InvalidArgumentError('signal must be an AbortSignal')\n        }\n        util.throwIfAborted(signal)\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n\n    if (this.closed) {\n      return Promise.resolve(null)\n    }\n\n    return new Promise((resolve, reject) => {\n      const signalListenerCleanup = signal\n        ? util.addAbortListener(signal, () => {\n          this.destroy()\n        })\n        : noop\n\n      this\n        .on('close', function () {\n          signalListenerCleanup()\n          if (signal && signal.aborted) {\n            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))\n          } else {\n            resolve(null)\n          }\n        })\n        .on('error', noop)\n        .on('data', function (chunk) {\n          limit -= chunk.length\n          if (limit <= 0) {\n            this.destroy()\n          }\n        })\n        .resume()\n    })\n  }\n}\n\n// https://streams.spec.whatwg.org/#readablestream-locked\nfunction isLocked (self) {\n  // Consume is an implicit lock.\n  return (self[kBody] && self[kBody].locked === true) || self[kConsume]\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction isUnusable (self) {\n  return util.isDisturbed(self) || isLocked(self)\n}\n\nasync function consume (stream, type) {\n  if (isUnusable(stream)) {\n    throw new TypeError('unusable')\n  }\n\n  assert(!stream[kConsume])\n\n  return new Promise((resolve, reject) => {\n    stream[kConsume] = {\n      type,\n      stream,\n      resolve,\n      reject,\n      length: 0,\n      body: []\n    }\n\n    stream\n      .on('error', function (err) {\n        consumeFinish(this[kConsume], err)\n      })\n      .on('close', function () {\n        if (this[kConsume].body !== null) {\n          consumeFinish(this[kConsume], new RequestAbortedError())\n        }\n      })\n\n    process.nextTick(consumeStart, stream[kConsume])\n  })\n}\n\nfunction consumeStart (consume) {\n  if (consume.body === null) {\n    return\n  }\n\n  const { _readableState: state } = consume.stream\n\n  for (const chunk of state.buffer) {\n    consumePush(consume, chunk)\n  }\n\n  if (state.endEmitted) {\n    consumeEnd(this[kConsume])\n  } else {\n    consume.stream.on('end', function () {\n      consumeEnd(this[kConsume])\n    })\n  }\n\n  consume.stream.resume()\n\n  while (consume.stream.read() != null) {\n    // Loop\n  }\n}\n\nfunction consumeEnd (consume) {\n  const { type, body, resolve, stream, length } = consume\n\n  try {\n    if (type === 'text') {\n      resolve(toUSVString(Buffer.concat(body)))\n    } else if (type === 'json') {\n      resolve(JSON.parse(Buffer.concat(body)))\n    } else if (type === 'arrayBuffer') {\n      const dst = new Uint8Array(length)\n\n      let pos = 0\n      for (const buf of body) {\n        dst.set(buf, pos)\n        pos += buf.byteLength\n      }\n\n      resolve(dst.buffer)\n    } else if (type === 'blob') {\n      if (!Blob) {\n        Blob = require('buffer').Blob\n      }\n      resolve(new Blob(body, { type: stream[kContentType] }))\n    }\n\n    consumeFinish(consume)\n  } catch (err) {\n    stream.destroy(err)\n  }\n}\n\nfunction consumePush (consume, chunk) {\n  consume.length += chunk.length\n  consume.body.push(chunk)\n}\n\nfunction consumeFinish (consume, err) {\n  if (consume.body === null) {\n    return\n  }\n\n  if (err) {\n    consume.reject(err)\n  } else {\n    consume.resolve()\n  }\n\n  consume.type = null\n  consume.stream = null\n  consume.resolve = null\n  consume.reject = null\n  consume.length = 0\n  consume.body = null\n}\n","const assert = require('assert')\nconst {\n  ResponseStatusCodeError\n} = require('../core/errors')\nconst { toUSVString } = require('../core/util')\n\nasync function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {\n  assert(body)\n\n  let chunks = []\n  let limit = 0\n\n  for await (const chunk of body) {\n    chunks.push(chunk)\n    limit += chunk.length\n    if (limit > 128 * 1024) {\n      chunks = null\n      break\n    }\n  }\n\n  if (statusCode === 204 || !contentType || !chunks) {\n    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n    return\n  }\n\n  try {\n    if (contentType.startsWith('application/json')) {\n      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n\n    if (contentType.startsWith('text/')) {\n      const payload = toUSVString(Buffer.concat(chunks))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n  } catch (err) {\n    // Process in a fallback if error\n  }\n\n  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n}\n\nmodule.exports = { getResolveErrorBodyCallback }\n","'use strict'\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Pool = require('./pool')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst { parseOrigin } = require('./core/util')\nconst kFactory = Symbol('factory')\n\nconst kOptions = Symbol('options')\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')\nconst kCurrentWeight = Symbol('kCurrentWeight')\nconst kIndex = Symbol('kIndex')\nconst kWeight = Symbol('kWeight')\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer')\nconst kErrorPenalty = Symbol('kErrorPenalty')\n\nfunction getGreatestCommonDivisor (a, b) {\n  if (b === 0) return a\n  return getGreatestCommonDivisor(b, a % b)\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass BalancedPool extends PoolBase {\n  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {\n    super()\n\n    this[kOptions] = opts\n    this[kIndex] = -1\n    this[kCurrentWeight] = 0\n\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15\n\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams]\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)\n      ? opts.interceptors.BalancedPool\n      : []\n    this[kFactory] = factory\n\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream)\n    }\n    this._updateBalancedPoolStats()\n  }\n\n  addUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    if (this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))) {\n      return this\n    }\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))\n\n    this[kAddClient](pool)\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])\n    })\n\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n      this._updateBalancedPoolStats()\n    })\n\n    pool.on('disconnect', (...args) => {\n      const err = args[2]\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n        this._updateBalancedPoolStats()\n      }\n    })\n\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer]\n    }\n\n    this._updateBalancedPoolStats()\n\n    return this\n  }\n\n  _updateBalancedPoolStats () {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)\n  }\n\n  removeUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    const pool = this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))\n\n    if (pool) {\n      this[kRemoveClient](pool)\n    }\n\n    return this\n  }\n\n  get upstreams () {\n    return this[kClients]\n      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)\n      .map((p) => p[kUrl].origin)\n  }\n\n  [kGetDispatcher] () {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError()\n    }\n\n    const dispatcher = this[kClients].find(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n\n    if (!dispatcher) {\n      return\n    }\n\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)\n\n    if (allClientsBusy) {\n      return\n    }\n\n    let counter = 0\n\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])\n\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length\n      const pool = this[kClients][this[kIndex]]\n\n      // find pool index with the largest weight\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex]\n      }\n\n      // decrease the current weight every `this[kClients].length`.\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]\n\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer]\n        }\n      }\n      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {\n        return pool\n      }\n    }\n\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]\n    this[kIndex] = maxWeightIndex\n    return this[kClients][maxWeightIndex]\n  }\n}\n\nmodule.exports = BalancedPool\n","'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { urlEquals, fieldValues: getFieldValues } = require('./util')\nconst { kEnumerableProperty, isDisturbed } = require('../core/util')\nconst { kHeadersList } = require('../core/symbols')\nconst { webidl } = require('../fetch/webidl')\nconst { Response, cloneResponse } = require('../fetch/response')\nconst { Request } = require('../fetch/request')\nconst { kState, kHeaders, kGuard, kRealm } = require('../fetch/symbols')\nconst { fetching } = require('../fetch/index')\nconst { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require('../fetch/util')\nconst assert = require('assert')\nconst { getGlobalDispatcher } = require('../global')\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */\n\nclass Cache {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */\n  #relevantRequestResponseList\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n\n    this.#relevantRequestResponseList = arguments[1]\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    const p = await this.matchAll(request, options)\n\n    if (p.length === 0) {\n      return\n    }\n\n    return p[0]\n  }\n\n  async matchAll (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') {\n        // 2.2.1\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 5.\n    // 5.1\n    const responses = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        responses.push(requestResponse[1])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        responses.push(requestResponse[1])\n      }\n    }\n\n    // 5.4\n    // We don't implement CORs so we don't need to loop over the responses, yay!\n\n    // 5.5.1\n    const responseList = []\n\n    // 5.5.2\n    for (const response of responses) {\n      // 5.5.2.1\n      const responseObject = new Response(response.body?.source ?? null)\n      const body = responseObject[kState].body\n      responseObject[kState] = response\n      responseObject[kState].body = body\n      responseObject[kHeaders][kHeadersList] = response.headersList\n      responseObject[kHeaders][kGuard] = 'immutable'\n\n      responseList.push(responseObject)\n    }\n\n    // 6.\n    return Object.freeze(responseList)\n  }\n\n  async add (request) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })\n\n    request = webidl.converters.RequestInfo(request)\n\n    // 1.\n    const requests = [request]\n\n    // 2.\n    const responseArrayPromise = this.addAll(requests)\n\n    // 3.\n    return await responseArrayPromise\n  }\n\n  async addAll (requests) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })\n\n    requests = webidl.converters['sequence<RequestInfo>'](requests)\n\n    // 1.\n    const responsePromises = []\n\n    // 2.\n    const requestList = []\n\n    // 3.\n    for (const request of requests) {\n      if (typeof request === 'string') {\n        continue\n      }\n\n      // 3.1\n      const r = request[kState]\n\n      // 3.2\n      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n        throw webidl.errors.exception({\n          header: 'Cache.addAll',\n          message: 'Expected http/s scheme when method is not GET.'\n        })\n      }\n    }\n\n    // 4.\n    /** @type {ReturnType<typeof fetching>[]} */\n    const fetchControllers = []\n\n    // 5.\n    for (const request of requests) {\n      // 5.1\n      const r = new Request(request)[kState]\n\n      // 5.2\n      if (!urlIsHttpHttpsScheme(r.url)) {\n        throw webidl.errors.exception({\n          header: 'Cache.addAll',\n          message: 'Expected http/s scheme.'\n        })\n      }\n\n      // 5.4\n      r.initiator = 'fetch'\n      r.destination = 'subresource'\n\n      // 5.5\n      requestList.push(r)\n\n      // 5.6\n      const responsePromise = createDeferredPromise()\n\n      // 5.7\n      fetchControllers.push(fetching({\n        request: r,\n        dispatcher: getGlobalDispatcher(),\n        processResponse (response) {\n          // 1.\n          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n            responsePromise.reject(webidl.errors.exception({\n              header: 'Cache.addAll',\n              message: 'Received an invalid status code or the request failed.'\n            }))\n          } else if (response.headersList.contains('vary')) { // 2.\n            // 2.1\n            const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n            // 2.2\n            for (const fieldValue of fieldValues) {\n              // 2.2.1\n              if (fieldValue === '*') {\n                responsePromise.reject(webidl.errors.exception({\n                  header: 'Cache.addAll',\n                  message: 'invalid vary field value'\n                }))\n\n                for (const controller of fetchControllers) {\n                  controller.abort()\n                }\n\n                return\n              }\n            }\n          }\n        },\n        processResponseEndOfBody (response) {\n          // 1.\n          if (response.aborted) {\n            responsePromise.reject(new DOMException('aborted', 'AbortError'))\n            return\n          }\n\n          // 2.\n          responsePromise.resolve(response)\n        }\n      }))\n\n      // 5.8\n      responsePromises.push(responsePromise.promise)\n    }\n\n    // 6.\n    const p = Promise.all(responsePromises)\n\n    // 7.\n    const responses = await p\n\n    // 7.1\n    const operations = []\n\n    // 7.2\n    let index = 0\n\n    // 7.3\n    for (const response of responses) {\n      // 7.3.1\n      /** @type {CacheBatchOperation} */\n      const operation = {\n        type: 'put', // 7.3.2\n        request: requestList[index], // 7.3.3\n        response // 7.3.4\n      }\n\n      operations.push(operation) // 7.3.5\n\n      index++ // 7.3.6\n    }\n\n    // 7.5\n    const cacheJobPromise = createDeferredPromise()\n\n    // 7.6.1\n    let errorData = null\n\n    // 7.6.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 7.6.3\n    queueMicrotask(() => {\n      // 7.6.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve(undefined)\n      } else {\n        // 7.6.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    // 7.7\n    return cacheJobPromise.promise\n  }\n\n  async put (request, response) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })\n\n    request = webidl.converters.RequestInfo(request)\n    response = webidl.converters.Response(response)\n\n    // 1.\n    let innerRequest = null\n\n    // 2.\n    if (request instanceof Request) {\n      innerRequest = request[kState]\n    } else { // 3.\n      innerRequest = new Request(request)[kState]\n    }\n\n    // 4.\n    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Expected an http/s scheme when method is not GET'\n      })\n    }\n\n    // 5.\n    const innerResponse = response[kState]\n\n    // 6.\n    if (innerResponse.status === 206) {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Got 206 status'\n      })\n    }\n\n    // 7.\n    if (innerResponse.headersList.contains('vary')) {\n      // 7.1.\n      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))\n\n      // 7.2.\n      for (const fieldValue of fieldValues) {\n        // 7.2.1\n        if (fieldValue === '*') {\n          throw webidl.errors.exception({\n            header: 'Cache.put',\n            message: 'Got * vary field value'\n          })\n        }\n      }\n    }\n\n    // 8.\n    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Response body is locked or disturbed'\n      })\n    }\n\n    // 9.\n    const clonedResponse = cloneResponse(innerResponse)\n\n    // 10.\n    const bodyReadPromise = createDeferredPromise()\n\n    // 11.\n    if (innerResponse.body != null) {\n      // 11.1\n      const stream = innerResponse.body.stream\n\n      // 11.2\n      const reader = stream.getReader()\n\n      // 11.3\n      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)\n    } else {\n      bodyReadPromise.resolve(undefined)\n    }\n\n    // 12.\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    // 13.\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'put', // 14.\n      request: innerRequest, // 15.\n      response: clonedResponse // 16.\n    }\n\n    // 17.\n    operations.push(operation)\n\n    // 19.\n    const bytes = await bodyReadPromise.promise\n\n    if (clonedResponse.body != null) {\n      clonedResponse.body.source = bytes\n    }\n\n    // 19.1\n    const cacheJobPromise = createDeferredPromise()\n\n    // 19.2.1\n    let errorData = null\n\n    // 19.2.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 19.2.3\n    queueMicrotask(() => {\n      // 19.2.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve()\n      } else { // 19.2.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  async delete (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    /**\n     * @type {Request}\n     */\n    let r = null\n\n    if (request instanceof Request) {\n      r = request[kState]\n\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return false\n      }\n    } else {\n      assert(typeof request === 'string')\n\n      r = new Request(request)[kState]\n    }\n\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'delete',\n      request: r,\n      options\n    }\n\n    operations.push(operation)\n\n    const cacheJobPromise = createDeferredPromise()\n\n    let errorData = null\n    let requestResponses\n\n    try {\n      requestResponses = this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    queueMicrotask(() => {\n      if (errorData === null) {\n        cacheJobPromise.resolve(!!requestResponses?.length)\n      } else {\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {readonly Request[]}\n   */\n  async keys (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      // 2.1\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') { // 2.2\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 4.\n    const promise = createDeferredPromise()\n\n    // 5.\n    // 5.1\n    const requests = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        // 5.2.1.1\n        requests.push(requestResponse[0])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        // 5.3.2.1\n        requests.push(requestResponse[0])\n      }\n    }\n\n    // 5.4\n    queueMicrotask(() => {\n      // 5.4.1\n      const requestList = []\n\n      // 5.4.2\n      for (const request of requests) {\n        const requestObject = new Request('https://a')\n        requestObject[kState] = request\n        requestObject[kHeaders][kHeadersList] = request.headersList\n        requestObject[kHeaders][kGuard] = 'immutable'\n        requestObject[kRealm] = request.client\n\n        // 5.4.2.1\n        requestList.push(requestObject)\n      }\n\n      // 5.4.3\n      promise.resolve(Object.freeze(requestList))\n    })\n\n    return promise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */\n  #batchCacheOperations (operations) {\n    // 1.\n    const cache = this.#relevantRequestResponseList\n\n    // 2.\n    const backupCache = [...cache]\n\n    // 3.\n    const addedItems = []\n\n    // 4.1\n    const resultList = []\n\n    try {\n      // 4.2\n      for (const operation of operations) {\n        // 4.2.1\n        if (operation.type !== 'delete' && operation.type !== 'put') {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'operation type does not match \"delete\" or \"put\"'\n          })\n        }\n\n        // 4.2.2\n        if (operation.type === 'delete' && operation.response != null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'delete operation should not have an associated response'\n          })\n        }\n\n        // 4.2.3\n        if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n          throw new DOMException('???', 'InvalidStateError')\n        }\n\n        // 4.2.4\n        let requestResponses\n\n        // 4.2.5\n        if (operation.type === 'delete') {\n          // 4.2.5.1\n          requestResponses = this.#queryCache(operation.request, operation.options)\n\n          // TODO: the spec is wrong, this is needed to pass WPTs\n          if (requestResponses.length === 0) {\n            return []\n          }\n\n          // 4.2.5.2\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.5.2.1\n            cache.splice(idx, 1)\n          }\n        } else if (operation.type === 'put') { // 4.2.6\n          // 4.2.6.1\n          if (operation.response == null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'put operation should have an associated response'\n            })\n          }\n\n          // 4.2.6.2\n          const r = operation.request\n\n          // 4.2.6.3\n          if (!urlIsHttpHttpsScheme(r.url)) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'expected http or https scheme'\n            })\n          }\n\n          // 4.2.6.4\n          if (r.method !== 'GET') {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'not get method'\n            })\n          }\n\n          // 4.2.6.5\n          if (operation.options != null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'options must not be defined'\n            })\n          }\n\n          // 4.2.6.6\n          requestResponses = this.#queryCache(operation.request)\n\n          // 4.2.6.7\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.6.7.1\n            cache.splice(idx, 1)\n          }\n\n          // 4.2.6.8\n          cache.push([operation.request, operation.response])\n\n          // 4.2.6.10\n          addedItems.push([operation.request, operation.response])\n        }\n\n        // 4.2.7\n        resultList.push([operation.request, operation.response])\n      }\n\n      // 4.3\n      return resultList\n    } catch (e) { // 5.\n      // 5.1\n      this.#relevantRequestResponseList.length = 0\n\n      // 5.2\n      this.#relevantRequestResponseList = backupCache\n\n      // 5.3\n      throw e\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */\n  #queryCache (requestQuery, options, targetStorage) {\n    /** @type {requestResponseList} */\n    const resultList = []\n\n    const storage = targetStorage ?? this.#relevantRequestResponseList\n\n    for (const requestResponse of storage) {\n      const [cachedRequest, cachedResponse] = requestResponse\n      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n        resultList.push(requestResponse)\n      }\n    }\n\n    return resultList\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */\n  #requestMatchesCachedItem (requestQuery, request, response = null, options) {\n    // if (options?.ignoreMethod === false && request.method === 'GET') {\n    //   return false\n    // }\n\n    const queryURL = new URL(requestQuery.url)\n\n    const cachedURL = new URL(request.url)\n\n    if (options?.ignoreSearch) {\n      cachedURL.search = ''\n\n      queryURL.search = ''\n    }\n\n    if (!urlEquals(queryURL, cachedURL, true)) {\n      return false\n    }\n\n    if (\n      response == null ||\n      options?.ignoreVary ||\n      !response.headersList.contains('vary')\n    ) {\n      return true\n    }\n\n    const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n    for (const fieldValue of fieldValues) {\n      if (fieldValue === '*') {\n        return false\n      }\n\n      const requestValue = request.headersList.get(fieldValue)\n      const queryValue = requestQuery.headersList.get(fieldValue)\n\n      // If one has the header and the other doesn't, or one has\n      // a different value than the other, return false\n      if (requestValue !== queryValue) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nObject.defineProperties(Cache.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'Cache',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  matchAll: kEnumerableProperty,\n  add: kEnumerableProperty,\n  addAll: kEnumerableProperty,\n  put: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nconst cacheQueryOptionConverters = [\n  {\n    key: 'ignoreSearch',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'ignoreMethod',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'ignoreVary',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n]\n\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)\n\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n  ...cacheQueryOptionConverters,\n  {\n    key: 'cacheName',\n    converter: webidl.converters.DOMString\n  }\n])\n\nwebidl.converters.Response = webidl.interfaceConverter(Response)\n\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(\n  webidl.converters.RequestInfo\n)\n\nmodule.exports = {\n  Cache\n}\n","'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { Cache } = require('./cache')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\n\nclass CacheStorage {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n   * @type {Map<string, import('./cache').requestResponseList}\n   */\n  #caches = new Map()\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.MultiCacheQueryOptions(options)\n\n    // 1.\n    if (options.cacheName != null) {\n      // 1.1.1.1\n      if (this.#caches.has(options.cacheName)) {\n        // 1.1.1.1.1\n        const cacheList = this.#caches.get(options.cacheName)\n        const cache = new Cache(kConstruct, cacheList)\n\n        return await cache.match(request, options)\n      }\n    } else { // 2.\n      // 2.2\n      for (const cacheList of this.#caches.values()) {\n        const cache = new Cache(kConstruct, cacheList)\n\n        // 2.2.1.2\n        const response = await cache.match(request, options)\n\n        if (response !== undefined) {\n          return response\n        }\n      }\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async has (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    // 2.1.1\n    // 2.2\n    return this.#caches.has(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */\n  async open (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    // 2.1\n    if (this.#caches.has(cacheName)) {\n      // await caches.open('v1') !== await caches.open('v1')\n\n      // 2.1.1\n      const cache = this.#caches.get(cacheName)\n\n      // 2.1.1.1\n      return new Cache(kConstruct, cache)\n    }\n\n    // 2.2\n    const cache = []\n\n    // 2.3\n    this.#caches.set(cacheName, cache)\n\n    // 2.4\n    return new Cache(kConstruct, cache)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async delete (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    return this.#caches.delete(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {string[]}\n   */\n  async keys () {\n    webidl.brandCheck(this, CacheStorage)\n\n    // 2.1\n    const keys = this.#caches.keys()\n\n    // 2.2\n    return [...keys]\n  }\n}\n\nObject.defineProperties(CacheStorage.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CacheStorage',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  has: kEnumerableProperty,\n  open: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nmodule.exports = {\n  CacheStorage\n}\n","'use strict'\n\nmodule.exports = {\n  kConstruct: require('../core/symbols').kConstruct\n}\n","'use strict'\n\nconst assert = require('assert')\nconst { URLSerializer } = require('../fetch/dataURL')\nconst { isValidHeaderName } = require('../fetch/util')\n\n/**\n * @see https://url.spec.whatwg.org/#concept-url-equals\n * @param {URL} A\n * @param {URL} B\n * @param {boolean | undefined} excludeFragment\n * @returns {boolean}\n */\nfunction urlEquals (A, B, excludeFragment = false) {\n  const serializedA = URLSerializer(A, excludeFragment)\n\n  const serializedB = URLSerializer(B, excludeFragment)\n\n  return serializedA === serializedB\n}\n\n/**\n * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262\n * @param {string} header\n */\nfunction fieldValues (header) {\n  assert(header !== null)\n\n  const values = []\n\n  for (let value of header.split(',')) {\n    value = value.trim()\n\n    if (!value.length) {\n      continue\n    } else if (!isValidHeaderName(value)) {\n      continue\n    }\n\n    values.push(value)\n  }\n\n  return values\n}\n\nmodule.exports = {\n  urlEquals,\n  fieldValues\n}\n","// @ts-check\n\n'use strict'\n\n/* global WebAssembly */\n\nconst assert = require('assert')\nconst net = require('net')\nconst http = require('http')\nconst { pipeline } = require('stream')\nconst util = require('./core/util')\nconst timers = require('./timers')\nconst Request = require('./core/request')\nconst DispatcherBase = require('./dispatcher-base')\nconst {\n  RequestContentLengthMismatchError,\n  ResponseContentLengthMismatchError,\n  InvalidArgumentError,\n  RequestAbortedError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  SocketError,\n  InformationalError,\n  BodyTimeoutError,\n  HTTPParserError,\n  ResponseExceededMaxSizeError,\n  ClientDestroyedError\n} = require('./core/errors')\nconst buildConnector = require('./core/connect')\nconst {\n  kUrl,\n  kReset,\n  kServerName,\n  kClient,\n  kBusy,\n  kParser,\n  kConnect,\n  kBlocking,\n  kResuming,\n  kRunning,\n  kPending,\n  kSize,\n  kWriting,\n  kQueue,\n  kConnected,\n  kConnecting,\n  kNeedDrain,\n  kNoRef,\n  kKeepAliveDefaultTimeout,\n  kHostHeader,\n  kPendingIdx,\n  kRunningIdx,\n  kError,\n  kPipelining,\n  kSocket,\n  kKeepAliveTimeoutValue,\n  kMaxHeadersSize,\n  kKeepAliveMaxTimeout,\n  kKeepAliveTimeoutThreshold,\n  kHeadersTimeout,\n  kBodyTimeout,\n  kStrictContentLength,\n  kConnector,\n  kMaxRedirections,\n  kMaxRequests,\n  kCounter,\n  kClose,\n  kDestroy,\n  kDispatch,\n  kInterceptors,\n  kLocalAddress,\n  kMaxResponseSize,\n  kHTTPConnVersion,\n  // HTTP2\n  kHost,\n  kHTTP2Session,\n  kHTTP2SessionState,\n  kHTTP2BuildRequest,\n  kHTTP2CopyHeaders,\n  kHTTP1BuildRequest\n} = require('./core/symbols')\n\n/** @type {import('http2')} */\nlet http2\ntry {\n  http2 = require('http2')\n} catch {\n  // @ts-ignore\n  http2 = { constants: {} }\n}\n\nconst {\n  constants: {\n    HTTP2_HEADER_AUTHORITY,\n    HTTP2_HEADER_METHOD,\n    HTTP2_HEADER_PATH,\n    HTTP2_HEADER_SCHEME,\n    HTTP2_HEADER_CONTENT_LENGTH,\n    HTTP2_HEADER_EXPECT,\n    HTTP2_HEADER_STATUS\n  }\n} = http2\n\n// Experimental\nlet h2ExperimentalWarned = false\n\nconst FastBuffer = Buffer[Symbol.species]\n\nconst kClosedResolve = Symbol('kClosedResolve')\n\nconst channels = {}\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')\n  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')\n  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')\n  channels.connected = diagnosticsChannel.channel('undici:client:connected')\n} catch {\n  channels.sendHeaders = { hasSubscribers: false }\n  channels.beforeConnect = { hasSubscribers: false }\n  channels.connectError = { hasSubscribers: false }\n  channels.connected = { hasSubscribers: false }\n}\n\n/**\n * @type {import('../types/client').default}\n */\nclass Client extends DispatcherBase {\n  /**\n   *\n   * @param {string|URL} url\n   * @param {import('../types/client').Client.Options} options\n   */\n  constructor (url, {\n    interceptors,\n    maxHeaderSize,\n    headersTimeout,\n    socketTimeout,\n    requestTimeout,\n    connectTimeout,\n    bodyTimeout,\n    idleTimeout,\n    keepAlive,\n    keepAliveTimeout,\n    maxKeepAliveTimeout,\n    keepAliveMaxTimeout,\n    keepAliveTimeoutThreshold,\n    socketPath,\n    pipelining,\n    tls,\n    strictContentLength,\n    maxCachedSessions,\n    maxRedirections,\n    connect,\n    maxRequestsPerClient,\n    localAddress,\n    maxResponseSize,\n    autoSelectFamily,\n    autoSelectFamilyAttemptTimeout,\n    // h2\n    allowH2,\n    maxConcurrentStreams\n  } = {}) {\n    super()\n\n    if (keepAlive !== undefined) {\n      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')\n    }\n\n    if (socketTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')\n    }\n\n    if (requestTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')\n    }\n\n    if (idleTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')\n    }\n\n    if (maxKeepAliveTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')\n    }\n\n    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n      throw new InvalidArgumentError('invalid maxHeaderSize')\n    }\n\n    if (socketPath != null && typeof socketPath !== 'string') {\n      throw new InvalidArgumentError('invalid socketPath')\n    }\n\n    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n      throw new InvalidArgumentError('invalid connectTimeout')\n    }\n\n    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeout')\n    }\n\n    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')\n    }\n\n    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')\n    }\n\n    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')\n    }\n\n    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')\n    }\n\n    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {\n      throw new InvalidArgumentError('localAddress must be valid string IP address')\n    }\n\n    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n      throw new InvalidArgumentError('maxResponseSize must be a positive number')\n    }\n\n    if (\n      autoSelectFamilyAttemptTimeout != null &&\n      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)\n    ) {\n      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')\n    }\n\n    // h2\n    if (allowH2 != null && typeof allowH2 !== 'boolean') {\n      throw new InvalidArgumentError('allowH2 must be a valid boolean value')\n    }\n\n    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {\n      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')\n    }\n\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),\n        ...connect\n      })\n    }\n\n    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)\n      ? interceptors.Client\n      : [createRedirectInterceptor({ maxRedirections })]\n    this[kUrl] = util.parseOrigin(url)\n    this[kConnector] = connect\n    this[kSocket] = null\n    this[kPipelining] = pipelining != null ? pipelining : 1\n    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize\n    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout\n    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout\n    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold\n    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]\n    this[kServerName] = null\n    this[kLocalAddress] = localAddress != null ? localAddress : null\n    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming\n    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming\n    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\\r\\n`\n    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3\n    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3\n    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength\n    this[kMaxRedirections] = maxRedirections\n    this[kMaxRequests] = maxRequestsPerClient\n    this[kClosedResolve] = null\n    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1\n    this[kHTTPConnVersion] = 'h1'\n\n    // HTTP/2\n    this[kHTTP2Session] = null\n    this[kHTTP2SessionState] = !allowH2\n      ? null\n      : {\n        // streams: null, // Fixed queue of streams - For future support of `push`\n          openStreams: 0, // Keep track of them to decide wether or not unref the session\n          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server\n        }\n    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`\n\n    // kQueue is built up of 3 sections separated by\n    // the kRunningIdx and kPendingIdx indices.\n    // |   complete   |   running   |   pending   |\n    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length\n    // kRunningIdx points to the first running element.\n    // kPendingIdx points to the first pending element.\n    // This implements a fast queue with an amortized\n    // time of O(1).\n\n    this[kQueue] = []\n    this[kRunningIdx] = 0\n    this[kPendingIdx] = 0\n  }\n\n  get pipelining () {\n    return this[kPipelining]\n  }\n\n  set pipelining (value) {\n    this[kPipelining] = value\n    resume(this, true)\n  }\n\n  get [kPending] () {\n    return this[kQueue].length - this[kPendingIdx]\n  }\n\n  get [kRunning] () {\n    return this[kPendingIdx] - this[kRunningIdx]\n  }\n\n  get [kSize] () {\n    return this[kQueue].length - this[kRunningIdx]\n  }\n\n  get [kConnected] () {\n    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed\n  }\n\n  get [kBusy] () {\n    const socket = this[kSocket]\n    return (\n      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||\n      (this[kSize] >= (this[kPipelining] || 1)) ||\n      this[kPending] > 0\n    )\n  }\n\n  /* istanbul ignore: only used for test */\n  [kConnect] (cb) {\n    connect(this)\n    this.once('connect', cb)\n  }\n\n  [kDispatch] (opts, handler) {\n    const origin = opts.origin || this[kUrl].origin\n\n    const request = this[kHTTPConnVersion] === 'h2'\n      ? Request[kHTTP2BuildRequest](origin, opts, handler)\n      : Request[kHTTP1BuildRequest](origin, opts, handler)\n\n    this[kQueue].push(request)\n    if (this[kResuming]) {\n      // Do nothing.\n    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n      // Wait a tick in case stream/iterator is ended in the same tick.\n      this[kResuming] = 1\n      process.nextTick(resume, this)\n    } else {\n      resume(this, true)\n    }\n\n    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n      this[kNeedDrain] = 2\n    }\n\n    return this[kNeedDrain] < 2\n  }\n\n  async [kClose] () {\n    // TODO: for H2 we need to gracefully flush the remaining enqueued\n    // request and close each stream.\n    return new Promise((resolve) => {\n      if (!this[kSize]) {\n        resolve(null)\n      } else {\n        this[kClosedResolve] = resolve\n      }\n    })\n  }\n\n  async [kDestroy] (err) {\n    return new Promise((resolve) => {\n      const requests = this[kQueue].splice(this[kPendingIdx])\n      for (let i = 0; i < requests.length; i++) {\n        const request = requests[i]\n        errorRequest(this, request, err)\n      }\n\n      const callback = () => {\n        if (this[kClosedResolve]) {\n          // TODO (fix): Should we error here with ClientDestroyedError?\n          this[kClosedResolve]()\n          this[kClosedResolve] = null\n        }\n        resolve()\n      }\n\n      if (this[kHTTP2Session] != null) {\n        util.destroy(this[kHTTP2Session], err)\n        this[kHTTP2Session] = null\n        this[kHTTP2SessionState] = null\n      }\n\n      if (!this[kSocket]) {\n        queueMicrotask(callback)\n      } else {\n        util.destroy(this[kSocket].on('close', callback), err)\n      }\n\n      resume(this)\n    })\n  }\n}\n\nfunction onHttp2SessionError (err) {\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')\n\n  this[kSocket][kError] = err\n\n  onError(this[kClient], err)\n}\n\nfunction onHttp2FrameError (type, code, id) {\n  const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`)\n\n  if (id === 0) {\n    this[kSocket][kError] = err\n    onError(this[kClient], err)\n  }\n}\n\nfunction onHttp2SessionEnd () {\n  util.destroy(this, new SocketError('other side closed'))\n  util.destroy(this[kSocket], new SocketError('other side closed'))\n}\n\nfunction onHTTP2GoAway (code) {\n  const client = this[kClient]\n  const err = new InformationalError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`)\n  client[kSocket] = null\n  client[kHTTP2Session] = null\n\n  if (client.destroyed) {\n    assert(this[kPending] === 0)\n\n    // Fail entire queue.\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(this, request, err)\n    }\n  } else if (client[kRunning] > 0) {\n    // Fail head of pipeline.\n    const request = client[kQueue][client[kRunningIdx]]\n    client[kQueue][client[kRunningIdx]++] = null\n\n    errorRequest(client, request, err)\n  }\n\n  client[kPendingIdx] = client[kRunningIdx]\n\n  assert(client[kRunning] === 0)\n\n  client.emit('disconnect',\n    client[kUrl],\n    [client],\n    err\n  )\n\n  resume(client)\n}\n\nconst constants = require('./llhttp/constants')\nconst createRedirectInterceptor = require('./interceptor/redirectInterceptor')\nconst EMPTY_BUF = Buffer.alloc(0)\n\nasync function lazyllhttp () {\n  const llhttpWasmData = process.env.JEST_WORKER_ID ? require('./llhttp/llhttp-wasm.js') : undefined\n\n  let mod\n  try {\n    mod = await WebAssembly.compile(Buffer.from(require('./llhttp/llhttp_simd-wasm.js'), 'base64'))\n  } catch (e) {\n    /* istanbul ignore next */\n\n    // We could check if the error was caused by the simd option not\n    // being enabled, but the occurring of this other error\n    // * https://github.com/emscripten-core/emscripten/issues/11495\n    // got me to remove that check to avoid breaking Node 12.\n    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require('./llhttp/llhttp-wasm.js'), 'base64'))\n  }\n\n  return await WebAssembly.instantiate(mod, {\n    env: {\n      /* eslint-disable camelcase */\n\n      wasm_on_url: (p, at, len) => {\n        /* istanbul ignore next */\n        return 0\n      },\n      wasm_on_status: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_message_begin: (p) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onMessageBegin() || 0\n      },\n      wasm_on_header_field: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_header_value: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0\n      },\n      wasm_on_body: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_message_complete: (p) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onMessageComplete() || 0\n      }\n\n      /* eslint-enable camelcase */\n    }\n  })\n}\n\nlet llhttpInstance = null\nlet llhttpPromise = lazyllhttp()\nllhttpPromise.catch()\n\nlet currentParser = null\nlet currentBufferRef = null\nlet currentBufferSize = 0\nlet currentBufferPtr = null\n\nconst TIMEOUT_HEADERS = 1\nconst TIMEOUT_BODY = 2\nconst TIMEOUT_IDLE = 3\n\nclass Parser {\n  constructor (client, socket, { exports }) {\n    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)\n\n    this.llhttp = exports\n    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)\n    this.client = client\n    this.socket = socket\n    this.timeout = null\n    this.timeoutValue = null\n    this.timeoutType = null\n    this.statusCode = null\n    this.statusText = ''\n    this.upgrade = false\n    this.headers = []\n    this.headersSize = 0\n    this.headersMaxSize = client[kMaxHeadersSize]\n    this.shouldKeepAlive = false\n    this.paused = false\n    this.resume = this.resume.bind(this)\n\n    this.bytesRead = 0\n\n    this.keepAlive = ''\n    this.contentLength = ''\n    this.connection = ''\n    this.maxResponseSize = client[kMaxResponseSize]\n  }\n\n  setTimeout (value, type) {\n    this.timeoutType = type\n    if (value !== this.timeoutValue) {\n      timers.clearTimeout(this.timeout)\n      if (value) {\n        this.timeout = timers.setTimeout(onParserTimeout, value, this)\n        // istanbul ignore else: only for jest\n        if (this.timeout.unref) {\n          this.timeout.unref()\n        }\n      } else {\n        this.timeout = null\n      }\n      this.timeoutValue = value\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n  }\n\n  resume () {\n    if (this.socket.destroyed || !this.paused) {\n      return\n    }\n\n    assert(this.ptr != null)\n    assert(currentParser == null)\n\n    this.llhttp.llhttp_resume(this.ptr)\n\n    assert(this.timeoutType === TIMEOUT_BODY)\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    this.paused = false\n    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.\n    this.readMore()\n  }\n\n  readMore () {\n    while (!this.paused && this.ptr) {\n      const chunk = this.socket.read()\n      if (chunk === null) {\n        break\n      }\n      this.execute(chunk)\n    }\n  }\n\n  execute (data) {\n    assert(this.ptr != null)\n    assert(currentParser == null)\n    assert(!this.paused)\n\n    const { socket, llhttp } = this\n\n    if (data.length > currentBufferSize) {\n      if (currentBufferPtr) {\n        llhttp.free(currentBufferPtr)\n      }\n      currentBufferSize = Math.ceil(data.length / 4096) * 4096\n      currentBufferPtr = llhttp.malloc(currentBufferSize)\n    }\n\n    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)\n\n    // Call `execute` on the wasm parser.\n    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,\n    // and finally the length of bytes to parse.\n    // The return value is an error code or `constants.ERROR.OK`.\n    try {\n      let ret\n\n      try {\n        currentBufferRef = data\n        currentParser = this\n        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)\n        /* eslint-disable-next-line no-useless-catch */\n      } catch (err) {\n        /* istanbul ignore next: difficult to make a test case for */\n        throw err\n      } finally {\n        currentParser = null\n        currentBufferRef = null\n      }\n\n      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr\n\n      if (ret === constants.ERROR.PAUSED_UPGRADE) {\n        this.onUpgrade(data.slice(offset))\n      } else if (ret === constants.ERROR.PAUSED) {\n        this.paused = true\n        socket.unshift(data.slice(offset))\n      } else if (ret !== constants.ERROR.OK) {\n        const ptr = llhttp.llhttp_get_error_reason(this.ptr)\n        let message = ''\n        /* istanbul ignore else: difficult to make a test case for */\n        if (ptr) {\n          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)\n          message =\n            'Response does not match the HTTP/1.1 protocol (' +\n            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +\n            ')'\n        }\n        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))\n      }\n    } catch (err) {\n      util.destroy(socket, err)\n    }\n  }\n\n  destroy () {\n    assert(this.ptr != null)\n    assert(currentParser == null)\n\n    this.llhttp.llhttp_free(this.ptr)\n    this.ptr = null\n\n    timers.clearTimeout(this.timeout)\n    this.timeout = null\n    this.timeoutValue = null\n    this.timeoutType = null\n\n    this.paused = false\n  }\n\n  onStatus (buf) {\n    this.statusText = buf.toString()\n  }\n\n  onMessageBegin () {\n    const { socket, client } = this\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    if (!request) {\n      return -1\n    }\n  }\n\n  onHeaderField (buf) {\n    const len = this.headers.length\n\n    if ((len & 1) === 0) {\n      this.headers.push(buf)\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])\n    }\n\n    this.trackHeader(buf.length)\n  }\n\n  onHeaderValue (buf) {\n    let len = this.headers.length\n\n    if ((len & 1) === 1) {\n      this.headers.push(buf)\n      len += 1\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])\n    }\n\n    const key = this.headers[len - 2]\n    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {\n      this.keepAlive += buf.toString()\n    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {\n      this.connection += buf.toString()\n    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {\n      this.contentLength += buf.toString()\n    }\n\n    this.trackHeader(buf.length)\n  }\n\n  trackHeader (len) {\n    this.headersSize += len\n    if (this.headersSize >= this.headersMaxSize) {\n      util.destroy(this.socket, new HeadersOverflowError())\n    }\n  }\n\n  onUpgrade (head) {\n    const { upgrade, client, socket, headers, statusCode } = this\n\n    assert(upgrade)\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert(!socket.destroyed)\n    assert(socket === client[kSocket])\n    assert(!this.paused)\n    assert(request.upgrade || request.method === 'CONNECT')\n\n    this.statusCode = null\n    this.statusText = ''\n    this.shouldKeepAlive = null\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    socket.unshift(head)\n\n    socket[kParser].destroy()\n    socket[kParser] = null\n\n    socket[kClient] = null\n    socket[kError] = null\n    socket\n      .removeListener('error', onSocketError)\n      .removeListener('readable', onSocketReadable)\n      .removeListener('end', onSocketEnd)\n      .removeListener('close', onSocketClose)\n\n    client[kSocket] = null\n    client[kQueue][client[kRunningIdx]++] = null\n    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))\n\n    try {\n      request.onUpgrade(statusCode, headers, socket)\n    } catch (err) {\n      util.destroy(socket, err)\n    }\n\n    resume(client)\n  }\n\n  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {\n    const { client, socket, headers, statusText } = this\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (!request) {\n      return -1\n    }\n\n    assert(!this.upgrade)\n    assert(this.statusCode < 200)\n\n    if (statusCode === 100) {\n      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))\n      return -1\n    }\n\n    /* this can only happen if server is misbehaving */\n    if (upgrade && !request.upgrade) {\n      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))\n      return -1\n    }\n\n    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)\n\n    this.statusCode = statusCode\n    this.shouldKeepAlive = (\n      shouldKeepAlive ||\n      // Override llhttp value which does not allow keepAlive for HEAD.\n      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')\n    )\n\n    if (this.statusCode >= 200) {\n      const bodyTimeout = request.bodyTimeout != null\n        ? request.bodyTimeout\n        : client[kBodyTimeout]\n      this.setTimeout(bodyTimeout, TIMEOUT_BODY)\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    if (request.method === 'CONNECT') {\n      assert(client[kRunning] === 1)\n      this.upgrade = true\n      return 2\n    }\n\n    if (upgrade) {\n      assert(client[kRunning] === 1)\n      this.upgrade = true\n      return 2\n    }\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    if (this.shouldKeepAlive && client[kPipelining]) {\n      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null\n\n      if (keepAliveTimeout != null) {\n        const timeout = Math.min(\n          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],\n          client[kKeepAliveMaxTimeout]\n        )\n        if (timeout <= 0) {\n          socket[kReset] = true\n        } else {\n          client[kKeepAliveTimeoutValue] = timeout\n        }\n      } else {\n        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]\n      }\n    } else {\n      // Stop more requests from being dispatched.\n      socket[kReset] = true\n    }\n\n    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false\n\n    if (request.aborted) {\n      return -1\n    }\n\n    if (request.method === 'HEAD') {\n      return 1\n    }\n\n    if (statusCode < 200) {\n      return 1\n    }\n\n    if (socket[kBlocking]) {\n      socket[kBlocking] = false\n      resume(client)\n    }\n\n    return pause ? constants.ERROR.PAUSED : 0\n  }\n\n  onBody (buf) {\n    const { client, socket, statusCode, maxResponseSize } = this\n\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    assert(statusCode >= 200)\n\n    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n      util.destroy(socket, new ResponseExceededMaxSizeError())\n      return -1\n    }\n\n    this.bytesRead += buf.length\n\n    if (request.onData(buf) === false) {\n      return constants.ERROR.PAUSED\n    }\n  }\n\n  onMessageComplete () {\n    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this\n\n    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n      return -1\n    }\n\n    if (upgrade) {\n      return\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert(statusCode >= 100)\n\n    this.statusCode = null\n    this.statusText = ''\n    this.bytesRead = 0\n    this.contentLength = ''\n    this.keepAlive = ''\n    this.connection = ''\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    if (statusCode < 200) {\n      return\n    }\n\n    /* istanbul ignore next: should be handled by llhttp? */\n    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n      util.destroy(socket, new ResponseContentLengthMismatchError())\n      return -1\n    }\n\n    request.onComplete(headers)\n\n    client[kQueue][client[kRunningIdx]++] = null\n\n    if (socket[kWriting]) {\n      assert.strictEqual(client[kRunning], 0)\n      // Response completed before request.\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (!shouldKeepAlive) {\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (socket[kReset] && client[kRunning] === 0) {\n      // Destroy socket once all requests have completed.\n      // The request at the tail of the pipeline is the one\n      // that requested reset and no further requests should\n      // have been queued since then.\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (client[kPipelining] === 1) {\n      // We must wait a full event loop cycle to reuse this socket to make sure\n      // that non-spec compliant servers are not closing the connection even if they\n      // said they won't.\n      setImmediate(resume, client)\n    } else {\n      resume(client)\n    }\n  }\n}\n\nfunction onParserTimeout (parser) {\n  const { socket, timeoutType, client } = parser\n\n  /* istanbul ignore else */\n  if (timeoutType === TIMEOUT_HEADERS) {\n    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n      assert(!parser.paused, 'cannot be paused while waiting for headers')\n      util.destroy(socket, new HeadersTimeoutError())\n    }\n  } else if (timeoutType === TIMEOUT_BODY) {\n    if (!parser.paused) {\n      util.destroy(socket, new BodyTimeoutError())\n    }\n  } else if (timeoutType === TIMEOUT_IDLE) {\n    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])\n    util.destroy(socket, new InformationalError('socket idle timeout'))\n  }\n}\n\nfunction onSocketReadable () {\n  const { [kParser]: parser } = this\n  if (parser) {\n    parser.readMore()\n  }\n}\n\nfunction onSocketError (err) {\n  const { [kClient]: client, [kParser]: parser } = this\n\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')\n\n  if (client[kHTTPConnVersion] !== 'h2') {\n    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded\n    // to the user.\n    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so for as a valid response.\n      parser.onMessageComplete()\n      return\n    }\n  }\n\n  this[kError] = err\n\n  onError(this[kClient], err)\n}\n\nfunction onError (client, err) {\n  if (\n    client[kRunning] === 0 &&\n    err.code !== 'UND_ERR_INFO' &&\n    err.code !== 'UND_ERR_SOCKET'\n  ) {\n    // Error is not caused by running request and not a recoverable\n    // socket error.\n\n    assert(client[kPendingIdx] === client[kRunningIdx])\n\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(client, request, err)\n    }\n    assert(client[kSize] === 0)\n  }\n}\n\nfunction onSocketEnd () {\n  const { [kParser]: parser, [kClient]: client } = this\n\n  if (client[kHTTPConnVersion] !== 'h2') {\n    if (parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete()\n      return\n    }\n  }\n\n  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))\n}\n\nfunction onSocketClose () {\n  const { [kClient]: client, [kParser]: parser } = this\n\n  if (client[kHTTPConnVersion] === 'h1' && parser) {\n    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete()\n    }\n\n    this[kParser].destroy()\n    this[kParser] = null\n  }\n\n  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))\n\n  client[kSocket] = null\n\n  if (client.destroyed) {\n    assert(client[kPending] === 0)\n\n    // Fail entire queue.\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(client, request, err)\n    }\n  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {\n    // Fail head of pipeline.\n    const request = client[kQueue][client[kRunningIdx]]\n    client[kQueue][client[kRunningIdx]++] = null\n\n    errorRequest(client, request, err)\n  }\n\n  client[kPendingIdx] = client[kRunningIdx]\n\n  assert(client[kRunning] === 0)\n\n  client.emit('disconnect', client[kUrl], [client], err)\n\n  resume(client)\n}\n\nasync function connect (client) {\n  assert(!client[kConnecting])\n  assert(!client[kSocket])\n\n  let { host, hostname, protocol, port } = client[kUrl]\n\n  // Resolve ipv6\n  if (hostname[0] === '[') {\n    const idx = hostname.indexOf(']')\n\n    assert(idx !== -1)\n    const ip = hostname.substring(1, idx)\n\n    assert(net.isIP(ip))\n    hostname = ip\n  }\n\n  client[kConnecting] = true\n\n  if (channels.beforeConnect.hasSubscribers) {\n    channels.beforeConnect.publish({\n      connectParams: {\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      },\n      connector: client[kConnector]\n    })\n  }\n\n  try {\n    const socket = await new Promise((resolve, reject) => {\n      client[kConnector]({\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      }, (err, socket) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(socket)\n        }\n      })\n    })\n\n    if (client.destroyed) {\n      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())\n      return\n    }\n\n    client[kConnecting] = false\n\n    assert(socket)\n\n    const isH2 = socket.alpnProtocol === 'h2'\n    if (isH2) {\n      if (!h2ExperimentalWarned) {\n        h2ExperimentalWarned = true\n        process.emitWarning('H2 support is experimental, expect them to change at any time.', {\n          code: 'UNDICI-H2'\n        })\n      }\n\n      const session = http2.connect(client[kUrl], {\n        createConnection: () => socket,\n        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams\n      })\n\n      client[kHTTPConnVersion] = 'h2'\n      session[kClient] = client\n      session[kSocket] = socket\n      session.on('error', onHttp2SessionError)\n      session.on('frameError', onHttp2FrameError)\n      session.on('end', onHttp2SessionEnd)\n      session.on('goaway', onHTTP2GoAway)\n      session.on('close', onSocketClose)\n      session.unref()\n\n      client[kHTTP2Session] = session\n      socket[kHTTP2Session] = session\n    } else {\n      if (!llhttpInstance) {\n        llhttpInstance = await llhttpPromise\n        llhttpPromise = null\n      }\n\n      socket[kNoRef] = false\n      socket[kWriting] = false\n      socket[kReset] = false\n      socket[kBlocking] = false\n      socket[kParser] = new Parser(client, socket, llhttpInstance)\n    }\n\n    socket[kCounter] = 0\n    socket[kMaxRequests] = client[kMaxRequests]\n    socket[kClient] = client\n    socket[kError] = null\n\n    socket\n      .on('error', onSocketError)\n      .on('readable', onSocketReadable)\n      .on('end', onSocketEnd)\n      .on('close', onSocketClose)\n\n    client[kSocket] = socket\n\n    if (channels.connected.hasSubscribers) {\n      channels.connected.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        socket\n      })\n    }\n    client.emit('connect', client[kUrl], [client])\n  } catch (err) {\n    if (client.destroyed) {\n      return\n    }\n\n    client[kConnecting] = false\n\n    if (channels.connectError.hasSubscribers) {\n      channels.connectError.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        error: err\n      })\n    }\n\n    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n      assert(client[kRunning] === 0)\n      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {\n        const request = client[kQueue][client[kPendingIdx]++]\n        errorRequest(client, request, err)\n      }\n    } else {\n      onError(client, err)\n    }\n\n    client.emit('connectionError', client[kUrl], [client], err)\n  }\n\n  resume(client)\n}\n\nfunction emitDrain (client) {\n  client[kNeedDrain] = 0\n  client.emit('drain', client[kUrl], [client])\n}\n\nfunction resume (client, sync) {\n  if (client[kResuming] === 2) {\n    return\n  }\n\n  client[kResuming] = 2\n\n  _resume(client, sync)\n  client[kResuming] = 0\n\n  if (client[kRunningIdx] > 256) {\n    client[kQueue].splice(0, client[kRunningIdx])\n    client[kPendingIdx] -= client[kRunningIdx]\n    client[kRunningIdx] = 0\n  }\n}\n\nfunction _resume (client, sync) {\n  while (true) {\n    if (client.destroyed) {\n      assert(client[kPending] === 0)\n      return\n    }\n\n    if (client[kClosedResolve] && !client[kSize]) {\n      client[kClosedResolve]()\n      client[kClosedResolve] = null\n      return\n    }\n\n    const socket = client[kSocket]\n\n    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {\n      if (client[kSize] === 0) {\n        if (!socket[kNoRef] && socket.unref) {\n          socket.unref()\n          socket[kNoRef] = true\n        }\n      } else if (socket[kNoRef] && socket.ref) {\n        socket.ref()\n        socket[kNoRef] = false\n      }\n\n      if (client[kSize] === 0) {\n        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {\n          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)\n        }\n      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n          const request = client[kQueue][client[kRunningIdx]]\n          const headersTimeout = request.headersTimeout != null\n            ? request.headersTimeout\n            : client[kHeadersTimeout]\n          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)\n        }\n      }\n    }\n\n    if (client[kBusy]) {\n      client[kNeedDrain] = 2\n    } else if (client[kNeedDrain] === 2) {\n      if (sync) {\n        client[kNeedDrain] = 1\n        process.nextTick(emitDrain, client)\n      } else {\n        emitDrain(client)\n      }\n      continue\n    }\n\n    if (client[kPending] === 0) {\n      return\n    }\n\n    if (client[kRunning] >= (client[kPipelining] || 1)) {\n      return\n    }\n\n    const request = client[kQueue][client[kPendingIdx]]\n\n    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {\n      if (client[kRunning] > 0) {\n        return\n      }\n\n      client[kServerName] = request.servername\n\n      if (socket && socket.servername !== request.servername) {\n        util.destroy(socket, new InformationalError('servername changed'))\n        return\n      }\n    }\n\n    if (client[kConnecting]) {\n      return\n    }\n\n    if (!socket && !client[kHTTP2Session]) {\n      connect(client)\n      return\n    }\n\n    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n      return\n    }\n\n    if (client[kRunning] > 0 && !request.idempotent) {\n      // Non-idempotent request cannot be retried.\n      // Ensure that no other requests are inflight and\n      // could cause failure.\n      return\n    }\n\n    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {\n      // Don't dispatch an upgrade until all preceding requests have completed.\n      // A misbehaving server might upgrade the connection before all pipelined\n      // request has completed.\n      return\n    }\n\n    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&\n      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {\n      // Request with stream or iterator body can error while other requests\n      // are inflight and indirectly error those as well.\n      // Ensure this doesn't happen by waiting for inflight\n      // to complete before dispatching.\n\n      // Request with stream or iterator body cannot be retried.\n      // Ensure that no other requests are inflight and\n      // could cause failure.\n      return\n    }\n\n    if (!request.aborted && write(client, request)) {\n      client[kPendingIdx]++\n    } else {\n      client[kQueue].splice(client[kPendingIdx], 1)\n    }\n  }\n}\n\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength (method) {\n  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'\n}\n\nfunction write (client, request) {\n  if (client[kHTTPConnVersion] === 'h2') {\n    writeH2(client, client[kHTTP2Session], request)\n    return\n  }\n\n  const { body, method, path, host, upgrade, headers, blocking, reset } = request\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = (\n    method === 'PUT' ||\n    method === 'POST' ||\n    method === 'PATCH'\n  )\n\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0)\n  }\n\n  const bodyLength = util.bodyLength(body)\n\n  let contentLength = bodyLength\n\n  if (contentLength === null) {\n    contentLength = request.contentLength\n  }\n\n  if (contentLength === 0 && !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      errorRequest(client, request, new RequestContentLengthMismatchError())\n      return false\n    }\n\n    process.emitWarning(new RequestContentLengthMismatchError())\n  }\n\n  const socket = client[kSocket]\n\n  try {\n    request.onConnect((err) => {\n      if (request.aborted || request.completed) {\n        return\n      }\n\n      errorRequest(client, request, err || new RequestAbortedError())\n\n      util.destroy(socket, new InformationalError('aborted'))\n    })\n  } catch (err) {\n    errorRequest(client, request, err)\n  }\n\n  if (request.aborted) {\n    return false\n  }\n\n  if (method === 'HEAD') {\n    // https://github.com/mcollina/undici/issues/258\n    // Close after a HEAD request to interop with misbehaving servers\n    // that may send a body in the response.\n\n    socket[kReset] = true\n  }\n\n  if (upgrade || method === 'CONNECT') {\n    // On CONNECT or upgrade, block pipeline from dispatching further\n    // requests on this connection.\n\n    socket[kReset] = true\n  }\n\n  if (reset != null) {\n    socket[kReset] = reset\n  }\n\n  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n    socket[kReset] = true\n  }\n\n  if (blocking) {\n    socket[kBlocking] = true\n  }\n\n  let header = `${method} ${path} HTTP/1.1\\r\\n`\n\n  if (typeof host === 'string') {\n    header += `host: ${host}\\r\\n`\n  } else {\n    header += client[kHostHeader]\n  }\n\n  if (upgrade) {\n    header += `connection: upgrade\\r\\nupgrade: ${upgrade}\\r\\n`\n  } else if (client[kPipelining] && !socket[kReset]) {\n    header += 'connection: keep-alive\\r\\n'\n  } else {\n    header += 'connection: close\\r\\n'\n  }\n\n  if (headers) {\n    header += headers\n  }\n\n  if (channels.sendHeaders.hasSubscribers) {\n    channels.sendHeaders.publish({ request, headers: header, socket })\n  }\n\n  /* istanbul ignore else: assertion */\n  if (!body || bodyLength === 0) {\n    if (contentLength === 0) {\n      socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1')\n    } else {\n      assert(contentLength === null, 'no body must not have content length')\n      socket.write(`${header}\\r\\n`, 'latin1')\n    }\n    request.onRequestSent()\n  } else if (util.isBuffer(body)) {\n    assert(contentLength === body.byteLength, 'buffer body must have content length')\n\n    socket.cork()\n    socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n    socket.write(body)\n    socket.uncork()\n    request.onBodySent(body)\n    request.onRequestSent()\n    if (!expectsPayload) {\n      socket[kReset] = true\n    }\n  } else if (util.isBlobLike(body)) {\n    if (typeof body.stream === 'function') {\n      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })\n    } else {\n      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })\n    }\n  } else if (util.isStream(body)) {\n    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })\n  } else if (util.isIterable(body)) {\n    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })\n  } else {\n    assert(false)\n  }\n\n  return true\n}\n\nfunction writeH2 (client, session, request) {\n  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request\n\n  let headers\n  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())\n  else headers = reqHeaders\n\n  if (upgrade) {\n    errorRequest(client, request, new Error('Upgrade not supported for H2'))\n    return false\n  }\n\n  try {\n    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?\n    request.onConnect((err) => {\n      if (request.aborted || request.completed) {\n        return\n      }\n\n      errorRequest(client, request, err || new RequestAbortedError())\n    })\n  } catch (err) {\n    errorRequest(client, request, err)\n  }\n\n  if (request.aborted) {\n    return false\n  }\n\n  /** @type {import('node:http2').ClientHttp2Stream} */\n  let stream\n  const h2State = client[kHTTP2SessionState]\n\n  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]\n  headers[HTTP2_HEADER_METHOD] = method\n\n  if (method === 'CONNECT') {\n    session.ref()\n    // we are already connected, streams are pending, first request\n    // will create a new stream. We trigger a request to create the stream and wait until\n    // `ready` event is triggered\n    // We disabled endStream to allow the user to write to the stream\n    stream = session.request(headers, { endStream: false, signal })\n\n    if (stream.id && !stream.pending) {\n      request.onUpgrade(null, null, stream)\n      ++h2State.openStreams\n    } else {\n      stream.once('ready', () => {\n        request.onUpgrade(null, null, stream)\n        ++h2State.openStreams\n      })\n    }\n\n    stream.once('close', () => {\n      h2State.openStreams -= 1\n      // TODO(HTTP/2): unref only if current streams count is 0\n      if (h2State.openStreams === 0) session.unref()\n    })\n\n    return true\n  }\n\n  // https://tools.ietf.org/html/rfc7540#section-8.3\n  // :path and :scheme headers must be omited when sending CONNECT\n\n  headers[HTTP2_HEADER_PATH] = path\n  headers[HTTP2_HEADER_SCHEME] = 'https'\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = (\n    method === 'PUT' ||\n    method === 'POST' ||\n    method === 'PATCH'\n  )\n\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0)\n  }\n\n  let contentLength = util.bodyLength(body)\n\n  if (contentLength == null) {\n    contentLength = request.contentLength\n  }\n\n  if (contentLength === 0 || !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      errorRequest(client, request, new RequestContentLengthMismatchError())\n      return false\n    }\n\n    process.emitWarning(new RequestContentLengthMismatchError())\n  }\n\n  if (contentLength != null) {\n    assert(body, 'no body must not have content length')\n    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`\n  }\n\n  session.ref()\n\n  const shouldEndStream = method === 'GET' || method === 'HEAD'\n  if (expectContinue) {\n    headers[HTTP2_HEADER_EXPECT] = '100-continue'\n    stream = session.request(headers, { endStream: shouldEndStream, signal })\n\n    stream.once('continue', writeBodyH2)\n  } else {\n    stream = session.request(headers, {\n      endStream: shouldEndStream,\n      signal\n    })\n    writeBodyH2()\n  }\n\n  // Increment counter as we have new several streams open\n  ++h2State.openStreams\n\n  stream.once('response', headers => {\n    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers\n\n    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {\n      stream.pause()\n    }\n  })\n\n  stream.once('end', () => {\n    request.onComplete([])\n  })\n\n  stream.on('data', (chunk) => {\n    if (request.onData(chunk) === false) {\n      stream.pause()\n    }\n  })\n\n  stream.once('close', () => {\n    h2State.openStreams -= 1\n    // TODO(HTTP/2): unref only if current streams count is 0\n    if (h2State.openStreams === 0) {\n      session.unref()\n    }\n  })\n\n  stream.once('error', function (err) {\n    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n      h2State.streams -= 1\n      util.destroy(stream, err)\n    }\n  })\n\n  stream.once('frameError', (type, code) => {\n    const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`)\n    errorRequest(client, request, err)\n\n    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n      h2State.streams -= 1\n      util.destroy(stream, err)\n    }\n  })\n\n  // stream.on('aborted', () => {\n  //   // TODO(HTTP/2): Support aborted\n  // })\n\n  // stream.on('timeout', () => {\n  //   // TODO(HTTP/2): Support timeout\n  // })\n\n  // stream.on('push', headers => {\n  //   // TODO(HTTP/2): Suppor push\n  // })\n\n  // stream.on('trailers', headers => {\n  //   // TODO(HTTP/2): Support trailers\n  // })\n\n  return true\n\n  function writeBodyH2 () {\n    /* istanbul ignore else: assertion */\n    if (!body) {\n      request.onRequestSent()\n    } else if (util.isBuffer(body)) {\n      assert(contentLength === body.byteLength, 'buffer body must have content length')\n      stream.cork()\n      stream.write(body)\n      stream.uncork()\n      stream.end()\n      request.onBodySent(body)\n      request.onRequestSent()\n    } else if (util.isBlobLike(body)) {\n      if (typeof body.stream === 'function') {\n        writeIterable({\n          client,\n          request,\n          contentLength,\n          h2stream: stream,\n          expectsPayload,\n          body: body.stream(),\n          socket: client[kSocket],\n          header: ''\n        })\n      } else {\n        writeBlob({\n          body,\n          client,\n          request,\n          contentLength,\n          expectsPayload,\n          h2stream: stream,\n          header: '',\n          socket: client[kSocket]\n        })\n      }\n    } else if (util.isStream(body)) {\n      writeStream({\n        body,\n        client,\n        request,\n        contentLength,\n        expectsPayload,\n        socket: client[kSocket],\n        h2stream: stream,\n        header: ''\n      })\n    } else if (util.isIterable(body)) {\n      writeIterable({\n        body,\n        client,\n        request,\n        contentLength,\n        expectsPayload,\n        header: '',\n        h2stream: stream,\n        socket: client[kSocket]\n      })\n    } else {\n      assert(false)\n    }\n  }\n}\n\nfunction writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')\n\n  if (client[kHTTPConnVersion] === 'h2') {\n    // For HTTP/2, is enough to pipe the stream\n    const pipe = pipeline(\n      body,\n      h2stream,\n      (err) => {\n        if (err) {\n          util.destroy(body, err)\n          util.destroy(h2stream, err)\n        } else {\n          request.onRequestSent()\n        }\n      }\n    )\n\n    pipe.on('data', onPipeData)\n    pipe.once('end', () => {\n      pipe.removeListener('data', onPipeData)\n      util.destroy(pipe)\n    })\n\n    function onPipeData (chunk) {\n      request.onBodySent(chunk)\n    }\n\n    return\n  }\n\n  let finished = false\n\n  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })\n\n  const onData = function (chunk) {\n    if (finished) {\n      return\n    }\n\n    try {\n      if (!writer.write(chunk) && this.pause) {\n        this.pause()\n      }\n    } catch (err) {\n      util.destroy(this, err)\n    }\n  }\n  const onDrain = function () {\n    if (finished) {\n      return\n    }\n\n    if (body.resume) {\n      body.resume()\n    }\n  }\n  const onAbort = function () {\n    if (finished) {\n      return\n    }\n    const err = new RequestAbortedError()\n    queueMicrotask(() => onFinished(err))\n  }\n  const onFinished = function (err) {\n    if (finished) {\n      return\n    }\n\n    finished = true\n\n    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))\n\n    socket\n      .off('drain', onDrain)\n      .off('error', onFinished)\n\n    body\n      .removeListener('data', onData)\n      .removeListener('end', onFinished)\n      .removeListener('error', onFinished)\n      .removeListener('close', onAbort)\n\n    if (!err) {\n      try {\n        writer.end()\n      } catch (er) {\n        err = er\n      }\n    }\n\n    writer.destroy(err)\n\n    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {\n      util.destroy(body, err)\n    } else {\n      util.destroy(body)\n    }\n  }\n\n  body\n    .on('data', onData)\n    .on('end', onFinished)\n    .on('error', onFinished)\n    .on('close', onAbort)\n\n  if (body.resume) {\n    body.resume()\n  }\n\n  socket\n    .on('drain', onDrain)\n    .on('error', onFinished)\n}\n\nasync function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength === body.size, 'blob body must have content length')\n\n  const isH2 = client[kHTTPConnVersion] === 'h2'\n  try {\n    if (contentLength != null && contentLength !== body.size) {\n      throw new RequestContentLengthMismatchError()\n    }\n\n    const buffer = Buffer.from(await body.arrayBuffer())\n\n    if (isH2) {\n      h2stream.cork()\n      h2stream.write(buffer)\n      h2stream.uncork()\n    } else {\n      socket.cork()\n      socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n      socket.write(buffer)\n      socket.uncork()\n    }\n\n    request.onBodySent(buffer)\n    request.onRequestSent()\n\n    if (!expectsPayload) {\n      socket[kReset] = true\n    }\n\n    resume(client)\n  } catch (err) {\n    util.destroy(isH2 ? h2stream : socket, err)\n  }\n}\n\nasync function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')\n\n  let callback = null\n  function onDrain () {\n    if (callback) {\n      const cb = callback\n      callback = null\n      cb()\n    }\n  }\n\n  const waitForDrain = () => new Promise((resolve, reject) => {\n    assert(callback === null)\n\n    if (socket[kError]) {\n      reject(socket[kError])\n    } else {\n      callback = resolve\n    }\n  })\n\n  if (client[kHTTPConnVersion] === 'h2') {\n    h2stream\n      .on('close', onDrain)\n      .on('drain', onDrain)\n\n    try {\n      // It's up to the user to somehow abort the async iterable.\n      for await (const chunk of body) {\n        if (socket[kError]) {\n          throw socket[kError]\n        }\n\n        const res = h2stream.write(chunk)\n        request.onBodySent(chunk)\n        if (!res) {\n          await waitForDrain()\n        }\n      }\n    } catch (err) {\n      h2stream.destroy(err)\n    } finally {\n      request.onRequestSent()\n      h2stream.end()\n      h2stream\n        .off('close', onDrain)\n        .off('drain', onDrain)\n    }\n\n    return\n  }\n\n  socket\n    .on('close', onDrain)\n    .on('drain', onDrain)\n\n  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })\n  try {\n    // It's up to the user to somehow abort the async iterable.\n    for await (const chunk of body) {\n      if (socket[kError]) {\n        throw socket[kError]\n      }\n\n      if (!writer.write(chunk)) {\n        await waitForDrain()\n      }\n    }\n\n    writer.end()\n  } catch (err) {\n    writer.destroy(err)\n  } finally {\n    socket\n      .off('close', onDrain)\n      .off('drain', onDrain)\n  }\n}\n\nclass AsyncWriter {\n  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {\n    this.socket = socket\n    this.request = request\n    this.contentLength = contentLength\n    this.client = client\n    this.bytesWritten = 0\n    this.expectsPayload = expectsPayload\n    this.header = header\n\n    socket[kWriting] = true\n  }\n\n  write (chunk) {\n    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this\n\n    if (socket[kError]) {\n      throw socket[kError]\n    }\n\n    if (socket.destroyed) {\n      return false\n    }\n\n    const len = Buffer.byteLength(chunk)\n    if (!len) {\n      return true\n    }\n\n    // We should defer writing chunks.\n    if (contentLength !== null && bytesWritten + len > contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError()\n      }\n\n      process.emitWarning(new RequestContentLengthMismatchError())\n    }\n\n    socket.cork()\n\n    if (bytesWritten === 0) {\n      if (!expectsPayload) {\n        socket[kReset] = true\n      }\n\n      if (contentLength === null) {\n        socket.write(`${header}transfer-encoding: chunked\\r\\n`, 'latin1')\n      } else {\n        socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n      }\n    }\n\n    if (contentLength === null) {\n      socket.write(`\\r\\n${len.toString(16)}\\r\\n`, 'latin1')\n    }\n\n    this.bytesWritten += len\n\n    const ret = socket.write(chunk)\n\n    socket.uncork()\n\n    request.onBodySent(chunk)\n\n    if (!ret) {\n      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n        // istanbul ignore else: only for jest\n        if (socket[kParser].timeout.refresh) {\n          socket[kParser].timeout.refresh()\n        }\n      }\n    }\n\n    return ret\n  }\n\n  end () {\n    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this\n    request.onRequestSent()\n\n    socket[kWriting] = false\n\n    if (socket[kError]) {\n      throw socket[kError]\n    }\n\n    if (socket.destroyed) {\n      return\n    }\n\n    if (bytesWritten === 0) {\n      if (expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD send a Content-Length in a request message when\n        // no Transfer-Encoding is sent and the request method defines a meaning\n        // for an enclosed payload body.\n\n        socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1')\n      } else {\n        socket.write(`${header}\\r\\n`, 'latin1')\n      }\n    } else if (contentLength === null) {\n      socket.write('\\r\\n0\\r\\n\\r\\n', 'latin1')\n    }\n\n    if (contentLength !== null && bytesWritten !== contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError()\n      } else {\n        process.emitWarning(new RequestContentLengthMismatchError())\n      }\n    }\n\n    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n      // istanbul ignore else: only for jest\n      if (socket[kParser].timeout.refresh) {\n        socket[kParser].timeout.refresh()\n      }\n    }\n\n    resume(client)\n  }\n\n  destroy (err) {\n    const { socket, client } = this\n\n    socket[kWriting] = false\n\n    if (err) {\n      assert(client[kRunning] <= 1, 'pipeline should only contain this request')\n      util.destroy(socket, err)\n    }\n  }\n}\n\nfunction errorRequest (client, request, err) {\n  try {\n    request.onError(err)\n    assert(request.aborted)\n  } catch (err) {\n    client.emit('error', err)\n  }\n}\n\nmodule.exports = Client\n","'use strict'\n\n/* istanbul ignore file: only for Node 12 */\n\nconst { kConnected, kSize } = require('../core/symbols')\n\nclass CompatWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value[kConnected] === 0 && this.value[kSize] === 0\n      ? undefined\n      : this.value\n  }\n}\n\nclass CompatFinalizer {\n  constructor (finalizer) {\n    this.finalizer = finalizer\n  }\n\n  register (dispatcher, key) {\n    if (dispatcher.on) {\n      dispatcher.on('disconnect', () => {\n        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n          this.finalizer(key)\n        }\n      })\n    }\n  }\n}\n\nmodule.exports = function () {\n  // FIXME: remove workaround when the Node bug is fixed\n  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n  if (process.env.NODE_V8_COVERAGE) {\n    return {\n      WeakRef: CompatWeakRef,\n      FinalizationRegistry: CompatFinalizer\n    }\n  }\n  return {\n    WeakRef: global.WeakRef || CompatWeakRef,\n    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer\n  }\n}\n","'use strict'\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size\nconst maxAttributeValueSize = 1024\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size\nconst maxNameValuePairSize = 4096\n\nmodule.exports = {\n  maxAttributeValueSize,\n  maxNameValuePairSize\n}\n","'use strict'\n\nconst { parseSetCookie } = require('./parse')\nconst { stringify, getHeadersList } = require('./util')\nconst { webidl } = require('../fetch/webidl')\nconst { Headers } = require('../fetch/headers')\n\n/**\n * @typedef {Object} Cookie\n * @property {string} name\n * @property {string} value\n * @property {Date|number|undefined} expires\n * @property {number|undefined} maxAge\n * @property {string|undefined} domain\n * @property {string|undefined} path\n * @property {boolean|undefined} secure\n * @property {boolean|undefined} httpOnly\n * @property {'Strict'|'Lax'|'None'} sameSite\n * @property {string[]} unparsed\n */\n\n/**\n * @param {Headers} headers\n * @returns {Record<string, string>}\n */\nfunction getCookies (headers) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  const cookie = headers.get('cookie')\n  const out = {}\n\n  if (!cookie) {\n    return out\n  }\n\n  for (const piece of cookie.split(';')) {\n    const [name, ...value] = piece.split('=')\n\n    out[name.trim()] = value.join('=')\n  }\n\n  return out\n}\n\n/**\n * @param {Headers} headers\n * @param {string} name\n * @param {{ path?: string, domain?: string }|undefined} attributes\n * @returns {void}\n */\nfunction deleteCookie (headers, name, attributes) {\n  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  name = webidl.converters.DOMString(name)\n  attributes = webidl.converters.DeleteCookieAttributes(attributes)\n\n  // Matches behavior of\n  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278\n  setCookie(headers, {\n    name,\n    value: '',\n    expires: new Date(0),\n    ...attributes\n  })\n}\n\n/**\n * @param {Headers} headers\n * @returns {Cookie[]}\n */\nfunction getSetCookies (headers) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  const cookies = getHeadersList(headers).cookies\n\n  if (!cookies) {\n    return []\n  }\n\n  // In older versions of undici, cookies is a list of name:value.\n  return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair))\n}\n\n/**\n * @param {Headers} headers\n * @param {Cookie} cookie\n * @returns {void}\n */\nfunction setCookie (headers, cookie) {\n  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  cookie = webidl.converters.Cookie(cookie)\n\n  const str = stringify(cookie)\n\n  if (str) {\n    headers.append('Set-Cookie', stringify(cookie))\n  }\n}\n\nwebidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'path',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'domain',\n    defaultValue: null\n  }\n])\n\nwebidl.converters.Cookie = webidl.dictionaryConverter([\n  {\n    converter: webidl.converters.DOMString,\n    key: 'name'\n  },\n  {\n    converter: webidl.converters.DOMString,\n    key: 'value'\n  },\n  {\n    converter: webidl.nullableConverter((value) => {\n      if (typeof value === 'number') {\n        return webidl.converters['unsigned long long'](value)\n      }\n\n      return new Date(value)\n    }),\n    key: 'expires',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters['long long']),\n    key: 'maxAge',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'domain',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'path',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.boolean),\n    key: 'secure',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.boolean),\n    key: 'httpOnly',\n    defaultValue: null\n  },\n  {\n    converter: webidl.converters.USVString,\n    key: 'sameSite',\n    allowedValues: ['Strict', 'Lax', 'None']\n  },\n  {\n    converter: webidl.sequenceConverter(webidl.converters.DOMString),\n    key: 'unparsed',\n    defaultValue: []\n  }\n])\n\nmodule.exports = {\n  getCookies,\n  deleteCookie,\n  getSetCookies,\n  setCookie\n}\n","'use strict'\n\nconst { maxNameValuePairSize, maxAttributeValueSize } = require('./constants')\nconst { isCTLExcludingHtab } = require('./util')\nconst { collectASequenceOfCodePointsFast } = require('../fetch/dataURL')\nconst assert = require('assert')\n\n/**\n * @description Parses the field-value attributes of a set-cookie header string.\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} header\n * @returns if the header is invalid, null will be returned\n */\nfunction parseSetCookie (header) {\n  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F\n  //    character (CTL characters excluding HTAB): Abort these steps and\n  //    ignore the set-cookie-string entirely.\n  if (isCTLExcludingHtab(header)) {\n    return null\n  }\n\n  let nameValuePair = ''\n  let unparsedAttributes = ''\n  let name = ''\n  let value = ''\n\n  // 2. If the set-cookie-string contains a %x3B (\";\") character:\n  if (header.includes(';')) {\n    // 1. The name-value-pair string consists of the characters up to,\n    //    but not including, the first %x3B (\";\"), and the unparsed-\n    //    attributes consist of the remainder of the set-cookie-string\n    //    (including the %x3B (\";\") in question).\n    const position = { position: 0 }\n\n    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)\n    unparsedAttributes = header.slice(position.position)\n  } else {\n    // Otherwise:\n\n    // 1. The name-value-pair string consists of all the characters\n    //    contained in the set-cookie-string, and the unparsed-\n    //    attributes is the empty string.\n    nameValuePair = header\n  }\n\n  // 3. If the name-value-pair string lacks a %x3D (\"=\") character, then\n  //    the name string is empty, and the value string is the value of\n  //    name-value-pair.\n  if (!nameValuePair.includes('=')) {\n    value = nameValuePair\n  } else {\n    //    Otherwise, the name string consists of the characters up to, but\n    //    not including, the first %x3D (\"=\") character, and the (possibly\n    //    empty) value string consists of the characters after the first\n    //    %x3D (\"=\") character.\n    const position = { position: 0 }\n    name = collectASequenceOfCodePointsFast(\n      '=',\n      nameValuePair,\n      position\n    )\n    value = nameValuePair.slice(position.position + 1)\n  }\n\n  // 4. Remove any leading or trailing WSP characters from the name\n  //    string and the value string.\n  name = name.trim()\n  value = value.trim()\n\n  // 5. If the sum of the lengths of the name string and the value string\n  //    is more than 4096 octets, abort these steps and ignore the set-\n  //    cookie-string entirely.\n  if (name.length + value.length > maxNameValuePairSize) {\n    return null\n  }\n\n  // 6. The cookie-name is the name string, and the cookie-value is the\n  //    value string.\n  return {\n    name, value, ...parseUnparsedAttributes(unparsedAttributes)\n  }\n}\n\n/**\n * Parses the remaining attributes of a set-cookie header\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} unparsedAttributes\n * @param {[Object.<string, unknown>]={}} cookieAttributeList\n */\nfunction parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {\n  // 1. If the unparsed-attributes string is empty, skip the rest of\n  //    these steps.\n  if (unparsedAttributes.length === 0) {\n    return cookieAttributeList\n  }\n\n  // 2. Discard the first character of the unparsed-attributes (which\n  //    will be a %x3B (\";\") character).\n  assert(unparsedAttributes[0] === ';')\n  unparsedAttributes = unparsedAttributes.slice(1)\n\n  let cookieAv = ''\n\n  // 3. If the remaining unparsed-attributes contains a %x3B (\";\")\n  //    character:\n  if (unparsedAttributes.includes(';')) {\n    // 1. Consume the characters of the unparsed-attributes up to, but\n    //    not including, the first %x3B (\";\") character.\n    cookieAv = collectASequenceOfCodePointsFast(\n      ';',\n      unparsedAttributes,\n      { position: 0 }\n    )\n    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)\n  } else {\n    // Otherwise:\n\n    // 1. Consume the remainder of the unparsed-attributes.\n    cookieAv = unparsedAttributes\n    unparsedAttributes = ''\n  }\n\n  // Let the cookie-av string be the characters consumed in this step.\n\n  let attributeName = ''\n  let attributeValue = ''\n\n  // 4. If the cookie-av string contains a %x3D (\"=\") character:\n  if (cookieAv.includes('=')) {\n    // 1. The (possibly empty) attribute-name string consists of the\n    //    characters up to, but not including, the first %x3D (\"=\")\n    //    character, and the (possibly empty) attribute-value string\n    //    consists of the characters after the first %x3D (\"=\")\n    //    character.\n    const position = { position: 0 }\n\n    attributeName = collectASequenceOfCodePointsFast(\n      '=',\n      cookieAv,\n      position\n    )\n    attributeValue = cookieAv.slice(position.position + 1)\n  } else {\n    // Otherwise:\n\n    // 1. The attribute-name string consists of the entire cookie-av\n    //    string, and the attribute-value string is empty.\n    attributeName = cookieAv\n  }\n\n  // 5. Remove any leading or trailing WSP characters from the attribute-\n  //    name string and the attribute-value string.\n  attributeName = attributeName.trim()\n  attributeValue = attributeValue.trim()\n\n  // 6. If the attribute-value is longer than 1024 octets, ignore the\n  //    cookie-av string and return to Step 1 of this algorithm.\n  if (attributeValue.length > maxAttributeValueSize) {\n    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n  }\n\n  // 7. Process the attribute-name and attribute-value according to the\n  //    requirements in the following subsections.  (Notice that\n  //    attributes with unrecognized attribute-names are ignored.)\n  const attributeNameLowercase = attributeName.toLowerCase()\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1\n  // If the attribute-name case-insensitively matches the string\n  // \"Expires\", the user agent MUST process the cookie-av as follows.\n  if (attributeNameLowercase === 'expires') {\n    // 1. Let the expiry-time be the result of parsing the attribute-value\n    //    as cookie-date (see Section 5.1.1).\n    const expiryTime = new Date(attributeValue)\n\n    // 2. If the attribute-value failed to parse as a cookie date, ignore\n    //    the cookie-av.\n\n    cookieAttributeList.expires = expiryTime\n  } else if (attributeNameLowercase === 'max-age') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2\n    // If the attribute-name case-insensitively matches the string \"Max-\n    // Age\", the user agent MUST process the cookie-av as follows.\n\n    // 1. If the first character of the attribute-value is not a DIGIT or a\n    //    \"-\" character, ignore the cookie-av.\n    const charCode = attributeValue.charCodeAt(0)\n\n    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n    }\n\n    // 2. If the remainder of attribute-value contains a non-DIGIT\n    //    character, ignore the cookie-av.\n    if (!/^\\d+$/.test(attributeValue)) {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n    }\n\n    // 3. Let delta-seconds be the attribute-value converted to an integer.\n    const deltaSeconds = Number(attributeValue)\n\n    // 4. Let cookie-age-limit be the maximum age of the cookie (which\n    //    SHOULD be 400 days or less, see Section 4.1.2.2).\n\n    // 5. Set delta-seconds to the smaller of its present value and cookie-\n    //    age-limit.\n    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)\n\n    // 6. If delta-seconds is less than or equal to zero (0), let expiry-\n    //    time be the earliest representable date and time.  Otherwise, let\n    //    the expiry-time be the current date and time plus delta-seconds\n    //    seconds.\n    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds\n\n    // 7. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Max-Age and an attribute-value of expiry-time.\n    cookieAttributeList.maxAge = deltaSeconds\n  } else if (attributeNameLowercase === 'domain') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3\n    // If the attribute-name case-insensitively matches the string \"Domain\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. Let cookie-domain be the attribute-value.\n    let cookieDomain = attributeValue\n\n    // 2. If cookie-domain starts with %x2E (\".\"), let cookie-domain be\n    //    cookie-domain without its leading %x2E (\".\").\n    if (cookieDomain[0] === '.') {\n      cookieDomain = cookieDomain.slice(1)\n    }\n\n    // 3. Convert the cookie-domain to lower case.\n    cookieDomain = cookieDomain.toLowerCase()\n\n    // 4. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Domain and an attribute-value of cookie-domain.\n    cookieAttributeList.domain = cookieDomain\n  } else if (attributeNameLowercase === 'path') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4\n    // If the attribute-name case-insensitively matches the string \"Path\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. If the attribute-value is empty or if the first character of the\n    //    attribute-value is not %x2F (\"/\"):\n    let cookiePath = ''\n    if (attributeValue.length === 0 || attributeValue[0] !== '/') {\n      // 1. Let cookie-path be the default-path.\n      cookiePath = '/'\n    } else {\n      // Otherwise:\n\n      // 1. Let cookie-path be the attribute-value.\n      cookiePath = attributeValue\n    }\n\n    // 2. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Path and an attribute-value of cookie-path.\n    cookieAttributeList.path = cookiePath\n  } else if (attributeNameLowercase === 'secure') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5\n    // If the attribute-name case-insensitively matches the string \"Secure\",\n    // the user agent MUST append an attribute to the cookie-attribute-list\n    // with an attribute-name of Secure and an empty attribute-value.\n\n    cookieAttributeList.secure = true\n  } else if (attributeNameLowercase === 'httponly') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6\n    // If the attribute-name case-insensitively matches the string\n    // \"HttpOnly\", the user agent MUST append an attribute to the cookie-\n    // attribute-list with an attribute-name of HttpOnly and an empty\n    // attribute-value.\n\n    cookieAttributeList.httpOnly = true\n  } else if (attributeNameLowercase === 'samesite') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7\n    // If the attribute-name case-insensitively matches the string\n    // \"SameSite\", the user agent MUST process the cookie-av as follows:\n\n    // 1. Let enforcement be \"Default\".\n    let enforcement = 'Default'\n\n    const attributeValueLowercase = attributeValue.toLowerCase()\n    // 2. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"None\", set enforcement to \"None\".\n    if (attributeValueLowercase.includes('none')) {\n      enforcement = 'None'\n    }\n\n    // 3. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Strict\", set enforcement to \"Strict\".\n    if (attributeValueLowercase.includes('strict')) {\n      enforcement = 'Strict'\n    }\n\n    // 4. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Lax\", set enforcement to \"Lax\".\n    if (attributeValueLowercase.includes('lax')) {\n      enforcement = 'Lax'\n    }\n\n    // 5. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of \"SameSite\" and an attribute-value of\n    //    enforcement.\n    cookieAttributeList.sameSite = enforcement\n  } else {\n    cookieAttributeList.unparsed ??= []\n\n    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)\n  }\n\n  // 8. Return to Step 1 of this algorithm.\n  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n}\n\nmodule.exports = {\n  parseSetCookie,\n  parseUnparsedAttributes\n}\n","'use strict'\n\nconst assert = require('assert')\nconst { kHeadersList } = require('../core/symbols')\n\nfunction isCTLExcludingHtab (value) {\n  if (value.length === 0) {\n    return false\n  }\n\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code >= 0x00 || code <= 0x08) ||\n      (code >= 0x0A || code <= 0x1F) ||\n      code === 0x7F\n    ) {\n      return false\n    }\n  }\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName (name) {\n  for (const char of name) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code <= 0x20 || code > 0x7F) ||\n      char === '(' ||\n      char === ')' ||\n      char === '>' ||\n      char === '<' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}'\n    ) {\n      throw new Error('Invalid cookie name')\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue (value) {\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31)\n      code === 0x22 ||\n      code === 0x2C ||\n      code === 0x3B ||\n      code === 0x5C ||\n      code > 0x7E // non-ascii\n    ) {\n      throw new Error('Invalid header value')\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath (path) {\n  for (const char of path) {\n    const code = char.charCodeAt(0)\n\n    if (code < 0x21 || char === ';') {\n      throw new Error('Invalid cookie path')\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain (domain) {\n  if (\n    domain.startsWith('-') ||\n    domain.endsWith('.') ||\n    domain.endsWith('-')\n  ) {\n    throw new Error('Invalid cookie domain')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate (date) {\n  if (typeof date === 'number') {\n    date = new Date(date)\n  }\n\n  const days = [\n    'Sun', 'Mon', 'Tue', 'Wed',\n    'Thu', 'Fri', 'Sat'\n  ]\n\n  const months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ]\n\n  const dayName = days[date.getUTCDay()]\n  const day = date.getUTCDate().toString().padStart(2, '0')\n  const month = months[date.getUTCMonth()]\n  const year = date.getUTCFullYear()\n  const hour = date.getUTCHours().toString().padStart(2, '0')\n  const minute = date.getUTCMinutes().toString().padStart(2, '0')\n  const second = date.getUTCSeconds().toString().padStart(2, '0')\n\n  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge (maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify (cookie) {\n  if (cookie.name.length === 0) {\n    return null\n  }\n\n  validateCookieName(cookie.name)\n  validateCookieValue(cookie.value)\n\n  const out = [`${cookie.name}=${cookie.value}`]\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true\n  }\n\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true\n    cookie.domain = null\n    cookie.path = '/'\n  }\n\n  if (cookie.secure) {\n    out.push('Secure')\n  }\n\n  if (cookie.httpOnly) {\n    out.push('HttpOnly')\n  }\n\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge)\n    out.push(`Max-Age=${cookie.maxAge}`)\n  }\n\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain)\n    out.push(`Domain=${cookie.domain}`)\n  }\n\n  if (cookie.path) {\n    validateCookiePath(cookie.path)\n    out.push(`Path=${cookie.path}`)\n  }\n\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`)\n  }\n\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`)\n  }\n\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed')\n    }\n\n    const [key, ...value] = part.split('=')\n\n    out.push(`${key.trim()}=${value.join('=')}`)\n  }\n\n  return out.join('; ')\n}\n\nlet kHeadersListNode\n\nfunction getHeadersList (headers) {\n  if (headers[kHeadersList]) {\n    return headers[kHeadersList]\n  }\n\n  if (!kHeadersListNode) {\n    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(\n      (symbol) => symbol.description === 'headers list'\n    )\n\n    assert(kHeadersListNode, 'Headers cannot be parsed')\n  }\n\n  const headersList = headers[kHeadersListNode]\n  assert(headersList)\n\n  return headersList\n}\n\nmodule.exports = {\n  isCTLExcludingHtab,\n  stringify,\n  getHeadersList\n}\n","'use strict'\n\nconst net = require('net')\nconst assert = require('assert')\nconst util = require('./util')\nconst { InvalidArgumentError, ConnectTimeoutError } = require('./errors')\n\nlet tls // include tls conditionally since it is not always available\n\n// TODO: session re-use does not wait for the first\n// connection to resolve the session and might therefore\n// resolve the same servername multiple times even when\n// re-use is enabled.\n\nlet SessionCache\n// FIXME: remove workaround when the Node bug is fixed\n// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\nif (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {\n  SessionCache = class WeakSessionCache {\n    constructor (maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions\n      this._sessionCache = new Map()\n      this._sessionRegistry = new global.FinalizationRegistry((key) => {\n        if (this._sessionCache.size < this._maxCachedSessions) {\n          return\n        }\n\n        const ref = this._sessionCache.get(key)\n        if (ref !== undefined && ref.deref() === undefined) {\n          this._sessionCache.delete(key)\n        }\n      })\n    }\n\n    get (sessionKey) {\n      const ref = this._sessionCache.get(sessionKey)\n      return ref ? ref.deref() : null\n    }\n\n    set (sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return\n      }\n\n      this._sessionCache.set(sessionKey, new WeakRef(session))\n      this._sessionRegistry.register(session, sessionKey)\n    }\n  }\n} else {\n  SessionCache = class SimpleSessionCache {\n    constructor (maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions\n      this._sessionCache = new Map()\n    }\n\n    get (sessionKey) {\n      return this._sessionCache.get(sessionKey)\n    }\n\n    set (sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return\n      }\n\n      if (this._sessionCache.size >= this._maxCachedSessions) {\n        // remove the oldest session\n        const { value: oldestKey } = this._sessionCache.keys().next()\n        this._sessionCache.delete(oldestKey)\n      }\n\n      this._sessionCache.set(sessionKey, session)\n    }\n  }\n}\n\nfunction buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {\n  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')\n  }\n\n  const options = { path: socketPath, ...opts }\n  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)\n  timeout = timeout == null ? 10e3 : timeout\n  allowH2 = allowH2 != null ? allowH2 : false\n  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {\n    let socket\n    if (protocol === 'https:') {\n      if (!tls) {\n        tls = require('tls')\n      }\n      servername = servername || options.servername || util.getServerName(host) || null\n\n      const sessionKey = servername || hostname\n      const session = sessionCache.get(sessionKey) || null\n\n      assert(sessionKey)\n\n      socket = tls.connect({\n        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...\n        ...options,\n        servername,\n        session,\n        localAddress,\n        // TODO(HTTP/2): Add support for h2c\n        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],\n        socket: httpSocket, // upgrade socket connection\n        port: port || 443,\n        host: hostname\n      })\n\n      socket\n        .on('session', function (session) {\n          // TODO (fix): Can a session become invalid once established? Don't think so?\n          sessionCache.set(sessionKey, session)\n        })\n    } else {\n      assert(!httpSocket, 'httpSocket can only be sent on TLS update')\n      socket = net.connect({\n        highWaterMark: 64 * 1024, // Same as nodejs fs streams.\n        ...options,\n        localAddress,\n        port: port || 80,\n        host: hostname\n      })\n    }\n\n    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket\n    if (options.keepAlive == null || options.keepAlive) {\n      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay\n      socket.setKeepAlive(true, keepAliveInitialDelay)\n    }\n\n    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)\n\n    socket\n      .setNoDelay(true)\n      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {\n        cancelTimeout()\n\n        if (callback) {\n          const cb = callback\n          callback = null\n          cb(null, this)\n        }\n      })\n      .on('error', function (err) {\n        cancelTimeout()\n\n        if (callback) {\n          const cb = callback\n          callback = null\n          cb(err)\n        }\n      })\n\n    return socket\n  }\n}\n\nfunction setupTimeout (onConnectTimeout, timeout) {\n  if (!timeout) {\n    return () => {}\n  }\n\n  let s1 = null\n  let s2 = null\n  const timeoutId = setTimeout(() => {\n    // setImmediate is added to make sure that we priotorise socket error events over timeouts\n    s1 = setImmediate(() => {\n      if (process.platform === 'win32') {\n        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic\n        s2 = setImmediate(() => onConnectTimeout())\n      } else {\n        onConnectTimeout()\n      }\n    })\n  }, timeout)\n  return () => {\n    clearTimeout(timeoutId)\n    clearImmediate(s1)\n    clearImmediate(s2)\n  }\n}\n\nfunction onConnectTimeout (socket) {\n  util.destroy(socket, new ConnectTimeoutError())\n}\n\nmodule.exports = buildConnector\n","'use strict'\n\n/** @type {Record<string, string | undefined>} */\nconst headerNameLowerCasedRecord = {}\n\n// https://developer.mozilla.org/docs/Web/HTTP/Headers\nconst wellknownHeaderNames = [\n  'Accept',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Ranges',\n  'Access-Control-Allow-Credentials',\n  'Access-Control-Allow-Headers',\n  'Access-Control-Allow-Methods',\n  'Access-Control-Allow-Origin',\n  'Access-Control-Expose-Headers',\n  'Access-Control-Max-Age',\n  'Access-Control-Request-Headers',\n  'Access-Control-Request-Method',\n  'Age',\n  'Allow',\n  'Alt-Svc',\n  'Alt-Used',\n  'Authorization',\n  'Cache-Control',\n  'Clear-Site-Data',\n  'Connection',\n  'Content-Disposition',\n  'Content-Encoding',\n  'Content-Language',\n  'Content-Length',\n  'Content-Location',\n  'Content-Range',\n  'Content-Security-Policy',\n  'Content-Security-Policy-Report-Only',\n  'Content-Type',\n  'Cookie',\n  'Cross-Origin-Embedder-Policy',\n  'Cross-Origin-Opener-Policy',\n  'Cross-Origin-Resource-Policy',\n  'Date',\n  'Device-Memory',\n  'Downlink',\n  'ECT',\n  'ETag',\n  'Expect',\n  'Expect-CT',\n  'Expires',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Keep-Alive',\n  'Last-Modified',\n  'Link',\n  'Location',\n  'Max-Forwards',\n  'Origin',\n  'Permissions-Policy',\n  'Pragma',\n  'Proxy-Authenticate',\n  'Proxy-Authorization',\n  'RTT',\n  'Range',\n  'Referer',\n  'Referrer-Policy',\n  'Refresh',\n  'Retry-After',\n  'Sec-WebSocket-Accept',\n  'Sec-WebSocket-Extensions',\n  'Sec-WebSocket-Key',\n  'Sec-WebSocket-Protocol',\n  'Sec-WebSocket-Version',\n  'Server',\n  'Server-Timing',\n  'Service-Worker-Allowed',\n  'Service-Worker-Navigation-Preload',\n  'Set-Cookie',\n  'SourceMap',\n  'Strict-Transport-Security',\n  'Supports-Loading-Mode',\n  'TE',\n  'Timing-Allow-Origin',\n  'Trailer',\n  'Transfer-Encoding',\n  'Upgrade',\n  'Upgrade-Insecure-Requests',\n  'User-Agent',\n  'Vary',\n  'Via',\n  'WWW-Authenticate',\n  'X-Content-Type-Options',\n  'X-DNS-Prefetch-Control',\n  'X-Frame-Options',\n  'X-Permitted-Cross-Domain-Policies',\n  'X-Powered-By',\n  'X-Requested-With',\n  'X-XSS-Protection'\n]\n\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = wellknownHeaderNames[i]\n  const lowerCasedKey = key.toLowerCase()\n  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =\n    lowerCasedKey\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(headerNameLowerCasedRecord, null)\n\nmodule.exports = {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n}\n","'use strict'\n\nclass UndiciError extends Error {\n  constructor (message) {\n    super(message)\n    this.name = 'UndiciError'\n    this.code = 'UND_ERR'\n  }\n}\n\nclass ConnectTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ConnectTimeoutError)\n    this.name = 'ConnectTimeoutError'\n    this.message = message || 'Connect Timeout Error'\n    this.code = 'UND_ERR_CONNECT_TIMEOUT'\n  }\n}\n\nclass HeadersTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, HeadersTimeoutError)\n    this.name = 'HeadersTimeoutError'\n    this.message = message || 'Headers Timeout Error'\n    this.code = 'UND_ERR_HEADERS_TIMEOUT'\n  }\n}\n\nclass HeadersOverflowError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, HeadersOverflowError)\n    this.name = 'HeadersOverflowError'\n    this.message = message || 'Headers Overflow Error'\n    this.code = 'UND_ERR_HEADERS_OVERFLOW'\n  }\n}\n\nclass BodyTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, BodyTimeoutError)\n    this.name = 'BodyTimeoutError'\n    this.message = message || 'Body Timeout Error'\n    this.code = 'UND_ERR_BODY_TIMEOUT'\n  }\n}\n\nclass ResponseStatusCodeError extends UndiciError {\n  constructor (message, statusCode, headers, body) {\n    super(message)\n    Error.captureStackTrace(this, ResponseStatusCodeError)\n    this.name = 'ResponseStatusCodeError'\n    this.message = message || 'Response Status Code Error'\n    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'\n    this.body = body\n    this.status = statusCode\n    this.statusCode = statusCode\n    this.headers = headers\n  }\n}\n\nclass InvalidArgumentError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InvalidArgumentError)\n    this.name = 'InvalidArgumentError'\n    this.message = message || 'Invalid Argument Error'\n    this.code = 'UND_ERR_INVALID_ARG'\n  }\n}\n\nclass InvalidReturnValueError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InvalidReturnValueError)\n    this.name = 'InvalidReturnValueError'\n    this.message = message || 'Invalid Return Value Error'\n    this.code = 'UND_ERR_INVALID_RETURN_VALUE'\n  }\n}\n\nclass RequestAbortedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, RequestAbortedError)\n    this.name = 'AbortError'\n    this.message = message || 'Request aborted'\n    this.code = 'UND_ERR_ABORTED'\n  }\n}\n\nclass InformationalError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InformationalError)\n    this.name = 'InformationalError'\n    this.message = message || 'Request information'\n    this.code = 'UND_ERR_INFO'\n  }\n}\n\nclass RequestContentLengthMismatchError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, RequestContentLengthMismatchError)\n    this.name = 'RequestContentLengthMismatchError'\n    this.message = message || 'Request body length does not match content-length header'\n    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'\n  }\n}\n\nclass ResponseContentLengthMismatchError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ResponseContentLengthMismatchError)\n    this.name = 'ResponseContentLengthMismatchError'\n    this.message = message || 'Response body length does not match content-length header'\n    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'\n  }\n}\n\nclass ClientDestroyedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ClientDestroyedError)\n    this.name = 'ClientDestroyedError'\n    this.message = message || 'The client is destroyed'\n    this.code = 'UND_ERR_DESTROYED'\n  }\n}\n\nclass ClientClosedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ClientClosedError)\n    this.name = 'ClientClosedError'\n    this.message = message || 'The client is closed'\n    this.code = 'UND_ERR_CLOSED'\n  }\n}\n\nclass SocketError extends UndiciError {\n  constructor (message, socket) {\n    super(message)\n    Error.captureStackTrace(this, SocketError)\n    this.name = 'SocketError'\n    this.message = message || 'Socket error'\n    this.code = 'UND_ERR_SOCKET'\n    this.socket = socket\n  }\n}\n\nclass NotSupportedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, NotSupportedError)\n    this.name = 'NotSupportedError'\n    this.message = message || 'Not supported error'\n    this.code = 'UND_ERR_NOT_SUPPORTED'\n  }\n}\n\nclass BalancedPoolMissingUpstreamError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, NotSupportedError)\n    this.name = 'MissingUpstreamError'\n    this.message = message || 'No upstream has been added to the BalancedPool'\n    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'\n  }\n}\n\nclass HTTPParserError extends Error {\n  constructor (message, code, data) {\n    super(message)\n    Error.captureStackTrace(this, HTTPParserError)\n    this.name = 'HTTPParserError'\n    this.code = code ? `HPE_${code}` : undefined\n    this.data = data ? data.toString() : undefined\n  }\n}\n\nclass ResponseExceededMaxSizeError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ResponseExceededMaxSizeError)\n    this.name = 'ResponseExceededMaxSizeError'\n    this.message = message || 'Response content exceeded max size'\n    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'\n  }\n}\n\nclass RequestRetryError extends UndiciError {\n  constructor (message, code, { headers, data }) {\n    super(message)\n    Error.captureStackTrace(this, RequestRetryError)\n    this.name = 'RequestRetryError'\n    this.message = message || 'Request retry error'\n    this.code = 'UND_ERR_REQ_RETRY'\n    this.statusCode = code\n    this.data = data\n    this.headers = headers\n  }\n}\n\nmodule.exports = {\n  HTTPParserError,\n  UndiciError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  BodyTimeoutError,\n  RequestContentLengthMismatchError,\n  ConnectTimeoutError,\n  ResponseStatusCodeError,\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError,\n  ClientDestroyedError,\n  ClientClosedError,\n  InformationalError,\n  SocketError,\n  NotSupportedError,\n  ResponseContentLengthMismatchError,\n  BalancedPoolMissingUpstreamError,\n  ResponseExceededMaxSizeError,\n  RequestRetryError\n}\n","'use strict'\n\nconst {\n  InvalidArgumentError,\n  NotSupportedError\n} = require('./errors')\nconst assert = require('assert')\nconst { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require('./symbols')\nconst util = require('./util')\n\n// tokenRegExp and headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nconst tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/\n\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */\nconst headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/\n\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/\n\nconst kHandler = Symbol('handler')\n\nconst channels = {}\n\nlet extractBody\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.create = diagnosticsChannel.channel('undici:request:create')\n  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')\n  channels.headers = diagnosticsChannel.channel('undici:request:headers')\n  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')\n  channels.error = diagnosticsChannel.channel('undici:request:error')\n} catch {\n  channels.create = { hasSubscribers: false }\n  channels.bodySent = { hasSubscribers: false }\n  channels.headers = { hasSubscribers: false }\n  channels.trailers = { hasSubscribers: false }\n  channels.error = { hasSubscribers: false }\n}\n\nclass Request {\n  constructor (origin, {\n    path,\n    method,\n    body,\n    headers,\n    query,\n    idempotent,\n    blocking,\n    upgrade,\n    headersTimeout,\n    bodyTimeout,\n    reset,\n    throwOnError,\n    expectContinue\n  }, handler) {\n    if (typeof path !== 'string') {\n      throw new InvalidArgumentError('path must be a string')\n    } else if (\n      path[0] !== '/' &&\n      !(path.startsWith('http://') || path.startsWith('https://')) &&\n      method !== 'CONNECT'\n    ) {\n      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')\n    } else if (invalidPathRegex.exec(path) !== null) {\n      throw new InvalidArgumentError('invalid request path')\n    }\n\n    if (typeof method !== 'string') {\n      throw new InvalidArgumentError('method must be a string')\n    } else if (tokenRegExp.exec(method) === null) {\n      throw new InvalidArgumentError('invalid request method')\n    }\n\n    if (upgrade && typeof upgrade !== 'string') {\n      throw new InvalidArgumentError('upgrade must be a string')\n    }\n\n    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('invalid headersTimeout')\n    }\n\n    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('invalid bodyTimeout')\n    }\n\n    if (reset != null && typeof reset !== 'boolean') {\n      throw new InvalidArgumentError('invalid reset')\n    }\n\n    if (expectContinue != null && typeof expectContinue !== 'boolean') {\n      throw new InvalidArgumentError('invalid expectContinue')\n    }\n\n    this.headersTimeout = headersTimeout\n\n    this.bodyTimeout = bodyTimeout\n\n    this.throwOnError = throwOnError === true\n\n    this.method = method\n\n    this.abort = null\n\n    if (body == null) {\n      this.body = null\n    } else if (util.isStream(body)) {\n      this.body = body\n\n      const rState = this.body._readableState\n      if (!rState || !rState.autoDestroy) {\n        this.endHandler = function autoDestroy () {\n          util.destroy(this)\n        }\n        this.body.on('end', this.endHandler)\n      }\n\n      this.errorHandler = err => {\n        if (this.abort) {\n          this.abort(err)\n        } else {\n          this.error = err\n        }\n      }\n      this.body.on('error', this.errorHandler)\n    } else if (util.isBuffer(body)) {\n      this.body = body.byteLength ? body : null\n    } else if (ArrayBuffer.isView(body)) {\n      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null\n    } else if (body instanceof ArrayBuffer) {\n      this.body = body.byteLength ? Buffer.from(body) : null\n    } else if (typeof body === 'string') {\n      this.body = body.length ? Buffer.from(body) : null\n    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {\n      this.body = body\n    } else {\n      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')\n    }\n\n    this.completed = false\n\n    this.aborted = false\n\n    this.upgrade = upgrade || null\n\n    this.path = query ? util.buildURL(path, query) : path\n\n    this.origin = origin\n\n    this.idempotent = idempotent == null\n      ? method === 'HEAD' || method === 'GET'\n      : idempotent\n\n    this.blocking = blocking == null ? false : blocking\n\n    this.reset = reset == null ? null : reset\n\n    this.host = null\n\n    this.contentLength = null\n\n    this.contentType = null\n\n    this.headers = ''\n\n    // Only for H2\n    this.expectContinue = expectContinue != null ? expectContinue : false\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(this, headers[i], headers[i + 1])\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(this, key, headers[key])\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    if (util.isFormDataLike(this.body)) {\n      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {\n        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')\n      }\n\n      if (!extractBody) {\n        extractBody = require('../fetch/body.js').extractBody\n      }\n\n      const [bodyStream, contentType] = extractBody(body)\n      if (this.contentType == null) {\n        this.contentType = contentType\n        this.headers += `content-type: ${contentType}\\r\\n`\n      }\n      this.body = bodyStream.stream\n      this.contentLength = bodyStream.length\n    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {\n      this.contentType = body.type\n      this.headers += `content-type: ${body.type}\\r\\n`\n    }\n\n    util.validateHandler(handler, method, upgrade)\n\n    this.servername = util.getServerName(this.host)\n\n    this[kHandler] = handler\n\n    if (channels.create.hasSubscribers) {\n      channels.create.publish({ request: this })\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this[kHandler].onBodySent) {\n      try {\n        return this[kHandler].onBodySent(chunk)\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onRequestSent () {\n    if (channels.bodySent.hasSubscribers) {\n      channels.bodySent.publish({ request: this })\n    }\n\n    if (this[kHandler].onRequestSent) {\n      try {\n        return this[kHandler].onRequestSent()\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onConnect (abort) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (this.error) {\n      abort(this.error)\n    } else {\n      this.abort = abort\n      return this[kHandler].onConnect(abort)\n    }\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (channels.headers.hasSubscribers) {\n      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })\n    }\n\n    try {\n      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)\n    } catch (err) {\n      this.abort(err)\n    }\n  }\n\n  onData (chunk) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    try {\n      return this[kHandler].onData(chunk)\n    } catch (err) {\n      this.abort(err)\n      return false\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    return this[kHandler].onUpgrade(statusCode, headers, socket)\n  }\n\n  onComplete (trailers) {\n    this.onFinally()\n\n    assert(!this.aborted)\n\n    this.completed = true\n    if (channels.trailers.hasSubscribers) {\n      channels.trailers.publish({ request: this, trailers })\n    }\n\n    try {\n      return this[kHandler].onComplete(trailers)\n    } catch (err) {\n      // TODO (fix): This might be a bad idea?\n      this.onError(err)\n    }\n  }\n\n  onError (error) {\n    this.onFinally()\n\n    if (channels.error.hasSubscribers) {\n      channels.error.publish({ request: this, error })\n    }\n\n    if (this.aborted) {\n      return\n    }\n    this.aborted = true\n\n    return this[kHandler].onError(error)\n  }\n\n  onFinally () {\n    if (this.errorHandler) {\n      this.body.off('error', this.errorHandler)\n      this.errorHandler = null\n    }\n\n    if (this.endHandler) {\n      this.body.off('end', this.endHandler)\n      this.endHandler = null\n    }\n  }\n\n  // TODO: adjust to support H2\n  addHeader (key, value) {\n    processHeader(this, key, value)\n    return this\n  }\n\n  static [kHTTP1BuildRequest] (origin, opts, handler) {\n    // TODO: Migrate header parsing here, to make Requests\n    // HTTP agnostic\n    return new Request(origin, opts, handler)\n  }\n\n  static [kHTTP2BuildRequest] (origin, opts, handler) {\n    const headers = opts.headers\n    opts = { ...opts, headers: null }\n\n    const request = new Request(origin, opts, handler)\n\n    request.headers = {}\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(request, headers[i], headers[i + 1], true)\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(request, key, headers[key], true)\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    return request\n  }\n\n  static [kHTTP2CopyHeaders] (raw) {\n    const rawHeaders = raw.split('\\r\\n')\n    const headers = {}\n\n    for (const header of rawHeaders) {\n      const [key, value] = header.split(': ')\n\n      if (value == null || value.length === 0) continue\n\n      if (headers[key]) headers[key] += `,${value}`\n      else headers[key] = value\n    }\n\n    return headers\n  }\n}\n\nfunction processHeaderValue (key, val, skipAppend) {\n  if (val && typeof val === 'object') {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  val = val != null ? `${val}` : ''\n\n  if (headerCharRegex.exec(val) !== null) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  return skipAppend ? val : `${key}: ${val}\\r\\n`\n}\n\nfunction processHeader (request, key, val, skipAppend = false) {\n  if (val && (typeof val === 'object' && !Array.isArray(val))) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else if (val === undefined) {\n    return\n  }\n\n  if (\n    request.host === null &&\n    key.length === 4 &&\n    key.toLowerCase() === 'host'\n  ) {\n    if (headerCharRegex.exec(val) !== null) {\n      throw new InvalidArgumentError(`invalid ${key} header`)\n    }\n    // Consumed by Client\n    request.host = val\n  } else if (\n    request.contentLength === null &&\n    key.length === 14 &&\n    key.toLowerCase() === 'content-length'\n  ) {\n    request.contentLength = parseInt(val, 10)\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header')\n    }\n  } else if (\n    request.contentType === null &&\n    key.length === 12 &&\n    key.toLowerCase() === 'content-type'\n  ) {\n    request.contentType = val\n    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n    else request.headers += processHeaderValue(key, val)\n  } else if (\n    key.length === 17 &&\n    key.toLowerCase() === 'transfer-encoding'\n  ) {\n    throw new InvalidArgumentError('invalid transfer-encoding header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'connection'\n  ) {\n    const value = typeof val === 'string' ? val.toLowerCase() : null\n    if (value !== 'close' && value !== 'keep-alive') {\n      throw new InvalidArgumentError('invalid connection header')\n    } else if (value === 'close') {\n      request.reset = true\n    }\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'keep-alive'\n  ) {\n    throw new InvalidArgumentError('invalid keep-alive header')\n  } else if (\n    key.length === 7 &&\n    key.toLowerCase() === 'upgrade'\n  ) {\n    throw new InvalidArgumentError('invalid upgrade header')\n  } else if (\n    key.length === 6 &&\n    key.toLowerCase() === 'expect'\n  ) {\n    throw new NotSupportedError('expect header not supported')\n  } else if (tokenRegExp.exec(key) === null) {\n    throw new InvalidArgumentError('invalid header key')\n  } else {\n    if (Array.isArray(val)) {\n      for (let i = 0; i < val.length; i++) {\n        if (skipAppend) {\n          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`\n          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)\n        } else {\n          request.headers += processHeaderValue(key, val[i])\n        }\n      }\n    } else {\n      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n      else request.headers += processHeaderValue(key, val)\n    }\n  }\n}\n\nmodule.exports = Request\n","module.exports = {\n  kClose: Symbol('close'),\n  kDestroy: Symbol('destroy'),\n  kDispatch: Symbol('dispatch'),\n  kUrl: Symbol('url'),\n  kWriting: Symbol('writing'),\n  kResuming: Symbol('resuming'),\n  kQueue: Symbol('queue'),\n  kConnect: Symbol('connect'),\n  kConnecting: Symbol('connecting'),\n  kHeadersList: Symbol('headers list'),\n  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),\n  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),\n  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),\n  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),\n  kKeepAlive: Symbol('keep alive'),\n  kHeadersTimeout: Symbol('headers timeout'),\n  kBodyTimeout: Symbol('body timeout'),\n  kServerName: Symbol('server name'),\n  kLocalAddress: Symbol('local address'),\n  kHost: Symbol('host'),\n  kNoRef: Symbol('no ref'),\n  kBodyUsed: Symbol('used'),\n  kRunning: Symbol('running'),\n  kBlocking: Symbol('blocking'),\n  kPending: Symbol('pending'),\n  kSize: Symbol('size'),\n  kBusy: Symbol('busy'),\n  kQueued: Symbol('queued'),\n  kFree: Symbol('free'),\n  kConnected: Symbol('connected'),\n  kClosed: Symbol('closed'),\n  kNeedDrain: Symbol('need drain'),\n  kReset: Symbol('reset'),\n  kDestroyed: Symbol.for('nodejs.stream.destroyed'),\n  kMaxHeadersSize: Symbol('max headers size'),\n  kRunningIdx: Symbol('running index'),\n  kPendingIdx: Symbol('pending index'),\n  kError: Symbol('error'),\n  kClients: Symbol('clients'),\n  kClient: Symbol('client'),\n  kParser: Symbol('parser'),\n  kOnDestroyed: Symbol('destroy callbacks'),\n  kPipelining: Symbol('pipelining'),\n  kSocket: Symbol('socket'),\n  kHostHeader: Symbol('host header'),\n  kConnector: Symbol('connector'),\n  kStrictContentLength: Symbol('strict content length'),\n  kMaxRedirections: Symbol('maxRedirections'),\n  kMaxRequests: Symbol('maxRequestsPerClient'),\n  kProxy: Symbol('proxy agent options'),\n  kCounter: Symbol('socket request counter'),\n  kInterceptors: Symbol('dispatch interceptors'),\n  kMaxResponseSize: Symbol('max response size'),\n  kHTTP2Session: Symbol('http2Session'),\n  kHTTP2SessionState: Symbol('http2Session state'),\n  kHTTP2BuildRequest: Symbol('http2 build request'),\n  kHTTP1BuildRequest: Symbol('http1 build request'),\n  kHTTP2CopyHeaders: Symbol('http2 copy headers'),\n  kHTTPConnVersion: Symbol('http connection version'),\n  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),\n  kConstruct: Symbol('constructable')\n}\n","'use strict'\n\nconst assert = require('assert')\nconst { kDestroyed, kBodyUsed } = require('./symbols')\nconst { IncomingMessage } = require('http')\nconst stream = require('stream')\nconst net = require('net')\nconst { InvalidArgumentError } = require('./errors')\nconst { Blob } = require('buffer')\nconst nodeUtil = require('util')\nconst { stringify } = require('querystring')\nconst { headerNameLowerCasedRecord } = require('./constants')\n\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))\n\nfunction nop () {}\n\nfunction isStream (obj) {\n  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'\n}\n\n// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)\nfunction isBlobLike (object) {\n  return (Blob && object instanceof Blob) || (\n    object &&\n    typeof object === 'object' &&\n    (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n    /^(Blob|File)$/.test(object[Symbol.toStringTag])\n  )\n}\n\nfunction buildURL (url, queryParams) {\n  if (url.includes('?') || url.includes('#')) {\n    throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".')\n  }\n\n  const stringified = stringify(queryParams)\n\n  if (stringified) {\n    url += '?' + stringified\n  }\n\n  return url\n}\n\nfunction parseURL (url) {\n  if (typeof url === 'string') {\n    url = new URL(url)\n\n    if (!/^https?:/.test(url.origin || url.protocol)) {\n      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')\n    }\n\n    return url\n  }\n\n  if (!url || typeof url !== 'object') {\n    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')\n  }\n\n  if (!/^https?:/.test(url.origin || url.protocol)) {\n    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')\n  }\n\n  if (!(url instanceof URL)) {\n    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {\n      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')\n    }\n\n    if (url.path != null && typeof url.path !== 'string') {\n      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')\n    }\n\n    if (url.pathname != null && typeof url.pathname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')\n    }\n\n    if (url.hostname != null && typeof url.hostname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')\n    }\n\n    if (url.origin != null && typeof url.origin !== 'string') {\n      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')\n    }\n\n    const port = url.port != null\n      ? url.port\n      : (url.protocol === 'https:' ? 443 : 80)\n    let origin = url.origin != null\n      ? url.origin\n      : `${url.protocol}//${url.hostname}:${port}`\n    let path = url.path != null\n      ? url.path\n      : `${url.pathname || ''}${url.search || ''}`\n\n    if (origin.endsWith('/')) {\n      origin = origin.substring(0, origin.length - 1)\n    }\n\n    if (path && !path.startsWith('/')) {\n      path = `/${path}`\n    }\n    // new URL(path, origin) is unsafe when `path` contains an absolute URL\n    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:\n    // If first parameter is a relative URL, second param is required, and will be used as the base URL.\n    // If first parameter is an absolute URL, a given second param will be ignored.\n    url = new URL(origin + path)\n  }\n\n  return url\n}\n\nfunction parseOrigin (url) {\n  url = parseURL(url)\n\n  if (url.pathname !== '/' || url.search || url.hash) {\n    throw new InvalidArgumentError('invalid url')\n  }\n\n  return url\n}\n\nfunction getHostname (host) {\n  if (host[0] === '[') {\n    const idx = host.indexOf(']')\n\n    assert(idx !== -1)\n    return host.substring(1, idx)\n  }\n\n  const idx = host.indexOf(':')\n  if (idx === -1) return host\n\n  return host.substring(0, idx)\n}\n\n// IP addresses are not valid server names per RFC6066\n// > Currently, the only server names supported are DNS hostnames\nfunction getServerName (host) {\n  if (!host) {\n    return null\n  }\n\n  assert.strictEqual(typeof host, 'string')\n\n  const servername = getHostname(host)\n  if (net.isIP(servername)) {\n    return ''\n  }\n\n  return servername\n}\n\nfunction deepClone (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nfunction isAsyncIterable (obj) {\n  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')\n}\n\nfunction isIterable (obj) {\n  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))\n}\n\nfunction bodyLength (body) {\n  if (body == null) {\n    return 0\n  } else if (isStream(body)) {\n    const state = body._readableState\n    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)\n      ? state.length\n      : null\n  } else if (isBlobLike(body)) {\n    return body.size != null ? body.size : null\n  } else if (isBuffer(body)) {\n    return body.byteLength\n  }\n\n  return null\n}\n\nfunction isDestroyed (stream) {\n  return !stream || !!(stream.destroyed || stream[kDestroyed])\n}\n\nfunction isReadableAborted (stream) {\n  const state = stream && stream._readableState\n  return isDestroyed(stream) && state && !state.endEmitted\n}\n\nfunction destroy (stream, err) {\n  if (stream == null || !isStream(stream) || isDestroyed(stream)) {\n    return\n  }\n\n  if (typeof stream.destroy === 'function') {\n    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {\n      // See: https://github.com/nodejs/node/pull/38505/files\n      stream.socket = null\n    }\n\n    stream.destroy(err)\n  } else if (err) {\n    process.nextTick((stream, err) => {\n      stream.emit('error', err)\n    }, stream, err)\n  }\n\n  if (stream.destroyed !== true) {\n    stream[kDestroyed] = true\n  }\n}\n\nconst KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/\nfunction parseKeepAliveTimeout (val) {\n  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)\n  return m ? parseInt(m[1], 10) * 1000 : null\n}\n\n/**\n * Retrieves a header name and returns its lowercase value.\n * @param {string | Buffer} value Header name\n * @returns {string}\n */\nfunction headerNameToString (value) {\n  return headerNameLowerCasedRecord[value] || value.toLowerCase()\n}\n\nfunction parseHeaders (headers, obj = {}) {\n  // For H2 support\n  if (!Array.isArray(headers)) return headers\n\n  for (let i = 0; i < headers.length; i += 2) {\n    const key = headers[i].toString().toLowerCase()\n    let val = obj[key]\n\n    if (!val) {\n      if (Array.isArray(headers[i + 1])) {\n        obj[key] = headers[i + 1].map(x => x.toString('utf8'))\n      } else {\n        obj[key] = headers[i + 1].toString('utf8')\n      }\n    } else {\n      if (!Array.isArray(val)) {\n        val = [val]\n        obj[key] = val\n      }\n      val.push(headers[i + 1].toString('utf8'))\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if ('content-length' in obj && 'content-disposition' in obj) {\n    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')\n  }\n\n  return obj\n}\n\nfunction parseRawHeaders (headers) {\n  const ret = []\n  let hasContentLength = false\n  let contentDispositionIdx = -1\n\n  for (let n = 0; n < headers.length; n += 2) {\n    const key = headers[n + 0].toString()\n    const val = headers[n + 1].toString('utf8')\n\n    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {\n      ret.push(key, val)\n      hasContentLength = true\n    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {\n      contentDispositionIdx = ret.push(key, val) - 1\n    } else {\n      ret.push(key, val)\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if (hasContentLength && contentDispositionIdx !== -1) {\n    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')\n  }\n\n  return ret\n}\n\nfunction isBuffer (buffer) {\n  // See, https://github.com/mcollina/undici/pull/319\n  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)\n}\n\nfunction validateHandler (handler, method, upgrade) {\n  if (!handler || typeof handler !== 'object') {\n    throw new InvalidArgumentError('handler must be an object')\n  }\n\n  if (typeof handler.onConnect !== 'function') {\n    throw new InvalidArgumentError('invalid onConnect method')\n  }\n\n  if (typeof handler.onError !== 'function') {\n    throw new InvalidArgumentError('invalid onError method')\n  }\n\n  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {\n    throw new InvalidArgumentError('invalid onBodySent method')\n  }\n\n  if (upgrade || method === 'CONNECT') {\n    if (typeof handler.onUpgrade !== 'function') {\n      throw new InvalidArgumentError('invalid onUpgrade method')\n    }\n  } else {\n    if (typeof handler.onHeaders !== 'function') {\n      throw new InvalidArgumentError('invalid onHeaders method')\n    }\n\n    if (typeof handler.onData !== 'function') {\n      throw new InvalidArgumentError('invalid onData method')\n    }\n\n    if (typeof handler.onComplete !== 'function') {\n      throw new InvalidArgumentError('invalid onComplete method')\n    }\n  }\n}\n\n// A body is disturbed if it has been read from and it cannot\n// be re-used without losing state or data.\nfunction isDisturbed (body) {\n  return !!(body && (\n    stream.isDisturbed\n      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?\n      : body[kBodyUsed] ||\n        body.readableDidRead ||\n        (body._readableState && body._readableState.dataEmitted) ||\n        isReadableAborted(body)\n  ))\n}\n\nfunction isErrored (body) {\n  return !!(body && (\n    stream.isErrored\n      ? stream.isErrored(body)\n      : /state: 'errored'/.test(nodeUtil.inspect(body)\n      )))\n}\n\nfunction isReadable (body) {\n  return !!(body && (\n    stream.isReadable\n      ? stream.isReadable(body)\n      : /state: 'readable'/.test(nodeUtil.inspect(body)\n      )))\n}\n\nfunction getSocketInfo (socket) {\n  return {\n    localAddress: socket.localAddress,\n    localPort: socket.localPort,\n    remoteAddress: socket.remoteAddress,\n    remotePort: socket.remotePort,\n    remoteFamily: socket.remoteFamily,\n    timeout: socket.timeout,\n    bytesWritten: socket.bytesWritten,\n    bytesRead: socket.bytesRead\n  }\n}\n\nasync function * convertIterableToBuffer (iterable) {\n  for await (const chunk of iterable) {\n    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)\n  }\n}\n\nlet ReadableStream\nfunction ReadableStreamFrom (iterable) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  if (ReadableStream.from) {\n    return ReadableStream.from(convertIterableToBuffer(iterable))\n  }\n\n  let iterator\n  return new ReadableStream(\n    {\n      async start () {\n        iterator = iterable[Symbol.asyncIterator]()\n      },\n      async pull (controller) {\n        const { done, value } = await iterator.next()\n        if (done) {\n          queueMicrotask(() => {\n            controller.close()\n          })\n        } else {\n          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)\n          controller.enqueue(new Uint8Array(buf))\n        }\n        return controller.desiredSize > 0\n      },\n      async cancel (reason) {\n        await iterator.return()\n      }\n    },\n    0\n  )\n}\n\n// The chunk should be a FormData instance and contains\n// all the required methods.\nfunction isFormDataLike (object) {\n  return (\n    object &&\n    typeof object === 'object' &&\n    typeof object.append === 'function' &&\n    typeof object.delete === 'function' &&\n    typeof object.get === 'function' &&\n    typeof object.getAll === 'function' &&\n    typeof object.has === 'function' &&\n    typeof object.set === 'function' &&\n    object[Symbol.toStringTag] === 'FormData'\n  )\n}\n\nfunction throwIfAborted (signal) {\n  if (!signal) { return }\n  if (typeof signal.throwIfAborted === 'function') {\n    signal.throwIfAborted()\n  } else {\n    if (signal.aborted) {\n      // DOMException not available < v17.0.0\n      const err = new Error('The operation was aborted')\n      err.name = 'AbortError'\n      throw err\n    }\n  }\n}\n\nfunction addAbortListener (signal, listener) {\n  if ('addEventListener' in signal) {\n    signal.addEventListener('abort', listener, { once: true })\n    return () => signal.removeEventListener('abort', listener)\n  }\n  signal.addListener('abort', listener)\n  return () => signal.removeListener('abort', listener)\n}\n\nconst hasToWellFormed = !!String.prototype.toWellFormed\n\n/**\n * @param {string} val\n */\nfunction toUSVString (val) {\n  if (hasToWellFormed) {\n    return `${val}`.toWellFormed()\n  } else if (nodeUtil.toUSVString) {\n    return nodeUtil.toUSVString(val)\n  }\n\n  return `${val}`\n}\n\n// Parsed accordingly to RFC 9110\n// https://www.rfc-editor.org/rfc/rfc9110#field.content-range\nfunction parseRangeHeader (range) {\n  if (range == null || range === '') return { start: 0, end: null, size: null }\n\n  const m = range ? range.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/) : null\n  return m\n    ? {\n        start: parseInt(m[1]),\n        end: m[2] ? parseInt(m[2]) : null,\n        size: m[3] ? parseInt(m[3]) : null\n      }\n    : null\n}\n\nconst kEnumerableProperty = Object.create(null)\nkEnumerableProperty.enumerable = true\n\nmodule.exports = {\n  kEnumerableProperty,\n  nop,\n  isDisturbed,\n  isErrored,\n  isReadable,\n  toUSVString,\n  isReadableAborted,\n  isBlobLike,\n  parseOrigin,\n  parseURL,\n  getServerName,\n  isStream,\n  isIterable,\n  isAsyncIterable,\n  isDestroyed,\n  headerNameToString,\n  parseRawHeaders,\n  parseHeaders,\n  parseKeepAliveTimeout,\n  destroy,\n  bodyLength,\n  deepClone,\n  ReadableStreamFrom,\n  isBuffer,\n  validateHandler,\n  getSocketInfo,\n  isFormDataLike,\n  buildURL,\n  throwIfAborted,\n  addAbortListener,\n  parseRangeHeader,\n  nodeMajor,\n  nodeMinor,\n  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),\n  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']\n}\n","'use strict'\n\nconst Dispatcher = require('./dispatcher')\nconst {\n  ClientDestroyedError,\n  ClientClosedError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst { kDestroy, kClose, kDispatch, kInterceptors } = require('./core/symbols')\n\nconst kDestroyed = Symbol('destroyed')\nconst kClosed = Symbol('closed')\nconst kOnDestroyed = Symbol('onDestroyed')\nconst kOnClosed = Symbol('onClosed')\nconst kInterceptedDispatch = Symbol('Intercepted Dispatch')\n\nclass DispatcherBase extends Dispatcher {\n  constructor () {\n    super()\n\n    this[kDestroyed] = false\n    this[kOnDestroyed] = null\n    this[kClosed] = false\n    this[kOnClosed] = []\n  }\n\n  get destroyed () {\n    return this[kDestroyed]\n  }\n\n  get closed () {\n    return this[kClosed]\n  }\n\n  get interceptors () {\n    return this[kInterceptors]\n  }\n\n  set interceptors (newInterceptors) {\n    if (newInterceptors) {\n      for (let i = newInterceptors.length - 1; i >= 0; i--) {\n        const interceptor = this[kInterceptors][i]\n        if (typeof interceptor !== 'function') {\n          throw new InvalidArgumentError('interceptor must be an function')\n        }\n      }\n    }\n\n    this[kInterceptors] = newInterceptors\n  }\n\n  close (callback) {\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.close((err, data) => {\n          return err ? reject(err) : resolve(data)\n        })\n      })\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    if (this[kDestroyed]) {\n      queueMicrotask(() => callback(new ClientDestroyedError(), null))\n      return\n    }\n\n    if (this[kClosed]) {\n      if (this[kOnClosed]) {\n        this[kOnClosed].push(callback)\n      } else {\n        queueMicrotask(() => callback(null, null))\n      }\n      return\n    }\n\n    this[kClosed] = true\n    this[kOnClosed].push(callback)\n\n    const onClosed = () => {\n      const callbacks = this[kOnClosed]\n      this[kOnClosed] = null\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null)\n      }\n    }\n\n    // Should not error.\n    this[kClose]()\n      .then(() => this.destroy())\n      .then(() => {\n        queueMicrotask(onClosed)\n      })\n  }\n\n  destroy (err, callback) {\n    if (typeof err === 'function') {\n      callback = err\n      err = null\n    }\n\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.destroy(err, (err, data) => {\n          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)\n        })\n      })\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    if (this[kDestroyed]) {\n      if (this[kOnDestroyed]) {\n        this[kOnDestroyed].push(callback)\n      } else {\n        queueMicrotask(() => callback(null, null))\n      }\n      return\n    }\n\n    if (!err) {\n      err = new ClientDestroyedError()\n    }\n\n    this[kDestroyed] = true\n    this[kOnDestroyed] = this[kOnDestroyed] || []\n    this[kOnDestroyed].push(callback)\n\n    const onDestroyed = () => {\n      const callbacks = this[kOnDestroyed]\n      this[kOnDestroyed] = null\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null)\n      }\n    }\n\n    // Should not error.\n    this[kDestroy](err).then(() => {\n      queueMicrotask(onDestroyed)\n    })\n  }\n\n  [kInterceptedDispatch] (opts, handler) {\n    if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n      this[kInterceptedDispatch] = this[kDispatch]\n      return this[kDispatch](opts, handler)\n    }\n\n    let dispatch = this[kDispatch].bind(this)\n    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {\n      dispatch = this[kInterceptors][i](dispatch)\n    }\n    this[kInterceptedDispatch] = dispatch\n    return dispatch(opts, handler)\n  }\n\n  dispatch (opts, handler) {\n    if (!handler || typeof handler !== 'object') {\n      throw new InvalidArgumentError('handler must be an object')\n    }\n\n    try {\n      if (!opts || typeof opts !== 'object') {\n        throw new InvalidArgumentError('opts must be an object.')\n      }\n\n      if (this[kDestroyed] || this[kOnDestroyed]) {\n        throw new ClientDestroyedError()\n      }\n\n      if (this[kClosed]) {\n        throw new ClientClosedError()\n      }\n\n      return this[kInterceptedDispatch](opts, handler)\n    } catch (err) {\n      if (typeof handler.onError !== 'function') {\n        throw new InvalidArgumentError('invalid onError method')\n      }\n\n      handler.onError(err)\n\n      return false\n    }\n  }\n}\n\nmodule.exports = DispatcherBase\n","'use strict'\n\nconst EventEmitter = require('events')\n\nclass Dispatcher extends EventEmitter {\n  dispatch () {\n    throw new Error('not implemented')\n  }\n\n  close () {\n    throw new Error('not implemented')\n  }\n\n  destroy () {\n    throw new Error('not implemented')\n  }\n}\n\nmodule.exports = Dispatcher\n","'use strict'\n\nconst Busboy = require('@fastify/busboy')\nconst util = require('../core/util')\nconst {\n  ReadableStreamFrom,\n  isBlobLike,\n  isReadableStreamLike,\n  readableStreamClose,\n  createDeferredPromise,\n  fullyReadBody\n} = require('./util')\nconst { FormData } = require('./formdata')\nconst { kState } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { DOMException, structuredClone } = require('./constants')\nconst { Blob, File: NativeFile } = require('buffer')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { isErrored } = require('../core/util')\nconst { isUint8Array, isArrayBuffer } = require('util/types')\nconst { File: UndiciFile } = require('./file')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\n\nlet ReadableStream = globalThis.ReadableStream\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\n// https://fetch.spec.whatwg.org/#concept-bodyinit-extract\nfunction extractBody (object, keepalive = false) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  // 1. Let stream be null.\n  let stream = null\n\n  // 2. If object is a ReadableStream object, then set stream to object.\n  if (object instanceof ReadableStream) {\n    stream = object\n  } else if (isBlobLike(object)) {\n    // 3. Otherwise, if object is a Blob object, set stream to the\n    //    result of running object’s get stream.\n    stream = object.stream()\n  } else {\n    // 4. Otherwise, set stream to a new ReadableStream object, and set\n    //    up stream.\n    stream = new ReadableStream({\n      async pull (controller) {\n        controller.enqueue(\n          typeof source === 'string' ? textEncoder.encode(source) : source\n        )\n        queueMicrotask(() => readableStreamClose(controller))\n      },\n      start () {},\n      type: undefined\n    })\n  }\n\n  // 5. Assert: stream is a ReadableStream object.\n  assert(isReadableStreamLike(stream))\n\n  // 6. Let action be null.\n  let action = null\n\n  // 7. Let source be null.\n  let source = null\n\n  // 8. Let length be null.\n  let length = null\n\n  // 9. Let type be null.\n  let type = null\n\n  // 10. Switch on object:\n  if (typeof object === 'string') {\n    // Set source to the UTF-8 encoding of object.\n    // Note: setting source to a Uint8Array here breaks some mocking assumptions.\n    source = object\n\n    // Set type to `text/plain;charset=UTF-8`.\n    type = 'text/plain;charset=UTF-8'\n  } else if (object instanceof URLSearchParams) {\n    // URLSearchParams\n\n    // spec says to run application/x-www-form-urlencoded on body.list\n    // this is implemented in Node.js as apart of an URLSearchParams instance toString method\n    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490\n    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100\n\n    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.\n    source = object.toString()\n\n    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.\n    type = 'application/x-www-form-urlencoded;charset=UTF-8'\n  } else if (isArrayBuffer(object)) {\n    // BufferSource/ArrayBuffer\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.slice())\n  } else if (ArrayBuffer.isView(object)) {\n    // BufferSource/ArrayBufferView\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))\n  } else if (util.isFormDataLike(object)) {\n    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`\n    const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`\n\n    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n    const escape = (str) =>\n      str.replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22')\n    const normalizeLinefeeds = (value) => value.replace(/\\r?\\n|\\r/g, '\\r\\n')\n\n    // Set action to this step: run the multipart/form-data\n    // encoding algorithm, with object’s entry list and UTF-8.\n    // - This ensures that the body is immutable and can't be changed afterwords\n    // - That the content-length is calculated in advance.\n    // - And that all parts are pre-encoded and ready to be sent.\n\n    const blobParts = []\n    const rn = new Uint8Array([13, 10]) // '\\r\\n'\n    length = 0\n    let hasUnknownSizeValue = false\n\n    for (const [name, value] of object) {\n      if (typeof value === 'string') {\n        const chunk = textEncoder.encode(prefix +\n          `; name=\"${escape(normalizeLinefeeds(name))}\"` +\n          `\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`)\n        blobParts.push(chunk)\n        length += chunk.byteLength\n      } else {\n        const chunk = textEncoder.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` +\n          (value.name ? `; filename=\"${escape(value.name)}\"` : '') + '\\r\\n' +\n          `Content-Type: ${\n            value.type || 'application/octet-stream'\n          }\\r\\n\\r\\n`)\n        blobParts.push(chunk, value, rn)\n        if (typeof value.size === 'number') {\n          length += chunk.byteLength + value.size + rn.byteLength\n        } else {\n          hasUnknownSizeValue = true\n        }\n      }\n    }\n\n    const chunk = textEncoder.encode(`--${boundary}--`)\n    blobParts.push(chunk)\n    length += chunk.byteLength\n    if (hasUnknownSizeValue) {\n      length = null\n    }\n\n    // Set source to object.\n    source = object\n\n    action = async function * () {\n      for (const part of blobParts) {\n        if (part.stream) {\n          yield * part.stream()\n        } else {\n          yield part\n        }\n      }\n    }\n\n    // Set type to `multipart/form-data; boundary=`,\n    // followed by the multipart/form-data boundary string generated\n    // by the multipart/form-data encoding algorithm.\n    type = 'multipart/form-data; boundary=' + boundary\n  } else if (isBlobLike(object)) {\n    // Blob\n\n    // Set source to object.\n    source = object\n\n    // Set length to object’s size.\n    length = object.size\n\n    // If object’s type attribute is not the empty byte sequence, set\n    // type to its value.\n    if (object.type) {\n      type = object.type\n    }\n  } else if (typeof object[Symbol.asyncIterator] === 'function') {\n    // If keepalive is true, then throw a TypeError.\n    if (keepalive) {\n      throw new TypeError('keepalive')\n    }\n\n    // If object is disturbed or locked, then throw a TypeError.\n    if (util.isDisturbed(object) || object.locked) {\n      throw new TypeError(\n        'Response body object should not be disturbed or locked'\n      )\n    }\n\n    stream =\n      object instanceof ReadableStream ? object : ReadableStreamFrom(object)\n  }\n\n  // 11. If source is a byte sequence, then set action to a\n  // step that returns source and length to source’s length.\n  if (typeof source === 'string' || util.isBuffer(source)) {\n    length = Buffer.byteLength(source)\n  }\n\n  // 12. If action is non-null, then run these steps in in parallel:\n  if (action != null) {\n    // Run action.\n    let iterator\n    stream = new ReadableStream({\n      async start () {\n        iterator = action(object)[Symbol.asyncIterator]()\n      },\n      async pull (controller) {\n        const { value, done } = await iterator.next()\n        if (done) {\n          // When running action is done, close stream.\n          queueMicrotask(() => {\n            controller.close()\n          })\n        } else {\n          // Whenever one or more bytes are available and stream is not errored,\n          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available\n          // bytes into stream.\n          if (!isErrored(stream)) {\n            controller.enqueue(new Uint8Array(value))\n          }\n        }\n        return controller.desiredSize > 0\n      },\n      async cancel (reason) {\n        await iterator.return()\n      },\n      type: undefined\n    })\n  }\n\n  // 13. Let body be a body whose stream is stream, source is source,\n  // and length is length.\n  const body = { stream, source, length }\n\n  // 14. Return (body, type).\n  return [body, type]\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit-safely-extract\nfunction safelyExtractBody (object, keepalive = false) {\n  if (!ReadableStream) {\n    // istanbul ignore next\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  // To safely extract a body and a `Content-Type` value from\n  // a byte sequence or BodyInit object object, run these steps:\n\n  // 1. If object is a ReadableStream object, then:\n  if (object instanceof ReadableStream) {\n    // Assert: object is neither disturbed nor locked.\n    // istanbul ignore next\n    assert(!util.isDisturbed(object), 'The body has already been consumed.')\n    // istanbul ignore next\n    assert(!object.locked, 'The stream is locked.')\n  }\n\n  // 2. Return the results of extracting object.\n  return extractBody(object, keepalive)\n}\n\nfunction cloneBody (body) {\n  // To clone a body body, run these steps:\n\n  // https://fetch.spec.whatwg.org/#concept-body-clone\n\n  // 1. Let « out1, out2 » be the result of teeing body’s stream.\n  const [out1, out2] = body.stream.tee()\n  const out2Clone = structuredClone(out2, { transfer: [out2] })\n  // This, for whatever reasons, unrefs out2Clone which allows\n  // the process to exit by itself.\n  const [, finalClone] = out2Clone.tee()\n\n  // 2. Set body’s stream to out1.\n  body.stream = out1\n\n  // 3. Return a body whose stream is out2 and other members are copied from body.\n  return {\n    stream: finalClone,\n    length: body.length,\n    source: body.source\n  }\n}\n\nasync function * consumeBody (body) {\n  if (body) {\n    if (isUint8Array(body)) {\n      yield body\n    } else {\n      const stream = body.stream\n\n      if (util.isDisturbed(stream)) {\n        throw new TypeError('The body has already been consumed.')\n      }\n\n      if (stream.locked) {\n        throw new TypeError('The stream is locked.')\n      }\n\n      // Compat.\n      stream[kBodyUsed] = true\n\n      yield * stream\n    }\n  }\n}\n\nfunction throwIfAborted (state) {\n  if (state.aborted) {\n    throw new DOMException('The operation was aborted.', 'AbortError')\n  }\n}\n\nfunction bodyMixinMethods (instance) {\n  const methods = {\n    blob () {\n      // The blob() method steps are to return the result of\n      // running consume body with this and the following step\n      // given a byte sequence bytes: return a Blob whose\n      // contents are bytes and whose type attribute is this’s\n      // MIME type.\n      return specConsumeBody(this, (bytes) => {\n        let mimeType = bodyMimeType(this)\n\n        if (mimeType === 'failure') {\n          mimeType = ''\n        } else if (mimeType) {\n          mimeType = serializeAMimeType(mimeType)\n        }\n\n        // Return a Blob whose contents are bytes and type attribute\n        // is mimeType.\n        return new Blob([bytes], { type: mimeType })\n      }, instance)\n    },\n\n    arrayBuffer () {\n      // The arrayBuffer() method steps are to return the result\n      // of running consume body with this and the following step\n      // given a byte sequence bytes: return a new ArrayBuffer\n      // whose contents are bytes.\n      return specConsumeBody(this, (bytes) => {\n        return new Uint8Array(bytes).buffer\n      }, instance)\n    },\n\n    text () {\n      // The text() method steps are to return the result of running\n      // consume body with this and UTF-8 decode.\n      return specConsumeBody(this, utf8DecodeBytes, instance)\n    },\n\n    json () {\n      // The json() method steps are to return the result of running\n      // consume body with this and parse JSON from bytes.\n      return specConsumeBody(this, parseJSONFromBytes, instance)\n    },\n\n    async formData () {\n      webidl.brandCheck(this, instance)\n\n      throwIfAborted(this[kState])\n\n      const contentType = this.headers.get('Content-Type')\n\n      // If mimeType’s essence is \"multipart/form-data\", then:\n      if (/multipart\\/form-data/.test(contentType)) {\n        const headers = {}\n        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value\n\n        const responseFormData = new FormData()\n\n        let busboy\n\n        try {\n          busboy = new Busboy({\n            headers,\n            preservePath: true\n          })\n        } catch (err) {\n          throw new DOMException(`${err}`, 'AbortError')\n        }\n\n        busboy.on('field', (name, value) => {\n          responseFormData.append(name, value)\n        })\n        busboy.on('file', (name, value, filename, encoding, mimeType) => {\n          const chunks = []\n\n          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {\n            let base64chunk = ''\n\n            value.on('data', (chunk) => {\n              base64chunk += chunk.toString().replace(/[\\r\\n]/gm, '')\n\n              const end = base64chunk.length - base64chunk.length % 4\n              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))\n\n              base64chunk = base64chunk.slice(end)\n            })\n            value.on('end', () => {\n              chunks.push(Buffer.from(base64chunk, 'base64'))\n              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))\n            })\n          } else {\n            value.on('data', (chunk) => {\n              chunks.push(chunk)\n            })\n            value.on('end', () => {\n              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))\n            })\n          }\n        })\n\n        const busboyResolve = new Promise((resolve, reject) => {\n          busboy.on('finish', resolve)\n          busboy.on('error', (err) => reject(new TypeError(err)))\n        })\n\n        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)\n        busboy.end()\n        await busboyResolve\n\n        return responseFormData\n      } else if (/application\\/x-www-form-urlencoded/.test(contentType)) {\n        // Otherwise, if mimeType’s essence is \"application/x-www-form-urlencoded\", then:\n\n        // 1. Let entries be the result of parsing bytes.\n        let entries\n        try {\n          let text = ''\n          // application/x-www-form-urlencoded parser will keep the BOM.\n          // https://url.spec.whatwg.org/#concept-urlencoded-parser\n          // Note that streaming decoder is stateful and cannot be reused\n          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })\n\n          for await (const chunk of consumeBody(this[kState].body)) {\n            if (!isUint8Array(chunk)) {\n              throw new TypeError('Expected Uint8Array chunk')\n            }\n            text += streamingDecoder.decode(chunk, { stream: true })\n          }\n          text += streamingDecoder.decode()\n          entries = new URLSearchParams(text)\n        } catch (err) {\n          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.\n          // 2. If entries is failure, then throw a TypeError.\n          throw Object.assign(new TypeError(), { cause: err })\n        }\n\n        // 3. Return a new FormData object whose entries are entries.\n        const formData = new FormData()\n        for (const [name, value] of entries) {\n          formData.append(name, value)\n        }\n        return formData\n      } else {\n        // Wait a tick before checking if the request has been aborted.\n        // Otherwise, a TypeError can be thrown when an AbortError should.\n        await Promise.resolve()\n\n        throwIfAborted(this[kState])\n\n        // Otherwise, throw a TypeError.\n        throw webidl.errors.exception({\n          header: `${instance.name}.formData`,\n          message: 'Could not parse content as FormData.'\n        })\n      }\n    }\n  }\n\n  return methods\n}\n\nfunction mixinBody (prototype) {\n  Object.assign(prototype.prototype, bodyMixinMethods(prototype))\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-consume-body\n * @param {Response|Request} object\n * @param {(value: unknown) => unknown} convertBytesToJSValue\n * @param {Response|Request} instance\n */\nasync function specConsumeBody (object, convertBytesToJSValue, instance) {\n  webidl.brandCheck(object, instance)\n\n  throwIfAborted(object[kState])\n\n  // 1. If object is unusable, then return a promise rejected\n  //    with a TypeError.\n  if (bodyUnusable(object[kState].body)) {\n    throw new TypeError('Body is unusable')\n  }\n\n  // 2. Let promise be a new promise.\n  const promise = createDeferredPromise()\n\n  // 3. Let errorSteps given error be to reject promise with error.\n  const errorSteps = (error) => promise.reject(error)\n\n  // 4. Let successSteps given a byte sequence data be to resolve\n  //    promise with the result of running convertBytesToJSValue\n  //    with data. If that threw an exception, then run errorSteps\n  //    with that exception.\n  const successSteps = (data) => {\n    try {\n      promise.resolve(convertBytesToJSValue(data))\n    } catch (e) {\n      errorSteps(e)\n    }\n  }\n\n  // 5. If object’s body is null, then run successSteps with an\n  //    empty byte sequence.\n  if (object[kState].body == null) {\n    successSteps(new Uint8Array())\n    return promise.promise\n  }\n\n  // 6. Otherwise, fully read object’s body given successSteps,\n  //    errorSteps, and object’s relevant global object.\n  await fullyReadBody(object[kState].body, successSteps, errorSteps)\n\n  // 7. Return promise.\n  return promise.promise\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction bodyUnusable (body) {\n  // An object including the Body interface mixin is\n  // said to be unusable if its body is non-null and\n  // its body’s stream is disturbed or locked.\n  return body != null && (body.stream.locked || util.isDisturbed(body.stream))\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#utf-8-decode\n * @param {Buffer} buffer\n */\nfunction utf8DecodeBytes (buffer) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  // 1. Let buffer be the result of peeking three bytes from\n  //    ioQueue, converted to a byte sequence.\n\n  // 2. If buffer is 0xEF 0xBB 0xBF, then read three\n  //    bytes from ioQueue. (Do nothing with those bytes.)\n  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    buffer = buffer.subarray(3)\n  }\n\n  // 3. Process a queue with an instance of UTF-8’s\n  //    decoder, ioQueue, output, and \"replacement\".\n  const output = textDecoder.decode(buffer)\n\n  // 4. Return output.\n  return output\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value\n * @param {Uint8Array} bytes\n */\nfunction parseJSONFromBytes (bytes) {\n  return JSON.parse(utf8DecodeBytes(bytes))\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-mime-type\n * @param {import('./response').Response|import('./request').Request} object\n */\nfunction bodyMimeType (object) {\n  const { headersList } = object[kState]\n  const contentType = headersList.get('content-type')\n\n  if (contentType === null) {\n    return 'failure'\n  }\n\n  return parseMIMEType(contentType)\n}\n\nmodule.exports = {\n  extractBody,\n  safelyExtractBody,\n  cloneBody,\n  mixinBody\n}\n","'use strict'\n\nconst { MessageChannel, receiveMessageOnPort } = require('worker_threads')\n\nconst corsSafeListedMethods = ['GET', 'HEAD', 'POST']\nconst corsSafeListedMethodsSet = new Set(corsSafeListedMethods)\n\nconst nullBodyStatus = [101, 204, 205, 304]\n\nconst redirectStatus = [301, 302, 303, 307, 308]\nconst redirectStatusSet = new Set(redirectStatus)\n\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = [\n  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',\n  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',\n  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',\n  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',\n  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',\n  '10080'\n]\n\nconst badPortsSet = new Set(badPorts)\n\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = [\n  '',\n  'no-referrer',\n  'no-referrer-when-downgrade',\n  'same-origin',\n  'origin',\n  'strict-origin',\n  'origin-when-cross-origin',\n  'strict-origin-when-cross-origin',\n  'unsafe-url'\n]\nconst referrerPolicySet = new Set(referrerPolicy)\n\nconst requestRedirect = ['follow', 'manual', 'error']\n\nconst safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']\nconst safeMethodsSet = new Set(safeMethods)\n\nconst requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']\n\nconst requestCredentials = ['omit', 'same-origin', 'include']\n\nconst requestCache = [\n  'default',\n  'no-store',\n  'reload',\n  'no-cache',\n  'force-cache',\n  'only-if-cached'\n]\n\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = [\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-type',\n  // See https://github.com/nodejs/undici/issues/2021\n  // 'Content-Length' is a forbidden header name, which is typically\n  // removed in the Headers implementation. However, undici doesn't\n  // filter out headers, so we add it here.\n  'content-length'\n]\n\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = [\n  'half'\n]\n\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']\nconst forbiddenMethodsSet = new Set(forbiddenMethods)\n\nconst subresource = [\n  'audio',\n  'audioworklet',\n  'font',\n  'image',\n  'manifest',\n  'paintworklet',\n  'script',\n  'style',\n  'track',\n  'video',\n  'xslt',\n  ''\n]\nconst subresourceSet = new Set(subresource)\n\n/** @type {globalThis['DOMException']} */\nconst DOMException = globalThis.DOMException ?? (() => {\n  // DOMException was only made a global in Node v17.0.0,\n  // but fetch supports >= v16.8.\n  try {\n    atob('~')\n  } catch (err) {\n    return Object.getPrototypeOf(err).constructor\n  }\n})()\n\nlet channel\n\n/** @type {globalThis['structuredClone']} */\nconst structuredClone =\n  globalThis.structuredClone ??\n  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n  // structuredClone was added in v17.0.0, but fetch supports v16.8\n  function structuredClone (value, options = undefined) {\n    if (arguments.length === 0) {\n      throw new TypeError('missing argument')\n    }\n\n    if (!channel) {\n      channel = new MessageChannel()\n    }\n    channel.port1.unref()\n    channel.port2.unref()\n    channel.port1.postMessage(value, options?.transfer)\n    return receiveMessageOnPort(channel.port2).message\n  }\n\nmodule.exports = {\n  DOMException,\n  structuredClone,\n  subresource,\n  forbiddenMethods,\n  requestBodyHeader,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  redirectStatus,\n  corsSafeListedMethods,\n  nullBodyStatus,\n  safeMethods,\n  badPorts,\n  requestDuplex,\n  subresourceSet,\n  badPortsSet,\n  redirectStatusSet,\n  corsSafeListedMethodsSet,\n  safeMethodsSet,\n  forbiddenMethodsSet,\n  referrerPolicySet\n}\n","const assert = require('assert')\nconst { atob } = require('buffer')\nconst { isomorphicDecode } = require('./util')\n\nconst encoder = new TextEncoder()\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */\nconst HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/\nconst HTTP_WHITESPACE_REGEX = /(\\u000A|\\u000D|\\u0009|\\u0020)/ // eslint-disable-line\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */\nconst HTTP_QUOTED_STRING_TOKENS = /[\\u0009|\\u0020-\\u007E|\\u0080-\\u00FF]/ // eslint-disable-line\n\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */\nfunction dataURLProcessor (dataURL) {\n  // 1. Assert: dataURL’s scheme is \"data\".\n  assert(dataURL.protocol === 'data:')\n\n  // 2. Let input be the result of running the URL\n  // serializer on dataURL with exclude fragment\n  // set to true.\n  let input = URLSerializer(dataURL, true)\n\n  // 3. Remove the leading \"data:\" string from input.\n  input = input.slice(5)\n\n  // 4. Let position point at the start of input.\n  const position = { position: 0 }\n\n  // 5. Let mimeType be the result of collecting a\n  // sequence of code points that are not equal\n  // to U+002C (,), given position.\n  let mimeType = collectASequenceOfCodePointsFast(\n    ',',\n    input,\n    position\n  )\n\n  // 6. Strip leading and trailing ASCII whitespace\n  // from mimeType.\n  // Undici implementation note: we need to store the\n  // length because if the mimetype has spaces removed,\n  // the wrong amount will be sliced from the input in\n  // step #9\n  const mimeTypeLength = mimeType.length\n  mimeType = removeASCIIWhitespace(mimeType, true, true)\n\n  // 7. If position is past the end of input, then\n  // return failure\n  if (position.position >= input.length) {\n    return 'failure'\n  }\n\n  // 8. Advance position by 1.\n  position.position++\n\n  // 9. Let encodedBody be the remainder of input.\n  const encodedBody = input.slice(mimeTypeLength + 1)\n\n  // 10. Let body be the percent-decoding of encodedBody.\n  let body = stringPercentDecode(encodedBody)\n\n  // 11. If mimeType ends with U+003B (;), followed by\n  // zero or more U+0020 SPACE, followed by an ASCII\n  // case-insensitive match for \"base64\", then:\n  if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n    // 1. Let stringBody be the isomorphic decode of body.\n    const stringBody = isomorphicDecode(body)\n\n    // 2. Set body to the forgiving-base64 decode of\n    // stringBody.\n    body = forgivingBase64(stringBody)\n\n    // 3. If body is failure, then return failure.\n    if (body === 'failure') {\n      return 'failure'\n    }\n\n    // 4. Remove the last 6 code points from mimeType.\n    mimeType = mimeType.slice(0, -6)\n\n    // 5. Remove trailing U+0020 SPACE code points from mimeType,\n    // if any.\n    mimeType = mimeType.replace(/(\\u0020)+$/, '')\n\n    // 6. Remove the last U+003B (;) code point from mimeType.\n    mimeType = mimeType.slice(0, -1)\n  }\n\n  // 12. If mimeType starts with U+003B (;), then prepend\n  // \"text/plain\" to mimeType.\n  if (mimeType.startsWith(';')) {\n    mimeType = 'text/plain' + mimeType\n  }\n\n  // 13. Let mimeTypeRecord be the result of parsing\n  // mimeType.\n  let mimeTypeRecord = parseMIMEType(mimeType)\n\n  // 14. If mimeTypeRecord is failure, then set\n  // mimeTypeRecord to text/plain;charset=US-ASCII.\n  if (mimeTypeRecord === 'failure') {\n    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')\n  }\n\n  // 15. Return a new data: URL struct whose MIME\n  // type is mimeTypeRecord and body is body.\n  // https://fetch.spec.whatwg.org/#data-url-struct\n  return { mimeType: mimeTypeRecord, body }\n}\n\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */\nfunction URLSerializer (url, excludeFragment = false) {\n  if (!excludeFragment) {\n    return url.href\n  }\n\n  const href = url.href\n  const hashLength = url.hash.length\n\n  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)\n}\n\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePoints (condition, input, position) {\n  // 1. Let result be the empty string.\n  let result = ''\n\n  // 2. While position doesn’t point past the end of input and the\n  // code point at position within input meets the condition condition:\n  while (position.position < input.length && condition(input[position.position])) {\n    // 1. Append that code point to the end of result.\n    result += input[position.position]\n\n    // 2. Advance position by 1.\n    position.position++\n  }\n\n  // 3. Return result.\n  return result\n}\n\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePointsFast (char, input, position) {\n  const idx = input.indexOf(char, position.position)\n  const start = position.position\n\n  if (idx === -1) {\n    position.position = input.length\n    return input.slice(start)\n  }\n\n  position.position = idx\n  return input.slice(start, position.position)\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */\nfunction stringPercentDecode (input) {\n  // 1. Let bytes be the UTF-8 encoding of input.\n  const bytes = encoder.encode(input)\n\n  // 2. Return the percent-decoding of bytes.\n  return percentDecode(bytes)\n}\n\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */\nfunction percentDecode (input) {\n  // 1. Let output be an empty byte sequence.\n  /** @type {number[]} */\n  const output = []\n\n  // 2. For each byte byte in input:\n  for (let i = 0; i < input.length; i++) {\n    const byte = input[i]\n\n    // 1. If byte is not 0x25 (%), then append byte to output.\n    if (byte !== 0x25) {\n      output.push(byte)\n\n    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n    // after byte in input are not in the ranges\n    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n    // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n    // to output.\n    } else if (\n      byte === 0x25 &&\n      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))\n    ) {\n      output.push(0x25)\n\n    // 3. Otherwise:\n    } else {\n      // 1. Let bytePoint be the two bytes after byte in input,\n      // decoded, and then interpreted as hexadecimal number.\n      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])\n      const bytePoint = Number.parseInt(nextTwoBytes, 16)\n\n      // 2. Append a byte whose value is bytePoint to output.\n      output.push(bytePoint)\n\n      // 3. Skip the next two bytes in input.\n      i += 2\n    }\n  }\n\n  // 3. Return output.\n  return Uint8Array.from(output)\n}\n\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */\nfunction parseMIMEType (input) {\n  // 1. Remove any leading and trailing HTTP whitespace\n  // from input.\n  input = removeHTTPWhitespace(input, true, true)\n\n  // 2. Let position be a position variable for input,\n  // initially pointing at the start of input.\n  const position = { position: 0 }\n\n  // 3. Let type be the result of collecting a sequence\n  // of code points that are not U+002F (/) from\n  // input, given position.\n  const type = collectASequenceOfCodePointsFast(\n    '/',\n    input,\n    position\n  )\n\n  // 4. If type is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  // https://mimesniff.spec.whatwg.org/#http-token-code-point\n  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n    return 'failure'\n  }\n\n  // 5. If position is past the end of input, then return\n  // failure\n  if (position.position > input.length) {\n    return 'failure'\n  }\n\n  // 6. Advance position by 1. (This skips past U+002F (/).)\n  position.position++\n\n  // 7. Let subtype be the result of collecting a sequence of\n  // code points that are not U+003B (;) from input, given\n  // position.\n  let subtype = collectASequenceOfCodePointsFast(\n    ';',\n    input,\n    position\n  )\n\n  // 8. Remove any trailing HTTP whitespace from subtype.\n  subtype = removeHTTPWhitespace(subtype, false, true)\n\n  // 9. If subtype is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n    return 'failure'\n  }\n\n  const typeLowercase = type.toLowerCase()\n  const subtypeLowercase = subtype.toLowerCase()\n\n  // 10. Let mimeType be a new MIME type record whose type\n  // is type, in ASCII lowercase, and subtype is subtype,\n  // in ASCII lowercase.\n  // https://mimesniff.spec.whatwg.org/#mime-type\n  const mimeType = {\n    type: typeLowercase,\n    subtype: subtypeLowercase,\n    /** @type {Map<string, string>} */\n    parameters: new Map(),\n    // https://mimesniff.spec.whatwg.org/#mime-type-essence\n    essence: `${typeLowercase}/${subtypeLowercase}`\n  }\n\n  // 11. While position is not past the end of input:\n  while (position.position < input.length) {\n    // 1. Advance position by 1. (This skips past U+003B (;).)\n    position.position++\n\n    // 2. Collect a sequence of code points that are HTTP\n    // whitespace from input given position.\n    collectASequenceOfCodePoints(\n      // https://fetch.spec.whatwg.org/#http-whitespace\n      char => HTTP_WHITESPACE_REGEX.test(char),\n      input,\n      position\n    )\n\n    // 3. Let parameterName be the result of collecting a\n    // sequence of code points that are not U+003B (;)\n    // or U+003D (=) from input, given position.\n    let parameterName = collectASequenceOfCodePoints(\n      (char) => char !== ';' && char !== '=',\n      input,\n      position\n    )\n\n    // 4. Set parameterName to parameterName, in ASCII\n    // lowercase.\n    parameterName = parameterName.toLowerCase()\n\n    // 5. If position is not past the end of input, then:\n    if (position.position < input.length) {\n      // 1. If the code point at position within input is\n      // U+003B (;), then continue.\n      if (input[position.position] === ';') {\n        continue\n      }\n\n      // 2. Advance position by 1. (This skips past U+003D (=).)\n      position.position++\n    }\n\n    // 6. If position is past the end of input, then break.\n    if (position.position > input.length) {\n      break\n    }\n\n    // 7. Let parameterValue be null.\n    let parameterValue = null\n\n    // 8. If the code point at position within input is\n    // U+0022 (\"), then:\n    if (input[position.position] === '\"') {\n      // 1. Set parameterValue to the result of collecting\n      // an HTTP quoted string from input, given position\n      // and the extract-value flag.\n      parameterValue = collectAnHTTPQuotedString(input, position, true)\n\n      // 2. Collect a sequence of code points that are not\n      // U+003B (;) from input, given position.\n      collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n    // 9. Otherwise:\n    } else {\n      // 1. Set parameterValue to the result of collecting\n      // a sequence of code points that are not U+003B (;)\n      // from input, given position.\n      parameterValue = collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n      // 2. Remove any trailing HTTP whitespace from parameterValue.\n      parameterValue = removeHTTPWhitespace(parameterValue, false, true)\n\n      // 3. If parameterValue is the empty string, then continue.\n      if (parameterValue.length === 0) {\n        continue\n      }\n    }\n\n    // 10. If all of the following are true\n    // - parameterName is not the empty string\n    // - parameterName solely contains HTTP token code points\n    // - parameterValue solely contains HTTP quoted-string token code points\n    // - mimeType’s parameters[parameterName] does not exist\n    // then set mimeType’s parameters[parameterName] to parameterValue.\n    if (\n      parameterName.length !== 0 &&\n      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&\n      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&\n      !mimeType.parameters.has(parameterName)\n    ) {\n      mimeType.parameters.set(parameterName, parameterValue)\n    }\n  }\n\n  // 12. Return mimeType.\n  return mimeType\n}\n\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */\nfunction forgivingBase64 (data) {\n  // 1. Remove all ASCII whitespace from data.\n  data = data.replace(/[\\u0009\\u000A\\u000C\\u000D\\u0020]/g, '')  // eslint-disable-line\n\n  // 2. If data’s code point length divides by 4 leaving\n  // no remainder, then:\n  if (data.length % 4 === 0) {\n    // 1. If data ends with one or two U+003D (=) code points,\n    // then remove them from data.\n    data = data.replace(/=?=$/, '')\n  }\n\n  // 3. If data’s code point length divides by 4 leaving\n  // a remainder of 1, then return failure.\n  if (data.length % 4 === 1) {\n    return 'failure'\n  }\n\n  // 4. If data contains a code point that is not one of\n  //  U+002B (+)\n  //  U+002F (/)\n  //  ASCII alphanumeric\n  // then return failure.\n  if (/[^+/0-9A-Za-z]/.test(data)) {\n    return 'failure'\n  }\n\n  const binary = atob(data)\n  const bytes = new Uint8Array(binary.length)\n\n  for (let byte = 0; byte < binary.length; byte++) {\n    bytes[byte] = binary.charCodeAt(byte)\n  }\n\n  return bytes\n}\n\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */\nfunction collectAnHTTPQuotedString (input, position, extractValue) {\n  // 1. Let positionStart be position.\n  const positionStart = position.position\n\n  // 2. Let value be the empty string.\n  let value = ''\n\n  // 3. Assert: the code point at position within input\n  // is U+0022 (\").\n  assert(input[position.position] === '\"')\n\n  // 4. Advance position by 1.\n  position.position++\n\n  // 5. While true:\n  while (true) {\n    // 1. Append the result of collecting a sequence of code points\n    // that are not U+0022 (\") or U+005C (\\) from input, given\n    // position, to value.\n    value += collectASequenceOfCodePoints(\n      (char) => char !== '\"' && char !== '\\\\',\n      input,\n      position\n    )\n\n    // 2. If position is past the end of input, then break.\n    if (position.position >= input.length) {\n      break\n    }\n\n    // 3. Let quoteOrBackslash be the code point at position within\n    // input.\n    const quoteOrBackslash = input[position.position]\n\n    // 4. Advance position by 1.\n    position.position++\n\n    // 5. If quoteOrBackslash is U+005C (\\), then:\n    if (quoteOrBackslash === '\\\\') {\n      // 1. If position is past the end of input, then append\n      // U+005C (\\) to value and break.\n      if (position.position >= input.length) {\n        value += '\\\\'\n        break\n      }\n\n      // 2. Append the code point at position within input to value.\n      value += input[position.position]\n\n      // 3. Advance position by 1.\n      position.position++\n\n    // 6. Otherwise:\n    } else {\n      // 1. Assert: quoteOrBackslash is U+0022 (\").\n      assert(quoteOrBackslash === '\"')\n\n      // 2. Break.\n      break\n    }\n  }\n\n  // 6. If the extract-value flag is set, then return value.\n  if (extractValue) {\n    return value\n  }\n\n  // 7. Return the code points from positionStart to position,\n  // inclusive, within input.\n  return input.slice(positionStart, position.position)\n}\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */\nfunction serializeAMimeType (mimeType) {\n  assert(mimeType !== 'failure')\n  const { parameters, essence } = mimeType\n\n  // 1. Let serialization be the concatenation of mimeType’s\n  //    type, U+002F (/), and mimeType’s subtype.\n  let serialization = essence\n\n  // 2. For each name → value of mimeType’s parameters:\n  for (let [name, value] of parameters.entries()) {\n    // 1. Append U+003B (;) to serialization.\n    serialization += ';'\n\n    // 2. Append name to serialization.\n    serialization += name\n\n    // 3. Append U+003D (=) to serialization.\n    serialization += '='\n\n    // 4. If value does not solely contain HTTP token code\n    //    points or value is the empty string, then:\n    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n      // 1. Precede each occurence of U+0022 (\") or\n      //    U+005C (\\) in value with U+005C (\\).\n      value = value.replace(/(\\\\|\")/g, '\\\\$1')\n\n      // 2. Prepend U+0022 (\") to value.\n      value = '\"' + value\n\n      // 3. Append U+0022 (\") to value.\n      value += '\"'\n    }\n\n    // 5. Append value to serialization.\n    serialization += value\n  }\n\n  // 3. Return serialization.\n  return serialization\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} char\n */\nfunction isHTTPWhiteSpace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === ' '\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n */\nfunction removeHTTPWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {string} char\n */\nfunction isASCIIWhitespace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === '\\f' || char === ' '\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n */\nfunction removeASCIIWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\nmodule.exports = {\n  dataURLProcessor,\n  URLSerializer,\n  collectASequenceOfCodePoints,\n  collectASequenceOfCodePointsFast,\n  stringPercentDecode,\n  parseMIMEType,\n  collectAnHTTPQuotedString,\n  serializeAMimeType\n}\n","'use strict'\n\nconst { Blob, File: NativeFile } = require('buffer')\nconst { types } = require('util')\nconst { kState } = require('./symbols')\nconst { isBlobLike } = require('./util')\nconst { webidl } = require('./webidl')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\nconst { kEnumerableProperty } = require('../core/util')\nconst encoder = new TextEncoder()\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)\n    fileName = webidl.converters.USVString(fileName)\n    options = webidl.converters.FilePropertyBag(options)\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    let t = options.type\n    let d\n\n    // eslint-disable-next-line no-labels\n    substep: {\n      if (t) {\n        t = parseMIMEType(t)\n\n        if (t === 'failure') {\n          t = ''\n          // eslint-disable-next-line no-labels\n          break substep\n        }\n\n        t = serializeAMimeType(t).toLowerCase()\n      }\n\n      //    3. If the lastModified member is provided, let d be set to the\n      //    lastModified dictionary member. If it is not provided, set d to the\n      //    current date and time represented as the number of milliseconds since\n      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n      d = options.lastModified\n    }\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), { type: t })\n    this[kState] = {\n      name: n,\n      lastModified: d,\n      type: t\n    }\n  }\n\n  get name () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].lastModified\n  }\n\n  get type () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].type\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\nObject.defineProperties(File.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'File',\n    configurable: true\n  },\n  name: kEnumerableProperty,\n  lastModified: kEnumerableProperty\n})\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob)\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (\n      ArrayBuffer.isView(V) ||\n      types.isAnyArrayBuffer(V)\n    ) {\n      return webidl.converters.BufferSource(V, opts)\n    }\n  }\n\n  return webidl.converters.USVString(V, opts)\n}\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(\n  webidl.converters.BlobPart\n)\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n  {\n    key: 'lastModified',\n    converter: webidl.converters['long long'],\n    get defaultValue () {\n      return Date.now()\n    }\n  },\n  {\n    key: 'type',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'endings',\n    converter: (value) => {\n      value = webidl.converters.DOMString(value)\n      value = value.toLowerCase()\n\n      if (value !== 'native') {\n        value = 'transparent'\n      }\n\n      return value\n    },\n    defaultValue: 'transparent'\n  }\n])\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts (parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s)\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(encoder.encode(s))\n    } else if (\n      types.isAnyArrayBuffer(element) ||\n      types.isTypedArray(element)\n    ) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) { // ArrayBuffer\n        bytes.push(new Uint8Array(element))\n      } else {\n        bytes.push(\n          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)\n        )\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element)\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative (s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'\n\n  // 2. If the underlying platform’s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n'\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding)\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike (object) {\n  return (\n    (NativeFile && object instanceof NativeFile) ||\n    object instanceof File || (\n      object &&\n      (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n      object[Symbol.toStringTag] === 'File'\n    )\n  )\n}\n\nmodule.exports = { File, FileLike, isFileLike }\n","'use strict'\n\nconst { isBlobLike, toUSVString, makeIterator } = require('./util')\nconst { kState } = require('./symbols')\nconst { File: UndiciFile, FileLike, isFileLike } = require('./file')\nconst { webidl } = require('./webidl')\nconst { Blob, File: NativeFile } = require('buffer')\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  constructor (form) {\n    if (form !== undefined) {\n      throw webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['undefined']\n      })\n    }\n\n    this[kState] = []\n  }\n\n  append (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this’s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })\n\n    name = webidl.converters.USVString(name)\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n    this[kState] = this[kState].filter(entry => entry.name !== name)\n  }\n\n  get (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })\n\n    name = webidl.converters.USVString(name)\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? toUSVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  entries () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key+value'\n    )\n  }\n\n  keys () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n}\n\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries\n\nObject.defineProperties(FormData.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'FormData',\n    configurable: true\n  }\n})\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry (name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // \"To convert a string into a scalar value string, replace any surrogates\n  //  with U+FFFD.\"\n  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n  name = Buffer.from(name).toString('utf8')\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    value = Buffer.from(value).toString('utf8')\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob\n        ? new File([value], 'blob', { type: value.type })\n        : new FileLike(value, 'blob', { type: value.type })\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      /** @type {FilePropertyBag} */\n      const options = {\n        type: value.type,\n        lastModified: value.lastModified\n      }\n\n      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile\n        ? new File([value], filename, options)\n        : new FileLike(value, filename, options)\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return { name, value }\n}\n\nmodule.exports = { FormData }\n","'use strict'\n\n// In case of breaking changes, increase the version\n// number to avoid conflicts.\nconst globalOrigin = Symbol.for('undici.globalOrigin.1')\n\nfunction getGlobalOrigin () {\n  return globalThis[globalOrigin]\n}\n\nfunction setGlobalOrigin (newOrigin) {\n  if (newOrigin === undefined) {\n    Object.defineProperty(globalThis, globalOrigin, {\n      value: undefined,\n      writable: true,\n      enumerable: false,\n      configurable: false\n    })\n\n    return\n  }\n\n  const parsedURL = new URL(newOrigin)\n\n  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {\n    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)\n  }\n\n  Object.defineProperty(globalThis, globalOrigin, {\n    value: parsedURL,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  })\n}\n\nmodule.exports = {\n  getGlobalOrigin,\n  setGlobalOrigin\n}\n","// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst { kGuard } = require('./symbols')\nconst { kEnumerableProperty } = require('../core/util')\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util')\nconst { webidl } = require('./webidl')\nconst assert = require('assert')\n\nconst kHeadersMap = Symbol('headers map')\nconst kHeadersSortedMap = Symbol('headers map sorted')\n\n/**\n * @param {number} code\n */\nfunction isHTTPWhiteSpaceCharCode (code) {\n  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize (potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  let i = 0; let j = potentialValue.length\n\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i\n\n  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)\n}\n\nfunction fill (headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; ++i) {\n      const header = object[i]\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        })\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      appendHeader(headers, header[0], header[1])\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    const keys = Object.keys(object)\n    for (let i = 0; i < keys.length; ++i) {\n      appendHeader(headers, keys[i], object[keys[i]])\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    })\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */\nfunction appendHeader (headers, name, value) {\n  // 1. Normalize value.\n  value = headerValueNormalize(value)\n\n  // 2. If name is not a header name or value is not a\n  //    header value, then throw a TypeError.\n  if (!isValidHeaderName(name)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value: name,\n      type: 'header name'\n    })\n  } else if (!isValidHeaderValue(value)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value,\n      type: 'header value'\n    })\n  }\n\n  // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n  // 4. Otherwise, if headers’s guard is \"request\" and name is a\n  //    forbidden header name, return.\n  // Note: undici does not implement forbidden header names\n  if (headers[kGuard] === 'immutable') {\n    throw new TypeError('immutable')\n  } else if (headers[kGuard] === 'request-no-cors') {\n    // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n    // TODO\n  }\n\n  // 6. Otherwise, if headers’s guard is \"response\" and name is a\n  //    forbidden response-header name, return.\n\n  // 7. Append (name, value) to headers’s header list.\n  return headers[kHeadersList].append(name, value)\n\n  // 8. If headers’s guard is \"request-no-cors\", then remove\n  //    privileged no-CORS request headers from headers\n}\n\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null\n\n  constructor (init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap])\n      this[kHeadersSortedMap] = init[kHeadersSortedMap]\n      this.cookies = init.cookies === null ? null : [...init.cookies]\n    } else {\n      this[kHeadersMap] = new Map(init)\n      this[kHeadersSortedMap] = null\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains (name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase()\n\n    return this[kHeadersMap].has(name)\n  }\n\n  clear () {\n    this[kHeadersMap].clear()\n    this[kHeadersSortedMap] = null\n    this.cookies = null\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append (name, value) {\n    this[kHeadersSortedMap] = null\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = name.toLowerCase()\n    const exists = this[kHeadersMap].get(lowercaseName)\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      })\n    } else {\n      this[kHeadersMap].set(lowercaseName, { name, value })\n    }\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= []\n      this.cookies.push(value)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set (name, value) {\n    this[kHeadersSortedMap] = null\n    const lowercaseName = name.toLowerCase()\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value]\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    this[kHeadersMap].set(lowercaseName, { name, value })\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete (name) {\n    this[kHeadersSortedMap] = null\n\n    name = name.toLowerCase()\n\n    if (name === 'set-cookie') {\n      this.cookies = null\n    }\n\n    this[kHeadersMap].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get (name) {\n    const value = this[kHeadersMap].get(name.toLowerCase())\n\n    // 1. If list does not contain name, then return null.\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return value === undefined ? null : value.value\n  }\n\n  * [Symbol.iterator] () {\n    // use the lowercased name\n    for (const [name, { value }] of this[kHeadersMap]) {\n      yield [name, value]\n    }\n  }\n\n  get entries () {\n    const headers = {}\n\n    if (this[kHeadersMap].size) {\n      for (const { name, value } of this[kHeadersMap].values()) {\n        headers[name] = value\n      }\n    }\n\n    return headers\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor (init = undefined) {\n    if (init === kConstruct) {\n      return\n    }\n    this[kHeadersList] = new HeadersList()\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this[kGuard] = 'none'\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init)\n      fill(this, init)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    return appendHeader(this, name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    this[kHeadersList].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this[kHeadersList].get(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    this[kHeadersList].set(name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie () {\n    webidl.brandCheck(this, Headers)\n\n    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n    // 2. Return the values of all headers in this’s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this[kHeadersList].cookies\n\n    if (list) {\n      return [...list]\n    }\n\n    return []\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap] () {\n    if (this[kHeadersList][kHeadersSortedMap]) {\n      return this[kHeadersList][kHeadersSortedMap]\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = []\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)\n    const cookies = this[kHeadersList].cookies\n\n    // 3. For each name of names:\n    for (let i = 0; i < names.length; ++i) {\n      const [name, value] = names[i]\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (let j = 0; j < cookies.length; ++j) {\n          headers.push([name, cookies[j]])\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        assert(value !== null)\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value])\n      }\n    }\n\n    this[kHeadersList][kHeadersSortedMap] = headers\n\n    // 4. Return headers.\n    return headers\n  }\n\n  keys () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'key')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'value')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'value'\n    )\n  }\n\n  entries () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'key+value')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key+value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    webidl.brandCheck(this, Headers)\n\n    return this[kHeadersList]\n  }\n}\n\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries\n\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  getSetCookie: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: { enumerable: false },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n})\n\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V)\n    }\n\n    return webidl.converters['record<ByteString, ByteString>'](V)\n  }\n\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  })\n}\n\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n}\n","// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst {\n  Response,\n  makeNetworkError,\n  makeAppropriateNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response')\nconst { Headers } = require('./headers')\nconst { Request, makeRequest } = require('./request')\nconst zlib = require('zlib')\nconst {\n  bytesMatch,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  createOpaqueTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime,\n  createDeferredPromise,\n  isBlobLike,\n  sameOrigin,\n  isCancelled,\n  isAborted,\n  isErrorLike,\n  fullyReadBody,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlIsHttpHttpsScheme,\n  urlHasHttpsScheme\n} = require('./util')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst assert = require('assert')\nconst { safelyExtractBody } = require('./body')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  safeMethodsSet,\n  requestBodyHeader,\n  subresourceSet,\n  DOMException\n} = require('./constants')\nconst { kHeadersList } = require('../core/symbols')\nconst EE = require('events')\nconst { Readable, pipeline } = require('stream')\nconst { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require('../core/util')\nconst { dataURLProcessor, serializeAMimeType } = require('./dataURL')\nconst { TransformStream } = require('stream/web')\nconst { getGlobalDispatcher } = require('../global')\nconst { webidl } = require('./webidl')\nconst { STATUS_CODES } = require('http')\nconst GET_OR_HEAD = ['GET', 'HEAD']\n\n/** @type {import('buffer').resolveObjectURL} */\nlet resolveObjectURL\nlet ReadableStream = globalThis.ReadableStream\n\nclass Fetch extends EE {\n  constructor (dispatcher) {\n    super()\n\n    this.dispatcher = dispatcher\n    this.connection = null\n    this.dump = false\n    this.state = 'ongoing'\n    // 2 terminated listeners get added per request,\n    // but only 1 gets removed. If there are 20 redirects,\n    // 21 listeners will be added.\n    // See https://github.com/nodejs/undici/issues/1711\n    // TODO (fix): Find and fix root cause for leaked listener.\n    this.setMaxListeners(21)\n  }\n\n  terminate (reason) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    this.state = 'terminated'\n    this.connection?.destroy(reason)\n    this.emit('terminated', reason)\n  }\n\n  // https://fetch.spec.whatwg.org/#fetch-controller-abort\n  abort (error) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    // 1. Set controller’s state to \"aborted\".\n    this.state = 'aborted'\n\n    // 2. Let fallbackError be an \"AbortError\" DOMException.\n    // 3. Set error to fallbackError if it is not given.\n    if (!error) {\n      error = new DOMException('The operation was aborted.', 'AbortError')\n    }\n\n    // 4. Let serializedError be StructuredSerialize(error).\n    //    If that threw an exception, catch it, and let\n    //    serializedError be StructuredSerialize(fallbackError).\n\n    // 5. Set controller’s serialized abort reason to serializedError.\n    this.serializedAbortReason = error\n\n    this.connection?.destroy(error)\n    this.emit('terminated', error)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-method\nfunction fetch (input, init = {}) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })\n\n  // 1. Let p be a new promise.\n  const p = createDeferredPromise()\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  let requestObject\n\n  try {\n    requestObject = new Request(input, init)\n  } catch (e) {\n    p.reject(e)\n    return p.promise\n  }\n\n  // 3. Let request be requestObject’s request.\n  const request = requestObject[kState]\n\n  // 4. If requestObject’s signal’s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort the fetch() call with p, request, null, and\n    //    requestObject’s signal’s abort reason.\n    abortFetch(p, request, null, requestObject.signal.reason)\n\n    // 2. Return p.\n    return p.promise\n  }\n\n  // 5. Let globalObject be request’s client’s global object.\n  const globalObject = request.client.globalObject\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request’s service-workers mode to \"none\".\n  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n    request.serviceWorkers = 'none'\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null\n\n  // 8. Let relevantRealm be this’s relevant Realm.\n  const relevantRealm = null\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false\n\n  // 10. Let controller be null.\n  let controller = null\n\n  // 11. Add the following abort steps to requestObject’s signal:\n  addAbortListener(\n    requestObject.signal,\n    () => {\n      // 1. Set locallyAborted to true.\n      locallyAborted = true\n\n      // 2. Assert: controller is non-null.\n      assert(controller != null)\n\n      // 3. Abort controller with requestObject’s signal’s abort reason.\n      controller.abort(requestObject.signal.reason)\n\n      // 4. Abort the fetch() call with p, request, responseObject,\n      //    and requestObject’s signal’s abort reason.\n      abortFetch(p, request, responseObject, requestObject.signal.reason)\n    }\n  )\n\n  // 12. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  const handleFetchDone = (response) =>\n    finalizeAndReportTiming(response, 'fetch')\n\n  // 13. Set controller to the result of calling fetch given request,\n  // with processResponseEndOfBody set to handleFetchDone, and processResponse\n  // given response being these substeps:\n\n  const processResponse = (response) => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return Promise.resolve()\n    }\n\n    // 2. If response’s aborted flag is set, then:\n    if (response.aborted) {\n      // 1. Let deserializedError be the result of deserialize a serialized\n      //    abort reason given controller’s serialized abort reason and\n      //    relevantRealm.\n\n      // 2. Abort the fetch() call with p, request, responseObject, and\n      //    deserializedError.\n\n      abortFetch(p, request, responseObject, controller.serializedAbortReason)\n      return Promise.resolve()\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(\n        Object.assign(new TypeError('fetch failed'), { cause: response.error })\n      )\n      return Promise.resolve()\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new Response()\n    responseObject[kState] = response\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = response.headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject)\n  }\n\n  controller = fetching({\n    request,\n    processResponseEndOfBody: handleFetchDone,\n    processResponse,\n    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici\n  })\n\n  // 14. Return p.\n  return p.promise\n}\n\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming (response, initiatorType = 'other') {\n  // 1. If response is an aborted network error, then return.\n  if (response.type === 'error' && response.aborted) {\n    return\n  }\n\n  // 2. If response’s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return\n  }\n\n  // 3. Let originalURL be response’s URL list[0].\n  const originalURL = response.urlList[0]\n\n  // 4. Let timingInfo be response’s timing info.\n  let timingInfo = response.timingInfo\n\n  // 5. Let cacheState be response’s cache state.\n  let cacheState = response.cacheState\n\n  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.\n  if (!urlIsHttpHttpsScheme(originalURL)) {\n    return\n  }\n\n  // 7. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return\n  }\n\n  // 8. If response’s timing allow passed flag is not set, then:\n  if (!response.timingAllowPassed) {\n    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n    timingInfo = createOpaqueTimingInfo({\n      startTime: timingInfo.startTime\n    })\n\n    //  2. Set cacheState to the empty string.\n    cacheState = ''\n  }\n\n  // 9. Set timingInfo’s end time to the coarsened shared current time\n  // given global’s relevant settings object’s cross-origin isolated\n  // capability.\n  // TODO: given global’s relevant settings object’s cross-origin isolated\n  // capability?\n  timingInfo.endTime = coarsenedSharedCurrentTime()\n\n  // 10. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(\n    timingInfo,\n    originalURL,\n    initiatorType,\n    globalThis,\n    cacheState\n  )\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {\n  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {\n    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch (p, request, responseObject, error) {\n  // Note: AbortSignal.reason was added in node v17.2.0\n  // which would give us an undefined error to reject with.\n  // Remove this once node v16 is no longer supported.\n  if (!error) {\n    error = new DOMException('The operation was aborted.', 'AbortError')\n  }\n\n  // 1. Reject promise with error.\n  p.reject(error)\n\n  // 2. If request’s body is not null and is readable, then cancel request’s\n  // body with error.\n  if (request.body != null && isReadable(request.body?.stream)) {\n    request.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n\n  // 3. If responseObject is null, then return.\n  if (responseObject == null) {\n    return\n  }\n\n  // 4. Let response be responseObject’s response.\n  const response = responseObject[kState]\n\n  // 5. If response’s body is not null and is readable, then error response’s\n  // body with error.\n  if (response.body != null && isReadable(response.body?.stream)) {\n    response.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching ({\n  request,\n  processRequestBodyChunkLength,\n  processRequestEndOfBody,\n  processResponse,\n  processResponseEndOfBody,\n  processResponseConsumeBody,\n  useParallelQueue = false,\n  dispatcher // undici\n}) {\n  // 1. Let taskDestination be null.\n  let taskDestination = null\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false\n\n  // 3. If request’s client is non-null, then:\n  if (request.client != null) {\n    // 1. Set taskDestination to request’s client’s global object.\n    taskDestination = request.client.globalObject\n\n    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability =\n      request.client.crossOriginIsolatedCapability\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)\n  const timingInfo = createOpaqueTimingInfo({\n    startTime: currenTime\n  })\n\n  // 6. Let fetchParams be a new fetch params whose\n  // request is request,\n  // timing info is timingInfo,\n  // process request body chunk length is processRequestBodyChunkLength,\n  // process request end-of-body is processRequestEndOfBody,\n  // process response is processResponse,\n  // process response consume body is processResponseConsumeBody,\n  // process response end-of-body is processResponseEndOfBody,\n  // task destination is taskDestination,\n  // and cross-origin isolated capability is crossOriginIsolatedCapability.\n  const fetchParams = {\n    controller: new Fetch(dispatcher),\n    request,\n    timingInfo,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseConsumeBody,\n    processResponseEndOfBody,\n    taskDestination,\n    crossOriginIsolatedCapability\n  }\n\n  // 7. If request’s body is a byte sequence, then set request’s body to\n  //    request’s body as a body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream)\n\n  // 8. If request’s window is \"client\", then set request’s window to request’s\n  // client, if request’s client’s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window =\n      request.client?.globalObject?.constructor?.name === 'Window'\n        ? request.client\n        : 'no-window'\n  }\n\n  // 9. If request’s origin is \"client\", then set request’s origin to request’s\n  // client’s origin.\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin\n  }\n\n  // 10. If all of the following conditions are true:\n  // TODO\n\n  // 11. If request’s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request’s client is non-null, then set request’s policy\n    // container to a clone of request’s client’s policy container. [HTML]\n    if (request.client != null) {\n      request.policyContainer = clonePolicyContainer(\n        request.client.policyContainer\n      )\n    } else {\n      // 2. Otherwise, set request’s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer()\n    }\n  }\n\n  // 12. If request’s header list does not contain `Accept`, then:\n  if (!request.headersList.contains('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*'\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request’s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request’s header list.\n    request.headersList.append('accept', value)\n  }\n\n  // 13. If request’s header list does not contain `Accept-Language`, then\n  // user agents should append `Accept-Language`/an appropriate value to\n  // request’s header list.\n  if (!request.headersList.contains('accept-language')) {\n    request.headersList.append('accept-language', '*')\n  }\n\n  // 14. If request’s priority is null, then use request’s initiator and\n  // destination appropriately in setting request’s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 15. If request is a subresource request, then:\n  if (subresourceSet.has(request.destination)) {\n    // TODO\n  }\n\n  // 16. Run main fetch given fetchParams.\n  mainFetch(fetchParams)\n    .catch(err => {\n      fetchParams.controller.terminate(err)\n    })\n\n  // 17. Return fetchParam's controller\n  return fetchParams.controller\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch (fetchParams, recursive = false) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. If request’s local-URLs-only flag is set and request’s current URL is\n  // not local, then set response to a network error.\n  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n    response = makeNetworkError('local URLs only')\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    response = makeNetworkError('bad port')\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request’s referrer policy is the empty string, then set request’s\n  // referrer policy to request’s policy container’s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy\n  }\n\n  // 8. If request’s referrer is not \"no-referrer\", then set request’s\n  // referrer to the result of invoking determine request’s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request)\n  }\n\n  // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request’s current URL’s scheme is \"http\"\n  // - request’s current URL’s host is a domain\n  // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      const currentURL = requestCurrentURL(request)\n\n      if (\n        // - request’s current URL’s origin is same origin with request’s origin,\n        //   and request’s response tainting is \"basic\"\n        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||\n        // request’s current URL’s scheme is \"data\"\n        (currentURL.protocol === 'data:') ||\n        // - request’s mode is \"navigate\" or \"websocket\"\n        (request.mode === 'navigate' || request.mode === 'websocket')\n      ) {\n        // 1. Set request’s response tainting to \"basic\".\n        request.responseTainting = 'basic'\n\n        // 2. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request’s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"')\n      }\n\n      // request’s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request’s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError(\n            'redirect mode cannot be \"follow\" for \"no-cors\" request'\n          )\n        }\n\n        // 2. Set request’s response tainting to \"opaque\".\n        request.responseTainting = 'opaque'\n\n        // 3. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request’s current URL’s scheme is not an HTTP(S) scheme\n      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n      }\n\n      // - request’s use-CORS-preflight flag is set\n      // - request’s unsafe-request flag is set and either request’s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request’s header list is not empty\n      //    1. Set request’s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request’s response tainting to \"cors\".\n      request.responseTainting = 'cors'\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch(fetchParams)\n    })()\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request’s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response’s header list.\n      // TODO\n      // 2. If request’s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response’s CORS-exposed header-name list to\n      // all unique header names in response’s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response’s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic')\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors')\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque')\n    } else {\n      assert(false)\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response’s internal response otherwise.\n  let internalResponse =\n    response.status === 0 ? response : response.internalResponse\n\n  // 15. If internalResponse’s URL list is empty, then set it to a clone of\n  // request’s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList)\n  }\n\n  // 16. If request’s timing allow failed flag is unset, then set\n  // internalResponse’s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n  // internalResponse’s range-requested flag is set, and request’s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (\n    response.type === 'opaque' &&\n    internalResponse.status === 206 &&\n    internalResponse.rangeRequested &&\n    !request.headers.contains('range')\n  ) {\n    response = internalResponse = makeNetworkError()\n  }\n\n  // 19. If response is not a network error and either request’s method is\n  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n  // set internalResponse’s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (\n    response.status !== 0 &&\n    (request.method === 'HEAD' ||\n      request.method === 'CONNECT' ||\n      nullBodyStatus.includes(internalResponse.status))\n  ) {\n    internalResponse.body = null\n    fetchParams.controller.dump = true\n  }\n\n  // 20. If request’s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = (reason) =>\n      fetchFinale(fetchParams, makeNetworkError(reason))\n\n    // 2. If request’s response tainting is \"opaque\", or response’s body is null,\n    // then run processBodyError and abort these steps.\n    if (request.responseTainting === 'opaque' || response.body == null) {\n      processBodyError(response.error)\n      return\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = (bytes) => {\n      // 1. If bytes do not match request’s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!bytesMatch(bytes, request.integrity)) {\n        processBodyError('integrity mismatch')\n        return\n      }\n\n      // 2. Set response’s body to bytes as a body.\n      response.body = safelyExtractBody(bytes)[0]\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response)\n    }\n\n    // 4. Fully read response’s body given processBody and processBodyError.\n    await fullyReadBody(response.body, processBody, processBodyError)\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nfunction schemeFetch (fetchParams) {\n  // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n  // cancelled state, we do not want this condition to trigger *unless* there have been\n  // no redirects. See https://github.com/nodejs/undici/issues/1776\n  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n    return Promise.resolve(makeAppropriateNetworkError(fetchParams))\n  }\n\n  // 2. Let request be fetchParams’s request.\n  const { request } = fetchParams\n\n  const { protocol: scheme } = requestCurrentURL(request)\n\n  // 3. Switch on request’s current URL’s scheme and run the associated steps:\n  switch (scheme) {\n    case 'about:': {\n      // If request’s current URL’s path is the string \"blank\", then return a new response\n      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,\n      // and body is the empty byte sequence as a body.\n\n      // Otherwise, return a network error.\n      return Promise.resolve(makeNetworkError('about scheme is not supported'))\n    }\n    case 'blob:': {\n      if (!resolveObjectURL) {\n        resolveObjectURL = require('buffer').resolveObjectURL\n      }\n\n      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.\n      const blobURLEntry = requestCurrentURL(request)\n\n      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n      // Buffer.resolveObjectURL does not ignore URL queries.\n      if (blobURLEntry.search.length !== 0) {\n        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))\n      }\n\n      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())\n\n      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s\n      //    object is not a Blob object, then return a network error.\n      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {\n        return Promise.resolve(makeNetworkError('invalid method'))\n      }\n\n      // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.\n      const bodyWithType = safelyExtractBody(blobURLEntryObject)\n\n      // 4. Let body be bodyWithType’s body.\n      const body = bodyWithType[0]\n\n      // 5. Let length be body’s length, serialized and isomorphic encoded.\n      const length = isomorphicEncode(`${body.length}`)\n\n      // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.\n      const type = bodyWithType[1] ?? ''\n\n      // 7. Return a new response whose status message is `OK`, header list is\n      //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.\n      const response = makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-length', { name: 'Content-Length', value: length }],\n          ['content-type', { name: 'Content-Type', value: type }]\n        ]\n      })\n\n      response.body = body\n\n      return Promise.resolve(response)\n    }\n    case 'data:': {\n      // 1. Let dataURLStruct be the result of running the\n      //    data: URL processor on request’s current URL.\n      const currentURL = requestCurrentURL(request)\n      const dataURLStruct = dataURLProcessor(currentURL)\n\n      // 2. If dataURLStruct is failure, then return a\n      //    network error.\n      if (dataURLStruct === 'failure') {\n        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))\n      }\n\n      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.\n      const mimeType = serializeAMimeType(dataURLStruct.mimeType)\n\n      // 4. Return a response whose status message is `OK`,\n      //    header list is « (`Content-Type`, mimeType) »,\n      //    and body is dataURLStruct’s body as a body.\n      return Promise.resolve(makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-type', { name: 'Content-Type', value: mimeType }]\n        ],\n        body: safelyExtractBody(dataURLStruct.body)[0]\n      }))\n    }\n    case 'file:': {\n      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n      // When in doubt, return a network error.\n      return Promise.resolve(makeNetworkError('not implemented... yet...'))\n    }\n    case 'http:':\n    case 'https:': {\n      // Return the result of running HTTP fetch given fetchParams.\n\n      return httpFetch(fetchParams)\n        .catch((err) => makeNetworkError(err))\n    }\n    default: {\n      return Promise.resolve(makeNetworkError('unknown scheme'))\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse (fetchParams, response) {\n  // 1. Set fetchParams’s request’s done flag.\n  fetchParams.request.done = true\n\n  // 2, If fetchParams’s process response done is not null, then queue a fetch\n  // task to run fetchParams’s process response done given response, with\n  // fetchParams’s task destination.\n  if (fetchParams.processResponseDone != null) {\n    queueMicrotask(() => fetchParams.processResponseDone(response))\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale (fetchParams, response) {\n  // 1. If response is a network error, then:\n  if (response.type === 'error') {\n    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».\n    response.urlList = [fetchParams.request.urlList[0]]\n\n    // 2. Set response’s timing info to the result of creating an opaque timing\n    // info for fetchParams’s timing info.\n    response.timingInfo = createOpaqueTimingInfo({\n      startTime: fetchParams.timingInfo.startTime\n    })\n  }\n\n  // 2. Let processResponseEndOfBody be the following steps:\n  const processResponseEndOfBody = () => {\n    // 1. Set fetchParams’s request’s done flag.\n    fetchParams.request.done = true\n\n    // If fetchParams’s process response end-of-body is not null,\n    // then queue a fetch task to run fetchParams’s process response\n    // end-of-body given response with fetchParams’s task destination.\n    if (fetchParams.processResponseEndOfBody != null) {\n      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))\n    }\n  }\n\n  // 3. If fetchParams’s process response is non-null, then queue a fetch task\n  // to run fetchParams’s process response given response, with fetchParams’s\n  // task destination.\n  if (fetchParams.processResponse != null) {\n    queueMicrotask(() => fetchParams.processResponse(response))\n  }\n\n  // 4. If response’s body is null, then run processResponseEndOfBody.\n  if (response.body == null) {\n    processResponseEndOfBody()\n  } else {\n  // 5. Otherwise:\n\n    // 1. Let transformStream be a new a TransformStream.\n\n    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,\n    // enqueues chunk in transformStream.\n    const identityTransformAlgorithm = (chunk, controller) => {\n      controller.enqueue(chunk)\n    }\n\n    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm\n    // and flushAlgorithm set to processResponseEndOfBody.\n    const transformStream = new TransformStream({\n      start () {},\n      transform: identityTransformAlgorithm,\n      flush: processResponseEndOfBody\n    }, {\n      size () {\n        return 1\n      }\n    }, {\n      size () {\n        return 1\n      }\n    })\n\n    // 4. Set response’s body to the result of piping response’s body through transformStream.\n    response.body = { stream: response.body.stream.pipeThrough(transformStream) }\n  }\n\n  // 6. If fetchParams’s process response consume body is non-null, then:\n  if (fetchParams.processResponseConsumeBody != null) {\n    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s\n    // process response consume body given response and nullOrBytes.\n    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)\n\n    // 2. Let processBodyError be this step: run fetchParams’s process\n    // response consume body given response and failure.\n    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)\n\n    // 3. If response’s body is null, then queue a fetch task to run processBody\n    // given null, with fetchParams’s task destination.\n    if (response.body == null) {\n      queueMicrotask(() => processBody(null))\n    } else {\n      // 4. Otherwise, fully read response’s body given processBody, processBodyError,\n      // and fetchParams’s task destination.\n      return fullyReadBody(response.body, processBody, processBodyError)\n    }\n    return Promise.resolve()\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch (fetchParams) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null\n\n  // 4. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 5. If request’s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request’s redirect mode is \"follow\", then set request’s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none'\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)\n\n    // 4. If request’s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (\n      request.responseTainting === 'cors' &&\n      corsCheck(request, response) === 'failure'\n    ) {\n      return makeNetworkError('cors failure')\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request’s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true\n    }\n  }\n\n  // 7. If either request’s response tainting or response’s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request’s origin, request’s client, request’s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if (\n    (request.responseTainting === 'opaque' || response.type === 'opaque') &&\n    crossOriginResourcePolicyCheck(\n      request.origin,\n      request.client,\n      request.destination,\n      actualResponse\n    ) === 'blocked'\n  ) {\n    return makeNetworkError('blocked')\n  }\n\n  // 8. If actualResponse’s status is a redirect status, then:\n  if (redirectStatusSet.has(actualResponse.status)) {\n    // 1. If actualResponse’s status is not 303, request’s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    if (request.redirect !== 'manual') {\n      fetchParams.controller.connection.destroy()\n    }\n\n    // 2. Switch on request’s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError('unexpected redirect')\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      // NOTE(spec): On the web this would return an `opaqueredirect` response,\n      // but that doesn't make sense server side.\n      // See https://github.com/nodejs/undici/issues/1193.\n      response = actualResponse\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch(fetchParams, response)\n    } else {\n      assert(false)\n    }\n  }\n\n  // 9. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 10. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nfunction httpRedirectFetch (fetchParams, response) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response’s internal response otherwise.\n  const actualResponse = response.internalResponse\n    ? response.internalResponse\n    : response\n\n  // 3. Let locationURL be actualResponse’s location URL given request’s current\n  // URL’s fragment.\n  let locationURL\n\n  try {\n    locationURL = responseLocationURL(\n      actualResponse,\n      requestCurrentURL(request).hash\n    )\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return Promise.resolve(makeNetworkError(err))\n  }\n\n  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!urlIsHttpHttpsScheme(locationURL)) {\n    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))\n  }\n\n  // 7. If request’s redirect count is 20, then return a network error.\n  if (request.redirectCount === 20) {\n    return Promise.resolve(makeNetworkError('redirect count exceeded'))\n  }\n\n  // 8. Increase request’s redirect count by 1.\n  request.redirectCount += 1\n\n  // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n  // request’s origin is not same origin with locationURL’s origin, then return\n  //  a network error.\n  if (\n    request.mode === 'cors' &&\n    (locationURL.username || locationURL.password) &&\n    !sameOrigin(request, locationURL)\n  ) {\n    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode \"cors\"'))\n  }\n\n  // 10. If request’s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (\n    request.responseTainting === 'cors' &&\n    (locationURL.username || locationURL.password)\n  ) {\n    return Promise.resolve(makeNetworkError(\n      'URL cannot contain credentials for request mode \"cors\"'\n    ))\n  }\n\n  // 11. If actualResponse’s status is not 303, request’s body is non-null,\n  // and request’s body’s source is null, then return a network error.\n  if (\n    actualResponse.status !== 303 &&\n    request.body != null &&\n    request.body.source == null\n  ) {\n    return Promise.resolve(makeNetworkError())\n  }\n\n  // 12. If one of the following is true\n  // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n  if (\n    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||\n    (actualResponse.status === 303 &&\n      !GET_OR_HEAD.includes(request.method))\n  ) {\n    // then:\n    // 1. Set request’s method to `GET` and request’s body to null.\n    request.method = 'GET'\n    request.body = null\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request’s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName)\n    }\n  }\n\n  // 13. If request’s current URL’s origin is not same origin with locationURL’s\n  //     origin, then for each headerName of CORS non-wildcard request-header name,\n  //     delete headerName from request’s header list.\n  if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n    request.headersList.delete('authorization')\n\n    // https://fetch.spec.whatwg.org/#authentication-entries\n    request.headersList.delete('proxy-authorization', true)\n\n    // \"Cookie\" and \"Host\" are forbidden request-headers, which undici doesn't implement.\n    request.headersList.delete('cookie')\n    request.headersList.delete('host')\n  }\n\n  // 14. If request’s body is non-null, then set request’s body to the first return\n  // value of safely extracting request’s body’s source.\n  if (request.body != null) {\n    assert(request.body.source != null)\n    request.body = safelyExtractBody(request.body.source)[0]\n  }\n\n  // 15. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams’s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =\n    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)\n\n  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n  //  redirect start time to timingInfo’s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime\n  }\n\n  // 18. Append locationURL to request’s URL list.\n  request.urlList.push(locationURL)\n\n  // 19. Invoke set request’s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse)\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch(fetchParams, true)\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch (\n  fetchParams,\n  isAuthenticationFetch = false,\n  isNewConnectionFetch = false\n) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null\n\n  // 4. Let response be null.\n  let response = null\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request’s window is \"no-window\" and request’s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams\n    httpRequest = request\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request)\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = { ...fetchParams }\n\n    // 3. Set httpFetchParams’s request to httpRequest.\n    httpFetchParams.request = httpRequest\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials =\n    request.credentials === 'include' ||\n    (request.credentials === 'same-origin' &&\n      request.responseTainting === 'basic')\n\n  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null\n\n  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (\n    httpRequest.body == null &&\n    ['POST', 'PUT'].includes(httpRequest.method)\n  ) {\n    contentLengthHeaderValue = '0'\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength != null) {\n    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n  //    list.\n  if (contentLengthHeaderValue != null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue)\n  }\n\n  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n  //    contentLengthHeaderValue) to httpRequest’s header list.\n\n  //    10. If contentLength is non-null and httpRequest’s keepalive is true,\n  //    then:\n  if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    11. If httpRequest’s referrer is a URL, then append\n  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n  //     to httpRequest’s header list.\n  if (httpRequest.referrer instanceof URL) {\n    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))\n  }\n\n  //    12. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest)\n\n  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest)\n\n  //    14. If httpRequest’s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest’s header list.\n  if (!httpRequest.headersList.contains('user-agent')) {\n    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')\n  }\n\n  //    15. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest’s cache mode to \"no-store\".\n  if (\n    httpRequest.cache === 'default' &&\n    (httpRequest.headersList.contains('if-modified-since') ||\n      httpRequest.headersList.contains('if-none-match') ||\n      httpRequest.headersList.contains('if-unmodified-since') ||\n      httpRequest.headersList.contains('if-match') ||\n      httpRequest.headersList.contains('if-range'))\n  ) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    16. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest’s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n  if (\n    httpRequest.cache === 'no-cache' &&\n    !httpRequest.preventNoCacheCacheControlHeaderModification &&\n    !httpRequest.headersList.contains('cache-control')\n  ) {\n    httpRequest.headersList.append('cache-control', 'max-age=0')\n  }\n\n  //    17. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest’s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache')\n    }\n\n    // 2. If httpRequest’s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache')\n    }\n  }\n\n  //    18. If httpRequest’s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n  if (httpRequest.headersList.contains('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity')\n  }\n\n  //    19. Modify httpRequest’s header list per HTTP. Do not append a given\n  //    header if httpRequest’s header list contains that header’s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.contains('accept-encoding')) {\n    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')\n    }\n  }\n\n  httpRequest.headersList.delete('host')\n\n  //    20. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    21. If there’s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    22. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    23. If httpCache is null, then set httpRequest’s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    24. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then return the appropriate network error for fetchParams.\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached')\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch(\n      httpFetchParams,\n      includeCredentials,\n      isNewConnectionFetch\n    )\n\n    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (\n      !safeMethodsSet.has(httpRequest.method) &&\n      forwardResponse.status >= 200 &&\n      forwardResponse.status <= 399\n    ) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n  response.urlList = [...httpRequest.urlList]\n\n  // 12. If httpRequest’s header list contains `Range`, then set response’s\n  // range-requested flag.\n  if (httpRequest.headersList.contains('range')) {\n    response.rangeRequested = true\n  }\n\n  // 13. Set response’s request-includes-credentials to includeCredentials.\n  response.requestIncludesCredentials = includeCredentials\n\n  // 14. If response’s status is 401, httpRequest’s response tainting is not\n  // \"cors\", includeCredentials is true, and request’s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 15. If response’s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request’s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError()\n    }\n\n    // 2. ???\n\n    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 4. Prompt the end user as appropriate in request’s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required')\n  }\n\n  // 16. If all of the following are true\n  if (\n    // response’s status is 421\n    response.status === 421 &&\n    // isNewConnectionFetch is false\n    !isNewConnectionFetch &&\n    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n    (request.body == null || request.body.source != null)\n  ) {\n    // then:\n\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    fetchParams.controller.connection.destroy()\n\n    response = await httpNetworkOrCacheFetch(\n      fetchParams,\n      isAuthenticationFetch,\n      true\n    )\n  }\n\n  // 17. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 18. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch (\n  fetchParams,\n  includeCredentials = false,\n  forceNewConnection = false\n) {\n  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)\n\n  fetchParams.controller.connection = {\n    abort: null,\n    destroyed: false,\n    destroy (err) {\n      if (!this.destroyed) {\n        this.destroyed = true\n        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))\n      }\n    }\n  }\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 4. Let httpCache be the result of determining the HTTP cache partition,\n  // given request.\n  // TODO: cache\n  const httpCache = null\n\n  // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n  if (httpCache == null) {\n    request.cache = 'no-store'\n  }\n\n  // 6. Let networkPartitionKey be the result of determining the network\n  // partition key given request.\n  // TODO\n\n  // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n  // \"no\".\n  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars\n\n  // 8. Switch on request’s mode:\n  if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request’s current URL.\n    // TODO\n  } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request’s current URL’s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n  }\n\n  // 9. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If connection is failure, then return a network error.\n\n  //    2. Set timingInfo’s final connection timing info to the result of\n  //    calling clamp and coarsen connection timing info with connection’s\n  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s\n  //    cross-origin isolated capability.\n\n  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,\n  //    and request’s body’s source is null, then append (`Transfer-Encoding`,\n  //    `chunked`) to request’s header list.\n\n  //    4. Set timingInfo’s final network-request start time to the coarsened\n  //    shared current time given fetchParams’s cross-origin isolated\n  //    capability.\n\n  //    5. Set response to the result of making an HTTP request over connection\n  //    using request with the following caveats:\n\n  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n  //        - If request’s body is non-null, and request’s body’s source is null,\n  //        then the user agent may have a buffer of up to 64 kibibytes and store\n  //        a part of request’s body in that buffer. If the user agent reads from\n  //        request’s body beyond that buffer’s size and the user agent needs to\n  //        resend request, then instead return a network error.\n\n  //        - Set timingInfo’s final network-response start time to the coarsened\n  //        shared current time given fetchParams’s cross-origin isolated capability,\n  //        immediately after the user agent’s HTTP parser receives the first byte\n  //        of the response (e.g., frame header bytes for HTTP/2 or response status\n  //        line for HTTP/1.x).\n\n  //        - Wait until all the headers are transmitted.\n\n  //        - Any responses whose status is in the range 100 to 199, inclusive,\n  //        and is not 101, are to be ignored, except for the purposes of setting\n  //        timingInfo’s final network-response start time above.\n\n  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and\n  //    response is transferred via HTTP/1.0 or older, then return a network\n  //    error.\n\n  //    - If the HTTP request results in a TLS client certificate dialog, then:\n\n  //        1. If request’s window is an environment settings object, make the\n  //        dialog available in request’s window.\n\n  //        2. Otherwise, return a network error.\n\n  // To transmit request’s body body, run these steps:\n  let requestBody = null\n  // 1. If body is null and fetchParams’s process request end-of-body is\n  // non-null, then queue a fetch task given fetchParams’s process request\n  // end-of-body and fetchParams’s task destination.\n  if (request.body == null && fetchParams.processRequestEndOfBody) {\n    queueMicrotask(() => fetchParams.processRequestEndOfBody())\n  } else if (request.body != null) {\n    // 2. Otherwise, if body is non-null:\n\n    //    1. Let processBodyChunk given bytes be these steps:\n    const processBodyChunk = async function * (bytes) {\n      // 1. If the ongoing fetch is terminated, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. Run this step in parallel: transmit bytes.\n      yield bytes\n\n      // 3. If fetchParams’s process request body is non-null, then run\n      // fetchParams’s process request body given bytes’s length.\n      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)\n    }\n\n    // 2. Let processEndOfBody be these steps:\n    const processEndOfBody = () => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If fetchParams’s process request end-of-body is non-null,\n      // then run fetchParams’s process request end-of-body.\n      if (fetchParams.processRequestEndOfBody) {\n        fetchParams.processRequestEndOfBody()\n      }\n    }\n\n    // 3. Let processBodyError given e be these steps:\n    const processBodyError = (e) => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If e is an \"AbortError\" DOMException, then abort fetchParams’s controller.\n      if (e.name === 'AbortError') {\n        fetchParams.controller.abort()\n      } else {\n        fetchParams.controller.terminate(e)\n      }\n    }\n\n    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,\n    // processBodyError, and fetchParams’s task destination.\n    requestBody = (async function * () {\n      try {\n        for await (const bytes of request.body.stream) {\n          yield * processBodyChunk(bytes)\n        }\n        processEndOfBody()\n      } catch (err) {\n        processBodyError(err)\n      }\n    })()\n  }\n\n  try {\n    // socket is only provided for websockets\n    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })\n\n    if (socket) {\n      response = makeResponse({ status, statusText, headersList, socket })\n    } else {\n      const iterator = body[Symbol.asyncIterator]()\n      fetchParams.controller.next = () => iterator.next()\n\n      response = makeResponse({ status, statusText, headersList })\n    }\n  } catch (err) {\n    // 10. If aborted, then:\n    if (err.name === 'AbortError') {\n      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      fetchParams.controller.connection.destroy()\n\n      // 2. Return the appropriate network error for fetchParams.\n      return makeAppropriateNetworkError(fetchParams, err)\n    }\n\n    return makeNetworkError(err)\n  }\n\n  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n  // if it is suspended.\n  const pullAlgorithm = () => {\n    fetchParams.controller.resume()\n  }\n\n  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s\n  // controller with reason, given reason.\n  const cancelAlgorithm = (reason) => {\n    fetchParams.controller.abort(reason)\n  }\n\n  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n  // the user agent.\n  // TODO\n\n  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n  // TODO\n\n  // 15. Let stream be a new ReadableStream.\n  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,\n  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  const stream = new ReadableStream(\n    {\n      async start (controller) {\n        fetchParams.controller.controller = controller\n      },\n      async pull (controller) {\n        await pullAlgorithm(controller)\n      },\n      async cancel (reason) {\n        await cancelAlgorithm(reason)\n      }\n    },\n    {\n      highWaterMark: 0,\n      size () {\n        return 1\n      }\n    }\n  )\n\n  // 17. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. Set response’s body to a new body whose stream is stream.\n  response.body = { stream }\n\n  //    2. If response is not a network error and request’s cache mode is\n  //    not \"no-store\", then update response in httpCache for request.\n  //    TODO\n\n  //    3. If includeCredentials is true and the user agent is not configured\n  //    to block cookies for request (see section 7 of [COOKIES]), then run the\n  //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n  //    the value of each header whose name is a byte-case-insensitive match for\n  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.\n  //    TODO\n\n  // 18. If aborted, then:\n  // TODO\n\n  // 19. Run these steps in parallel:\n\n  //    1. Run these steps, but abort when fetchParams is canceled:\n  fetchParams.controller.on('terminated', onAborted)\n  fetchParams.controller.resume = async () => {\n    // 1. While true\n    while (true) {\n      // 1-3. See onData...\n\n      // 4. Set bytes to the result of handling content codings given\n      // codings and bytes.\n      let bytes\n      let isFailure\n      try {\n        const { done, value } = await fetchParams.controller.next()\n\n        if (isAborted(fetchParams)) {\n          break\n        }\n\n        bytes = done ? undefined : value\n      } catch (err) {\n        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n          // zlib doesn't like empty streams.\n          bytes = undefined\n        } else {\n          bytes = err\n\n          // err may be propagated from the result of calling readablestream.cancel,\n          // which might not be an error. https://github.com/nodejs/undici/issues/2009\n          isFailure = true\n        }\n      }\n\n      if (bytes === undefined) {\n        // 2. Otherwise, if the bytes transmission for response’s message\n        // body is done normally and stream is readable, then close\n        // stream, finalize response for fetchParams and response, and\n        // abort these in-parallel steps.\n        readableStreamClose(fetchParams.controller.controller)\n\n        finalizeResponse(fetchParams, response)\n\n        return\n      }\n\n      // 5. Increase timingInfo’s decoded body size by bytes’s length.\n      timingInfo.decodedBodySize += bytes?.byteLength ?? 0\n\n      // 6. If bytes is failure, then terminate fetchParams’s controller.\n      if (isFailure) {\n        fetchParams.controller.terminate(bytes)\n        return\n      }\n\n      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n      // into stream.\n      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))\n\n      // 8. If stream is errored, then terminate the ongoing fetch.\n      if (isErrored(stream)) {\n        fetchParams.controller.terminate()\n        return\n      }\n\n      // 9. If stream doesn’t need more data ask the user agent to suspend\n      // the ongoing fetch.\n      if (!fetchParams.controller.controller.desiredSize) {\n        return\n      }\n    }\n  }\n\n  //    2. If aborted, then:\n  function onAborted (reason) {\n    // 2. If fetchParams is aborted, then:\n    if (isAborted(fetchParams)) {\n      // 1. Set response’s aborted flag.\n      response.aborted = true\n\n      // 2. If stream is readable, then error stream with the result of\n      //    deserialize a serialized abort reason given fetchParams’s\n      //    controller’s serialized abort reason and an\n      //    implementation-defined realm.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(\n          fetchParams.controller.serializedAbortReason\n        )\n      }\n    } else {\n      // 3. Otherwise, if stream is readable, error stream with a TypeError.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(new TypeError('terminated', {\n          cause: isErrorLike(reason) ? reason : undefined\n        }))\n      }\n    }\n\n    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n    fetchParams.controller.connection.destroy()\n  }\n\n  // 20. Return response.\n  return response\n\n  async function dispatch ({ body }) {\n    const url = requestCurrentURL(request)\n    /** @type {import('../..').Agent} */\n    const agent = fetchParams.controller.dispatcher\n\n    return new Promise((resolve, reject) => agent.dispatch(\n      {\n        path: url.pathname + url.search,\n        origin: url.origin,\n        method: request.method,\n        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,\n        headers: request.headersList.entries,\n        maxRedirections: 0,\n        upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n      },\n      {\n        body: null,\n        abort: null,\n\n        onConnect (abort) {\n          // TODO (fix): Do we need connection here?\n          const { connection } = fetchParams.controller\n\n          if (connection.destroyed) {\n            abort(new DOMException('The operation was aborted.', 'AbortError'))\n          } else {\n            fetchParams.controller.on('terminated', abort)\n            this.abort = connection.abort = abort\n          }\n        },\n\n        onHeaders (status, headersList, resume, statusText) {\n          if (status < 200) {\n            return\n          }\n\n          let codings = []\n          let location = ''\n\n          const headers = new Headers()\n\n          // For H2, the headers are a plain JS object\n          // We distinguish between them and iterate accordingly\n          if (Array.isArray(headersList)) {\n            for (let n = 0; n < headersList.length; n += 2) {\n              const key = headersList[n + 0].toString('latin1')\n              const val = headersList[n + 1].toString('latin1')\n              if (key.toLowerCase() === 'content-encoding') {\n                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                // \"All content-coding values are case-insensitive...\"\n                codings = val.toLowerCase().split(',').map((x) => x.trim())\n              } else if (key.toLowerCase() === 'location') {\n                location = val\n              }\n\n              headers[kHeadersList].append(key, val)\n            }\n          } else {\n            const keys = Object.keys(headersList)\n            for (const key of keys) {\n              const val = headersList[key]\n              if (key.toLowerCase() === 'content-encoding') {\n                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                // \"All content-coding values are case-insensitive...\"\n                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()\n              } else if (key.toLowerCase() === 'location') {\n                location = val\n              }\n\n              headers[kHeadersList].append(key, val)\n            }\n          }\n\n          this.body = new Readable({ read: resume })\n\n          const decoders = []\n\n          const willFollow = request.redirect === 'follow' &&\n            location &&\n            redirectStatusSet.has(status)\n\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n            for (const coding of codings) {\n              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n              if (coding === 'x-gzip' || coding === 'gzip') {\n                decoders.push(zlib.createGunzip({\n                  // Be less strict when decoding compressed responses, since sometimes\n                  // servers send slightly invalid responses that are still accepted\n                  // by common browsers.\n                  // Always using Z_SYNC_FLUSH is what cURL does.\n                  flush: zlib.constants.Z_SYNC_FLUSH,\n                  finishFlush: zlib.constants.Z_SYNC_FLUSH\n                }))\n              } else if (coding === 'deflate') {\n                decoders.push(zlib.createInflate())\n              } else if (coding === 'br') {\n                decoders.push(zlib.createBrotliDecompress())\n              } else {\n                decoders.length = 0\n                break\n              }\n            }\n          }\n\n          resolve({\n            status,\n            statusText,\n            headersList: headers[kHeadersList],\n            body: decoders.length\n              ? pipeline(this.body, ...decoders, () => { })\n              : this.body.on('error', () => {})\n          })\n\n          return true\n        },\n\n        onData (chunk) {\n          if (fetchParams.controller.dump) {\n            return\n          }\n\n          // 1. If one or more bytes have been transmitted from response’s\n          // message body, then:\n\n          //  1. Let bytes be the transmitted bytes.\n          const bytes = chunk\n\n          //  2. Let codings be the result of extracting header list values\n          //  given `Content-Encoding` and response’s header list.\n          //  See pullAlgorithm.\n\n          //  3. Increase timingInfo’s encoded body size by bytes’s length.\n          timingInfo.encodedBodySize += bytes.byteLength\n\n          //  4. See pullAlgorithm...\n\n          return this.body.push(bytes)\n        },\n\n        onComplete () {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          fetchParams.controller.ended = true\n\n          this.body.push(null)\n        },\n\n        onError (error) {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          this.body?.destroy(error)\n\n          fetchParams.controller.terminate(error)\n\n          reject(error)\n        },\n\n        onUpgrade (status, headersList, socket) {\n          if (status !== 101) {\n            return\n          }\n\n          const headers = new Headers()\n\n          for (let n = 0; n < headersList.length; n += 2) {\n            const key = headersList[n + 0].toString('latin1')\n            const val = headersList[n + 1].toString('latin1')\n\n            headers[kHeadersList].append(key, val)\n          }\n\n          resolve({\n            status,\n            statusText: STATUS_CODES[status],\n            headersList: headers[kHeadersList],\n            socket\n          })\n\n          return true\n        }\n      }\n    ))\n  }\n}\n\nmodule.exports = {\n  fetch,\n  Fetch,\n  fetching,\n  finalizeAndReportTiming\n}\n","/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod,\n  makePolicyContainer,\n  normalizeMethodRecord\n} = require('./util')\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require('events')\n\nlet TransformStream = globalThis.TransformStream\n\nconst kAbortController = Symbol('abortController')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kConstruct) {\n      return\n    }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin(),\n        get origin () {\n          return this.baseUrl?.origin\n        },\n        policyContainer: makePolicyContainer()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    const initHasKey = Object.keys(init).length !== 0\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (\n          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||\n          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))\n        ) {\n          request.referrer = 'client'\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(method)) {\n        throw new TypeError(`'${method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethodsSet.has(method.toUpperCase())) {\n        throw new TypeError(`'${method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethodRecord[method] ?? normalizeMethod(method)\n\n      // 4. Set request’s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac\n\n        const acRef = new WeakRef(ac)\n        const abort = function () {\n          const ac = acRef.deref()\n          if (ac !== undefined) {\n            ac.abort(this.reason)\n          }\n        }\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          }\n        } catch {}\n\n        util.addAbortListener(signal, abort)\n        requestFinalizer.register(ac, { signal, abort })\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = this[kHeaders][kHeadersList]\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const [key, val] of headers) {\n          headersList.append(key, val)\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      (init.body != null || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kConstruct)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers(kConstruct)\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      util.addAbortListener(\n        this.signal,\n        () => {\n          ac.abort(this.signal.reason)\n        }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n","'use strict'\n\nconst { Headers, HeadersList, fill } = require('./headers')\nconst { extractBody, cloneBody, mixinBody } = require('./body')\nconst util = require('../core/util')\nconst { kEnumerableProperty } = util\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode\n} = require('./util')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  DOMException\n} = require('./constants')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { FormData } = require('./formdata')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { types } = require('util')\n\nconst ReadableStream = globalThis.ReadableStream || require('stream/web').ReadableStream\nconst textEncoder = new TextEncoder('utf-8')\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error () {\n    // TODO\n    const relevantRealm = { settingsObject: {} }\n\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this’s\n    // relevant Realm.\n    const responseObject = new Response()\n    responseObject[kState] = makeNetworkError()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json (data, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })\n\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init)\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(\n      serializeJavascriptValueToJSONString(data)\n    )\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes)\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this’s relevant Realm.\n    const relevantRealm = { settingsObject: {} }\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'response'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })\n\n    // 5. Return responseObject.\n    return responseObject\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect (url, status = 302) {\n    const relevantRealm = { settingsObject: {} }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })\n\n    url = webidl.converters.USVString(url)\n    status = webidl.converters['unsigned short'](status)\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object’s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL\n    try {\n      parsedURL = new URL(url, getGlobalOrigin())\n    } catch (err) {\n      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {\n        cause: err\n      })\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError('Invalid status code ' + status)\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this’s relevant Realm.\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Set responseObject’s response’s status to status.\n    responseObject[kState].status = status\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL))\n\n    // 7. Append `Location`/value to responseObject’s response’s header list.\n    responseObject[kState].headersList.append('location', value)\n\n    // 8. Return responseObject.\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor (body = null, init = {}) {\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body)\n    }\n\n    init = webidl.converters.ResponseInit(init)\n\n    // TODO\n    this[kRealm] = { settingsObject: {} }\n\n    // 1. Set this’s response to a new response.\n    this[kState] = makeResponse({})\n\n    // 2. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is this’s response’s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kGuard] = 'response'\n    this[kHeaders][kHeadersList] = this[kState].headersList\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body)\n      bodyWithType = { body: extractedBody, type }\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType)\n  }\n\n  // Returns response’s type, e.g., \"cors\".\n  get type () {\n    webidl.brandCheck(this, Response)\n\n    // The type getter steps are to return this’s response’s type.\n    return this[kState].type\n  }\n\n  // Returns response’s URL, if it has one; otherwise the empty string.\n  get url () {\n    webidl.brandCheck(this, Response)\n\n    const urlList = this[kState].urlList\n\n    // The url getter steps are to return the empty string if this’s\n    // response’s URL is null; otherwise this’s response’s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null\n\n    if (url === null) {\n      return ''\n    }\n\n    return URLSerializer(url, true)\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected () {\n    webidl.brandCheck(this, Response)\n\n    // The redirected getter steps are to return true if this’s response’s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1\n  }\n\n  // Returns response’s status.\n  get status () {\n    webidl.brandCheck(this, Response)\n\n    // The status getter steps are to return this’s response’s status.\n    return this[kState].status\n  }\n\n  // Returns whether response’s status is an ok status.\n  get ok () {\n    webidl.brandCheck(this, Response)\n\n    // The ok getter steps are to return true if this’s response’s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299\n  }\n\n  // Returns response’s status message.\n  get statusText () {\n    webidl.brandCheck(this, Response)\n\n    // The statusText getter steps are to return this’s response’s status\n    // message.\n    return this[kState].statusText\n  }\n\n  // Returns response’s headers as Headers.\n  get headers () {\n    webidl.brandCheck(this, Response)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Response)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Response)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  // Returns a clone of response.\n  clone () {\n    webidl.brandCheck(this, Response)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || (this.body && this.body.locked)) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      })\n    }\n\n    // 2. Let clonedResponse be the result of cloning this’s response.\n    const clonedResponse = cloneResponse(this[kState])\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n    const clonedResponseObject = new Response()\n    clonedResponseObject[kState] = clonedResponse\n    clonedResponseObject[kRealm] = this[kRealm]\n    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList\n    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    return clonedResponseObject\n  }\n}\n\nmixinBody(Response)\n\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n})\n\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse (response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response’s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(\n      cloneResponse(response.internalResponse),\n      response.type\n    )\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({ ...response, body: null })\n\n  // 3. If response’s body is non-null, then set newResponse’s body to the\n  // result of cloning response’s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(response.body)\n  }\n\n  // 4. Return newResponse.\n  return newResponse\n}\n\nfunction makeResponse (init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList(),\n    urlList: init.urlList ? [...init.urlList] : []\n  }\n}\n\nfunction makeNetworkError (reason) {\n  const isError = isErrorLike(reason)\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError\n      ? reason\n      : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  })\n}\n\nfunction makeFilteredResponse (response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  }\n\n  return new Proxy(response, {\n    get (target, p) {\n      return p in state ? state[p] : target[p]\n    },\n    set (target, p, value) {\n      assert(!(p in state))\n      target[p] = value\n      return true\n    }\n  })\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse (response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request’s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response’s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    })\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response’s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response’s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    })\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    })\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    })\n  } else {\n    assert(false)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError (fetchParams, err = null) {\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams))\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams)\n    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))\n    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse (response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.')\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText')\n    }\n  }\n\n  // 3. Set response’s response’s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status\n  }\n\n  // 4. Set response’s response’s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers)\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: 'Invalid response status code ' + response.status\n      })\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {\n      response[kState].headersList.append('content-type', body.type)\n    }\n  }\n}\n\nwebidl.converters.ReadableStream = webidl.interfaceConverter(\n  ReadableStream\n)\n\nwebidl.converters.FormData = webidl.interfaceConverter(\n  FormData\n)\n\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(\n  URLSearchParams\n)\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, { strict: false })\n  }\n\n  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {\n    return webidl.converters.BufferSource(V)\n  }\n\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, { strict: false })\n  }\n\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V)\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V\n  }\n\n  return webidl.converters.XMLHttpRequestBodyInit(V)\n}\n\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n  {\n    key: 'status',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 200\n  },\n  {\n    key: 'statusText',\n    converter: webidl.converters.ByteString,\n    defaultValue: ''\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  }\n])\n\nmodule.exports = {\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse\n}\n","'use strict'\n\nmodule.exports = {\n  kUrl: Symbol('url'),\n  kHeaders: Symbol('headers'),\n  kSignal: Symbol('signal'),\n  kState: Symbol('state'),\n  kGuard: Symbol('guard'),\n  kRealm: Symbol('realm')\n}\n","'use strict'\n\nconst { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require('./constants')\nconst { getGlobalOrigin } = require('./global')\nconst { performance } = require('perf_hooks')\nconst { isBlobLike, toUSVString, ReadableStreamFrom } = require('../core/util')\nconst assert = require('assert')\nconst { isUint8Array } = require('util/types')\n\nlet supportedHashes = []\n\n// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable\n/** @type {import('crypto')|undefined} */\nlet crypto\n\ntry {\n  crypto = require('crypto')\n  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']\n  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))\n/* c8 ignore next 3 */\n} catch {\n}\n\nfunction responseURL (response) {\n  // https://fetch.spec.whatwg.org/#responses\n  // A response has an associated URL. It is a pointer to the last URL\n  // in response’s URL list and null if response’s URL list is empty.\n  const urlList = response.urlList\n  const length = urlList.length\n  return length === 0 ? null : urlList[length - 1].toString()\n}\n\n// https://fetch.spec.whatwg.org/#concept-response-location-url\nfunction responseLocationURL (response, requestFragment) {\n  // 1. If response’s status is not a redirect status, then return null.\n  if (!redirectStatusSet.has(response.status)) {\n    return null\n  }\n\n  // 2. Let location be the result of extracting header list values given\n  // `Location` and response’s header list.\n  let location = response.headersList.get('location')\n\n  // 3. If location is a header value, then set location to the result of\n  //    parsing location with response’s URL.\n  if (location !== null && isValidHeaderValue(location)) {\n    location = new URL(location, responseURL(response))\n  }\n\n  // 4. If location is a URL whose fragment is null, then set location’s\n  // fragment to requestFragment.\n  if (location && !location.hash) {\n    location.hash = requestFragment\n  }\n\n  // 5. Return location.\n  return location\n}\n\n/** @returns {URL} */\nfunction requestCurrentURL (request) {\n  return request.urlList[request.urlList.length - 1]\n}\n\nfunction requestBadPort (request) {\n  // 1. Let url be request’s current URL.\n  const url = requestCurrentURL(request)\n\n  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,\n  // then return blocked.\n  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {\n    return 'blocked'\n  }\n\n  // 3. Return allowed.\n  return 'allowed'\n}\n\nfunction isErrorLike (object) {\n  return object instanceof Error || (\n    object?.constructor?.name === 'Error' ||\n    object?.constructor?.name === 'DOMException'\n  )\n}\n\n// Check whether |statusText| is a ByteString and\n// matches the Reason-Phrase token production.\n// RFC 2616: https://tools.ietf.org/html/rfc2616\n// RFC 7230: https://tools.ietf.org/html/rfc7230\n// \"reason-phrase = *( HTAB / SP / VCHAR / obs-text )\"\n// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116\nfunction isValidReasonPhrase (statusText) {\n  for (let i = 0; i < statusText.length; ++i) {\n    const c = statusText.charCodeAt(i)\n    if (\n      !(\n        (\n          c === 0x09 || // HTAB\n          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR\n          (c >= 0x80 && c <= 0xff)\n        ) // obs-text\n      )\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n * @param {number} c\n */\nfunction isTokenCharCode (c) {\n  switch (c) {\n    case 0x22:\n    case 0x28:\n    case 0x29:\n    case 0x2c:\n    case 0x2f:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x7b:\n    case 0x7d:\n      // DQUOTE and \"(),/:;<=>?@[\\]{}\"\n      return false\n    default:\n      // VCHAR %x21-7E\n      return c >= 0x21 && c <= 0x7e\n  }\n}\n\n/**\n * @param {string} characters\n */\nfunction isValidHTTPToken (characters) {\n  if (characters.length === 0) {\n    return false\n  }\n  for (let i = 0; i < characters.length; ++i) {\n    if (!isTokenCharCode(characters.charCodeAt(i))) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-name\n * @param {string} potentialValue\n */\nfunction isValidHeaderName (potentialValue) {\n  return isValidHTTPToken(potentialValue)\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-value\n * @param {string} potentialValue\n */\nfunction isValidHeaderValue (potentialValue) {\n  // - Has no leading or trailing HTTP tab or space bytes.\n  // - Contains no 0x00 (NUL) or HTTP newline bytes.\n  if (\n    potentialValue.startsWith('\\t') ||\n    potentialValue.startsWith(' ') ||\n    potentialValue.endsWith('\\t') ||\n    potentialValue.endsWith(' ')\n  ) {\n    return false\n  }\n\n  if (\n    potentialValue.includes('\\0') ||\n    potentialValue.includes('\\r') ||\n    potentialValue.includes('\\n')\n  ) {\n    return false\n  }\n\n  return true\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect\nfunction setRequestReferrerPolicyOnRedirect (request, actualResponse) {\n  //  Given a request request and a response actualResponse, this algorithm\n  //  updates request’s referrer policy according to the Referrer-Policy\n  //  header (if any) in actualResponse.\n\n  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy\n  // from a Referrer-Policy header on actualResponse.\n\n  // 8.1 Parse a referrer policy from a Referrer-Policy header\n  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.\n  const { headersList } = actualResponse\n  // 2. Let policy be the empty string.\n  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.\n  // 4. Return policy.\n  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')\n\n  // Note: As the referrer-policy can contain multiple policies\n  // separated by comma, we need to loop through all of them\n  // and pick the first valid one.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy\n  let policy = ''\n  if (policyHeader.length > 0) {\n    // The right-most policy takes precedence.\n    // The left-most policy is the fallback.\n    for (let i = policyHeader.length; i !== 0; i--) {\n      const token = policyHeader[i - 1].trim()\n      if (referrerPolicyTokens.has(token)) {\n        policy = token\n        break\n      }\n    }\n  }\n\n  // 2. If policy is not the empty string, then set request’s referrer policy to policy.\n  if (policy !== '') {\n    request.referrerPolicy = policy\n  }\n}\n\n// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check\nfunction crossOriginResourcePolicyCheck () {\n  // TODO\n  return 'allowed'\n}\n\n// https://fetch.spec.whatwg.org/#concept-cors-check\nfunction corsCheck () {\n  // TODO\n  return 'success'\n}\n\n// https://fetch.spec.whatwg.org/#concept-tao-check\nfunction TAOCheck () {\n  // TODO\n  return 'success'\n}\n\nfunction appendFetchMetadata (httpRequest) {\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header\n\n  //  1. Assert: r’s url is a potentially trustworthy URL.\n  //  TODO\n\n  //  2. Let header be a Structured Header whose value is a token.\n  let header = null\n\n  //  3. Set header’s value to r’s mode.\n  header = httpRequest.mode\n\n  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.\n  httpRequest.headersList.set('sec-fetch-mode', header)\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header\n  //  TODO\n}\n\n// https://fetch.spec.whatwg.org/#append-a-request-origin-header\nfunction appendRequestOriginHeader (request) {\n  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.\n  let serializedOrigin = request.origin\n\n  // 2. If request’s response tainting is \"cors\" or request’s mode is \"websocket\", then append (`Origin`, serializedOrigin) to request’s header list.\n  if (request.responseTainting === 'cors' || request.mode === 'websocket') {\n    if (serializedOrigin) {\n      request.headersList.append('origin', serializedOrigin)\n    }\n\n  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:\n  } else if (request.method !== 'GET' && request.method !== 'HEAD') {\n    // 1. Switch on request’s referrer policy:\n    switch (request.referrerPolicy) {\n      case 'no-referrer':\n        // Set serializedOrigin to `null`.\n        serializedOrigin = null\n        break\n      case 'no-referrer-when-downgrade':\n      case 'strict-origin':\n      case 'strict-origin-when-cross-origin':\n        // If request’s origin is a tuple origin, its scheme is \"https\", and request’s current URL’s scheme is not \"https\", then set serializedOrigin to `null`.\n        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n          serializedOrigin = null\n        }\n        break\n      case 'same-origin':\n        // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.\n        if (!sameOrigin(request, requestCurrentURL(request))) {\n          serializedOrigin = null\n        }\n        break\n      default:\n        // Do nothing.\n    }\n\n    if (serializedOrigin) {\n      // 2. Append (`Origin`, serializedOrigin) to request’s header list.\n      request.headersList.append('origin', serializedOrigin)\n    }\n  }\n}\n\nfunction coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {\n  // TODO\n  return performance.now()\n}\n\n// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info\nfunction createOpaqueTimingInfo (timingInfo) {\n  return {\n    startTime: timingInfo.startTime ?? 0,\n    redirectStartTime: 0,\n    redirectEndTime: 0,\n    postRedirectStartTime: timingInfo.startTime ?? 0,\n    finalServiceWorkerStartTime: 0,\n    finalNetworkResponseStartTime: 0,\n    finalNetworkRequestStartTime: 0,\n    endTime: 0,\n    encodedBodySize: 0,\n    decodedBodySize: 0,\n    finalConnectionTimingInfo: null\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#policy-container\nfunction makePolicyContainer () {\n  // Note: the fetch spec doesn't make use of embedder policy or CSP list\n  return {\n    referrerPolicy: 'strict-origin-when-cross-origin'\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container\nfunction clonePolicyContainer (policyContainer) {\n  return {\n    referrerPolicy: policyContainer.referrerPolicy\n  }\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer\nfunction determineRequestsReferrer (request) {\n  // 1. Let policy be request's referrer policy.\n  const policy = request.referrerPolicy\n\n  // Note: policy cannot (shouldn't) be null or an empty string.\n  assert(policy)\n\n  // 2. Let environment be request’s client.\n\n  let referrerSource = null\n\n  // 3. Switch on request’s referrer:\n  if (request.referrer === 'client') {\n    // Note: node isn't a browser and doesn't implement document/iframes,\n    // so we bypass this step and replace it with our own.\n\n    const globalOrigin = getGlobalOrigin()\n\n    if (!globalOrigin || globalOrigin.origin === 'null') {\n      return 'no-referrer'\n    }\n\n    // note: we need to clone it as it's mutated\n    referrerSource = new URL(globalOrigin)\n  } else if (request.referrer instanceof URL) {\n    // Let referrerSource be request’s referrer.\n    referrerSource = request.referrer\n  }\n\n  // 4. Let request’s referrerURL be the result of stripping referrerSource for\n  //    use as a referrer.\n  let referrerURL = stripURLForReferrer(referrerSource)\n\n  // 5. Let referrerOrigin be the result of stripping referrerSource for use as\n  //    a referrer, with the origin-only flag set to true.\n  const referrerOrigin = stripURLForReferrer(referrerSource, true)\n\n  // 6. If the result of serializing referrerURL is a string whose length is\n  //    greater than 4096, set referrerURL to referrerOrigin.\n  if (referrerURL.toString().length > 4096) {\n    referrerURL = referrerOrigin\n  }\n\n  const areSameOrigin = sameOrigin(request, referrerURL)\n  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&\n    !isURLPotentiallyTrustworthy(request.url)\n\n  // 8. Execute the switch statements corresponding to the value of policy:\n  switch (policy) {\n    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)\n    case 'unsafe-url': return referrerURL\n    case 'same-origin':\n      return areSameOrigin ? referrerOrigin : 'no-referrer'\n    case 'origin-when-cross-origin':\n      return areSameOrigin ? referrerURL : referrerOrigin\n    case 'strict-origin-when-cross-origin': {\n      const currentURL = requestCurrentURL(request)\n\n      // 1. If the origin of referrerURL and the origin of request’s current\n      //    URL are the same, then return referrerURL.\n      if (sameOrigin(referrerURL, currentURL)) {\n        return referrerURL\n      }\n\n      // 2. If referrerURL is a potentially trustworthy URL and request’s\n      //    current URL is not a potentially trustworthy URL, then return no\n      //    referrer.\n      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n        return 'no-referrer'\n      }\n\n      // 3. Return referrerOrigin.\n      return referrerOrigin\n    }\n    case 'strict-origin': // eslint-disable-line\n      /**\n         * 1. If referrerURL is a potentially trustworthy URL and\n         * request’s current URL is not a potentially trustworthy URL,\n         * then return no referrer.\n         * 2. Return referrerOrigin\n        */\n    case 'no-referrer-when-downgrade': // eslint-disable-line\n      /**\n       * 1. If referrerURL is a potentially trustworthy URL and\n       * request’s current URL is not a potentially trustworthy URL,\n       * then return no referrer.\n       * 2. Return referrerOrigin\n      */\n\n    default: // eslint-disable-line\n      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url\n * @param {URL} url\n * @param {boolean|undefined} originOnly\n */\nfunction stripURLForReferrer (url, originOnly) {\n  // 1. Assert: url is a URL.\n  assert(url instanceof URL)\n\n  // 2. If url’s scheme is a local scheme, then return no referrer.\n  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {\n    return 'no-referrer'\n  }\n\n  // 3. Set url’s username to the empty string.\n  url.username = ''\n\n  // 4. Set url’s password to the empty string.\n  url.password = ''\n\n  // 5. Set url’s fragment to null.\n  url.hash = ''\n\n  // 6. If the origin-only flag is true, then:\n  if (originOnly) {\n    // 1. Set url’s path to « the empty string ».\n    url.pathname = ''\n\n    // 2. Set url’s query to null.\n    url.search = ''\n  }\n\n  // 7. Return url.\n  return url\n}\n\nfunction isURLPotentiallyTrustworthy (url) {\n  if (!(url instanceof URL)) {\n    return false\n  }\n\n  // If child of about, return true\n  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {\n    return true\n  }\n\n  // If scheme is data, return true\n  if (url.protocol === 'data:') return true\n\n  // If file, return true\n  if (url.protocol === 'file:') return true\n\n  return isOriginPotentiallyTrustworthy(url.origin)\n\n  function isOriginPotentiallyTrustworthy (origin) {\n    // If origin is explicitly null, return false\n    if (origin == null || origin === 'null') return false\n\n    const originAsURL = new URL(origin)\n\n    // If secure, return true\n    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {\n      return true\n    }\n\n    // If localhost or variants, return true\n    if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) ||\n     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||\n     (originAsURL.hostname.endsWith('.localhost'))) {\n      return true\n    }\n\n    // If any other, return false\n    return false\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist\n * @param {Uint8Array} bytes\n * @param {string} metadataList\n */\nfunction bytesMatch (bytes, metadataList) {\n  // If node is not built with OpenSSL support, we cannot check\n  // a request's integrity, so allow it by default (the spec will\n  // allow requests if an invalid hash is given, as precedence).\n  /* istanbul ignore if: only if node is built with --without-ssl */\n  if (crypto === undefined) {\n    return true\n  }\n\n  // 1. Let parsedMetadata be the result of parsing metadataList.\n  const parsedMetadata = parseMetadata(metadataList)\n\n  // 2. If parsedMetadata is no metadata, return true.\n  if (parsedMetadata === 'no metadata') {\n    return true\n  }\n\n  // 3. If response is not eligible for integrity validation, return false.\n  // TODO\n\n  // 4. If parsedMetadata is the empty set, return true.\n  if (parsedMetadata.length === 0) {\n    return true\n  }\n\n  // 5. Let metadata be the result of getting the strongest\n  //    metadata from parsedMetadata.\n  const strongest = getStrongestMetadata(parsedMetadata)\n  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)\n\n  // 6. For each item in metadata:\n  for (const item of metadata) {\n    // 1. Let algorithm be the alg component of item.\n    const algorithm = item.algo\n\n    // 2. Let expectedValue be the val component of item.\n    const expectedValue = item.hash\n\n    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e\n    // \"be liberal with padding\". This is annoying, and it's not even in the spec.\n\n    // 3. Let actualValue be the result of applying algorithm to bytes.\n    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')\n\n    if (actualValue[actualValue.length - 1] === '=') {\n      if (actualValue[actualValue.length - 2] === '=') {\n        actualValue = actualValue.slice(0, -2)\n      } else {\n        actualValue = actualValue.slice(0, -1)\n      }\n    }\n\n    // 4. If actualValue is a case-sensitive match for expectedValue,\n    //    return true.\n    if (compareBase64Mixed(actualValue, expectedValue)) {\n      return true\n    }\n  }\n\n  // 7. Return false.\n  return false\n}\n\n// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options\n// https://www.w3.org/TR/CSP2/#source-list-syntax\n// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1\nconst parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n * @param {string} metadata\n */\nfunction parseMetadata (metadata) {\n  // 1. Let result be the empty set.\n  /** @type {{ algo: string, hash: string }[]} */\n  const result = []\n\n  // 2. Let empty be equal to true.\n  let empty = true\n\n  // 3. For each token returned by splitting metadata on spaces:\n  for (const token of metadata.split(' ')) {\n    // 1. Set empty to false.\n    empty = false\n\n    // 2. Parse token as a hash-with-options.\n    const parsedToken = parseHashWithOptions.exec(token)\n\n    // 3. If token does not parse, continue to the next token.\n    if (\n      parsedToken === null ||\n      parsedToken.groups === undefined ||\n      parsedToken.groups.algo === undefined\n    ) {\n      // Note: Chromium blocks the request at this point, but Firefox\n      // gives a warning that an invalid integrity was given. The\n      // correct behavior is to ignore these, and subsequently not\n      // check the integrity of the resource.\n      continue\n    }\n\n    // 4. Let algorithm be the hash-algo component of token.\n    const algorithm = parsedToken.groups.algo.toLowerCase()\n\n    // 5. If algorithm is a hash function recognized by the user\n    //    agent, add the parsed token to result.\n    if (supportedHashes.includes(algorithm)) {\n      result.push(parsedToken.groups)\n    }\n  }\n\n  // 4. Return no metadata if empty is true, otherwise return result.\n  if (empty === true) {\n    return 'no metadata'\n  }\n\n  return result\n}\n\n/**\n * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList\n */\nfunction getStrongestMetadata (metadataList) {\n  // Let algorithm be the algo component of the first item in metadataList.\n  // Can be sha256\n  let algorithm = metadataList[0].algo\n  // If the algorithm is sha512, then it is the strongest\n  // and we can return immediately\n  if (algorithm[3] === '5') {\n    return algorithm\n  }\n\n  for (let i = 1; i < metadataList.length; ++i) {\n    const metadata = metadataList[i]\n    // If the algorithm is sha512, then it is the strongest\n    // and we can break the loop immediately\n    if (metadata.algo[3] === '5') {\n      algorithm = 'sha512'\n      break\n    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored\n    } else if (algorithm[3] === '3') {\n      continue\n    // algorithm is sha256, check if algorithm is sha384 and if so, set it as\n    // the strongest\n    } else if (metadata.algo[3] === '3') {\n      algorithm = 'sha384'\n    }\n  }\n  return algorithm\n}\n\nfunction filterMetadataListByAlgorithm (metadataList, algorithm) {\n  if (metadataList.length === 1) {\n    return metadataList\n  }\n\n  let pos = 0\n  for (let i = 0; i < metadataList.length; ++i) {\n    if (metadataList[i].algo === algorithm) {\n      metadataList[pos++] = metadataList[i]\n    }\n  }\n\n  metadataList.length = pos\n\n  return metadataList\n}\n\n/**\n * Compares two base64 strings, allowing for base64url\n * in the second string.\n *\n* @param {string} actualValue always base64\n * @param {string} expectedValue base64 or base64url\n * @returns {boolean}\n */\nfunction compareBase64Mixed (actualValue, expectedValue) {\n  if (actualValue.length !== expectedValue.length) {\n    return false\n  }\n  for (let i = 0; i < actualValue.length; ++i) {\n    if (actualValue[i] !== expectedValue[i]) {\n      if (\n        (actualValue[i] === '+' && expectedValue[i] === '-') ||\n        (actualValue[i] === '/' && expectedValue[i] === '_')\n      ) {\n        continue\n      }\n      return false\n    }\n  }\n\n  return true\n}\n\n// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request\nfunction tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {\n  // TODO\n}\n\n/**\n * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}\n * @param {URL} A\n * @param {URL} B\n */\nfunction sameOrigin (A, B) {\n  // 1. If A and B are the same opaque origin, then return true.\n  if (A.origin === B.origin && A.origin === 'null') {\n    return true\n  }\n\n  // 2. If A and B are both tuple origins and their schemes,\n  //    hosts, and port are identical, then return true.\n  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n    return true\n  }\n\n  // 3. Return false.\n  return false\n}\n\nfunction createDeferredPromise () {\n  let res\n  let rej\n  const promise = new Promise((resolve, reject) => {\n    res = resolve\n    rej = reject\n  })\n\n  return { promise, resolve: res, reject: rej }\n}\n\nfunction isAborted (fetchParams) {\n  return fetchParams.controller.state === 'aborted'\n}\n\nfunction isCancelled (fetchParams) {\n  return fetchParams.controller.state === 'aborted' ||\n    fetchParams.controller.state === 'terminated'\n}\n\nconst normalizeMethodRecord = {\n  delete: 'DELETE',\n  DELETE: 'DELETE',\n  get: 'GET',\n  GET: 'GET',\n  head: 'HEAD',\n  HEAD: 'HEAD',\n  options: 'OPTIONS',\n  OPTIONS: 'OPTIONS',\n  post: 'POST',\n  POST: 'POST',\n  put: 'PUT',\n  PUT: 'PUT'\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(normalizeMethodRecord, null)\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-method-normalize\n * @param {string} method\n */\nfunction normalizeMethod (method) {\n  return normalizeMethodRecord[method.toLowerCase()] ?? method\n}\n\n// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string\nfunction serializeJavascriptValueToJSONString (value) {\n  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).\n  const result = JSON.stringify(value)\n\n  // 2. If result is undefined, then throw a TypeError.\n  if (result === undefined) {\n    throw new TypeError('Value is not JSON serializable')\n  }\n\n  // 3. Assert: result is a string.\n  assert(typeof result === 'string')\n\n  // 4. Return result.\n  return result\n}\n\n// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\nconst esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))\n\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {() => unknown[]} iterator\n * @param {string} name name of the instance\n * @param {'key'|'value'|'key+value'} kind\n */\nfunction makeIterator (iterator, name, kind) {\n  const object = {\n    index: 0,\n    kind,\n    target: iterator\n  }\n\n  const i = {\n    next () {\n      // 1. Let interface be the interface for which the iterator prototype object exists.\n\n      // 2. Let thisValue be the this value.\n\n      // 3. Let object be ? ToObject(thisValue).\n\n      // 4. If object is a platform object, then perform a security\n      //    check, passing:\n\n      // 5. If object is not a default iterator object for interface,\n      //    then throw a TypeError.\n      if (Object.getPrototypeOf(this) !== i) {\n        throw new TypeError(\n          `'next' called on an object that does not implement interface ${name} Iterator.`\n        )\n      }\n\n      // 6. Let index be object’s index.\n      // 7. Let kind be object’s kind.\n      // 8. Let values be object’s target's value pairs to iterate over.\n      const { index, kind, target } = object\n      const values = target()\n\n      // 9. Let len be the length of values.\n      const len = values.length\n\n      // 10. If index is greater than or equal to len, then return\n      //     CreateIterResultObject(undefined, true).\n      if (index >= len) {\n        return { value: undefined, done: true }\n      }\n\n      // 11. Let pair be the entry in values at index index.\n      const pair = values[index]\n\n      // 12. Set object’s index to index + 1.\n      object.index = index + 1\n\n      // 13. Return the iterator result for pair and kind.\n      return iteratorResult(pair, kind)\n    },\n    // The class string of an iterator prototype object for a given interface is the\n    // result of concatenating the identifier of the interface and the string \" Iterator\".\n    [Symbol.toStringTag]: `${name} Iterator`\n  }\n\n  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.\n  Object.setPrototypeOf(i, esIteratorPrototype)\n  // esIteratorPrototype needs to be the prototype of i\n  // which is the prototype of an empty object. Yes, it's confusing.\n  return Object.setPrototypeOf({}, i)\n}\n\n// https://webidl.spec.whatwg.org/#iterator-result\nfunction iteratorResult (pair, kind) {\n  let result\n\n  // 1. Let result be a value determined by the value of kind:\n  switch (kind) {\n    case 'key': {\n      // 1. Let idlKey be pair’s key.\n      // 2. Let key be the result of converting idlKey to an\n      //    ECMAScript value.\n      // 3. result is key.\n      result = pair[0]\n      break\n    }\n    case 'value': {\n      // 1. Let idlValue be pair’s value.\n      // 2. Let value be the result of converting idlValue to\n      //    an ECMAScript value.\n      // 3. result is value.\n      result = pair[1]\n      break\n    }\n    case 'key+value': {\n      // 1. Let idlKey be pair’s key.\n      // 2. Let idlValue be pair’s value.\n      // 3. Let key be the result of converting idlKey to an\n      //    ECMAScript value.\n      // 4. Let value be the result of converting idlValue to\n      //    an ECMAScript value.\n      // 5. Let array be ! ArrayCreate(2).\n      // 6. Call ! CreateDataProperty(array, \"0\", key).\n      // 7. Call ! CreateDataProperty(array, \"1\", value).\n      // 8. result is array.\n      result = pair\n      break\n    }\n  }\n\n  // 2. Return CreateIterResultObject(result, false).\n  return { value: result, done: false }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#body-fully-read\n */\nasync function fullyReadBody (body, processBody, processBodyError) {\n  // 1. If taskDestination is null, then set taskDestination to\n  //    the result of starting a new parallel queue.\n\n  // 2. Let successSteps given a byte sequence bytes be to queue a\n  //    fetch task to run processBody given bytes, with taskDestination.\n  const successSteps = processBody\n\n  // 3. Let errorSteps be to queue a fetch task to run processBodyError,\n  //    with taskDestination.\n  const errorSteps = processBodyError\n\n  // 4. Let reader be the result of getting a reader for body’s stream.\n  //    If that threw an exception, then run errorSteps with that\n  //    exception and return.\n  let reader\n\n  try {\n    reader = body.stream.getReader()\n  } catch (e) {\n    errorSteps(e)\n    return\n  }\n\n  // 5. Read all bytes from reader, given successSteps and errorSteps.\n  try {\n    const result = await readAllBytes(reader)\n    successSteps(result)\n  } catch (e) {\n    errorSteps(e)\n  }\n}\n\n/** @type {ReadableStream} */\nlet ReadableStream = globalThis.ReadableStream\n\nfunction isReadableStreamLike (stream) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  return stream instanceof ReadableStream || (\n    stream[Symbol.toStringTag] === 'ReadableStream' &&\n    typeof stream.tee === 'function'\n  )\n}\n\nconst MAXIMUM_ARGUMENT_LENGTH = 65535\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-decode\n * @param {number[]|Uint8Array} input\n */\nfunction isomorphicDecode (input) {\n  // 1. To isomorphic decode a byte sequence input, return a string whose code point\n  //    length is equal to input’s length and whose code points have the same values\n  //    as the values of input’s bytes, in the same order.\n\n  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {\n    return String.fromCharCode(...input)\n  }\n\n  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')\n}\n\n/**\n * @param {ReadableStreamController<Uint8Array>} controller\n */\nfunction readableStreamClose (controller) {\n  try {\n    controller.close()\n  } catch (err) {\n    // TODO: add comment explaining why this error occurs.\n    if (!err.message.includes('Controller is already closed')) {\n      throw err\n    }\n  }\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-encode\n * @param {string} input\n */\nfunction isomorphicEncode (input) {\n  // 1. Assert: input contains no code points greater than U+00FF.\n  for (let i = 0; i < input.length; i++) {\n    assert(input.charCodeAt(i) <= 0xFF)\n  }\n\n  // 2. Return a byte sequence whose length is equal to input’s code\n  //    point length and whose bytes have the same values as the\n  //    values of input’s code points, in the same order\n  return input\n}\n\n/**\n * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes\n * @see https://streams.spec.whatwg.org/#read-loop\n * @param {ReadableStreamDefaultReader} reader\n */\nasync function readAllBytes (reader) {\n  const bytes = []\n  let byteLength = 0\n\n  while (true) {\n    const { done, value: chunk } = await reader.read()\n\n    if (done) {\n      // 1. Call successSteps with bytes.\n      return Buffer.concat(bytes, byteLength)\n    }\n\n    // 1. If chunk is not a Uint8Array object, call failureSteps\n    //    with a TypeError and abort these steps.\n    if (!isUint8Array(chunk)) {\n      throw new TypeError('Received non-Uint8Array chunk')\n    }\n\n    // 2. Append the bytes represented by chunk to bytes.\n    bytes.push(chunk)\n    byteLength += chunk.length\n\n    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#is-local\n * @param {URL} url\n */\nfunction urlIsLocal (url) {\n  assert('protocol' in url) // ensure it's a url object\n\n  const protocol = url.protocol\n\n  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'\n}\n\n/**\n * @param {string|URL} url\n */\nfunction urlHasHttpsScheme (url) {\n  if (typeof url === 'string') {\n    return url.startsWith('https:')\n  }\n\n  return url.protocol === 'https:'\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-scheme\n * @param {URL} url\n */\nfunction urlIsHttpHttpsScheme (url) {\n  assert('protocol' in url) // ensure it's a url object\n\n  const protocol = url.protocol\n\n  return protocol === 'http:' || protocol === 'https:'\n}\n\n/**\n * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.\n */\nconst hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))\n\nmodule.exports = {\n  isAborted,\n  isCancelled,\n  createDeferredPromise,\n  ReadableStreamFrom,\n  toUSVString,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  coarsenedSharedCurrentTime,\n  determineRequestsReferrer,\n  makePolicyContainer,\n  clonePolicyContainer,\n  appendFetchMetadata,\n  appendRequestOriginHeader,\n  TAOCheck,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  createOpaqueTimingInfo,\n  setRequestReferrerPolicyOnRedirect,\n  isValidHTTPToken,\n  requestBadPort,\n  requestCurrentURL,\n  responseURL,\n  responseLocationURL,\n  isBlobLike,\n  isURLPotentiallyTrustworthy,\n  isValidReasonPhrase,\n  sameOrigin,\n  normalizeMethod,\n  serializeJavascriptValueToJSONString,\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue,\n  hasOwn,\n  isErrorLike,\n  fullyReadBody,\n  bytesMatch,\n  isReadableStreamLike,\n  readableStreamClose,\n  isomorphicEncode,\n  isomorphicDecode,\n  urlIsLocal,\n  urlHasHttpsScheme,\n  urlIsHttpHttpsScheme,\n  readAllBytes,\n  normalizeMethodRecord,\n  parseMetadata\n}\n","'use strict'\n\nconst { types } = require('util')\nconst { hasOwn, toUSVString } = require('./util')\n\n/** @type {import('../../types/webidl').Webidl} */\nconst webidl = {}\nwebidl.converters = {}\nwebidl.util = {}\nwebidl.errors = {}\n\nwebidl.errors.exception = function (message) {\n  return new TypeError(`${message.header}: ${message.message}`)\n}\n\nwebidl.errors.conversionFailed = function (context) {\n  const plural = context.types.length === 1 ? '' : ' one of'\n  const message =\n    `${context.argument} could not be converted to` +\n    `${plural}: ${context.types.join(', ')}.`\n\n  return webidl.errors.exception({\n    header: context.prefix,\n    message\n  })\n}\n\nwebidl.errors.invalidArgument = function (context) {\n  return webidl.errors.exception({\n    header: context.prefix,\n    message: `\"${context.value}\" is an invalid ${context.type}.`\n  })\n}\n\n// https://webidl.spec.whatwg.org/#implements\nwebidl.brandCheck = function (V, I, opts = undefined) {\n  if (opts?.strict !== false && !(V instanceof I)) {\n    throw new TypeError('Illegal invocation')\n  } else {\n    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]\n  }\n}\n\nwebidl.argumentLengthCheck = function ({ length }, min, ctx) {\n  if (length < min) {\n    throw webidl.errors.exception({\n      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +\n               `but${length ? ' only' : ''} ${length} found.`,\n      ...ctx\n    })\n  }\n}\n\nwebidl.illegalConstructor = function () {\n  throw webidl.errors.exception({\n    header: 'TypeError',\n    message: 'Illegal constructor'\n  })\n}\n\n// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\nwebidl.util.Type = function (V) {\n  switch (typeof V) {\n    case 'undefined': return 'Undefined'\n    case 'boolean': return 'Boolean'\n    case 'string': return 'String'\n    case 'symbol': return 'Symbol'\n    case 'number': return 'Number'\n    case 'bigint': return 'BigInt'\n    case 'function':\n    case 'object': {\n      if (V === null) {\n        return 'Null'\n      }\n\n      return 'Object'\n    }\n  }\n}\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\nwebidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {\n  let upperBound\n  let lowerBound\n\n  // 1. If bitLength is 64, then:\n  if (bitLength === 64) {\n    // 1. Let upperBound be 2^53 − 1.\n    upperBound = Math.pow(2, 53) - 1\n\n    // 2. If signedness is \"unsigned\", then let lowerBound be 0.\n    if (signedness === 'unsigned') {\n      lowerBound = 0\n    } else {\n      // 3. Otherwise let lowerBound be −2^53 + 1.\n      lowerBound = Math.pow(-2, 53) + 1\n    }\n  } else if (signedness === 'unsigned') {\n    // 2. Otherwise, if signedness is \"unsigned\", then:\n\n    // 1. Let lowerBound be 0.\n    lowerBound = 0\n\n    // 2. Let upperBound be 2^bitLength − 1.\n    upperBound = Math.pow(2, bitLength) - 1\n  } else {\n    // 3. Otherwise:\n\n    // 1. Let lowerBound be -2^bitLength − 1.\n    lowerBound = Math.pow(-2, bitLength) - 1\n\n    // 2. Let upperBound be 2^bitLength − 1 − 1.\n    upperBound = Math.pow(2, bitLength - 1) - 1\n  }\n\n  // 4. Let x be ? ToNumber(V).\n  let x = Number(V)\n\n  // 5. If x is −0, then set x to +0.\n  if (x === 0) {\n    x = 0\n  }\n\n  // 6. If the conversion is to an IDL type associated\n  //    with the [EnforceRange] extended attribute, then:\n  if (opts.enforceRange === true) {\n    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.\n    if (\n      Number.isNaN(x) ||\n      x === Number.POSITIVE_INFINITY ||\n      x === Number.NEGATIVE_INFINITY\n    ) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Could not convert ${V} to an integer.`\n      })\n    }\n\n    // 2. Set x to IntegerPart(x).\n    x = webidl.util.IntegerPart(x)\n\n    // 3. If x < lowerBound or x > upperBound, then\n    //    throw a TypeError.\n    if (x < lowerBound || x > upperBound) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n      })\n    }\n\n    // 4. Return x.\n    return x\n  }\n\n  // 7. If x is not NaN and the conversion is to an IDL\n  //    type associated with the [Clamp] extended\n  //    attribute, then:\n  if (!Number.isNaN(x) && opts.clamp === true) {\n    // 1. Set x to min(max(x, lowerBound), upperBound).\n    x = Math.min(Math.max(x, lowerBound), upperBound)\n\n    // 2. Round x to the nearest integer, choosing the\n    //    even integer if it lies halfway between two,\n    //    and choosing +0 rather than −0.\n    if (Math.floor(x) % 2 === 0) {\n      x = Math.floor(x)\n    } else {\n      x = Math.ceil(x)\n    }\n\n    // 3. Return x.\n    return x\n  }\n\n  // 8. If x is NaN, +0, +∞, or −∞, then return +0.\n  if (\n    Number.isNaN(x) ||\n    (x === 0 && Object.is(0, x)) ||\n    x === Number.POSITIVE_INFINITY ||\n    x === Number.NEGATIVE_INFINITY\n  ) {\n    return 0\n  }\n\n  // 9. Set x to IntegerPart(x).\n  x = webidl.util.IntegerPart(x)\n\n  // 10. Set x to x modulo 2^bitLength.\n  x = x % Math.pow(2, bitLength)\n\n  // 11. If signedness is \"signed\" and x ≥ 2^bitLength − 1,\n  //    then return x − 2^bitLength.\n  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {\n    return x - Math.pow(2, bitLength)\n  }\n\n  // 12. Otherwise, return x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\nwebidl.util.IntegerPart = function (n) {\n  // 1. Let r be floor(abs(n)).\n  const r = Math.floor(Math.abs(n))\n\n  // 2. If n < 0, then return -1 × r.\n  if (n < 0) {\n    return -1 * r\n  }\n\n  // 3. Otherwise, return r.\n  return r\n}\n\n// https://webidl.spec.whatwg.org/#es-sequence\nwebidl.sequenceConverter = function (converter) {\n  return (V) => {\n    // 1. If Type(V) is not Object, throw a TypeError.\n    if (webidl.util.Type(V) !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Sequence',\n        message: `Value of type ${webidl.util.Type(V)} is not an Object.`\n      })\n    }\n\n    // 2. Let method be ? GetMethod(V, @@iterator).\n    /** @type {Generator} */\n    const method = V?.[Symbol.iterator]?.()\n    const seq = []\n\n    // 3. If method is undefined, throw a TypeError.\n    if (\n      method === undefined ||\n      typeof method.next !== 'function'\n    ) {\n      throw webidl.errors.exception({\n        header: 'Sequence',\n        message: 'Object is not an iterator.'\n      })\n    }\n\n    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable\n    while (true) {\n      const { done, value } = method.next()\n\n      if (done) {\n        break\n      }\n\n      seq.push(converter(value))\n    }\n\n    return seq\n  }\n}\n\n// https://webidl.spec.whatwg.org/#es-to-record\nwebidl.recordConverter = function (keyConverter, valueConverter) {\n  return (O) => {\n    // 1. If Type(O) is not Object, throw a TypeError.\n    if (webidl.util.Type(O) !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Record',\n        message: `Value of type ${webidl.util.Type(O)} is not an Object.`\n      })\n    }\n\n    // 2. Let result be a new empty instance of record<K, V>.\n    const result = {}\n\n    if (!types.isProxy(O)) {\n      // Object.keys only returns enumerable properties\n      const keys = Object.keys(O)\n\n      for (const key of keys) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key)\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key])\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue\n      }\n\n      // 5. Return result.\n      return result\n    }\n\n    // 3. Let keys be ? O.[[OwnPropertyKeys]]().\n    const keys = Reflect.ownKeys(O)\n\n    // 4. For each key of keys.\n    for (const key of keys) {\n      // 1. Let desc be ? O.[[GetOwnProperty]](key).\n      const desc = Reflect.getOwnPropertyDescriptor(O, key)\n\n      // 2. If desc is not undefined and desc.[[Enumerable]] is true:\n      if (desc?.enumerable) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key)\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key])\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue\n      }\n    }\n\n    // 5. Return result.\n    return result\n  }\n}\n\nwebidl.interfaceConverter = function (i) {\n  return (V, opts = {}) => {\n    if (opts.strict !== false && !(V instanceof i)) {\n      throw webidl.errors.exception({\n        header: i.name,\n        message: `Expected ${V} to be an instance of ${i.name}.`\n      })\n    }\n\n    return V\n  }\n}\n\nwebidl.dictionaryConverter = function (converters) {\n  return (dictionary) => {\n    const type = webidl.util.Type(dictionary)\n    const dict = {}\n\n    if (type === 'Null' || type === 'Undefined') {\n      return dict\n    } else if (type !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Dictionary',\n        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n      })\n    }\n\n    for (const options of converters) {\n      const { key, defaultValue, required, converter } = options\n\n      if (required === true) {\n        if (!hasOwn(dictionary, key)) {\n          throw webidl.errors.exception({\n            header: 'Dictionary',\n            message: `Missing required key \"${key}\".`\n          })\n        }\n      }\n\n      let value = dictionary[key]\n      const hasDefault = hasOwn(options, 'defaultValue')\n\n      // Only use defaultValue if value is undefined and\n      // a defaultValue options was provided.\n      if (hasDefault && value !== null) {\n        value = value ?? defaultValue\n      }\n\n      // A key can be optional and have no default value.\n      // When this happens, do not perform a conversion,\n      // and do not assign the key a value.\n      if (required || hasDefault || value !== undefined) {\n        value = converter(value)\n\n        if (\n          options.allowedValues &&\n          !options.allowedValues.includes(value)\n        ) {\n          throw webidl.errors.exception({\n            header: 'Dictionary',\n            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`\n          })\n        }\n\n        dict[key] = value\n      }\n    }\n\n    return dict\n  }\n}\n\nwebidl.nullableConverter = function (converter) {\n  return (V) => {\n    if (V === null) {\n      return V\n    }\n\n    return converter(V)\n  }\n}\n\n// https://webidl.spec.whatwg.org/#es-DOMString\nwebidl.converters.DOMString = function (V, opts = {}) {\n  // 1. If V is null and the conversion is to an IDL type\n  //    associated with the [LegacyNullToEmptyString]\n  //    extended attribute, then return the DOMString value\n  //    that represents the empty string.\n  if (V === null && opts.legacyNullToEmptyString) {\n    return ''\n  }\n\n  // 2. Let x be ? ToString(V).\n  if (typeof V === 'symbol') {\n    throw new TypeError('Could not convert argument of type symbol to string.')\n  }\n\n  // 3. Return the IDL DOMString value that represents the\n  //    same sequence of code units as the one the\n  //    ECMAScript String value x represents.\n  return String(V)\n}\n\n// https://webidl.spec.whatwg.org/#es-ByteString\nwebidl.converters.ByteString = function (V) {\n  // 1. Let x be ? ToString(V).\n  // Note: DOMString converter perform ? ToString(V)\n  const x = webidl.converters.DOMString(V)\n\n  // 2. If the value of any element of x is greater than\n  //    255, then throw a TypeError.\n  for (let index = 0; index < x.length; index++) {\n    if (x.charCodeAt(index) > 255) {\n      throw new TypeError(\n        'Cannot convert argument to a ByteString because the character at ' +\n        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`\n      )\n    }\n  }\n\n  // 3. Return an IDL ByteString value whose length is the\n  //    length of x, and where the value of each element is\n  //    the value of the corresponding element of x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-USVString\nwebidl.converters.USVString = toUSVString\n\n// https://webidl.spec.whatwg.org/#es-boolean\nwebidl.converters.boolean = function (V) {\n  // 1. Let x be the result of computing ToBoolean(V).\n  const x = Boolean(V)\n\n  // 2. Return the IDL boolean value that is the one that represents\n  //    the same truth value as the ECMAScript Boolean value x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-any\nwebidl.converters.any = function (V) {\n  return V\n}\n\n// https://webidl.spec.whatwg.org/#es-long-long\nwebidl.converters['long long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"signed\").\n  const x = webidl.util.ConvertToInt(V, 64, 'signed')\n\n  // 2. Return the IDL long long value that represents\n  //    the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long-long\nwebidl.converters['unsigned long long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')\n\n  // 2. Return the IDL unsigned long long value that\n  //    represents the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long\nwebidl.converters['unsigned long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 32, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')\n\n  // 2. Return the IDL unsigned long value that\n  //    represents the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-short\nwebidl.converters['unsigned short'] = function (V, opts) {\n  // 1. Let x be ? ConvertToInt(V, 16, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)\n\n  // 2. Return the IDL unsigned short value that represents\n  //    the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#idl-ArrayBuffer\nwebidl.converters.ArrayBuffer = function (V, opts = {}) {\n  // 1. If Type(V) is not Object, or V does not have an\n  //    [[ArrayBufferData]] internal slot, then throw a\n  //    TypeError.\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances\n  if (\n    webidl.util.Type(V) !== 'Object' ||\n    !types.isAnyArrayBuffer(V)\n  ) {\n    throw webidl.errors.conversionFailed({\n      prefix: `${V}`,\n      argument: `${V}`,\n      types: ['ArrayBuffer']\n    })\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  // Note: resizable ArrayBuffers are currently a proposal.\n\n  // 4. Return the IDL ArrayBuffer value that is a\n  //    reference to the same object as V.\n  return V\n}\n\nwebidl.converters.TypedArray = function (V, T, opts = {}) {\n  // 1. Let T be the IDL type V is being converted to.\n\n  // 2. If Type(V) is not Object, or V does not have a\n  //    [[TypedArrayName]] internal slot with a value\n  //    equal to T’s name, then throw a TypeError.\n  if (\n    webidl.util.Type(V) !== 'Object' ||\n    !types.isTypedArray(V) ||\n    V.constructor.name !== T.name\n  ) {\n    throw webidl.errors.conversionFailed({\n      prefix: `${T.name}`,\n      argument: `${V}`,\n      types: [T.name]\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 4. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  // Note: resizable array buffers are currently a proposal\n\n  // 5. Return the IDL value of type T that is a reference\n  //    to the same object as V.\n  return V\n}\n\nwebidl.converters.DataView = function (V, opts = {}) {\n  // 1. If Type(V) is not Object, or V does not have a\n  //    [[DataView]] internal slot, then throw a TypeError.\n  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {\n    throw webidl.errors.exception({\n      header: 'DataView',\n      message: 'Object is not a DataView.'\n    })\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,\n  //    then throw a TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  // Note: resizable ArrayBuffers are currently a proposal\n\n  // 4. Return the IDL DataView value that is a reference\n  //    to the same object as V.\n  return V\n}\n\n// https://webidl.spec.whatwg.org/#BufferSource\nwebidl.converters.BufferSource = function (V, opts = {}) {\n  if (types.isAnyArrayBuffer(V)) {\n    return webidl.converters.ArrayBuffer(V, opts)\n  }\n\n  if (types.isTypedArray(V)) {\n    return webidl.converters.TypedArray(V, V.constructor)\n  }\n\n  if (types.isDataView(V)) {\n    return webidl.converters.DataView(V, opts)\n  }\n\n  throw new TypeError(`Could not convert ${V} to a BufferSource.`)\n}\n\nwebidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(\n  webidl.converters.ByteString\n)\n\nwebidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(\n  webidl.converters['sequence<ByteString>']\n)\n\nwebidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(\n  webidl.converters.ByteString,\n  webidl.converters.ByteString\n)\n\nmodule.exports = {\n  webidl\n}\n","'use strict'\n\n/**\n * @see https://encoding.spec.whatwg.org/#concept-encoding-get\n * @param {string|undefined} label\n */\nfunction getEncoding (label) {\n  if (!label) {\n    return 'failure'\n  }\n\n  // 1. Remove any leading and trailing ASCII whitespace from label.\n  // 2. If label is an ASCII case-insensitive match for any of the\n  //    labels listed in the table below, then return the\n  //    corresponding encoding; otherwise return failure.\n  switch (label.trim().toLowerCase()) {\n    case 'unicode-1-1-utf-8':\n    case 'unicode11utf8':\n    case 'unicode20utf8':\n    case 'utf-8':\n    case 'utf8':\n    case 'x-unicode20utf8':\n      return 'UTF-8'\n    case '866':\n    case 'cp866':\n    case 'csibm866':\n    case 'ibm866':\n      return 'IBM866'\n    case 'csisolatin2':\n    case 'iso-8859-2':\n    case 'iso-ir-101':\n    case 'iso8859-2':\n    case 'iso88592':\n    case 'iso_8859-2':\n    case 'iso_8859-2:1987':\n    case 'l2':\n    case 'latin2':\n      return 'ISO-8859-2'\n    case 'csisolatin3':\n    case 'iso-8859-3':\n    case 'iso-ir-109':\n    case 'iso8859-3':\n    case 'iso88593':\n    case 'iso_8859-3':\n    case 'iso_8859-3:1988':\n    case 'l3':\n    case 'latin3':\n      return 'ISO-8859-3'\n    case 'csisolatin4':\n    case 'iso-8859-4':\n    case 'iso-ir-110':\n    case 'iso8859-4':\n    case 'iso88594':\n    case 'iso_8859-4':\n    case 'iso_8859-4:1988':\n    case 'l4':\n    case 'latin4':\n      return 'ISO-8859-4'\n    case 'csisolatincyrillic':\n    case 'cyrillic':\n    case 'iso-8859-5':\n    case 'iso-ir-144':\n    case 'iso8859-5':\n    case 'iso88595':\n    case 'iso_8859-5':\n    case 'iso_8859-5:1988':\n      return 'ISO-8859-5'\n    case 'arabic':\n    case 'asmo-708':\n    case 'csiso88596e':\n    case 'csiso88596i':\n    case 'csisolatinarabic':\n    case 'ecma-114':\n    case 'iso-8859-6':\n    case 'iso-8859-6-e':\n    case 'iso-8859-6-i':\n    case 'iso-ir-127':\n    case 'iso8859-6':\n    case 'iso88596':\n    case 'iso_8859-6':\n    case 'iso_8859-6:1987':\n      return 'ISO-8859-6'\n    case 'csisolatingreek':\n    case 'ecma-118':\n    case 'elot_928':\n    case 'greek':\n    case 'greek8':\n    case 'iso-8859-7':\n    case 'iso-ir-126':\n    case 'iso8859-7':\n    case 'iso88597':\n    case 'iso_8859-7':\n    case 'iso_8859-7:1987':\n    case 'sun_eu_greek':\n      return 'ISO-8859-7'\n    case 'csiso88598e':\n    case 'csisolatinhebrew':\n    case 'hebrew':\n    case 'iso-8859-8':\n    case 'iso-8859-8-e':\n    case 'iso-ir-138':\n    case 'iso8859-8':\n    case 'iso88598':\n    case 'iso_8859-8':\n    case 'iso_8859-8:1988':\n    case 'visual':\n      return 'ISO-8859-8'\n    case 'csiso88598i':\n    case 'iso-8859-8-i':\n    case 'logical':\n      return 'ISO-8859-8-I'\n    case 'csisolatin6':\n    case 'iso-8859-10':\n    case 'iso-ir-157':\n    case 'iso8859-10':\n    case 'iso885910':\n    case 'l6':\n    case 'latin6':\n      return 'ISO-8859-10'\n    case 'iso-8859-13':\n    case 'iso8859-13':\n    case 'iso885913':\n      return 'ISO-8859-13'\n    case 'iso-8859-14':\n    case 'iso8859-14':\n    case 'iso885914':\n      return 'ISO-8859-14'\n    case 'csisolatin9':\n    case 'iso-8859-15':\n    case 'iso8859-15':\n    case 'iso885915':\n    case 'iso_8859-15':\n    case 'l9':\n      return 'ISO-8859-15'\n    case 'iso-8859-16':\n      return 'ISO-8859-16'\n    case 'cskoi8r':\n    case 'koi':\n    case 'koi8':\n    case 'koi8-r':\n    case 'koi8_r':\n      return 'KOI8-R'\n    case 'koi8-ru':\n    case 'koi8-u':\n      return 'KOI8-U'\n    case 'csmacintosh':\n    case 'mac':\n    case 'macintosh':\n    case 'x-mac-roman':\n      return 'macintosh'\n    case 'iso-8859-11':\n    case 'iso8859-11':\n    case 'iso885911':\n    case 'tis-620':\n    case 'windows-874':\n      return 'windows-874'\n    case 'cp1250':\n    case 'windows-1250':\n    case 'x-cp1250':\n      return 'windows-1250'\n    case 'cp1251':\n    case 'windows-1251':\n    case 'x-cp1251':\n      return 'windows-1251'\n    case 'ansi_x3.4-1968':\n    case 'ascii':\n    case 'cp1252':\n    case 'cp819':\n    case 'csisolatin1':\n    case 'ibm819':\n    case 'iso-8859-1':\n    case 'iso-ir-100':\n    case 'iso8859-1':\n    case 'iso88591':\n    case 'iso_8859-1':\n    case 'iso_8859-1:1987':\n    case 'l1':\n    case 'latin1':\n    case 'us-ascii':\n    case 'windows-1252':\n    case 'x-cp1252':\n      return 'windows-1252'\n    case 'cp1253':\n    case 'windows-1253':\n    case 'x-cp1253':\n      return 'windows-1253'\n    case 'cp1254':\n    case 'csisolatin5':\n    case 'iso-8859-9':\n    case 'iso-ir-148':\n    case 'iso8859-9':\n    case 'iso88599':\n    case 'iso_8859-9':\n    case 'iso_8859-9:1989':\n    case 'l5':\n    case 'latin5':\n    case 'windows-1254':\n    case 'x-cp1254':\n      return 'windows-1254'\n    case 'cp1255':\n    case 'windows-1255':\n    case 'x-cp1255':\n      return 'windows-1255'\n    case 'cp1256':\n    case 'windows-1256':\n    case 'x-cp1256':\n      return 'windows-1256'\n    case 'cp1257':\n    case 'windows-1257':\n    case 'x-cp1257':\n      return 'windows-1257'\n    case 'cp1258':\n    case 'windows-1258':\n    case 'x-cp1258':\n      return 'windows-1258'\n    case 'x-mac-cyrillic':\n    case 'x-mac-ukrainian':\n      return 'x-mac-cyrillic'\n    case 'chinese':\n    case 'csgb2312':\n    case 'csiso58gb231280':\n    case 'gb2312':\n    case 'gb_2312':\n    case 'gb_2312-80':\n    case 'gbk':\n    case 'iso-ir-58':\n    case 'x-gbk':\n      return 'GBK'\n    case 'gb18030':\n      return 'gb18030'\n    case 'big5':\n    case 'big5-hkscs':\n    case 'cn-big5':\n    case 'csbig5':\n    case 'x-x-big5':\n      return 'Big5'\n    case 'cseucpkdfmtjapanese':\n    case 'euc-jp':\n    case 'x-euc-jp':\n      return 'EUC-JP'\n    case 'csiso2022jp':\n    case 'iso-2022-jp':\n      return 'ISO-2022-JP'\n    case 'csshiftjis':\n    case 'ms932':\n    case 'ms_kanji':\n    case 'shift-jis':\n    case 'shift_jis':\n    case 'sjis':\n    case 'windows-31j':\n    case 'x-sjis':\n      return 'Shift_JIS'\n    case 'cseuckr':\n    case 'csksc56011987':\n    case 'euc-kr':\n    case 'iso-ir-149':\n    case 'korean':\n    case 'ks_c_5601-1987':\n    case 'ks_c_5601-1989':\n    case 'ksc5601':\n    case 'ksc_5601':\n    case 'windows-949':\n      return 'EUC-KR'\n    case 'csiso2022kr':\n    case 'hz-gb-2312':\n    case 'iso-2022-cn':\n    case 'iso-2022-cn-ext':\n    case 'iso-2022-kr':\n    case 'replacement':\n      return 'replacement'\n    case 'unicodefffe':\n    case 'utf-16be':\n      return 'UTF-16BE'\n    case 'csunicode':\n    case 'iso-10646-ucs-2':\n    case 'ucs-2':\n    case 'unicode':\n    case 'unicodefeff':\n    case 'utf-16':\n    case 'utf-16le':\n      return 'UTF-16LE'\n    case 'x-user-defined':\n      return 'x-user-defined'\n    default: return 'failure'\n  }\n}\n\nmodule.exports = {\n  getEncoding\n}\n","'use strict'\n\nconst {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n} = require('./util')\nconst {\n  kState,\n  kError,\n  kResult,\n  kEvents,\n  kAborted\n} = require('./symbols')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\n\nclass FileReader extends EventTarget {\n  constructor () {\n    super()\n\n    this[kState] = 'empty'\n    this[kResult] = null\n    this[kError] = null\n    this[kEvents] = {\n      loadend: null,\n      error: null,\n      abort: null,\n      load: null,\n      progress: null,\n      loadstart: null\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n   * @param {import('buffer').Blob} blob\n   */\n  readAsArrayBuffer (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsArrayBuffer(blob) method, when invoked,\n    // must initiate a read operation for blob with ArrayBuffer.\n    readOperation(this, blob, 'ArrayBuffer')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n   * @param {import('buffer').Blob} blob\n   */\n  readAsBinaryString (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsBinaryString(blob) method, when invoked,\n    // must initiate a read operation for blob with BinaryString.\n    readOperation(this, blob, 'BinaryString')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsDataText\n   * @param {import('buffer').Blob} blob\n   * @param {string?} encoding\n   */\n  readAsText (blob, encoding = undefined) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    if (encoding !== undefined) {\n      encoding = webidl.converters.DOMString(encoding)\n    }\n\n    // The readAsText(blob, encoding) method, when invoked,\n    // must initiate a read operation for blob with Text and encoding.\n    readOperation(this, blob, 'Text', encoding)\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n   * @param {import('buffer').Blob} blob\n   */\n  readAsDataURL (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsDataURL(blob) method, when invoked, must\n    // initiate a read operation for blob with DataURL.\n    readOperation(this, blob, 'DataURL')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-abort\n   */\n  abort () {\n    // 1. If this's state is \"empty\" or if this's state is\n    //    \"done\" set this's result to null and terminate\n    //    this algorithm.\n    if (this[kState] === 'empty' || this[kState] === 'done') {\n      this[kResult] = null\n      return\n    }\n\n    // 2. If this's state is \"loading\" set this's state to\n    //    \"done\" and set this's result to null.\n    if (this[kState] === 'loading') {\n      this[kState] = 'done'\n      this[kResult] = null\n    }\n\n    // 3. If there are any tasks from this on the file reading\n    //    task source in an affiliated task queue, then remove\n    //    those tasks from that task queue.\n    this[kAborted] = true\n\n    // 4. Terminate the algorithm for the read method being processed.\n    // TODO\n\n    // 5. Fire a progress event called abort at this.\n    fireAProgressEvent('abort', this)\n\n    // 6. If this's state is not \"loading\", fire a progress\n    //    event called loadend at this.\n    if (this[kState] !== 'loading') {\n      fireAProgressEvent('loadend', this)\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n   */\n  get readyState () {\n    webidl.brandCheck(this, FileReader)\n\n    switch (this[kState]) {\n      case 'empty': return this.EMPTY\n      case 'loading': return this.LOADING\n      case 'done': return this.DONE\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n   */\n  get result () {\n    webidl.brandCheck(this, FileReader)\n\n    // The result attribute’s getter, when invoked, must return\n    // this's result.\n    return this[kResult]\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n   */\n  get error () {\n    webidl.brandCheck(this, FileReader)\n\n    // The error attribute’s getter, when invoked, must return\n    // this's error.\n    return this[kError]\n  }\n\n  get onloadend () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].loadend\n  }\n\n  set onloadend (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].loadend) {\n      this.removeEventListener('loadend', this[kEvents].loadend)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].loadend = fn\n      this.addEventListener('loadend', fn)\n    } else {\n      this[kEvents].loadend = null\n    }\n  }\n\n  get onerror () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].error\n  }\n\n  set onerror (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].error) {\n      this.removeEventListener('error', this[kEvents].error)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this[kEvents].error = null\n    }\n  }\n\n  get onloadstart () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].loadstart\n  }\n\n  set onloadstart (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].loadstart) {\n      this.removeEventListener('loadstart', this[kEvents].loadstart)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].loadstart = fn\n      this.addEventListener('loadstart', fn)\n    } else {\n      this[kEvents].loadstart = null\n    }\n  }\n\n  get onprogress () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].progress\n  }\n\n  set onprogress (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].progress) {\n      this.removeEventListener('progress', this[kEvents].progress)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].progress = fn\n      this.addEventListener('progress', fn)\n    } else {\n      this[kEvents].progress = null\n    }\n  }\n\n  get onload () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].load\n  }\n\n  set onload (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].load) {\n      this.removeEventListener('load', this[kEvents].load)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].load = fn\n      this.addEventListener('load', fn)\n    } else {\n      this[kEvents].load = null\n    }\n  }\n\n  get onabort () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].abort\n  }\n\n  set onabort (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].abort) {\n      this.removeEventListener('abort', this[kEvents].abort)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].abort = fn\n      this.addEventListener('abort', fn)\n    } else {\n      this[kEvents].abort = null\n    }\n  }\n}\n\n// https://w3c.github.io/FileAPI/#dom-filereader-empty\nFileReader.EMPTY = FileReader.prototype.EMPTY = 0\n// https://w3c.github.io/FileAPI/#dom-filereader-loading\nFileReader.LOADING = FileReader.prototype.LOADING = 1\n// https://w3c.github.io/FileAPI/#dom-filereader-done\nFileReader.DONE = FileReader.prototype.DONE = 2\n\nObject.defineProperties(FileReader.prototype, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors,\n  readAsArrayBuffer: kEnumerableProperty,\n  readAsBinaryString: kEnumerableProperty,\n  readAsText: kEnumerableProperty,\n  readAsDataURL: kEnumerableProperty,\n  abort: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  result: kEnumerableProperty,\n  error: kEnumerableProperty,\n  onloadstart: kEnumerableProperty,\n  onprogress: kEnumerableProperty,\n  onload: kEnumerableProperty,\n  onabort: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onloadend: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'FileReader',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n})\n\nObject.defineProperties(FileReader, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors\n})\n\nmodule.exports = {\n  FileReader\n}\n","'use strict'\n\nconst { webidl } = require('../fetch/webidl')\n\nconst kState = Symbol('ProgressEvent state')\n\n/**\n * @see https://xhr.spec.whatwg.org/#progressevent\n */\nclass ProgressEvent extends Event {\n  constructor (type, eventInitDict = {}) {\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})\n\n    super(type, eventInitDict)\n\n    this[kState] = {\n      lengthComputable: eventInitDict.lengthComputable,\n      loaded: eventInitDict.loaded,\n      total: eventInitDict.total\n    }\n  }\n\n  get lengthComputable () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].lengthComputable\n  }\n\n  get loaded () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].loaded\n  }\n\n  get total () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].total\n  }\n}\n\nwebidl.converters.ProgressEventInit = webidl.dictionaryConverter([\n  {\n    key: 'lengthComputable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'loaded',\n    converter: webidl.converters['unsigned long long'],\n    defaultValue: 0\n  },\n  {\n    key: 'total',\n    converter: webidl.converters['unsigned long long'],\n    defaultValue: 0\n  },\n  {\n    key: 'bubbles',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'cancelable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'composed',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n])\n\nmodule.exports = {\n  ProgressEvent\n}\n","'use strict'\n\nmodule.exports = {\n  kState: Symbol('FileReader state'),\n  kResult: Symbol('FileReader result'),\n  kError: Symbol('FileReader error'),\n  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),\n  kEvents: Symbol('FileReader events'),\n  kAborted: Symbol('FileReader aborted')\n}\n","'use strict'\n\nconst {\n  kState,\n  kError,\n  kResult,\n  kAborted,\n  kLastProgressEventFired\n} = require('./symbols')\nconst { ProgressEvent } = require('./progressevent')\nconst { getEncoding } = require('./encoding')\nconst { DOMException } = require('../fetch/constants')\nconst { serializeAMimeType, parseMIMEType } = require('../fetch/dataURL')\nconst { types } = require('util')\nconst { StringDecoder } = require('string_decoder')\nconst { btoa } = require('buffer')\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */\nfunction readOperation (fr, blob, type, encodingName) {\n  // 1. If fr’s state is \"loading\", throw an InvalidStateError\n  //    DOMException.\n  if (fr[kState] === 'loading') {\n    throw new DOMException('Invalid state', 'InvalidStateError')\n  }\n\n  // 2. Set fr’s state to \"loading\".\n  fr[kState] = 'loading'\n\n  // 3. Set fr’s result to null.\n  fr[kResult] = null\n\n  // 4. Set fr’s error to null.\n  fr[kError] = null\n\n  // 5. Let stream be the result of calling get stream on blob.\n  /** @type {import('stream/web').ReadableStream} */\n  const stream = blob.stream()\n\n  // 6. Let reader be the result of getting a reader from stream.\n  const reader = stream.getReader()\n\n  // 7. Let bytes be an empty byte sequence.\n  /** @type {Uint8Array[]} */\n  const bytes = []\n\n  // 8. Let chunkPromise be the result of reading a chunk from\n  //    stream with reader.\n  let chunkPromise = reader.read()\n\n  // 9. Let isFirstChunk be true.\n  let isFirstChunk = true\n\n  // 10. In parallel, while true:\n  // Note: \"In parallel\" just means non-blocking\n  // Note 2: readOperation itself cannot be async as double\n  // reading the body would then reject the promise, instead\n  // of throwing an error.\n  ;(async () => {\n    while (!fr[kAborted]) {\n      // 1. Wait for chunkPromise to be fulfilled or rejected.\n      try {\n        const { done, value } = await chunkPromise\n\n        // 2. If chunkPromise is fulfilled, and isFirstChunk is\n        //    true, queue a task to fire a progress event called\n        //    loadstart at fr.\n        if (isFirstChunk && !fr[kAborted]) {\n          queueMicrotask(() => {\n            fireAProgressEvent('loadstart', fr)\n          })\n        }\n\n        // 3. Set isFirstChunk to false.\n        isFirstChunk = false\n\n        // 4. If chunkPromise is fulfilled with an object whose\n        //    done property is false and whose value property is\n        //    a Uint8Array object, run these steps:\n        if (!done && types.isUint8Array(value)) {\n          // 1. Let bs be the byte sequence represented by the\n          //    Uint8Array object.\n\n          // 2. Append bs to bytes.\n          bytes.push(value)\n\n          // 3. If roughly 50ms have passed since these steps\n          //    were last invoked, queue a task to fire a\n          //    progress event called progress at fr.\n          if (\n            (\n              fr[kLastProgressEventFired] === undefined ||\n              Date.now() - fr[kLastProgressEventFired] >= 50\n            ) &&\n            !fr[kAborted]\n          ) {\n            fr[kLastProgressEventFired] = Date.now()\n            queueMicrotask(() => {\n              fireAProgressEvent('progress', fr)\n            })\n          }\n\n          // 4. Set chunkPromise to the result of reading a\n          //    chunk from stream with reader.\n          chunkPromise = reader.read()\n        } else if (done) {\n          // 5. Otherwise, if chunkPromise is fulfilled with an\n          //    object whose done property is true, queue a task\n          //    to run the following steps and abort this algorithm:\n          queueMicrotask(() => {\n            // 1. Set fr’s state to \"done\".\n            fr[kState] = 'done'\n\n            // 2. Let result be the result of package data given\n            //    bytes, type, blob’s type, and encodingName.\n            try {\n              const result = packageData(bytes, type, blob.type, encodingName)\n\n              // 4. Else:\n\n              if (fr[kAborted]) {\n                return\n              }\n\n              // 1. Set fr’s result to result.\n              fr[kResult] = result\n\n              // 2. Fire a progress event called load at the fr.\n              fireAProgressEvent('load', fr)\n            } catch (error) {\n              // 3. If package data threw an exception error:\n\n              // 1. Set fr’s error to error.\n              fr[kError] = error\n\n              // 2. Fire a progress event called error at fr.\n              fireAProgressEvent('error', fr)\n            }\n\n            // 5. If fr’s state is not \"loading\", fire a progress\n            //    event called loadend at the fr.\n            if (fr[kState] !== 'loading') {\n              fireAProgressEvent('loadend', fr)\n            }\n          })\n\n          break\n        }\n      } catch (error) {\n        if (fr[kAborted]) {\n          return\n        }\n\n        // 6. Otherwise, if chunkPromise is rejected with an\n        //    error error, queue a task to run the following\n        //    steps and abort this algorithm:\n        queueMicrotask(() => {\n          // 1. Set fr’s state to \"done\".\n          fr[kState] = 'done'\n\n          // 2. Set fr’s error to error.\n          fr[kError] = error\n\n          // 3. Fire a progress event called error at fr.\n          fireAProgressEvent('error', fr)\n\n          // 4. If fr’s state is not \"loading\", fire a progress\n          //    event called loadend at fr.\n          if (fr[kState] !== 'loading') {\n            fireAProgressEvent('loadend', fr)\n          }\n        })\n\n        break\n      }\n    }\n  })()\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */\nfunction fireAProgressEvent (e, reader) {\n  // The progress event e does not bubble. e.bubbles must be false\n  // The progress event e is NOT cancelable. e.cancelable must be false\n  const event = new ProgressEvent(e, {\n    bubbles: false,\n    cancelable: false\n  })\n\n  reader.dispatchEvent(event)\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */\nfunction packageData (bytes, type, mimeType, encodingName) {\n  // 1. A Blob has an associated package data algorithm, given\n  //    bytes, a type, a optional mimeType, and a optional\n  //    encodingName, which switches on type and runs the\n  //    associated steps:\n\n  switch (type) {\n    case 'DataURL': {\n      // 1. Return bytes as a DataURL [RFC2397] subject to\n      //    the considerations below:\n      //  * Use mimeType as part of the Data URL if it is\n      //    available in keeping with the Data URL\n      //    specification [RFC2397].\n      //  * If mimeType is not available return a Data URL\n      //    without a media-type. [RFC2397].\n\n      // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n      // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n      // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n      // data       := *urlchar\n      // parameter  := attribute \"=\" value\n      let dataURL = 'data:'\n\n      const parsed = parseMIMEType(mimeType || 'application/octet-stream')\n\n      if (parsed !== 'failure') {\n        dataURL += serializeAMimeType(parsed)\n      }\n\n      dataURL += ';base64,'\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        dataURL += btoa(decoder.write(chunk))\n      }\n\n      dataURL += btoa(decoder.end())\n\n      return dataURL\n    }\n    case 'Text': {\n      // 1. Let encoding be failure\n      let encoding = 'failure'\n\n      // 2. If the encodingName is present, set encoding to the\n      //    result of getting an encoding from encodingName.\n      if (encodingName) {\n        encoding = getEncoding(encodingName)\n      }\n\n      // 3. If encoding is failure, and mimeType is present:\n      if (encoding === 'failure' && mimeType) {\n        // 1. Let type be the result of parse a MIME type\n        //    given mimeType.\n        const type = parseMIMEType(mimeType)\n\n        // 2. If type is not failure, set encoding to the result\n        //    of getting an encoding from type’s parameters[\"charset\"].\n        if (type !== 'failure') {\n          encoding = getEncoding(type.parameters.get('charset'))\n        }\n      }\n\n      // 4. If encoding is failure, then set encoding to UTF-8.\n      if (encoding === 'failure') {\n        encoding = 'UTF-8'\n      }\n\n      // 5. Decode bytes using fallback encoding encoding, and\n      //    return the result.\n      return decode(bytes, encoding)\n    }\n    case 'ArrayBuffer': {\n      // Return a new ArrayBuffer whose contents are bytes.\n      const sequence = combineByteSequences(bytes)\n\n      return sequence.buffer\n    }\n    case 'BinaryString': {\n      // Return bytes as a binary string, in which every byte\n      //  is represented by a code unit of equal value [0..255].\n      let binaryString = ''\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        binaryString += decoder.write(chunk)\n      }\n\n      binaryString += decoder.end()\n\n      return binaryString\n    }\n  }\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */\nfunction decode (ioQueue, encoding) {\n  const bytes = combineByteSequences(ioQueue)\n\n  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n  const BOMEncoding = BOMSniffing(bytes)\n\n  let slice = 0\n\n  // 2. If BOMEncoding is non-null:\n  if (BOMEncoding !== null) {\n    // 1. Set encoding to BOMEncoding.\n    encoding = BOMEncoding\n\n    // 2. Read three bytes from ioQueue, if BOMEncoding is\n    //    UTF-8; otherwise read two bytes.\n    //    (Do nothing with those bytes.)\n    slice = BOMEncoding === 'UTF-8' ? 3 : 2\n  }\n\n  // 3. Process a queue with an instance of encoding’s\n  //    decoder, ioQueue, output, and \"replacement\".\n\n  // 4. Return output.\n\n  const sliced = bytes.slice(slice)\n  return new TextDecoder(encoding).decode(sliced)\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */\nfunction BOMSniffing (ioQueue) {\n  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n  //    converted to a byte sequence.\n  const [a, b, c] = ioQueue\n\n  // 2. For each of the rows in the table below, starting with\n  //    the first one and going down, if BOM starts with the\n  //    bytes given in the first column, then return the\n  //    encoding given in the cell in the second column of that\n  //    row. Otherwise, return null.\n  if (a === 0xEF && b === 0xBB && c === 0xBF) {\n    return 'UTF-8'\n  } else if (a === 0xFE && b === 0xFF) {\n    return 'UTF-16BE'\n  } else if (a === 0xFF && b === 0xFE) {\n    return 'UTF-16LE'\n  }\n\n  return null\n}\n\n/**\n * @param {Uint8Array[]} sequences\n */\nfunction combineByteSequences (sequences) {\n  const size = sequences.reduce((a, b) => {\n    return a + b.byteLength\n  }, 0)\n\n  let offset = 0\n\n  return sequences.reduce((a, b) => {\n    a.set(b, offset)\n    offset += b.byteLength\n    return a\n  }, new Uint8Array(size))\n}\n\nmodule.exports = {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n}\n","'use strict'\n\n// We include a version number for the Dispatcher API. In case of breaking changes,\n// this version number must be increased to avoid conflicts.\nconst globalDispatcher = Symbol.for('undici.globalDispatcher.1')\nconst { InvalidArgumentError } = require('./core/errors')\nconst Agent = require('./agent')\n\nif (getGlobalDispatcher() === undefined) {\n  setGlobalDispatcher(new Agent())\n}\n\nfunction setGlobalDispatcher (agent) {\n  if (!agent || typeof agent.dispatch !== 'function') {\n    throw new InvalidArgumentError('Argument agent must implement Agent')\n  }\n  Object.defineProperty(globalThis, globalDispatcher, {\n    value: agent,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  })\n}\n\nfunction getGlobalDispatcher () {\n  return globalThis[globalDispatcher]\n}\n\nmodule.exports = {\n  setGlobalDispatcher,\n  getGlobalDispatcher\n}\n","'use strict'\n\nmodule.exports = class DecoratorHandler {\n  constructor (handler) {\n    this.handler = handler\n  }\n\n  onConnect (...args) {\n    return this.handler.onConnect(...args)\n  }\n\n  onError (...args) {\n    return this.handler.onError(...args)\n  }\n\n  onUpgrade (...args) {\n    return this.handler.onUpgrade(...args)\n  }\n\n  onHeaders (...args) {\n    return this.handler.onHeaders(...args)\n  }\n\n  onData (...args) {\n    return this.handler.onData(...args)\n  }\n\n  onComplete (...args) {\n    return this.handler.onComplete(...args)\n  }\n\n  onBodySent (...args) {\n    return this.handler.onBodySent(...args)\n  }\n}\n","'use strict'\n\nconst util = require('../core/util')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { InvalidArgumentError } = require('../core/errors')\nconst EE = require('events')\n\nconst redirectableStatusCodes = [300, 301, 302, 303, 307, 308]\n\nconst kBody = Symbol('body')\n\nclass BodyAsyncIterable {\n  constructor (body) {\n    this[kBody] = body\n    this[kBodyUsed] = false\n  }\n\n  async * [Symbol.asyncIterator] () {\n    assert(!this[kBodyUsed], 'disturbed')\n    this[kBodyUsed] = true\n    yield * this[kBody]\n  }\n}\n\nclass RedirectHandler {\n  constructor (dispatch, maxRedirections, opts, handler) {\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    util.validateHandler(handler, opts.method, opts.upgrade)\n\n    this.dispatch = dispatch\n    this.location = null\n    this.abort = null\n    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy\n    this.maxRedirections = maxRedirections\n    this.handler = handler\n    this.history = []\n\n    if (util.isStream(this.opts.body)) {\n      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n      // so that it can be dispatched again?\n      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n      if (util.bodyLength(this.opts.body) === 0) {\n        this.opts.body\n          .on('data', function () {\n            assert(false)\n          })\n      }\n\n      if (typeof this.opts.body.readableDidRead !== 'boolean') {\n        this.opts.body[kBodyUsed] = false\n        EE.prototype.on.call(this.opts.body, 'data', function () {\n          this[kBodyUsed] = true\n        })\n      }\n    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n      // TODO (fix): We can't access ReadableStream internal state\n      // to determine whether or not it has been disturbed. This is just\n      // a workaround.\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    } else if (\n      this.opts.body &&\n      typeof this.opts.body !== 'string' &&\n      !ArrayBuffer.isView(this.opts.body) &&\n      util.isIterable(this.opts.body)\n    ) {\n      // TODO: Should we allow re-using iterable if !this.opts.idempotent\n      // or through some other flag?\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    }\n  }\n\n  onConnect (abort) {\n    this.abort = abort\n    this.handler.onConnect(abort, { history: this.history })\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    this.handler.onUpgrade(statusCode, headers, socket)\n  }\n\n  onError (error) {\n    this.handler.onError(error)\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)\n      ? null\n      : parseLocation(statusCode, headers)\n\n    if (this.opts.origin) {\n      this.history.push(new URL(this.opts.path, this.opts.origin))\n    }\n\n    if (!this.location) {\n      return this.handler.onHeaders(statusCode, headers, resume, statusText)\n    }\n\n    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))\n    const path = search ? `${pathname}${search}` : pathname\n\n    // Remove headers referring to the original URL.\n    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n    // https://tools.ietf.org/html/rfc7231#section-6.4\n    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)\n    this.opts.path = path\n    this.opts.origin = origin\n    this.opts.maxRedirections = 0\n    this.opts.query = null\n\n    // https://tools.ietf.org/html/rfc7231#section-6.4.4\n    // In case of HTTP 303, always replace method to be either HEAD or GET\n    if (statusCode === 303 && this.opts.method !== 'HEAD') {\n      this.opts.method = 'GET'\n      this.opts.body = null\n    }\n  }\n\n  onData (chunk) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response bodies.\n\n        Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n\n        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n\n        For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitily chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */\n    } else {\n      return this.handler.onData(chunk)\n    }\n  }\n\n  onComplete (trailers) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n\n        See comment on onData method above for more detailed informations.\n      */\n\n      this.location = null\n      this.abort = null\n\n      this.dispatch(this.opts, this)\n    } else {\n      this.handler.onComplete(trailers)\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) {\n      this.handler.onBodySent(chunk)\n    }\n  }\n}\n\nfunction parseLocation (statusCode, headers) {\n  if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n    return null\n  }\n\n  for (let i = 0; i < headers.length; i += 2) {\n    if (headers[i].toString().toLowerCase() === 'location') {\n      return headers[i + 1]\n    }\n  }\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader (header, removeContent, unknownOrigin) {\n  if (header.length === 4) {\n    return util.headerNameToString(header) === 'host'\n  }\n  if (removeContent && util.headerNameToString(header).startsWith('content-')) {\n    return true\n  }\n  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {\n    const name = util.headerNameToString(header)\n    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'\n  }\n  return false\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders (headers, removeContent, unknownOrigin) {\n  const ret = []\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n        ret.push(headers[i], headers[i + 1])\n      }\n    }\n  } else if (headers && typeof headers === 'object') {\n    for (const key of Object.keys(headers)) {\n      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n        ret.push(key, headers[key])\n      }\n    }\n  } else {\n    assert(headers == null, 'headers must be an object or an array')\n  }\n  return ret\n}\n\nmodule.exports = RedirectHandler\n","const assert = require('assert')\n\nconst { kRetryHandlerDefaultRetry } = require('../core/symbols')\nconst { RequestRetryError } = require('../core/errors')\nconst { isDisturbed, parseHeaders, parseRangeHeader } = require('../core/util')\n\nfunction calculateRetryAfterHeader (retryAfter) {\n  const current = Date.now()\n  const diff = new Date(retryAfter).getTime() - current\n\n  return diff\n}\n\nclass RetryHandler {\n  constructor (opts, handlers) {\n    const { retryOptions, ...dispatchOpts } = opts\n    const {\n      // Retry scoped\n      retry: retryFn,\n      maxRetries,\n      maxTimeout,\n      minTimeout,\n      timeoutFactor,\n      // Response scoped\n      methods,\n      errorCodes,\n      retryAfter,\n      statusCodes\n    } = retryOptions ?? {}\n\n    this.dispatch = handlers.dispatch\n    this.handler = handlers.handler\n    this.opts = dispatchOpts\n    this.abort = null\n    this.aborted = false\n    this.retryOpts = {\n      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],\n      retryAfter: retryAfter ?? true,\n      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,\n      timeout: minTimeout ?? 500, // .5s\n      timeoutFactor: timeoutFactor ?? 2,\n      maxRetries: maxRetries ?? 5,\n      // What errors we should retry\n      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],\n      // Indicates which errors to retry\n      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],\n      // List of errors to retry\n      errorCodes: errorCodes ?? [\n        'ECONNRESET',\n        'ECONNREFUSED',\n        'ENOTFOUND',\n        'ENETDOWN',\n        'ENETUNREACH',\n        'EHOSTDOWN',\n        'EHOSTUNREACH',\n        'EPIPE'\n      ]\n    }\n\n    this.retryCount = 0\n    this.start = 0\n    this.end = null\n    this.etag = null\n    this.resume = null\n\n    // Handle possible onConnect duplication\n    this.handler.onConnect(reason => {\n      this.aborted = true\n      if (this.abort) {\n        this.abort(reason)\n      } else {\n        this.reason = reason\n      }\n    })\n  }\n\n  onRequestSent () {\n    if (this.handler.onRequestSent) {\n      this.handler.onRequestSent()\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    if (this.handler.onUpgrade) {\n      this.handler.onUpgrade(statusCode, headers, socket)\n    }\n  }\n\n  onConnect (abort) {\n    if (this.aborted) {\n      abort(this.reason)\n    } else {\n      this.abort = abort\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)\n  }\n\n  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {\n    const { statusCode, code, headers } = err\n    const { method, retryOptions } = opts\n    const {\n      maxRetries,\n      timeout,\n      maxTimeout,\n      timeoutFactor,\n      statusCodes,\n      errorCodes,\n      methods\n    } = retryOptions\n    let { counter, currentTimeout } = state\n\n    currentTimeout =\n      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout\n\n    // Any code that is not a Undici's originated and allowed to retry\n    if (\n      code &&\n      code !== 'UND_ERR_REQ_RETRY' &&\n      code !== 'UND_ERR_SOCKET' &&\n      !errorCodes.includes(code)\n    ) {\n      cb(err)\n      return\n    }\n\n    // If a set of method are provided and the current method is not in the list\n    if (Array.isArray(methods) && !methods.includes(method)) {\n      cb(err)\n      return\n    }\n\n    // If a set of status code are provided and the current status code is not in the list\n    if (\n      statusCode != null &&\n      Array.isArray(statusCodes) &&\n      !statusCodes.includes(statusCode)\n    ) {\n      cb(err)\n      return\n    }\n\n    // If we reached the max number of retries\n    if (counter > maxRetries) {\n      cb(err)\n      return\n    }\n\n    let retryAfterHeader = headers != null && headers['retry-after']\n    if (retryAfterHeader) {\n      retryAfterHeader = Number(retryAfterHeader)\n      retryAfterHeader = isNaN(retryAfterHeader)\n        ? calculateRetryAfterHeader(retryAfterHeader)\n        : retryAfterHeader * 1e3 // Retry-After is in seconds\n    }\n\n    const retryTimeout =\n      retryAfterHeader > 0\n        ? Math.min(retryAfterHeader, maxTimeout)\n        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)\n\n    state.currentTimeout = retryTimeout\n\n    setTimeout(() => cb(null), retryTimeout)\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const headers = parseHeaders(rawHeaders)\n\n    this.retryCount += 1\n\n    if (statusCode >= 300) {\n      this.abort(\n        new RequestRetryError('Request failed', statusCode, {\n          headers,\n          count: this.retryCount\n        })\n      )\n      return false\n    }\n\n    // Checkpoint for resume from where we left it\n    if (this.resume != null) {\n      this.resume = null\n\n      if (statusCode !== 206) {\n        return true\n      }\n\n      const contentRange = parseRangeHeader(headers['content-range'])\n      // If no content range\n      if (!contentRange) {\n        this.abort(\n          new RequestRetryError('Content-Range mismatch', statusCode, {\n            headers,\n            count: this.retryCount\n          })\n        )\n        return false\n      }\n\n      // Let's start with a weak etag check\n      if (this.etag != null && this.etag !== headers.etag) {\n        this.abort(\n          new RequestRetryError('ETag mismatch', statusCode, {\n            headers,\n            count: this.retryCount\n          })\n        )\n        return false\n      }\n\n      const { start, size, end = size } = contentRange\n\n      assert(this.start === start, 'content-range mismatch')\n      assert(this.end == null || this.end === end, 'content-range mismatch')\n\n      this.resume = resume\n      return true\n    }\n\n    if (this.end == null) {\n      if (statusCode === 206) {\n        // First time we receive 206\n        const range = parseRangeHeader(headers['content-range'])\n\n        if (range == null) {\n          return this.handler.onHeaders(\n            statusCode,\n            rawHeaders,\n            resume,\n            statusMessage\n          )\n        }\n\n        const { start, size, end = size } = range\n\n        assert(\n          start != null && Number.isFinite(start) && this.start !== start,\n          'content-range mismatch'\n        )\n        assert(Number.isFinite(start))\n        assert(\n          end != null && Number.isFinite(end) && this.end !== end,\n          'invalid content-length'\n        )\n\n        this.start = start\n        this.end = end\n      }\n\n      // We make our best to checkpoint the body for further range headers\n      if (this.end == null) {\n        const contentLength = headers['content-length']\n        this.end = contentLength != null ? Number(contentLength) : null\n      }\n\n      assert(Number.isFinite(this.start))\n      assert(\n        this.end == null || Number.isFinite(this.end),\n        'invalid content-length'\n      )\n\n      this.resume = resume\n      this.etag = headers.etag != null ? headers.etag : null\n\n      return this.handler.onHeaders(\n        statusCode,\n        rawHeaders,\n        resume,\n        statusMessage\n      )\n    }\n\n    const err = new RequestRetryError('Request failed', statusCode, {\n      headers,\n      count: this.retryCount\n    })\n\n    this.abort(err)\n\n    return false\n  }\n\n  onData (chunk) {\n    this.start += chunk.length\n\n    return this.handler.onData(chunk)\n  }\n\n  onComplete (rawTrailers) {\n    this.retryCount = 0\n    return this.handler.onComplete(rawTrailers)\n  }\n\n  onError (err) {\n    if (this.aborted || isDisturbed(this.opts.body)) {\n      return this.handler.onError(err)\n    }\n\n    this.retryOpts.retry(\n      err,\n      {\n        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },\n        opts: { retryOptions: this.retryOpts, ...this.opts }\n      },\n      onRetry.bind(this)\n    )\n\n    function onRetry (err) {\n      if (err != null || this.aborted || isDisturbed(this.opts.body)) {\n        return this.handler.onError(err)\n      }\n\n      if (this.start !== 0) {\n        this.opts = {\n          ...this.opts,\n          headers: {\n            ...this.opts.headers,\n            range: `bytes=${this.start}-${this.end ?? ''}`\n          }\n        }\n      }\n\n      try {\n        this.dispatch(this.opts, this)\n      } catch (err) {\n        this.handler.onError(err)\n      }\n    }\n  }\n}\n\nmodule.exports = RetryHandler\n","'use strict'\n\nconst RedirectHandler = require('../handler/RedirectHandler')\n\nfunction createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {\n  return (dispatch) => {\n    return function Intercept (opts, handler) {\n      const { maxRedirections = defaultMaxRedirections } = opts\n\n      if (!maxRedirections) {\n        return dispatch(opts, handler)\n      }\n\n      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)\n      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.\n      return dispatch(opts, redirectHandler)\n    }\n  }\n}\n\nmodule.exports = createRedirectInterceptor\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;\nconst utils_1 = require(\"./utils\");\n// C headers\nvar ERROR;\n(function (ERROR) {\n    ERROR[ERROR[\"OK\"] = 0] = \"OK\";\n    ERROR[ERROR[\"INTERNAL\"] = 1] = \"INTERNAL\";\n    ERROR[ERROR[\"STRICT\"] = 2] = \"STRICT\";\n    ERROR[ERROR[\"LF_EXPECTED\"] = 3] = \"LF_EXPECTED\";\n    ERROR[ERROR[\"UNEXPECTED_CONTENT_LENGTH\"] = 4] = \"UNEXPECTED_CONTENT_LENGTH\";\n    ERROR[ERROR[\"CLOSED_CONNECTION\"] = 5] = \"CLOSED_CONNECTION\";\n    ERROR[ERROR[\"INVALID_METHOD\"] = 6] = \"INVALID_METHOD\";\n    ERROR[ERROR[\"INVALID_URL\"] = 7] = \"INVALID_URL\";\n    ERROR[ERROR[\"INVALID_CONSTANT\"] = 8] = \"INVALID_CONSTANT\";\n    ERROR[ERROR[\"INVALID_VERSION\"] = 9] = \"INVALID_VERSION\";\n    ERROR[ERROR[\"INVALID_HEADER_TOKEN\"] = 10] = \"INVALID_HEADER_TOKEN\";\n    ERROR[ERROR[\"INVALID_CONTENT_LENGTH\"] = 11] = \"INVALID_CONTENT_LENGTH\";\n    ERROR[ERROR[\"INVALID_CHUNK_SIZE\"] = 12] = \"INVALID_CHUNK_SIZE\";\n    ERROR[ERROR[\"INVALID_STATUS\"] = 13] = \"INVALID_STATUS\";\n    ERROR[ERROR[\"INVALID_EOF_STATE\"] = 14] = \"INVALID_EOF_STATE\";\n    ERROR[ERROR[\"INVALID_TRANSFER_ENCODING\"] = 15] = \"INVALID_TRANSFER_ENCODING\";\n    ERROR[ERROR[\"CB_MESSAGE_BEGIN\"] = 16] = \"CB_MESSAGE_BEGIN\";\n    ERROR[ERROR[\"CB_HEADERS_COMPLETE\"] = 17] = \"CB_HEADERS_COMPLETE\";\n    ERROR[ERROR[\"CB_MESSAGE_COMPLETE\"] = 18] = \"CB_MESSAGE_COMPLETE\";\n    ERROR[ERROR[\"CB_CHUNK_HEADER\"] = 19] = \"CB_CHUNK_HEADER\";\n    ERROR[ERROR[\"CB_CHUNK_COMPLETE\"] = 20] = \"CB_CHUNK_COMPLETE\";\n    ERROR[ERROR[\"PAUSED\"] = 21] = \"PAUSED\";\n    ERROR[ERROR[\"PAUSED_UPGRADE\"] = 22] = \"PAUSED_UPGRADE\";\n    ERROR[ERROR[\"PAUSED_H2_UPGRADE\"] = 23] = \"PAUSED_H2_UPGRADE\";\n    ERROR[ERROR[\"USER\"] = 24] = \"USER\";\n})(ERROR = exports.ERROR || (exports.ERROR = {}));\nvar TYPE;\n(function (TYPE) {\n    TYPE[TYPE[\"BOTH\"] = 0] = \"BOTH\";\n    TYPE[TYPE[\"REQUEST\"] = 1] = \"REQUEST\";\n    TYPE[TYPE[\"RESPONSE\"] = 2] = \"RESPONSE\";\n})(TYPE = exports.TYPE || (exports.TYPE = {}));\nvar FLAGS;\n(function (FLAGS) {\n    FLAGS[FLAGS[\"CONNECTION_KEEP_ALIVE\"] = 1] = \"CONNECTION_KEEP_ALIVE\";\n    FLAGS[FLAGS[\"CONNECTION_CLOSE\"] = 2] = \"CONNECTION_CLOSE\";\n    FLAGS[FLAGS[\"CONNECTION_UPGRADE\"] = 4] = \"CONNECTION_UPGRADE\";\n    FLAGS[FLAGS[\"CHUNKED\"] = 8] = \"CHUNKED\";\n    FLAGS[FLAGS[\"UPGRADE\"] = 16] = \"UPGRADE\";\n    FLAGS[FLAGS[\"CONTENT_LENGTH\"] = 32] = \"CONTENT_LENGTH\";\n    FLAGS[FLAGS[\"SKIPBODY\"] = 64] = \"SKIPBODY\";\n    FLAGS[FLAGS[\"TRAILING\"] = 128] = \"TRAILING\";\n    // 1 << 8 is unused\n    FLAGS[FLAGS[\"TRANSFER_ENCODING\"] = 512] = \"TRANSFER_ENCODING\";\n})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));\nvar LENIENT_FLAGS;\n(function (LENIENT_FLAGS) {\n    LENIENT_FLAGS[LENIENT_FLAGS[\"HEADERS\"] = 1] = \"HEADERS\";\n    LENIENT_FLAGS[LENIENT_FLAGS[\"CHUNKED_LENGTH\"] = 2] = \"CHUNKED_LENGTH\";\n    LENIENT_FLAGS[LENIENT_FLAGS[\"KEEP_ALIVE\"] = 4] = \"KEEP_ALIVE\";\n})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));\nvar METHODS;\n(function (METHODS) {\n    METHODS[METHODS[\"DELETE\"] = 0] = \"DELETE\";\n    METHODS[METHODS[\"GET\"] = 1] = \"GET\";\n    METHODS[METHODS[\"HEAD\"] = 2] = \"HEAD\";\n    METHODS[METHODS[\"POST\"] = 3] = \"POST\";\n    METHODS[METHODS[\"PUT\"] = 4] = \"PUT\";\n    /* pathological */\n    METHODS[METHODS[\"CONNECT\"] = 5] = \"CONNECT\";\n    METHODS[METHODS[\"OPTIONS\"] = 6] = \"OPTIONS\";\n    METHODS[METHODS[\"TRACE\"] = 7] = \"TRACE\";\n    /* WebDAV */\n    METHODS[METHODS[\"COPY\"] = 8] = \"COPY\";\n    METHODS[METHODS[\"LOCK\"] = 9] = \"LOCK\";\n    METHODS[METHODS[\"MKCOL\"] = 10] = \"MKCOL\";\n    METHODS[METHODS[\"MOVE\"] = 11] = \"MOVE\";\n    METHODS[METHODS[\"PROPFIND\"] = 12] = \"PROPFIND\";\n    METHODS[METHODS[\"PROPPATCH\"] = 13] = \"PROPPATCH\";\n    METHODS[METHODS[\"SEARCH\"] = 14] = \"SEARCH\";\n    METHODS[METHODS[\"UNLOCK\"] = 15] = \"UNLOCK\";\n    METHODS[METHODS[\"BIND\"] = 16] = \"BIND\";\n    METHODS[METHODS[\"REBIND\"] = 17] = \"REBIND\";\n    METHODS[METHODS[\"UNBIND\"] = 18] = \"UNBIND\";\n    METHODS[METHODS[\"ACL\"] = 19] = \"ACL\";\n    /* subversion */\n    METHODS[METHODS[\"REPORT\"] = 20] = \"REPORT\";\n    METHODS[METHODS[\"MKACTIVITY\"] = 21] = \"MKACTIVITY\";\n    METHODS[METHODS[\"CHECKOUT\"] = 22] = \"CHECKOUT\";\n    METHODS[METHODS[\"MERGE\"] = 23] = \"MERGE\";\n    /* upnp */\n    METHODS[METHODS[\"M-SEARCH\"] = 24] = \"M-SEARCH\";\n    METHODS[METHODS[\"NOTIFY\"] = 25] = \"NOTIFY\";\n    METHODS[METHODS[\"SUBSCRIBE\"] = 26] = \"SUBSCRIBE\";\n    METHODS[METHODS[\"UNSUBSCRIBE\"] = 27] = \"UNSUBSCRIBE\";\n    /* RFC-5789 */\n    METHODS[METHODS[\"PATCH\"] = 28] = \"PATCH\";\n    METHODS[METHODS[\"PURGE\"] = 29] = \"PURGE\";\n    /* CalDAV */\n    METHODS[METHODS[\"MKCALENDAR\"] = 30] = \"MKCALENDAR\";\n    /* RFC-2068, section 19.6.1.2 */\n    METHODS[METHODS[\"LINK\"] = 31] = \"LINK\";\n    METHODS[METHODS[\"UNLINK\"] = 32] = \"UNLINK\";\n    /* icecast */\n    METHODS[METHODS[\"SOURCE\"] = 33] = \"SOURCE\";\n    /* RFC-7540, section 11.6 */\n    METHODS[METHODS[\"PRI\"] = 34] = \"PRI\";\n    /* RFC-2326 RTSP */\n    METHODS[METHODS[\"DESCRIBE\"] = 35] = \"DESCRIBE\";\n    METHODS[METHODS[\"ANNOUNCE\"] = 36] = \"ANNOUNCE\";\n    METHODS[METHODS[\"SETUP\"] = 37] = \"SETUP\";\n    METHODS[METHODS[\"PLAY\"] = 38] = \"PLAY\";\n    METHODS[METHODS[\"PAUSE\"] = 39] = \"PAUSE\";\n    METHODS[METHODS[\"TEARDOWN\"] = 40] = \"TEARDOWN\";\n    METHODS[METHODS[\"GET_PARAMETER\"] = 41] = \"GET_PARAMETER\";\n    METHODS[METHODS[\"SET_PARAMETER\"] = 42] = \"SET_PARAMETER\";\n    METHODS[METHODS[\"REDIRECT\"] = 43] = \"REDIRECT\";\n    METHODS[METHODS[\"RECORD\"] = 44] = \"RECORD\";\n    /* RAOP */\n    METHODS[METHODS[\"FLUSH\"] = 45] = \"FLUSH\";\n})(METHODS = exports.METHODS || (exports.METHODS = {}));\nexports.METHODS_HTTP = [\n    METHODS.DELETE,\n    METHODS.GET,\n    METHODS.HEAD,\n    METHODS.POST,\n    METHODS.PUT,\n    METHODS.CONNECT,\n    METHODS.OPTIONS,\n    METHODS.TRACE,\n    METHODS.COPY,\n    METHODS.LOCK,\n    METHODS.MKCOL,\n    METHODS.MOVE,\n    METHODS.PROPFIND,\n    METHODS.PROPPATCH,\n    METHODS.SEARCH,\n    METHODS.UNLOCK,\n    METHODS.BIND,\n    METHODS.REBIND,\n    METHODS.UNBIND,\n    METHODS.ACL,\n    METHODS.REPORT,\n    METHODS.MKACTIVITY,\n    METHODS.CHECKOUT,\n    METHODS.MERGE,\n    METHODS['M-SEARCH'],\n    METHODS.NOTIFY,\n    METHODS.SUBSCRIBE,\n    METHODS.UNSUBSCRIBE,\n    METHODS.PATCH,\n    METHODS.PURGE,\n    METHODS.MKCALENDAR,\n    METHODS.LINK,\n    METHODS.UNLINK,\n    METHODS.PRI,\n    // TODO(indutny): should we allow it with HTTP?\n    METHODS.SOURCE,\n];\nexports.METHODS_ICE = [\n    METHODS.SOURCE,\n];\nexports.METHODS_RTSP = [\n    METHODS.OPTIONS,\n    METHODS.DESCRIBE,\n    METHODS.ANNOUNCE,\n    METHODS.SETUP,\n    METHODS.PLAY,\n    METHODS.PAUSE,\n    METHODS.TEARDOWN,\n    METHODS.GET_PARAMETER,\n    METHODS.SET_PARAMETER,\n    METHODS.REDIRECT,\n    METHODS.RECORD,\n    METHODS.FLUSH,\n    // For AirPlay\n    METHODS.GET,\n    METHODS.POST,\n];\nexports.METHOD_MAP = utils_1.enumToMap(METHODS);\nexports.H_METHOD_MAP = {};\nObject.keys(exports.METHOD_MAP).forEach((key) => {\n    if (/^H/.test(key)) {\n        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];\n    }\n});\nvar FINISH;\n(function (FINISH) {\n    FINISH[FINISH[\"SAFE\"] = 0] = \"SAFE\";\n    FINISH[FINISH[\"SAFE_WITH_CB\"] = 1] = \"SAFE_WITH_CB\";\n    FINISH[FINISH[\"UNSAFE\"] = 2] = \"UNSAFE\";\n})(FINISH = exports.FINISH || (exports.FINISH = {}));\nexports.ALPHA = [];\nfor (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {\n    // Upper case\n    exports.ALPHA.push(String.fromCharCode(i));\n    // Lower case\n    exports.ALPHA.push(String.fromCharCode(i + 0x20));\n}\nexports.NUM_MAP = {\n    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,\n    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,\n};\nexports.HEX_MAP = {\n    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,\n    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,\n    A: 0XA, B: 0XB, C: 0XC, D: 0XD, E: 0XE, F: 0XF,\n    a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,\n};\nexports.NUM = [\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n];\nexports.ALPHANUM = exports.ALPHA.concat(exports.NUM);\nexports.MARK = ['-', '_', '.', '!', '~', '*', '\\'', '(', ')'];\nexports.USERINFO_CHARS = exports.ALPHANUM\n    .concat(exports.MARK)\n    .concat(['%', ';', ':', '&', '=', '+', '$', ',']);\n// TODO(indutny): use RFC\nexports.STRICT_URL_CHAR = [\n    '!', '\"', '$', '%', '&', '\\'',\n    '(', ')', '*', '+', ',', '-', '.', '/',\n    ':', ';', '<', '=', '>',\n    '@', '[', '\\\\', ']', '^', '_',\n    '`',\n    '{', '|', '}', '~',\n].concat(exports.ALPHANUM);\nexports.URL_CHAR = exports.STRICT_URL_CHAR\n    .concat(['\\t', '\\f']);\n// All characters with 0x80 bit set to 1\nfor (let i = 0x80; i <= 0xff; i++) {\n    exports.URL_CHAR.push(i);\n}\nexports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);\n/* Tokens as defined by rfc 2616. Also lowercases them.\n *        token       = 1*<any CHAR except CTLs or separators>\n *     separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *                    | \",\" | \";\" | \":\" | \"\\\" | <\">\n *                    | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *                    | \"{\" | \"}\" | SP | HT\n */\nexports.STRICT_TOKEN = [\n    '!', '#', '$', '%', '&', '\\'',\n    '*', '+', '-', '.',\n    '^', '_', '`',\n    '|', '~',\n].concat(exports.ALPHANUM);\nexports.TOKEN = exports.STRICT_TOKEN.concat([' ']);\n/*\n * Verify that a char is a valid visible (printable) US-ASCII\n * character or %x80-FF\n */\nexports.HEADER_CHARS = ['\\t'];\nfor (let i = 32; i <= 255; i++) {\n    if (i !== 127) {\n        exports.HEADER_CHARS.push(i);\n    }\n}\n// ',' = \\x44\nexports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);\nexports.MAJOR = exports.NUM_MAP;\nexports.MINOR = exports.MAJOR;\nvar HEADER_STATE;\n(function (HEADER_STATE) {\n    HEADER_STATE[HEADER_STATE[\"GENERAL\"] = 0] = \"GENERAL\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION\"] = 1] = \"CONNECTION\";\n    HEADER_STATE[HEADER_STATE[\"CONTENT_LENGTH\"] = 2] = \"CONTENT_LENGTH\";\n    HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING\"] = 3] = \"TRANSFER_ENCODING\";\n    HEADER_STATE[HEADER_STATE[\"UPGRADE\"] = 4] = \"UPGRADE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_KEEP_ALIVE\"] = 5] = \"CONNECTION_KEEP_ALIVE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_CLOSE\"] = 6] = \"CONNECTION_CLOSE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_UPGRADE\"] = 7] = \"CONNECTION_UPGRADE\";\n    HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING_CHUNKED\"] = 8] = \"TRANSFER_ENCODING_CHUNKED\";\n})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));\nexports.SPECIAL_HEADERS = {\n    'connection': HEADER_STATE.CONNECTION,\n    'content-length': HEADER_STATE.CONTENT_LENGTH,\n    'proxy-connection': HEADER_STATE.CONNECTION,\n    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,\n    'upgrade': HEADER_STATE.UPGRADE,\n};\n//# sourceMappingURL=constants.js.map","module.exports = ''\n","module.exports = ''\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.enumToMap = void 0;\nfunction enumToMap(obj) {\n    const res = {};\n    Object.keys(obj).forEach((key) => {\n        const value = obj[key];\n        if (typeof value === 'number') {\n            res[key] = value;\n        }\n    });\n    return res;\n}\nexports.enumToMap = enumToMap;\n//# sourceMappingURL=utils.js.map","'use strict'\n\nconst { kClients } = require('../core/symbols')\nconst Agent = require('../agent')\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols')\nconst MockClient = require('./mock-client')\nconst MockPool = require('./mock-pool')\nconst { matchValue, buildMockOptions } = require('./mock-utils')\nconst { InvalidArgumentError, UndiciError } = require('../core/errors')\nconst Dispatcher = require('../dispatcher')\nconst Pluralizer = require('./pluralizer')\nconst PendingInterceptorsFormatter = require('./pending-interceptors-formatter')\n\nclass FakeWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value\n  }\n}\n\nclass MockAgent extends Dispatcher {\n  constructor (opts) {\n    super(opts)\n\n    this[kNetConnect] = true\n    this[kIsMockActive] = true\n\n    // Instantiate Agent and encapsulate\n    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n    const agent = opts && opts.agent ? opts.agent : new Agent(opts)\n    this[kAgent] = agent\n\n    this[kClients] = agent[kClients]\n    this[kOptions] = buildMockOptions(opts)\n  }\n\n  get (origin) {\n    let dispatcher = this[kMockAgentGet](origin)\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin)\n      this[kMockAgentSet](origin, dispatcher)\n    }\n    return dispatcher\n  }\n\n  dispatch (opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin)\n    return this[kAgent].dispatch(opts, handler)\n  }\n\n  async close () {\n    await this[kAgent].close()\n    this[kClients].clear()\n  }\n\n  deactivate () {\n    this[kIsMockActive] = false\n  }\n\n  activate () {\n    this[kIsMockActive] = true\n  }\n\n  enableNetConnect (matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher)\n      } else {\n        this[kNetConnect] = [matcher]\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')\n    }\n  }\n\n  disableNetConnect () {\n    this[kNetConnect] = false\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive () {\n    return this[kIsMockActive]\n  }\n\n  [kMockAgentSet] (origin, dispatcher) {\n    this[kClients].set(origin, new FakeWeakRef(dispatcher))\n  }\n\n  [kFactory] (origin) {\n    const mockOptions = Object.assign({ agent: this }, this[kOptions])\n    return this[kOptions] && this[kOptions].connections === 1\n      ? new MockClient(origin, mockOptions)\n      : new MockPool(origin, mockOptions)\n  }\n\n  [kMockAgentGet] (origin) {\n    // First check if we can immediately find it\n    const ref = this[kClients].get(origin)\n    if (ref) {\n      return ref.deref()\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999')\n      this[kMockAgentSet](origin, dispatcher)\n      return dispatcher\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {\n      const nonExplicitDispatcher = nonExplicitRef.deref()\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin)\n        this[kMockAgentSet](origin, dispatcher)\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]\n        return dispatcher\n      }\n    }\n  }\n\n  [kGetNetConnect] () {\n    return this[kNetConnect]\n  }\n\n  pendingInterceptors () {\n    const mockAgentClients = this[kClients]\n\n    return Array.from(mockAgentClients.entries())\n      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))\n      .filter(({ pending }) => pending)\n  }\n\n  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n    const pending = this.pendingInterceptors()\n\n    if (pending.length === 0) {\n      return\n    }\n\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)\n\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim())\n  }\n}\n\nmodule.exports = MockAgent\n","'use strict'\n\nconst { promisify } = require('util')\nconst Client = require('../client')\nconst { buildMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = require('./mock-symbols')\nconst { MockInterceptor } = require('./mock-interceptor')\nconst Symbols = require('../core/symbols')\nconst { InvalidArgumentError } = require('../core/errors')\n\n/**\n * MockClient provides an API that extends the Client to influence the mockDispatches.\n */\nclass MockClient extends Client {\n  constructor (origin, opts) {\n    super(origin, opts)\n\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n\n    this[kMockAgent] = opts.agent\n    this[kOrigin] = origin\n    this[kDispatches] = []\n    this[kConnected] = 1\n    this[kOriginalDispatch] = this.dispatch\n    this[kOriginalClose] = this.close.bind(this)\n\n    this.dispatch = buildMockDispatch.call(this)\n    this.close = this[kClose]\n  }\n\n  get [Symbols.kConnected] () {\n    return this[kConnected]\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept (opts) {\n    return new MockInterceptor(opts, this[kDispatches])\n  }\n\n  async [kClose] () {\n    await promisify(this[kOriginalClose])()\n    this[kConnected] = 0\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])\n  }\n}\n\nmodule.exports = MockClient\n","'use strict'\n\nconst { UndiciError } = require('../core/errors')\n\nclass MockNotMatchedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, MockNotMatchedError)\n    this.name = 'MockNotMatchedError'\n    this.message = message || 'The request does not match any registered mock dispatches'\n    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'\n  }\n}\n\nmodule.exports = {\n  MockNotMatchedError\n}\n","'use strict'\n\nconst { getResponseData, buildKey, addMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols')\nconst { InvalidArgumentError } = require('../core/errors')\nconst { buildURL } = require('../core/util')\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor (mockDispatch) {\n    this[kMockDispatch] = mockDispatch\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay (waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].delay = waitInMs\n    return this\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist () {\n    this[kMockDispatch].persist = true\n    return this\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times (repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].times = repeatTimes\n    return this\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor (opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object')\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined')\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET'\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query)\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://')\n        opts.path = parsedURL.pathname + parsedURL.search\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase()\n    }\n\n    this[kDispatchKey] = buildKey(opts)\n    this[kDispatches] = mockDispatches\n    this[kDefaultHeaders] = {}\n    this[kDefaultTrailers] = {}\n    this[kContentLength] = false\n  }\n\n  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {\n    const responseData = getResponseData(data)\n    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}\n    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }\n    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }\n\n    return { statusCode, data, headers, trailers }\n  }\n\n  validateReplyParameters (statusCode, data, responseOptions) {\n    if (typeof statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined')\n    }\n    if (typeof data === 'undefined') {\n      throw new InvalidArgumentError('data must be defined')\n    }\n    if (typeof responseOptions !== 'object') {\n      throw new InvalidArgumentError('responseOptions must be an object')\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply (replyData) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyData === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = (opts) => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyData(opts)\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object') {\n          throw new InvalidArgumentError('reply options callback must return an object')\n        }\n\n        const { statusCode, data = '', responseOptions = {} } = resolvedData\n        this.validateReplyParameters(statusCode, data, responseOptions)\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)\n        }\n      }\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)\n      return new MockScope(newMockDispatch)\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const [statusCode, data = '', responseOptions = {}] = [...arguments]\n    this.validateReplyParameters(statusCode, data, responseOptions)\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError (error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined')\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders (headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined')\n    }\n\n    this[kDefaultHeaders] = headers\n    return this\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers (trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined')\n    }\n\n    this[kDefaultTrailers] = trailers\n    return this\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength () {\n    this[kContentLength] = true\n    return this\n  }\n}\n\nmodule.exports.MockInterceptor = MockInterceptor\nmodule.exports.MockScope = MockScope\n","'use strict'\n\nconst { promisify } = require('util')\nconst Pool = require('../pool')\nconst { buildMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = require('./mock-symbols')\nconst { MockInterceptor } = require('./mock-interceptor')\nconst Symbols = require('../core/symbols')\nconst { InvalidArgumentError } = require('../core/errors')\n\n/**\n * MockPool provides an API that extends the Pool to influence the mockDispatches.\n */\nclass MockPool extends Pool {\n  constructor (origin, opts) {\n    super(origin, opts)\n\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n\n    this[kMockAgent] = opts.agent\n    this[kOrigin] = origin\n    this[kDispatches] = []\n    this[kConnected] = 1\n    this[kOriginalDispatch] = this.dispatch\n    this[kOriginalClose] = this.close.bind(this)\n\n    this.dispatch = buildMockDispatch.call(this)\n    this.close = this[kClose]\n  }\n\n  get [Symbols.kConnected] () {\n    return this[kConnected]\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept (opts) {\n    return new MockInterceptor(opts, this[kDispatches])\n  }\n\n  async [kClose] () {\n    await promisify(this[kOriginalClose])()\n    this[kConnected] = 0\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])\n  }\n}\n\nmodule.exports = MockPool\n","'use strict'\n\nmodule.exports = {\n  kAgent: Symbol('agent'),\n  kOptions: Symbol('options'),\n  kFactory: Symbol('factory'),\n  kDispatches: Symbol('dispatches'),\n  kDispatchKey: Symbol('dispatch key'),\n  kDefaultHeaders: Symbol('default headers'),\n  kDefaultTrailers: Symbol('default trailers'),\n  kContentLength: Symbol('content length'),\n  kMockAgent: Symbol('mock agent'),\n  kMockAgentSet: Symbol('mock agent set'),\n  kMockAgentGet: Symbol('mock agent get'),\n  kMockDispatch: Symbol('mock dispatch'),\n  kClose: Symbol('close'),\n  kOriginalClose: Symbol('original agent close'),\n  kOrigin: Symbol('origin'),\n  kIsMockActive: Symbol('is mock active'),\n  kNetConnect: Symbol('net connect'),\n  kGetNetConnect: Symbol('get net connect'),\n  kConnected: Symbol('connected')\n}\n","'use strict'\n\nconst { MockNotMatchedError } = require('./mock-errors')\nconst {\n  kDispatches,\n  kMockAgent,\n  kOriginalDispatch,\n  kOrigin,\n  kGetNetConnect\n} = require('./mock-symbols')\nconst { buildURL, nop } = require('../core/util')\nconst { STATUS_CODES } = require('http')\nconst {\n  types: {\n    isPromise\n  }\n} = require('util')\n\nfunction matchValue (match, value) {\n  if (typeof match === 'string') {\n    return match === value\n  }\n  if (match instanceof RegExp) {\n    return match.test(value)\n  }\n  if (typeof match === 'function') {\n    return match(value) === true\n  }\n  return false\n}\n\nfunction lowerCaseEntries (headers) {\n  return Object.fromEntries(\n    Object.entries(headers).map(([headerName, headerValue]) => {\n      return [headerName.toLocaleLowerCase(), headerValue]\n    })\n  )\n}\n\n/**\n * @param {import('../../index').Headers|string[]|Record<string, string>} headers\n * @param {string} key\n */\nfunction getHeaderByName (headers, key) {\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n        return headers[i + 1]\n      }\n    }\n\n    return undefined\n  } else if (typeof headers.get === 'function') {\n    return headers.get(key)\n  } else {\n    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]\n  }\n}\n\n/** @param {string[]} headers */\nfunction buildHeadersFromArray (headers) { // fetch HeadersList\n  const clone = headers.slice()\n  const entries = []\n  for (let index = 0; index < clone.length; index += 2) {\n    entries.push([clone[index], clone[index + 1]])\n  }\n  return Object.fromEntries(entries)\n}\n\nfunction matchHeaders (mockDispatch, headers) {\n  if (typeof mockDispatch.headers === 'function') {\n    if (Array.isArray(headers)) { // fetch HeadersList\n      headers = buildHeadersFromArray(headers)\n    }\n    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})\n  }\n  if (typeof mockDispatch.headers === 'undefined') {\n    return true\n  }\n  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {\n    return false\n  }\n\n  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {\n    const headerValue = getHeaderByName(headers, matchHeaderName)\n\n    if (!matchValue(matchHeaderValue, headerValue)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction safeUrl (path) {\n  if (typeof path !== 'string') {\n    return path\n  }\n\n  const pathSegments = path.split('?')\n\n  if (pathSegments.length !== 2) {\n    return path\n  }\n\n  const qp = new URLSearchParams(pathSegments.pop())\n  qp.sort()\n  return [...pathSegments, qp.toString()].join('?')\n}\n\nfunction matchKey (mockDispatch, { path, method, body, headers }) {\n  const pathMatch = matchValue(mockDispatch.path, path)\n  const methodMatch = matchValue(mockDispatch.method, method)\n  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true\n  const headersMatch = matchHeaders(mockDispatch, headers)\n  return pathMatch && methodMatch && bodyMatch && headersMatch\n}\n\nfunction getResponseData (data) {\n  if (Buffer.isBuffer(data)) {\n    return data\n  } else if (typeof data === 'object') {\n    return JSON.stringify(data)\n  } else {\n    return data.toString()\n  }\n}\n\nfunction getMockDispatch (mockDispatches, key) {\n  const basePath = key.query ? buildURL(key.path, key.query) : key.path\n  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath\n\n  // Match path\n  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)\n  }\n\n  // Match method\n  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)\n  }\n\n  // Match body\n  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)\n  }\n\n  // Match headers\n  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)\n  }\n\n  return matchedMockDispatches[0]\n}\n\nfunction addMockDispatch (mockDispatches, key, data) {\n  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }\n  const replyData = typeof data === 'function' ? { callback: data } : { ...data }\n  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }\n  mockDispatches.push(newMockDispatch)\n  return newMockDispatch\n}\n\nfunction deleteMockDispatch (mockDispatches, key) {\n  const index = mockDispatches.findIndex(dispatch => {\n    if (!dispatch.consumed) {\n      return false\n    }\n    return matchKey(dispatch, key)\n  })\n  if (index !== -1) {\n    mockDispatches.splice(index, 1)\n  }\n}\n\nfunction buildKey (opts) {\n  const { path, method, body, headers, query } = opts\n  return {\n    path,\n    method,\n    body,\n    headers,\n    query\n  }\n}\n\nfunction generateKeyValues (data) {\n  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [\n    ...keyValuePairs,\n    Buffer.from(`${key}`),\n    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)\n  ], [])\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n * @param {number} statusCode\n */\nfunction getStatusText (statusCode) {\n  return STATUS_CODES[statusCode] || 'unknown'\n}\n\nasync function getResponse (body) {\n  const buffers = []\n  for await (const data of body) {\n    buffers.push(data)\n  }\n  return Buffer.concat(buffers).toString('utf8')\n}\n\n/**\n * Mock dispatch function used to simulate undici dispatches\n */\nfunction mockDispatch (opts, handler) {\n  // Get mock dispatch from built key\n  const key = buildKey(opts)\n  const mockDispatch = getMockDispatch(this[kDispatches], key)\n\n  mockDispatch.timesInvoked++\n\n  // Here's where we resolve a callback if a callback is present for the dispatch data.\n  if (mockDispatch.data.callback) {\n    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }\n  }\n\n  // Parse mockDispatch data\n  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch\n  const { timesInvoked, times } = mockDispatch\n\n  // If it's used up and not persistent, mark as consumed\n  mockDispatch.consumed = !persist && timesInvoked >= times\n  mockDispatch.pending = timesInvoked < times\n\n  // If specified, trigger dispatch error\n  if (error !== null) {\n    deleteMockDispatch(this[kDispatches], key)\n    handler.onError(error)\n    return true\n  }\n\n  // Handle the request with a delay if necessary\n  if (typeof delay === 'number' && delay > 0) {\n    setTimeout(() => {\n      handleReply(this[kDispatches])\n    }, delay)\n  } else {\n    handleReply(this[kDispatches])\n  }\n\n  function handleReply (mockDispatches, _data = data) {\n    // fetch's HeadersList is a 1D string array\n    const optsHeaders = Array.isArray(opts.headers)\n      ? buildHeadersFromArray(opts.headers)\n      : opts.headers\n    const body = typeof _data === 'function'\n      ? _data({ ...opts, headers: optsHeaders })\n      : _data\n\n    // util.types.isPromise is likely needed for jest.\n    if (isPromise(body)) {\n      // If handleReply is asynchronous, throwing an error\n      // in the callback will reject the promise, rather than\n      // synchronously throw the error, which breaks some tests.\n      // Rather, we wait for the callback to resolve if it is a\n      // promise, and then re-run handleReply with the new body.\n      body.then((newData) => handleReply(mockDispatches, newData))\n      return\n    }\n\n    const responseData = getResponseData(body)\n    const responseHeaders = generateKeyValues(headers)\n    const responseTrailers = generateKeyValues(trailers)\n\n    handler.abort = nop\n    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))\n    handler.onData(Buffer.from(responseData))\n    handler.onComplete(responseTrailers)\n    deleteMockDispatch(mockDispatches, key)\n  }\n\n  function resume () {}\n\n  return true\n}\n\nfunction buildMockDispatch () {\n  const agent = this[kMockAgent]\n  const origin = this[kOrigin]\n  const originalDispatch = this[kOriginalDispatch]\n\n  return function dispatch (opts, handler) {\n    if (agent.isMockActive) {\n      try {\n        mockDispatch.call(this, opts, handler)\n      } catch (error) {\n        if (error instanceof MockNotMatchedError) {\n          const netConnect = agent[kGetNetConnect]()\n          if (netConnect === false) {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)\n          }\n          if (checkNetConnect(netConnect, origin)) {\n            originalDispatch.call(this, opts, handler)\n          } else {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)\n          }\n        } else {\n          throw error\n        }\n      }\n    } else {\n      originalDispatch.call(this, opts, handler)\n    }\n  }\n}\n\nfunction checkNetConnect (netConnect, origin) {\n  const url = new URL(origin)\n  if (netConnect === true) {\n    return true\n  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {\n    return true\n  }\n  return false\n}\n\nfunction buildMockOptions (opts) {\n  if (opts) {\n    const { agent, ...mockOptions } = opts\n    return mockOptions\n  }\n}\n\nmodule.exports = {\n  getResponseData,\n  getMockDispatch,\n  addMockDispatch,\n  deleteMockDispatch,\n  buildKey,\n  generateKeyValues,\n  matchValue,\n  getResponse,\n  getStatusText,\n  mockDispatch,\n  buildMockDispatch,\n  checkNetConnect,\n  buildMockOptions,\n  getHeaderByName\n}\n","'use strict'\n\nconst { Transform } = require('stream')\nconst { Console } = require('console')\n\n/**\n * Gets the output of `console.table(…)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor ({ disableColors } = {}) {\n    this.transform = new Transform({\n      transform (chunk, _enc, cb) {\n        cb(null, chunk)\n      }\n    })\n\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    })\n  }\n\n  format (pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(\n      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? '✅' : '❌',\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      }))\n\n    this.logger.table(withPrettyHeaders)\n    return this.transform.read().toString()\n  }\n}\n","'use strict'\n\nconst singulars = {\n  pronoun: 'it',\n  is: 'is',\n  was: 'was',\n  this: 'this'\n}\n\nconst plurals = {\n  pronoun: 'they',\n  is: 'are',\n  was: 'were',\n  this: 'these'\n}\n\nmodule.exports = class Pluralizer {\n  constructor (singular, plural) {\n    this.singular = singular\n    this.plural = plural\n  }\n\n  pluralize (count) {\n    const one = count === 1\n    const keys = one ? singulars : plurals\n    const noun = one ? this.singular : this.plural\n    return { ...keys, count, noun }\n  }\n}\n","/* eslint-disable */\n\n'use strict'\n\n// Extracted from node/lib/internal/fixed_queue.js\n\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\n\nclass FixedCircularBuffer {\n  constructor() {\n    this.bottom = 0;\n    this.top = 0;\n    this.list = new Array(kSize);\n    this.next = null;\n  }\n\n  isEmpty() {\n    return this.top === this.bottom;\n  }\n\n  isFull() {\n    return ((this.top + 1) & kMask) === this.bottom;\n  }\n\n  push(data) {\n    this.list[this.top] = data;\n    this.top = (this.top + 1) & kMask;\n  }\n\n  shift() {\n    const nextItem = this.list[this.bottom];\n    if (nextItem === undefined)\n      return null;\n    this.list[this.bottom] = undefined;\n    this.bottom = (this.bottom + 1) & kMask;\n    return nextItem;\n  }\n}\n\nmodule.exports = class FixedQueue {\n  constructor() {\n    this.head = this.tail = new FixedCircularBuffer();\n  }\n\n  isEmpty() {\n    return this.head.isEmpty();\n  }\n\n  push(data) {\n    if (this.head.isFull()) {\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n      // and sets it as the new main queue.\n      this.head = this.head.next = new FixedCircularBuffer();\n    }\n    this.head.push(data);\n  }\n\n  shift() {\n    const tail = this.tail;\n    const next = tail.shift();\n    if (tail.isEmpty() && tail.next !== null) {\n      // If there is another queue, it forms the new tail.\n      this.tail = tail.next;\n    }\n    return next;\n  }\n};\n","'use strict'\n\nconst DispatcherBase = require('./dispatcher-base')\nconst FixedQueue = require('./node/fixed-queue')\nconst { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require('./core/symbols')\nconst PoolStats = require('./pool-stats')\n\nconst kClients = Symbol('clients')\nconst kNeedDrain = Symbol('needDrain')\nconst kQueue = Symbol('queue')\nconst kClosedResolve = Symbol('closed resolve')\nconst kOnDrain = Symbol('onDrain')\nconst kOnConnect = Symbol('onConnect')\nconst kOnDisconnect = Symbol('onDisconnect')\nconst kOnConnectionError = Symbol('onConnectionError')\nconst kGetDispatcher = Symbol('get dispatcher')\nconst kAddClient = Symbol('add client')\nconst kRemoveClient = Symbol('remove client')\nconst kStats = Symbol('stats')\n\nclass PoolBase extends DispatcherBase {\n  constructor () {\n    super()\n\n    this[kQueue] = new FixedQueue()\n    this[kClients] = []\n    this[kQueued] = 0\n\n    const pool = this\n\n    this[kOnDrain] = function onDrain (origin, targets) {\n      const queue = pool[kQueue]\n\n      let needDrain = false\n\n      while (!needDrain) {\n        const item = queue.shift()\n        if (!item) {\n          break\n        }\n        pool[kQueued]--\n        needDrain = !this.dispatch(item.opts, item.handler)\n      }\n\n      this[kNeedDrain] = needDrain\n\n      if (!this[kNeedDrain] && pool[kNeedDrain]) {\n        pool[kNeedDrain] = false\n        pool.emit('drain', origin, [pool, ...targets])\n      }\n\n      if (pool[kClosedResolve] && queue.isEmpty()) {\n        Promise\n          .all(pool[kClients].map(c => c.close()))\n          .then(pool[kClosedResolve])\n      }\n    }\n\n    this[kOnConnect] = (origin, targets) => {\n      pool.emit('connect', origin, [pool, ...targets])\n    }\n\n    this[kOnDisconnect] = (origin, targets, err) => {\n      pool.emit('disconnect', origin, [pool, ...targets], err)\n    }\n\n    this[kOnConnectionError] = (origin, targets, err) => {\n      pool.emit('connectionError', origin, [pool, ...targets], err)\n    }\n\n    this[kStats] = new PoolStats(this)\n  }\n\n  get [kBusy] () {\n    return this[kNeedDrain]\n  }\n\n  get [kConnected] () {\n    return this[kClients].filter(client => client[kConnected]).length\n  }\n\n  get [kFree] () {\n    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length\n  }\n\n  get [kPending] () {\n    let ret = this[kQueued]\n    for (const { [kPending]: pending } of this[kClients]) {\n      ret += pending\n    }\n    return ret\n  }\n\n  get [kRunning] () {\n    let ret = 0\n    for (const { [kRunning]: running } of this[kClients]) {\n      ret += running\n    }\n    return ret\n  }\n\n  get [kSize] () {\n    let ret = this[kQueued]\n    for (const { [kSize]: size } of this[kClients]) {\n      ret += size\n    }\n    return ret\n  }\n\n  get stats () {\n    return this[kStats]\n  }\n\n  async [kClose] () {\n    if (this[kQueue].isEmpty()) {\n      return Promise.all(this[kClients].map(c => c.close()))\n    } else {\n      return new Promise((resolve) => {\n        this[kClosedResolve] = resolve\n      })\n    }\n  }\n\n  async [kDestroy] (err) {\n    while (true) {\n      const item = this[kQueue].shift()\n      if (!item) {\n        break\n      }\n      item.handler.onError(err)\n    }\n\n    return Promise.all(this[kClients].map(c => c.destroy(err)))\n  }\n\n  [kDispatch] (opts, handler) {\n    const dispatcher = this[kGetDispatcher]()\n\n    if (!dispatcher) {\n      this[kNeedDrain] = true\n      this[kQueue].push({ opts, handler })\n      this[kQueued]++\n    } else if (!dispatcher.dispatch(opts, handler)) {\n      dispatcher[kNeedDrain] = true\n      this[kNeedDrain] = !this[kGetDispatcher]()\n    }\n\n    return !this[kNeedDrain]\n  }\n\n  [kAddClient] (client) {\n    client\n      .on('drain', this[kOnDrain])\n      .on('connect', this[kOnConnect])\n      .on('disconnect', this[kOnDisconnect])\n      .on('connectionError', this[kOnConnectionError])\n\n    this[kClients].push(client)\n\n    if (this[kNeedDrain]) {\n      process.nextTick(() => {\n        if (this[kNeedDrain]) {\n          this[kOnDrain](client[kUrl], [this, client])\n        }\n      })\n    }\n\n    return this\n  }\n\n  [kRemoveClient] (client) {\n    client.close(() => {\n      const idx = this[kClients].indexOf(client)\n      if (idx !== -1) {\n        this[kClients].splice(idx, 1)\n      }\n    })\n\n    this[kNeedDrain] = this[kClients].some(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n  }\n}\n\nmodule.exports = {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n}\n","const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require('./core/symbols')\nconst kPool = Symbol('pool')\n\nclass PoolStats {\n  constructor (pool) {\n    this[kPool] = pool\n  }\n\n  get connected () {\n    return this[kPool][kConnected]\n  }\n\n  get free () {\n    return this[kPool][kFree]\n  }\n\n  get pending () {\n    return this[kPool][kPending]\n  }\n\n  get queued () {\n    return this[kPool][kQueued]\n  }\n\n  get running () {\n    return this[kPool][kRunning]\n  }\n\n  get size () {\n    return this[kPool][kSize]\n  }\n}\n\nmodule.exports = PoolStats\n","'use strict'\n\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Client = require('./client')\nconst {\n  InvalidArgumentError\n} = require('./core/errors')\nconst util = require('./core/util')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst buildConnector = require('./core/connect')\n\nconst kOptions = Symbol('options')\nconst kConnections = Symbol('connections')\nconst kFactory = Symbol('factory')\n\nfunction defaultFactory (origin, opts) {\n  return new Client(origin, opts)\n}\n\nclass Pool extends PoolBase {\n  constructor (origin, {\n    connections,\n    factory = defaultFactory,\n    connect,\n    connectTimeout,\n    tls,\n    maxCachedSessions,\n    socketPath,\n    autoSelectFamily,\n    autoSelectFamilyAttemptTimeout,\n    allowH2,\n    ...options\n  } = {}) {\n    super()\n\n    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n      throw new InvalidArgumentError('invalid connections')\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),\n        ...connect\n      })\n    }\n\n    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)\n      ? options.interceptors.Pool\n      : []\n    this[kConnections] = connections || null\n    this[kUrl] = util.parseOrigin(origin)\n    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }\n    this[kOptions].interceptors = options.interceptors\n      ? { ...options.interceptors }\n      : undefined\n    this[kFactory] = factory\n  }\n\n  [kGetDispatcher] () {\n    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])\n\n    if (dispatcher) {\n      return dispatcher\n    }\n\n    if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n      dispatcher = this[kFactory](this[kUrl], this[kOptions])\n      this[kAddClient](dispatcher)\n    }\n\n    return dispatcher\n  }\n}\n\nmodule.exports = Pool\n","'use strict'\n\nconst { kProxy, kClose, kDestroy, kInterceptors } = require('./core/symbols')\nconst { URL } = require('url')\nconst Agent = require('./agent')\nconst Pool = require('./pool')\nconst DispatcherBase = require('./dispatcher-base')\nconst { InvalidArgumentError, RequestAbortedError } = require('./core/errors')\nconst buildConnector = require('./core/connect')\n\nconst kAgent = Symbol('proxy agent')\nconst kClient = Symbol('proxy client')\nconst kProxyHeaders = Symbol('proxy headers')\nconst kRequestTls = Symbol('request tls settings')\nconst kProxyTls = Symbol('proxy tls settings')\nconst kConnectEndpoint = Symbol('connect endpoint function')\n\nfunction defaultProtocolPort (protocol) {\n  return protocol === 'https:' ? 443 : 80\n}\n\nfunction buildProxyOptions (opts) {\n  if (typeof opts === 'string') {\n    opts = { uri: opts }\n  }\n\n  if (!opts || !opts.uri) {\n    throw new InvalidArgumentError('Proxy opts.uri is mandatory')\n  }\n\n  return {\n    uri: opts.uri,\n    protocol: opts.protocol || 'https'\n  }\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass ProxyAgent extends DispatcherBase {\n  constructor (opts) {\n    super(opts)\n    this[kProxy] = buildProxyOptions(opts)\n    this[kAgent] = new Agent(opts)\n    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)\n      ? opts.interceptors.ProxyAgent\n      : []\n\n    if (typeof opts === 'string') {\n      opts = { uri: opts }\n    }\n\n    if (!opts || !opts.uri) {\n      throw new InvalidArgumentError('Proxy opts.uri is mandatory')\n    }\n\n    const { clientFactory = defaultFactory } = opts\n\n    if (typeof clientFactory !== 'function') {\n      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')\n    }\n\n    this[kRequestTls] = opts.requestTls\n    this[kProxyTls] = opts.proxyTls\n    this[kProxyHeaders] = opts.headers || {}\n\n    const resolvedUrl = new URL(opts.uri)\n    const { origin, port, host, username, password } = resolvedUrl\n\n    if (opts.auth && opts.token) {\n      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')\n    } else if (opts.auth) {\n      /* @deprecated in favour of opts.token */\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`\n    } else if (opts.token) {\n      this[kProxyHeaders]['proxy-authorization'] = opts.token\n    } else if (username && password) {\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`\n    }\n\n    const connect = buildConnector({ ...opts.proxyTls })\n    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })\n    this[kClient] = clientFactory(resolvedUrl, { connect })\n    this[kAgent] = new Agent({\n      ...opts,\n      connect: async (opts, callback) => {\n        let requestedHost = opts.host\n        if (!opts.port) {\n          requestedHost += `:${defaultProtocolPort(opts.protocol)}`\n        }\n        try {\n          const { socket, statusCode } = await this[kClient].connect({\n            origin,\n            port,\n            path: requestedHost,\n            signal: opts.signal,\n            headers: {\n              ...this[kProxyHeaders],\n              host\n            }\n          })\n          if (statusCode !== 200) {\n            socket.on('error', () => {}).destroy()\n            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))\n          }\n          if (opts.protocol !== 'https:') {\n            callback(null, socket)\n            return\n          }\n          let servername\n          if (this[kRequestTls]) {\n            servername = this[kRequestTls].servername\n          } else {\n            servername = opts.servername\n          }\n          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)\n        } catch (err) {\n          callback(err)\n        }\n      }\n    })\n  }\n\n  dispatch (opts, handler) {\n    const { host } = new URL(opts.origin)\n    const headers = buildHeaders(opts.headers)\n    throwIfProxyAuthIsSent(headers)\n    return this[kAgent].dispatch(\n      {\n        ...opts,\n        headers: {\n          ...headers,\n          host\n        }\n      },\n      handler\n    )\n  }\n\n  async [kClose] () {\n    await this[kAgent].close()\n    await this[kClient].close()\n  }\n\n  async [kDestroy] () {\n    await this[kAgent].destroy()\n    await this[kClient].destroy()\n  }\n}\n\n/**\n * @param {string[] | Record<string, string>} headers\n * @returns {Record<string, string>}\n */\nfunction buildHeaders (headers) {\n  // When using undici.fetch, the headers list is stored\n  // as an array.\n  if (Array.isArray(headers)) {\n    /** @type {Record<string, string>} */\n    const headersPair = {}\n\n    for (let i = 0; i < headers.length; i += 2) {\n      headersPair[headers[i]] = headers[i + 1]\n    }\n\n    return headersPair\n  }\n\n  return headers\n}\n\n/**\n * @param {Record<string, string>} headers\n *\n * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers\n * Nevertheless, it was changed and to avoid a security vulnerability by end users\n * this check was created.\n * It should be removed in the next major version for performance reasons\n */\nfunction throwIfProxyAuthIsSent (headers) {\n  const existProxyAuth = headers && Object.keys(headers)\n    .find((key) => key.toLowerCase() === 'proxy-authorization')\n  if (existProxyAuth) {\n    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')\n  }\n}\n\nmodule.exports = ProxyAgent\n","'use strict'\n\nlet fastNow = Date.now()\nlet fastNowTimeout\n\nconst fastTimers = []\n\nfunction onTimeout () {\n  fastNow = Date.now()\n\n  let len = fastTimers.length\n  let idx = 0\n  while (idx < len) {\n    const timer = fastTimers[idx]\n\n    if (timer.state === 0) {\n      timer.state = fastNow + timer.delay\n    } else if (timer.state > 0 && fastNow >= timer.state) {\n      timer.state = -1\n      timer.callback(timer.opaque)\n    }\n\n    if (timer.state === -1) {\n      timer.state = -2\n      if (idx !== len - 1) {\n        fastTimers[idx] = fastTimers.pop()\n      } else {\n        fastTimers.pop()\n      }\n      len -= 1\n    } else {\n      idx += 1\n    }\n  }\n\n  if (fastTimers.length > 0) {\n    refreshTimeout()\n  }\n}\n\nfunction refreshTimeout () {\n  if (fastNowTimeout && fastNowTimeout.refresh) {\n    fastNowTimeout.refresh()\n  } else {\n    clearTimeout(fastNowTimeout)\n    fastNowTimeout = setTimeout(onTimeout, 1e3)\n    if (fastNowTimeout.unref) {\n      fastNowTimeout.unref()\n    }\n  }\n}\n\nclass Timeout {\n  constructor (callback, delay, opaque) {\n    this.callback = callback\n    this.delay = delay\n    this.opaque = opaque\n\n    //  -2 not in timer list\n    //  -1 in timer list but inactive\n    //   0 in timer list waiting for time\n    // > 0 in timer list waiting for time to expire\n    this.state = -2\n\n    this.refresh()\n  }\n\n  refresh () {\n    if (this.state === -2) {\n      fastTimers.push(this)\n      if (!fastNowTimeout || fastTimers.length === 1) {\n        refreshTimeout()\n      }\n    }\n\n    this.state = 0\n  }\n\n  clear () {\n    this.state = -1\n  }\n}\n\nmodule.exports = {\n  setTimeout (callback, delay, opaque) {\n    return delay < 1e3\n      ? setTimeout(callback, delay, opaque)\n      : new Timeout(callback, delay, opaque)\n  },\n  clearTimeout (timeout) {\n    if (timeout instanceof Timeout) {\n      timeout.clear()\n    } else {\n      clearTimeout(timeout)\n    }\n  }\n}\n","'use strict'\n\nconst diagnosticsChannel = require('diagnostics_channel')\nconst { uid, states } = require('./constants')\nconst {\n  kReadyState,\n  kSentClose,\n  kByteParser,\n  kReceivedClose\n} = require('./symbols')\nconst { fireEvent, failWebsocketConnection } = require('./util')\nconst { CloseEvent } = require('./events')\nconst { makeRequest } = require('../fetch/request')\nconst { fetching } = require('../fetch/index')\nconst { Headers } = require('../fetch/headers')\nconst { getGlobalDispatcher } = require('../global')\nconst { kHeadersList } = require('../core/symbols')\n\nconst channels = {}\nchannels.open = diagnosticsChannel.channel('undici:websocket:open')\nchannels.close = diagnosticsChannel.channel('undici:websocket:close')\nchannels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')\n\n/** @type {import('crypto')} */\nlet crypto\ntry {\n  crypto = require('crypto')\n} catch {\n\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#concept-websocket-establish\n * @param {URL} url\n * @param {string|string[]} protocols\n * @param {import('./websocket').WebSocket} ws\n * @param {(response: any) => void} onEstablish\n * @param {Partial<import('../../types/websocket').WebSocketInit>} options\n */\nfunction establishWebSocketConnection (url, protocols, ws, onEstablish, options) {\n  // 1. Let requestURL be a copy of url, with its scheme set to \"http\", if url’s\n  //    scheme is \"ws\", and to \"https\" otherwise.\n  const requestURL = url\n\n  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'\n\n  // 2. Let request be a new request, whose URL is requestURL, client is client,\n  //    service-workers mode is \"none\", referrer is \"no-referrer\", mode is\n  //    \"websocket\", credentials mode is \"include\", cache mode is \"no-store\" ,\n  //    and redirect mode is \"error\".\n  const request = makeRequest({\n    urlList: [requestURL],\n    serviceWorkers: 'none',\n    referrer: 'no-referrer',\n    mode: 'websocket',\n    credentials: 'include',\n    cache: 'no-store',\n    redirect: 'error'\n  })\n\n  // Note: undici extension, allow setting custom headers.\n  if (options.headers) {\n    const headersList = new Headers(options.headers)[kHeadersList]\n\n    request.headersList = headersList\n  }\n\n  // 3. Append (`Upgrade`, `websocket`) to request’s header list.\n  // 4. Append (`Connection`, `Upgrade`) to request’s header list.\n  // Note: both of these are handled by undici currently.\n  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397\n\n  // 5. Let keyValue be a nonce consisting of a randomly selected\n  //    16-byte value that has been forgiving-base64-encoded and\n  //    isomorphic encoded.\n  const keyValue = crypto.randomBytes(16).toString('base64')\n\n  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s\n  //    header list.\n  request.headersList.append('sec-websocket-key', keyValue)\n\n  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s\n  //    header list.\n  request.headersList.append('sec-websocket-version', '13')\n\n  // 8. For each protocol in protocols, combine\n  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header\n  //    list.\n  for (const protocol of protocols) {\n    request.headersList.append('sec-websocket-protocol', protocol)\n  }\n\n  // 9. Let permessageDeflate be a user-agent defined\n  //    \"permessage-deflate\" extension header value.\n  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673\n  // TODO: enable once permessage-deflate is supported\n  const permessageDeflate = '' // 'permessage-deflate; 15'\n\n  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to\n  //     request’s header list.\n  // request.headersList.append('sec-websocket-extensions', permessageDeflate)\n\n  // 11. Fetch request with useParallelQueue set to true, and\n  //     processResponse given response being these steps:\n  const controller = fetching({\n    request,\n    useParallelQueue: true,\n    dispatcher: options.dispatcher ?? getGlobalDispatcher(),\n    processResponse (response) {\n      // 1. If response is a network error or its status is not 101,\n      //    fail the WebSocket connection.\n      if (response.type === 'error' || response.status !== 101) {\n        failWebsocketConnection(ws, 'Received network error or non-101 status code.')\n        return\n      }\n\n      // 2. If protocols is not the empty list and extracting header\n      //    list values given `Sec-WebSocket-Protocol` and response’s\n      //    header list results in null, failure, or the empty byte\n      //    sequence, then fail the WebSocket connection.\n      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')\n        return\n      }\n\n      // 3. Follow the requirements stated step 2 to step 6, inclusive,\n      //    of the last set of steps in section 4.1 of The WebSocket\n      //    Protocol to validate response. This either results in fail\n      //    the WebSocket connection or the WebSocket connection is\n      //    established.\n\n      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|\n      //    header field contains a value that is not an ASCII case-\n      //    insensitive match for the value \"websocket\", the client MUST\n      //    _Fail the WebSocket Connection_.\n      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {\n        failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".')\n        return\n      }\n\n      // 3. If the response lacks a |Connection| header field or the\n      //    |Connection| header field doesn't contain a token that is an\n      //    ASCII case-insensitive match for the value \"Upgrade\", the client\n      //    MUST _Fail the WebSocket Connection_.\n      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {\n        failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".')\n        return\n      }\n\n      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or\n      //    the |Sec-WebSocket-Accept| contains a value other than the\n      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-\n      //    Key| (as a string, not base64-decoded) with the string \"258EAFA5-\n      //    E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and\n      //    trailing whitespace, the client MUST _Fail the WebSocket\n      //    Connection_.\n      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')\n      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')\n      if (secWSAccept !== digest) {\n        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')\n        return\n      }\n\n      // 5. If the response includes a |Sec-WebSocket-Extensions| header\n      //    field and this header field indicates the use of an extension\n      //    that was not present in the client's handshake (the server has\n      //    indicated an extension not requested by the client), the client\n      //    MUST _Fail the WebSocket Connection_.  (The parsing of this\n      //    header field to determine which extensions are requested is\n      //    discussed in Section 9.1.)\n      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')\n\n      if (secExtension !== null && secExtension !== permessageDeflate) {\n        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')\n        return\n      }\n\n      // 6. If the response includes a |Sec-WebSocket-Protocol| header field\n      //    and this header field indicates the use of a subprotocol that was\n      //    not present in the client's handshake (the server has indicated a\n      //    subprotocol not requested by the client), the client MUST _Fail\n      //    the WebSocket Connection_.\n      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')\n\n      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')\n        return\n      }\n\n      response.socket.on('data', onSocketData)\n      response.socket.on('close', onSocketClose)\n      response.socket.on('error', onSocketError)\n\n      if (channels.open.hasSubscribers) {\n        channels.open.publish({\n          address: response.socket.address(),\n          protocol: secProtocol,\n          extensions: secExtension\n        })\n      }\n\n      onEstablish(response)\n    }\n  })\n\n  return controller\n}\n\n/**\n * @param {Buffer} chunk\n */\nfunction onSocketData (chunk) {\n  if (!this.ws[kByteParser].write(chunk)) {\n    this.pause()\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n */\nfunction onSocketClose () {\n  const { ws } = this\n\n  // If the TCP connection was closed after the\n  // WebSocket closing handshake was completed, the WebSocket connection\n  // is said to have been closed _cleanly_.\n  const wasClean = ws[kSentClose] && ws[kReceivedClose]\n\n  let code = 1005\n  let reason = ''\n\n  const result = ws[kByteParser].closingInfo\n\n  if (result) {\n    code = result.code ?? 1005\n    reason = result.reason\n  } else if (!ws[kSentClose]) {\n    // If _The WebSocket\n    // Connection is Closed_ and no Close control frame was received by the\n    // endpoint (such as could occur if the underlying transport connection\n    // is lost), _The WebSocket Connection Close Code_ is considered to be\n    // 1006.\n    code = 1006\n  }\n\n  // 1. Change the ready state to CLOSED (3).\n  ws[kReadyState] = states.CLOSED\n\n  // 2. If the user agent was required to fail the WebSocket\n  //    connection, or if the WebSocket connection was closed\n  //    after being flagged as full, fire an event named error\n  //    at the WebSocket object.\n  // TODO\n\n  // 3. Fire an event named close at the WebSocket object,\n  //    using CloseEvent, with the wasClean attribute\n  //    initialized to true if the connection closed cleanly\n  //    and false otherwise, the code attribute initialized to\n  //    the WebSocket connection close code, and the reason\n  //    attribute initialized to the result of applying UTF-8\n  //    decode without BOM to the WebSocket connection close\n  //    reason.\n  fireEvent('close', ws, CloseEvent, {\n    wasClean, code, reason\n  })\n\n  if (channels.close.hasSubscribers) {\n    channels.close.publish({\n      websocket: ws,\n      code,\n      reason\n    })\n  }\n}\n\nfunction onSocketError (error) {\n  const { ws } = this\n\n  ws[kReadyState] = states.CLOSING\n\n  if (channels.socketError.hasSubscribers) {\n    channels.socketError.publish(error)\n  }\n\n  this.destroy()\n}\n\nmodule.exports = {\n  establishWebSocketConnection\n}\n","'use strict'\n\n// This is a Globally Unique Identifier unique used\n// to validate that the endpoint accepts websocket\n// connections.\n// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3\nconst uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\nconst states = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n}\n\nconst opcodes = {\n  CONTINUATION: 0x0,\n  TEXT: 0x1,\n  BINARY: 0x2,\n  CLOSE: 0x8,\n  PING: 0x9,\n  PONG: 0xA\n}\n\nconst maxUnsigned16Bit = 2 ** 16 - 1 // 65535\n\nconst parserStates = {\n  INFO: 0,\n  PAYLOADLENGTH_16: 2,\n  PAYLOADLENGTH_64: 3,\n  READ_DATA: 4\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nmodule.exports = {\n  uid,\n  staticPropertyDescriptors,\n  states,\n  opcodes,\n  maxUnsigned16Bit,\n  parserStates,\n  emptyBuffer\n}\n","'use strict'\n\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\nconst { MessagePort } = require('worker_threads')\n\n/**\n * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent\n */\nclass MessageEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)\n\n    super(type, eventInitDict)\n\n    this.#eventInit = eventInitDict\n  }\n\n  get data () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.data\n  }\n\n  get origin () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.origin\n  }\n\n  get lastEventId () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.lastEventId\n  }\n\n  get source () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.source\n  }\n\n  get ports () {\n    webidl.brandCheck(this, MessageEvent)\n\n    if (!Object.isFrozen(this.#eventInit.ports)) {\n      Object.freeze(this.#eventInit.ports)\n    }\n\n    return this.#eventInit.ports\n  }\n\n  initMessageEvent (\n    type,\n    bubbles = false,\n    cancelable = false,\n    data = null,\n    origin = '',\n    lastEventId = '',\n    source = null,\n    ports = []\n  ) {\n    webidl.brandCheck(this, MessageEvent)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })\n\n    return new MessageEvent(type, {\n      bubbles, cancelable, data, origin, lastEventId, source, ports\n    })\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#the-closeevent-interface\n */\nclass CloseEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)\n\n    super(type, eventInitDict)\n\n    this.#eventInit = eventInitDict\n  }\n\n  get wasClean () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.wasClean\n  }\n\n  get code () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.code\n  }\n\n  get reason () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.reason\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface\nclass ErrorEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })\n\n    super(type, eventInitDict)\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})\n\n    this.#eventInit = eventInitDict\n  }\n\n  get message () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.message\n  }\n\n  get filename () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.filename\n  }\n\n  get lineno () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.lineno\n  }\n\n  get colno () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.colno\n  }\n\n  get error () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.error\n  }\n}\n\nObject.defineProperties(MessageEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'MessageEvent',\n    configurable: true\n  },\n  data: kEnumerableProperty,\n  origin: kEnumerableProperty,\n  lastEventId: kEnumerableProperty,\n  source: kEnumerableProperty,\n  ports: kEnumerableProperty,\n  initMessageEvent: kEnumerableProperty\n})\n\nObject.defineProperties(CloseEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CloseEvent',\n    configurable: true\n  },\n  reason: kEnumerableProperty,\n  code: kEnumerableProperty,\n  wasClean: kEnumerableProperty\n})\n\nObject.defineProperties(ErrorEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'ErrorEvent',\n    configurable: true\n  },\n  message: kEnumerableProperty,\n  filename: kEnumerableProperty,\n  lineno: kEnumerableProperty,\n  colno: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\nwebidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)\n\nwebidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(\n  webidl.converters.MessagePort\n)\n\nconst eventInit = [\n  {\n    key: 'bubbles',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'cancelable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'composed',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n]\n\nwebidl.converters.MessageEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'data',\n    converter: webidl.converters.any,\n    defaultValue: null\n  },\n  {\n    key: 'origin',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  },\n  {\n    key: 'lastEventId',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'source',\n    // Node doesn't implement WindowProxy or ServiceWorker, so the only\n    // valid value for source is a MessagePort.\n    converter: webidl.nullableConverter(webidl.converters.MessagePort),\n    defaultValue: null\n  },\n  {\n    key: 'ports',\n    converter: webidl.converters['sequence<MessagePort>'],\n    get defaultValue () {\n      return []\n    }\n  }\n])\n\nwebidl.converters.CloseEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'wasClean',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'code',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 0\n  },\n  {\n    key: 'reason',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  }\n])\n\nwebidl.converters.ErrorEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'message',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'filename',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  },\n  {\n    key: 'lineno',\n    converter: webidl.converters['unsigned long'],\n    defaultValue: 0\n  },\n  {\n    key: 'colno',\n    converter: webidl.converters['unsigned long'],\n    defaultValue: 0\n  },\n  {\n    key: 'error',\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = {\n  MessageEvent,\n  CloseEvent,\n  ErrorEvent\n}\n","'use strict'\n\nconst { maxUnsigned16Bit } = require('./constants')\n\n/** @type {import('crypto')} */\nlet crypto\ntry {\n  crypto = require('crypto')\n} catch {\n\n}\n\nclass WebsocketFrameSend {\n  /**\n   * @param {Buffer|undefined} data\n   */\n  constructor (data) {\n    this.frameData = data\n    this.maskKey = crypto.randomBytes(4)\n  }\n\n  createFrame (opcode) {\n    const bodyLength = this.frameData?.byteLength ?? 0\n\n    /** @type {number} */\n    let payloadLength = bodyLength // 0-125\n    let offset = 6\n\n    if (bodyLength > maxUnsigned16Bit) {\n      offset += 8 // payload length is next 8 bytes\n      payloadLength = 127\n    } else if (bodyLength > 125) {\n      offset += 2 // payload length is next 2 bytes\n      payloadLength = 126\n    }\n\n    const buffer = Buffer.allocUnsafe(bodyLength + offset)\n\n    // Clear first 2 bytes, everything else is overwritten\n    buffer[0] = buffer[1] = 0\n    buffer[0] |= 0x80 // FIN\n    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode\n\n    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */\n    buffer[offset - 4] = this.maskKey[0]\n    buffer[offset - 3] = this.maskKey[1]\n    buffer[offset - 2] = this.maskKey[2]\n    buffer[offset - 1] = this.maskKey[3]\n\n    buffer[1] = payloadLength\n\n    if (payloadLength === 126) {\n      buffer.writeUInt16BE(bodyLength, 2)\n    } else if (payloadLength === 127) {\n      // Clear extended payload length\n      buffer[2] = buffer[3] = 0\n      buffer.writeUIntBE(bodyLength, 4, 6)\n    }\n\n    buffer[1] |= 0x80 // MASK\n\n    // mask body\n    for (let i = 0; i < bodyLength; i++) {\n      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]\n    }\n\n    return buffer\n  }\n}\n\nmodule.exports = {\n  WebsocketFrameSend\n}\n","'use strict'\n\nconst { Writable } = require('stream')\nconst diagnosticsChannel = require('diagnostics_channel')\nconst { parserStates, opcodes, states, emptyBuffer } = require('./constants')\nconst { kReadyState, kSentClose, kResponse, kReceivedClose } = require('./symbols')\nconst { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require('./util')\nconst { WebsocketFrameSend } = require('./frame')\n\n// This code was influenced by ws released under the MIT license.\n// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n// Copyright (c) 2013 Arnout Kazemier and contributors\n// Copyright (c) 2016 Luigi Pinca and contributors\n\nconst channels = {}\nchannels.ping = diagnosticsChannel.channel('undici:websocket:ping')\nchannels.pong = diagnosticsChannel.channel('undici:websocket:pong')\n\nclass ByteParser extends Writable {\n  #buffers = []\n  #byteOffset = 0\n\n  #state = parserStates.INFO\n\n  #info = {}\n  #fragments = []\n\n  constructor (ws) {\n    super()\n\n    this.ws = ws\n  }\n\n  /**\n   * @param {Buffer} chunk\n   * @param {() => void} callback\n   */\n  _write (chunk, _, callback) {\n    this.#buffers.push(chunk)\n    this.#byteOffset += chunk.length\n\n    this.run(callback)\n  }\n\n  /**\n   * Runs whenever a new chunk is received.\n   * Callback is called whenever there are no more chunks buffering,\n   * or not enough bytes are buffered to parse.\n   */\n  run (callback) {\n    while (true) {\n      if (this.#state === parserStates.INFO) {\n        // If there aren't enough bytes to parse the payload length, etc.\n        if (this.#byteOffset < 2) {\n          return callback()\n        }\n\n        const buffer = this.consume(2)\n\n        this.#info.fin = (buffer[0] & 0x80) !== 0\n        this.#info.opcode = buffer[0] & 0x0F\n\n        // If we receive a fragmented message, we use the type of the first\n        // frame to parse the full message as binary/text, when it's terminated\n        this.#info.originalOpcode ??= this.#info.opcode\n\n        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION\n\n        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {\n          // Only text and binary frames can be fragmented\n          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')\n          return\n        }\n\n        const payloadLength = buffer[1] & 0x7F\n\n        if (payloadLength <= 125) {\n          this.#info.payloadLength = payloadLength\n          this.#state = parserStates.READ_DATA\n        } else if (payloadLength === 126) {\n          this.#state = parserStates.PAYLOADLENGTH_16\n        } else if (payloadLength === 127) {\n          this.#state = parserStates.PAYLOADLENGTH_64\n        }\n\n        if (this.#info.fragmented && payloadLength > 125) {\n          // A fragmented frame can't be fragmented itself\n          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')\n          return\n        } else if (\n          (this.#info.opcode === opcodes.PING ||\n            this.#info.opcode === opcodes.PONG ||\n            this.#info.opcode === opcodes.CLOSE) &&\n          payloadLength > 125\n        ) {\n          // Control frames can have a payload length of 125 bytes MAX\n          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')\n          return\n        } else if (this.#info.opcode === opcodes.CLOSE) {\n          if (payloadLength === 1) {\n            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')\n            return\n          }\n\n          const body = this.consume(payloadLength)\n\n          this.#info.closeInfo = this.parseCloseBody(false, body)\n\n          if (!this.ws[kSentClose]) {\n            // If an endpoint receives a Close frame and did not previously send a\n            // Close frame, the endpoint MUST send a Close frame in response.  (When\n            // sending a Close frame in response, the endpoint typically echos the\n            // status code it received.)\n            const body = Buffer.allocUnsafe(2)\n            body.writeUInt16BE(this.#info.closeInfo.code, 0)\n            const closeFrame = new WebsocketFrameSend(body)\n\n            this.ws[kResponse].socket.write(\n              closeFrame.createFrame(opcodes.CLOSE),\n              (err) => {\n                if (!err) {\n                  this.ws[kSentClose] = true\n                }\n              }\n            )\n          }\n\n          // Upon either sending or receiving a Close control frame, it is said\n          // that _The WebSocket Closing Handshake is Started_ and that the\n          // WebSocket connection is in the CLOSING state.\n          this.ws[kReadyState] = states.CLOSING\n          this.ws[kReceivedClose] = true\n\n          this.end()\n\n          return\n        } else if (this.#info.opcode === opcodes.PING) {\n          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in\n          // response, unless it already received a Close frame.\n          // A Pong frame sent in response to a Ping frame must have identical\n          // \"Application data\"\n\n          const body = this.consume(payloadLength)\n\n          if (!this.ws[kReceivedClose]) {\n            const frame = new WebsocketFrameSend(body)\n\n            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))\n\n            if (channels.ping.hasSubscribers) {\n              channels.ping.publish({\n                payload: body\n              })\n            }\n          }\n\n          this.#state = parserStates.INFO\n\n          if (this.#byteOffset > 0) {\n            continue\n          } else {\n            callback()\n            return\n          }\n        } else if (this.#info.opcode === opcodes.PONG) {\n          // A Pong frame MAY be sent unsolicited.  This serves as a\n          // unidirectional heartbeat.  A response to an unsolicited Pong frame is\n          // not expected.\n\n          const body = this.consume(payloadLength)\n\n          if (channels.pong.hasSubscribers) {\n            channels.pong.publish({\n              payload: body\n            })\n          }\n\n          if (this.#byteOffset > 0) {\n            continue\n          } else {\n            callback()\n            return\n          }\n        }\n      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {\n        if (this.#byteOffset < 2) {\n          return callback()\n        }\n\n        const buffer = this.consume(2)\n\n        this.#info.payloadLength = buffer.readUInt16BE(0)\n        this.#state = parserStates.READ_DATA\n      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {\n        if (this.#byteOffset < 8) {\n          return callback()\n        }\n\n        const buffer = this.consume(8)\n        const upper = buffer.readUInt32BE(0)\n\n        // 2^31 is the maxinimum bytes an arraybuffer can contain\n        // on 32-bit systems. Although, on 64-bit systems, this is\n        // 2^53-1 bytes.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e\n        if (upper > 2 ** 31 - 1) {\n          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')\n          return\n        }\n\n        const lower = buffer.readUInt32BE(4)\n\n        this.#info.payloadLength = (upper << 8) + lower\n        this.#state = parserStates.READ_DATA\n      } else if (this.#state === parserStates.READ_DATA) {\n        if (this.#byteOffset < this.#info.payloadLength) {\n          // If there is still more data in this chunk that needs to be read\n          return callback()\n        } else if (this.#byteOffset >= this.#info.payloadLength) {\n          // If the server sent multiple frames in a single chunk\n\n          const body = this.consume(this.#info.payloadLength)\n\n          this.#fragments.push(body)\n\n          // If the frame is unfragmented, or a fragmented frame was terminated,\n          // a message was received\n          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {\n            const fullMessage = Buffer.concat(this.#fragments)\n\n            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)\n\n            this.#info = {}\n            this.#fragments.length = 0\n          }\n\n          this.#state = parserStates.INFO\n        }\n      }\n\n      if (this.#byteOffset > 0) {\n        continue\n      } else {\n        callback()\n        break\n      }\n    }\n  }\n\n  /**\n   * Take n bytes from the buffered Buffers\n   * @param {number} n\n   * @returns {Buffer|null}\n   */\n  consume (n) {\n    if (n > this.#byteOffset) {\n      return null\n    } else if (n === 0) {\n      return emptyBuffer\n    }\n\n    if (this.#buffers[0].length === n) {\n      this.#byteOffset -= this.#buffers[0].length\n      return this.#buffers.shift()\n    }\n\n    const buffer = Buffer.allocUnsafe(n)\n    let offset = 0\n\n    while (offset !== n) {\n      const next = this.#buffers[0]\n      const { length } = next\n\n      if (length + offset === n) {\n        buffer.set(this.#buffers.shift(), offset)\n        break\n      } else if (length + offset > n) {\n        buffer.set(next.subarray(0, n - offset), offset)\n        this.#buffers[0] = next.subarray(n - offset)\n        break\n      } else {\n        buffer.set(this.#buffers.shift(), offset)\n        offset += next.length\n      }\n    }\n\n    this.#byteOffset -= n\n\n    return buffer\n  }\n\n  parseCloseBody (onlyCode, data) {\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n    /** @type {number|undefined} */\n    let code\n\n    if (data.length >= 2) {\n      // _The WebSocket Connection Close Code_ is\n      // defined as the status code (Section 7.4) contained in the first Close\n      // control frame received by the application\n      code = data.readUInt16BE(0)\n    }\n\n    if (onlyCode) {\n      if (!isValidStatusCode(code)) {\n        return null\n      }\n\n      return { code }\n    }\n\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n    /** @type {Buffer} */\n    let reason = data.subarray(2)\n\n    // Remove BOM\n    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {\n      reason = reason.subarray(3)\n    }\n\n    if (code !== undefined && !isValidStatusCode(code)) {\n      return null\n    }\n\n    try {\n      // TODO: optimize this\n      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)\n    } catch {\n      return null\n    }\n\n    return { code, reason }\n  }\n\n  get closingInfo () {\n    return this.#info.closeInfo\n  }\n}\n\nmodule.exports = {\n  ByteParser\n}\n","'use strict'\n\nmodule.exports = {\n  kWebSocketURL: Symbol('url'),\n  kReadyState: Symbol('ready state'),\n  kController: Symbol('controller'),\n  kResponse: Symbol('response'),\n  kBinaryType: Symbol('binary type'),\n  kSentClose: Symbol('sent close'),\n  kReceivedClose: Symbol('received close'),\n  kByteParser: Symbol('byte parser')\n}\n","'use strict'\n\nconst { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require('./symbols')\nconst { states, opcodes } = require('./constants')\nconst { MessageEvent, ErrorEvent } = require('./events')\n\n/* globals Blob */\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isEstablished (ws) {\n  // If the server's response is validated as provided for above, it is\n  // said that _The WebSocket Connection is Established_ and that the\n  // WebSocket Connection is in the OPEN state.\n  return ws[kReadyState] === states.OPEN\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isClosing (ws) {\n  // Upon either sending or receiving a Close control frame, it is said\n  // that _The WebSocket Closing Handshake is Started_ and that the\n  // WebSocket connection is in the CLOSING state.\n  return ws[kReadyState] === states.CLOSING\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isClosed (ws) {\n  return ws[kReadyState] === states.CLOSED\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e\n * @param {EventTarget} target\n * @param {EventInit | undefined} eventInitDict\n */\nfunction fireEvent (e, target, eventConstructor = Event, eventInitDict) {\n  // 1. If eventConstructor is not given, then let eventConstructor be Event.\n\n  // 2. Let event be the result of creating an event given eventConstructor,\n  //    in the relevant realm of target.\n  // 3. Initialize event’s type attribute to e.\n  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap\n\n  // 4. Initialize any other IDL attributes of event as described in the\n  //    invocation of this algorithm.\n\n  // 5. Return the result of dispatching event at target, with legacy target\n  //    override flag set if set.\n  target.dispatchEvent(event)\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @param {import('./websocket').WebSocket} ws\n * @param {number} type Opcode\n * @param {Buffer} data application data\n */\nfunction websocketMessageReceived (ws, type, data) {\n  // 1. If ready state is not OPEN (1), then return.\n  if (ws[kReadyState] !== states.OPEN) {\n    return\n  }\n\n  // 2. Let dataForEvent be determined by switching on type and binary type:\n  let dataForEvent\n\n  if (type === opcodes.TEXT) {\n    // -> type indicates that the data is Text\n    //      a new DOMString containing data\n    try {\n      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)\n    } catch {\n      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')\n      return\n    }\n  } else if (type === opcodes.BINARY) {\n    if (ws[kBinaryType] === 'blob') {\n      // -> type indicates that the data is Binary and binary type is \"blob\"\n      //      a new Blob object, created in the relevant Realm of the WebSocket\n      //      object, that represents data as its raw data\n      dataForEvent = new Blob([data])\n    } else {\n      // -> type indicates that the data is Binary and binary type is \"arraybuffer\"\n      //      a new ArrayBuffer object, created in the relevant Realm of the\n      //      WebSocket object, whose contents are data\n      dataForEvent = new Uint8Array(data).buffer\n    }\n  }\n\n  // 3. Fire an event named message at the WebSocket object, using MessageEvent,\n  //    with the origin attribute initialized to the serialization of the WebSocket\n  //    object’s url's origin, and the data attribute initialized to dataForEvent.\n  fireEvent('message', ws, MessageEvent, {\n    origin: ws[kWebSocketURL].origin,\n    data: dataForEvent\n  })\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455\n * @see https://datatracker.ietf.org/doc/html/rfc2616\n * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407\n * @param {string} protocol\n */\nfunction isValidSubprotocol (protocol) {\n  // If present, this value indicates one\n  // or more comma-separated subprotocol the client wishes to speak,\n  // ordered by preference.  The elements that comprise this value\n  // MUST be non-empty strings with characters in the range U+0021 to\n  // U+007E not including separator characters as defined in\n  // [RFC2616] and MUST all be unique strings.\n  if (protocol.length === 0) {\n    return false\n  }\n\n  for (const char of protocol) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 ||\n      code > 0x7E ||\n      char === '(' ||\n      char === ')' ||\n      char === '<' ||\n      char === '>' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}' ||\n      code === 32 || // SP\n      code === 9 // HT\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4\n * @param {number} code\n */\nfunction isValidStatusCode (code) {\n  if (code >= 1000 && code < 1015) {\n    return (\n      code !== 1004 && // reserved\n      code !== 1005 && // \"MUST NOT be set as a status code\"\n      code !== 1006 // \"MUST NOT be set as a status code\"\n    )\n  }\n\n  return code >= 3000 && code <= 4999\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @param {string|undefined} reason\n */\nfunction failWebsocketConnection (ws, reason) {\n  const { [kController]: controller, [kResponse]: response } = ws\n\n  controller.abort()\n\n  if (response?.socket && !response.socket.destroyed) {\n    response.socket.destroy()\n  }\n\n  if (reason) {\n    fireEvent('error', ws, ErrorEvent, {\n      error: new Error(reason)\n    })\n  }\n}\n\nmodule.exports = {\n  isEstablished,\n  isClosing,\n  isClosed,\n  fireEvent,\n  isValidSubprotocol,\n  isValidStatusCode,\n  failWebsocketConnection,\n  websocketMessageReceived\n}\n","'use strict'\n\nconst { webidl } = require('../fetch/webidl')\nconst { DOMException } = require('../fetch/constants')\nconst { URLSerializer } = require('../fetch/dataURL')\nconst { getGlobalOrigin } = require('../fetch/global')\nconst { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require('./constants')\nconst {\n  kWebSocketURL,\n  kReadyState,\n  kController,\n  kBinaryType,\n  kResponse,\n  kSentClose,\n  kByteParser\n} = require('./symbols')\nconst { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require('./util')\nconst { establishWebSocketConnection } = require('./connection')\nconst { WebsocketFrameSend } = require('./frame')\nconst { ByteParser } = require('./receiver')\nconst { kEnumerableProperty, isBlobLike } = require('../core/util')\nconst { getGlobalDispatcher } = require('../global')\nconst { types } = require('util')\n\nlet experimentalWarned = false\n\n// https://websockets.spec.whatwg.org/#interface-definition\nclass WebSocket extends EventTarget {\n  #events = {\n    open: null,\n    error: null,\n    close: null,\n    message: null\n  }\n\n  #bufferedAmount = 0\n  #protocol = ''\n  #extensions = ''\n\n  /**\n   * @param {string} url\n   * @param {string|string[]} protocols\n   */\n  constructor (url, protocols = []) {\n    super()\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })\n\n    if (!experimentalWarned) {\n      experimentalWarned = true\n      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {\n        code: 'UNDICI-WS'\n      })\n    }\n\n    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)\n\n    url = webidl.converters.USVString(url)\n    protocols = options.protocols\n\n    // 1. Let baseURL be this's relevant settings object's API base URL.\n    const baseURL = getGlobalOrigin()\n\n    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.\n    let urlRecord\n\n    try {\n      urlRecord = new URL(url, baseURL)\n    } catch (e) {\n      // 3. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError')\n    }\n\n    // 4. If urlRecord’s scheme is \"http\", then set urlRecord’s scheme to \"ws\".\n    if (urlRecord.protocol === 'http:') {\n      urlRecord.protocol = 'ws:'\n    } else if (urlRecord.protocol === 'https:') {\n      // 5. Otherwise, if urlRecord’s scheme is \"https\", set urlRecord’s scheme to \"wss\".\n      urlRecord.protocol = 'wss:'\n    }\n\n    // 6. If urlRecord’s scheme is not \"ws\" or \"wss\", then throw a \"SyntaxError\" DOMException.\n    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {\n      throw new DOMException(\n        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,\n        'SyntaxError'\n      )\n    }\n\n    // 7. If urlRecord’s fragment is non-null, then throw a \"SyntaxError\"\n    //    DOMException.\n    if (urlRecord.hash || urlRecord.href.endsWith('#')) {\n      throw new DOMException('Got fragment', 'SyntaxError')\n    }\n\n    // 8. If protocols is a string, set protocols to a sequence consisting\n    //    of just that string.\n    if (typeof protocols === 'string') {\n      protocols = [protocols]\n    }\n\n    // 9. If any of the values in protocols occur more than once or otherwise\n    //    fail to match the requirements for elements that comprise the value\n    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket\n    //    protocol, then throw a \"SyntaxError\" DOMException.\n    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')\n    }\n\n    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')\n    }\n\n    // 10. Set this's url to urlRecord.\n    this[kWebSocketURL] = new URL(urlRecord.href)\n\n    // 11. Let client be this's relevant settings object.\n\n    // 12. Run this step in parallel:\n\n    //    1. Establish a WebSocket connection given urlRecord, protocols,\n    //       and client.\n    this[kController] = establishWebSocketConnection(\n      urlRecord,\n      protocols,\n      this,\n      (response) => this.#onConnectionEstablished(response),\n      options\n    )\n\n    // Each WebSocket object has an associated ready state, which is a\n    // number representing the state of the connection. Initially it must\n    // be CONNECTING (0).\n    this[kReadyState] = WebSocket.CONNECTING\n\n    // The extensions attribute must initially return the empty string.\n\n    // The protocol attribute must initially return the empty string.\n\n    // Each WebSocket object has an associated binary type, which is a\n    // BinaryType. Initially it must be \"blob\".\n    this[kBinaryType] = 'blob'\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n   * @param {number|undefined} code\n   * @param {string|undefined} reason\n   */\n  close (code = undefined, reason = undefined) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (code !== undefined) {\n      code = webidl.converters['unsigned short'](code, { clamp: true })\n    }\n\n    if (reason !== undefined) {\n      reason = webidl.converters.USVString(reason)\n    }\n\n    // 1. If code is present, but is neither an integer equal to 1000 nor an\n    //    integer in the range 3000 to 4999, inclusive, throw an\n    //    \"InvalidAccessError\" DOMException.\n    if (code !== undefined) {\n      if (code !== 1000 && (code < 3000 || code > 4999)) {\n        throw new DOMException('invalid code', 'InvalidAccessError')\n      }\n    }\n\n    let reasonByteLength = 0\n\n    // 2. If reason is present, then run these substeps:\n    if (reason !== undefined) {\n      // 1. Let reasonBytes be the result of encoding reason.\n      // 2. If reasonBytes is longer than 123 bytes, then throw a\n      //    \"SyntaxError\" DOMException.\n      reasonByteLength = Buffer.byteLength(reason)\n\n      if (reasonByteLength > 123) {\n        throw new DOMException(\n          `Reason must be less than 123 bytes; received ${reasonByteLength}`,\n          'SyntaxError'\n        )\n      }\n    }\n\n    // 3. Run the first matching steps from the following list:\n    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {\n      // If this's ready state is CLOSING (2) or CLOSED (3)\n      // Do nothing.\n    } else if (!isEstablished(this)) {\n      // If the WebSocket connection is not yet established\n      // Fail the WebSocket connection and set this's ready state\n      // to CLOSING (2).\n      failWebsocketConnection(this, 'Connection was closed before it was established.')\n      this[kReadyState] = WebSocket.CLOSING\n    } else if (!isClosing(this)) {\n      // If the WebSocket closing handshake has not yet been started\n      // Start the WebSocket closing handshake and set this's ready\n      // state to CLOSING (2).\n      // - If neither code nor reason is present, the WebSocket Close\n      //   message must not have a body.\n      // - If code is present, then the status code to use in the\n      //   WebSocket Close message must be the integer given by code.\n      // - If reason is also present, then reasonBytes must be\n      //   provided in the Close message after the status code.\n\n      const frame = new WebsocketFrameSend()\n\n      // If neither code nor reason is present, the WebSocket Close\n      // message must not have a body.\n\n      // If code is present, then the status code to use in the\n      // WebSocket Close message must be the integer given by code.\n      if (code !== undefined && reason === undefined) {\n        frame.frameData = Buffer.allocUnsafe(2)\n        frame.frameData.writeUInt16BE(code, 0)\n      } else if (code !== undefined && reason !== undefined) {\n        // If reason is also present, then reasonBytes must be\n        // provided in the Close message after the status code.\n        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)\n        frame.frameData.writeUInt16BE(code, 0)\n        // the body MAY contain UTF-8-encoded data with value /reason/\n        frame.frameData.write(reason, 2, 'utf-8')\n      } else {\n        frame.frameData = emptyBuffer\n      }\n\n      /** @type {import('stream').Duplex} */\n      const socket = this[kResponse].socket\n\n      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {\n        if (!err) {\n          this[kSentClose] = true\n        }\n      })\n\n      // Upon either sending or receiving a Close control frame, it is said\n      // that _The WebSocket Closing Handshake is Started_ and that the\n      // WebSocket connection is in the CLOSING state.\n      this[kReadyState] = states.CLOSING\n    } else {\n      // Otherwise\n      // Set this's ready state to CLOSING (2).\n      this[kReadyState] = WebSocket.CLOSING\n    }\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n   */\n  send (data) {\n    webidl.brandCheck(this, WebSocket)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })\n\n    data = webidl.converters.WebSocketSendData(data)\n\n    // 1. If this's ready state is CONNECTING, then throw an\n    //    \"InvalidStateError\" DOMException.\n    if (this[kReadyState] === WebSocket.CONNECTING) {\n      throw new DOMException('Sent before connected.', 'InvalidStateError')\n    }\n\n    // 2. Run the appropriate set of steps from the following list:\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n\n    if (!isEstablished(this) || isClosing(this)) {\n      return\n    }\n\n    /** @type {import('stream').Duplex} */\n    const socket = this[kResponse].socket\n\n    // If data is a string\n    if (typeof data === 'string') {\n      // If the WebSocket connection is established and the WebSocket\n      // closing handshake has not yet started, then the user agent\n      // must send a WebSocket Message comprised of the data argument\n      // using a text frame opcode; if the data cannot be sent, e.g.\n      // because it would need to be buffered but the buffer is full,\n      // the user agent must flag the WebSocket as full and then close\n      // the WebSocket connection. Any invocation of this method with a\n      // string argument that does not throw an exception must increase\n      // the bufferedAmount attribute by the number of bytes needed to\n      // express the argument as UTF-8.\n\n      const value = Buffer.from(data)\n      const frame = new WebsocketFrameSend(value)\n      const buffer = frame.createFrame(opcodes.TEXT)\n\n      this.#bufferedAmount += value.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= value.byteLength\n      })\n    } else if (types.isArrayBuffer(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need\n      // to be buffered but the buffer is full, the user agent must flag\n      // the WebSocket as full and then close the WebSocket connection.\n      // The data to be sent is the data stored in the buffer described\n      // by the ArrayBuffer object. Any invocation of this method with an\n      // ArrayBuffer argument that does not throw an exception must\n      // increase the bufferedAmount attribute by the length of the\n      // ArrayBuffer in bytes.\n\n      const value = Buffer.from(data)\n      const frame = new WebsocketFrameSend(value)\n      const buffer = frame.createFrame(opcodes.BINARY)\n\n      this.#bufferedAmount += value.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= value.byteLength\n      })\n    } else if (ArrayBuffer.isView(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The\n      // data to be sent is the data stored in the section of the buffer\n      // described by the ArrayBuffer object that data references. Any\n      // invocation of this method with this kind of argument that does\n      // not throw an exception must increase the bufferedAmount attribute\n      // by the length of data’s buffer in bytes.\n\n      const ab = Buffer.from(data, data.byteOffset, data.byteLength)\n\n      const frame = new WebsocketFrameSend(ab)\n      const buffer = frame.createFrame(opcodes.BINARY)\n\n      this.#bufferedAmount += ab.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= ab.byteLength\n      })\n    } else if (isBlobLike(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The data\n      // to be sent is the raw data represented by the Blob object. Any\n      // invocation of this method with a Blob argument that does not throw\n      // an exception must increase the bufferedAmount attribute by the size\n      // of the Blob object’s raw data, in bytes.\n\n      const frame = new WebsocketFrameSend()\n\n      data.arrayBuffer().then((ab) => {\n        const value = Buffer.from(ab)\n        frame.frameData = value\n        const buffer = frame.createFrame(opcodes.BINARY)\n\n        this.#bufferedAmount += value.byteLength\n        socket.write(buffer, () => {\n          this.#bufferedAmount -= value.byteLength\n        })\n      })\n    }\n  }\n\n  get readyState () {\n    webidl.brandCheck(this, WebSocket)\n\n    // The readyState getter steps are to return this's ready state.\n    return this[kReadyState]\n  }\n\n  get bufferedAmount () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#bufferedAmount\n  }\n\n  get url () {\n    webidl.brandCheck(this, WebSocket)\n\n    // The url getter steps are to return this's url, serialized.\n    return URLSerializer(this[kWebSocketURL])\n  }\n\n  get extensions () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#extensions\n  }\n\n  get protocol () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#protocol\n  }\n\n  get onopen () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.open\n  }\n\n  set onopen (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.open) {\n      this.removeEventListener('open', this.#events.open)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.open = fn\n      this.addEventListener('open', fn)\n    } else {\n      this.#events.open = null\n    }\n  }\n\n  get onerror () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.error\n  }\n\n  set onerror (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.error) {\n      this.removeEventListener('error', this.#events.error)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this.#events.error = null\n    }\n  }\n\n  get onclose () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.close\n  }\n\n  set onclose (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.close) {\n      this.removeEventListener('close', this.#events.close)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.close = fn\n      this.addEventListener('close', fn)\n    } else {\n      this.#events.close = null\n    }\n  }\n\n  get onmessage () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.message\n  }\n\n  set onmessage (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.message) {\n      this.removeEventListener('message', this.#events.message)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.message = fn\n      this.addEventListener('message', fn)\n    } else {\n      this.#events.message = null\n    }\n  }\n\n  get binaryType () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this[kBinaryType]\n  }\n\n  set binaryType (type) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (type !== 'blob' && type !== 'arraybuffer') {\n      this[kBinaryType] = 'blob'\n    } else {\n      this[kBinaryType] = type\n    }\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n   */\n  #onConnectionEstablished (response) {\n    // processResponse is called when the \"response’s header list has been received and initialized.\"\n    // once this happens, the connection is open\n    this[kResponse] = response\n\n    const parser = new ByteParser(this)\n    parser.on('drain', function onParserDrain () {\n      this.ws[kResponse].socket.resume()\n    })\n\n    response.socket.ws = this\n    this[kByteParser] = parser\n\n    // 1. Change the ready state to OPEN (1).\n    this[kReadyState] = states.OPEN\n\n    // 2. Change the extensions attribute’s value to the extensions in use, if\n    //    it is not the null value.\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\n    const extensions = response.headersList.get('sec-websocket-extensions')\n\n    if (extensions !== null) {\n      this.#extensions = extensions\n    }\n\n    // 3. Change the protocol attribute’s value to the subprotocol in use, if\n    //    it is not the null value.\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9\n    const protocol = response.headersList.get('sec-websocket-protocol')\n\n    if (protocol !== null) {\n      this.#protocol = protocol\n    }\n\n    // 4. Fire an event named open at the WebSocket object.\n    fireEvent('open', this)\n  }\n}\n\n// https://websockets.spec.whatwg.org/#dom-websocket-connecting\nWebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING\n// https://websockets.spec.whatwg.org/#dom-websocket-open\nWebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN\n// https://websockets.spec.whatwg.org/#dom-websocket-closing\nWebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING\n// https://websockets.spec.whatwg.org/#dom-websocket-closed\nWebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED\n\nObject.defineProperties(WebSocket.prototype, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors,\n  url: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  bufferedAmount: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onclose: kEnumerableProperty,\n  close: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  binaryType: kEnumerableProperty,\n  send: kEnumerableProperty,\n  extensions: kEnumerableProperty,\n  protocol: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'WebSocket',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n})\n\nObject.defineProperties(WebSocket, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors\n})\n\nwebidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(\n  webidl.converters.DOMString\n)\n\nwebidl.converters['DOMString or sequence<DOMString>'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {\n    return webidl.converters['sequence<DOMString>'](V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// This implements the propsal made in https://github.com/whatwg/websockets/issues/42\nwebidl.converters.WebSocketInit = webidl.dictionaryConverter([\n  {\n    key: 'protocols',\n    converter: webidl.converters['DOMString or sequence<DOMString>'],\n    get defaultValue () {\n      return []\n    }\n  },\n  {\n    key: 'dispatcher',\n    converter: (V) => V,\n    get defaultValue () {\n      return getGlobalDispatcher()\n    }\n  },\n  {\n    key: 'headers',\n    converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n  }\n])\n\nwebidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {\n    return webidl.converters.WebSocketInit(V)\n  }\n\n  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }\n}\n\nwebidl.converters.WebSocketSendData = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {\n      return webidl.converters.BufferSource(V)\n    }\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nmodule.exports = {\n  WebSocket\n}\n","\"use strict\";\n\nvar conversions = {};\nmodule.exports = conversions;\n\nfunction sign(x) {\n    return x < 0 ? -1 : 1;\n}\n\nfunction evenRound(x) {\n    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\n    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)\n        return Math.floor(x);\n    } else {\n        return Math.round(x);\n    }\n}\n\nfunction createNumberConversion(bitLength, typeOpts) {\n    if (!typeOpts.unsigned) {\n        --bitLength;\n    }\n    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\n    const upperBound = Math.pow(2, bitLength) - 1;\n\n    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\n    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\n\n    return function(V, opts) {\n        if (!opts) opts = {};\n\n        let x = +V;\n\n        if (opts.enforceRange) {\n            if (!Number.isFinite(x)) {\n                throw new TypeError(\"Argument is not a finite number\");\n            }\n\n            x = sign(x) * Math.floor(Math.abs(x));\n            if (x < lowerBound || x > upperBound) {\n                throw new TypeError(\"Argument is not in byte range\");\n            }\n\n            return x;\n        }\n\n        if (!isNaN(x) && opts.clamp) {\n            x = evenRound(x);\n\n            if (x < lowerBound) x = lowerBound;\n            if (x > upperBound) x = upperBound;\n            return x;\n        }\n\n        if (!Number.isFinite(x) || x === 0) {\n            return 0;\n        }\n\n        x = sign(x) * Math.floor(Math.abs(x));\n        x = x % moduloVal;\n\n        if (!typeOpts.unsigned && x >= moduloBound) {\n            return x - moduloVal;\n        } else if (typeOpts.unsigned) {\n            if (x < 0) {\n              x += moduloVal;\n            } else if (x === -0) { // don't return negative zero\n              return 0;\n            }\n        }\n\n        return x;\n    }\n}\n\nconversions[\"void\"] = function () {\n    return undefined;\n};\n\nconversions[\"boolean\"] = function (val) {\n    return !!val;\n};\n\nconversions[\"byte\"] = createNumberConversion(8, { unsigned: false });\nconversions[\"octet\"] = createNumberConversion(8, { unsigned: true });\n\nconversions[\"short\"] = createNumberConversion(16, { unsigned: false });\nconversions[\"unsigned short\"] = createNumberConversion(16, { unsigned: true });\n\nconversions[\"long\"] = createNumberConversion(32, { unsigned: false });\nconversions[\"unsigned long\"] = createNumberConversion(32, { unsigned: true });\n\nconversions[\"long long\"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });\nconversions[\"unsigned long long\"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });\n\nconversions[\"double\"] = function (V) {\n    const x = +V;\n\n    if (!Number.isFinite(x)) {\n        throw new TypeError(\"Argument is not a finite floating-point value\");\n    }\n\n    return x;\n};\n\nconversions[\"unrestricted double\"] = function (V) {\n    const x = +V;\n\n    if (isNaN(x)) {\n        throw new TypeError(\"Argument is NaN\");\n    }\n\n    return x;\n};\n\n// not quite valid, but good enough for JS\nconversions[\"float\"] = conversions[\"double\"];\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\n\nconversions[\"DOMString\"] = function (V, opts) {\n    if (!opts) opts = {};\n\n    if (opts.treatNullAsEmptyString && V === null) {\n        return \"\";\n    }\n\n    return String(V);\n};\n\nconversions[\"ByteString\"] = function (V, opts) {\n    const x = String(V);\n    let c = undefined;\n    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n        if (c > 255) {\n            throw new TypeError(\"Argument is not a valid bytestring\");\n        }\n    }\n\n    return x;\n};\n\nconversions[\"USVString\"] = function (V) {\n    const S = String(V);\n    const n = S.length;\n    const U = [];\n    for (let i = 0; i < n; ++i) {\n        const c = S.charCodeAt(i);\n        if (c < 0xD800 || c > 0xDFFF) {\n            U.push(String.fromCodePoint(c));\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\n            U.push(String.fromCodePoint(0xFFFD));\n        } else {\n            if (i === n - 1) {\n                U.push(String.fromCodePoint(0xFFFD));\n            } else {\n                const d = S.charCodeAt(i + 1);\n                if (0xDC00 <= d && d <= 0xDFFF) {\n                    const a = c & 0x3FF;\n                    const b = d & 0x3FF;\n                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\n                    ++i;\n                } else {\n                    U.push(String.fromCodePoint(0xFFFD));\n                }\n            }\n        }\n    }\n\n    return U.join('');\n};\n\nconversions[\"Date\"] = function (V, opts) {\n    if (!(V instanceof Date)) {\n        throw new TypeError(\"Argument is not a Date object\");\n    }\n    if (isNaN(V)) {\n        return undefined;\n    }\n\n    return V;\n};\n\nconversions[\"RegExp\"] = function (V, opts) {\n    if (!(V instanceof RegExp)) {\n        V = new RegExp(V);\n    }\n\n    return V;\n};\n","\"use strict\";\nconst usm = require(\"./url-state-machine\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Impl = require(\".//URL-impl.js\");\n\nconst impl = utils.implSymbol;\n\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n  args[1] = conversions[\"USVString\"](args[1]);\n  }\n\n  module.exports.setup(this, args);\n}\n\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\n\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\n\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: { URL: URL },\n    Worker: { URL: URL }\n  }\n};\n\n","\"use strict\";\n\nexports.URL = require(\"./URL\").interface;\nexports.serializeURL = require(\"./url-state-machine\").serializeURL;\nexports.serializeURLOrigin = require(\"./url-state-machine\").serializeURLOrigin;\nexports.basicURLParse = require(\"./url-state-machine\").basicURLParse;\nexports.setTheUsername = require(\"./url-state-machine\").setTheUsername;\nexports.setThePassword = require(\"./url-state-machine\").setThePassword;\nexports.serializeHost = require(\"./url-state-machine\").serializeHost;\nexports.serializeInteger = require(\"./url-state-machine\").serializeInteger;\nexports.parseURL = require(\"./url-state-machine\").parseURL;\n","\"use strict\";\r\nconst punycode = require(\"punycode\");\r\nconst tr46 = require(\"tr46\");\r\n\r\nconst specialSchemes = {\r\n  ftp: 21,\r\n  file: null,\r\n  gopher: 70,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443\r\n};\r\n\r\nconst failure = Symbol(\"failure\");\r\n\r\nfunction countSymbols(str) {\r\n  return punycode.ucs2.decode(str).length;\r\n}\r\n\r\nfunction at(input, idx) {\r\n  const c = input[idx];\r\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\r\n}\r\n\r\nfunction isASCIIDigit(c) {\r\n  return c >= 0x30 && c <= 0x39;\r\n}\r\n\r\nfunction isASCIIAlpha(c) {\r\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\r\n}\r\n\r\nfunction isASCIIAlphanumeric(c) {\r\n  return isASCIIAlpha(c) || isASCIIDigit(c);\r\n}\r\n\r\nfunction isASCIIHex(c) {\r\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\r\n}\r\n\r\nfunction isSingleDot(buffer) {\r\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\r\n}\r\n\r\nfunction isDoubleDot(buffer) {\r\n  buffer = buffer.toLowerCase();\r\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\r\n}\r\n\r\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\r\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\r\n}\r\n\r\nfunction isWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\r\n}\r\n\r\nfunction containsForbiddenHostCodePoint(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction isSpecialScheme(scheme) {\r\n  return specialSchemes[scheme] !== undefined;\r\n}\r\n\r\nfunction isSpecial(url) {\r\n  return isSpecialScheme(url.scheme);\r\n}\r\n\r\nfunction defaultPort(scheme) {\r\n  return specialSchemes[scheme];\r\n}\r\n\r\nfunction percentEncode(c) {\r\n  let hex = c.toString(16).toUpperCase();\r\n  if (hex.length === 1) {\r\n    hex = \"0\" + hex;\r\n  }\r\n\r\n  return \"%\" + hex;\r\n}\r\n\r\nfunction utf8PercentEncode(c) {\r\n  const buf = new Buffer(c);\r\n\r\n  let str = \"\";\r\n\r\n  for (let i = 0; i < buf.length; ++i) {\r\n    str += percentEncode(buf[i]);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\nfunction utf8PercentDecode(str) {\r\n  const input = new Buffer(str);\r\n  const output = [];\r\n  for (let i = 0; i < input.length; ++i) {\r\n    if (input[i] !== 37) {\r\n      output.push(input[i]);\r\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\r\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\r\n      i += 2;\r\n    } else {\r\n      output.push(input[i]);\r\n    }\r\n  }\r\n  return new Buffer(output).toString();\r\n}\r\n\r\nfunction isC0ControlPercentEncode(c) {\r\n  return c <= 0x1F || c > 0x7E;\r\n}\r\n\r\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\r\nfunction isPathPercentEncode(c) {\r\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\r\n}\r\n\r\nconst extraUserinfoPercentEncodeSet =\r\n  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\r\nfunction isUserinfoPercentEncode(c) {\r\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\r\n}\r\n\r\nfunction percentEncodeChar(c, encodeSetPredicate) {\r\n  const cStr = String.fromCodePoint(c);\r\n\r\n  if (encodeSetPredicate(c)) {\r\n    return utf8PercentEncode(cStr);\r\n  }\r\n\r\n  return cStr;\r\n}\r\n\r\nfunction parseIPv4Number(input) {\r\n  let R = 10;\r\n\r\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\r\n    input = input.substring(2);\r\n    R = 16;\r\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\r\n    input = input.substring(1);\r\n    R = 8;\r\n  }\r\n\r\n  if (input === \"\") {\r\n    return 0;\r\n  }\r\n\r\n  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);\r\n  if (regex.test(input)) {\r\n    return failure;\r\n  }\r\n\r\n  return parseInt(input, R);\r\n}\r\n\r\nfunction parseIPv4(input) {\r\n  const parts = input.split(\".\");\r\n  if (parts[parts.length - 1] === \"\") {\r\n    if (parts.length > 1) {\r\n      parts.pop();\r\n    }\r\n  }\r\n\r\n  if (parts.length > 4) {\r\n    return input;\r\n  }\r\n\r\n  const numbers = [];\r\n  for (const part of parts) {\r\n    if (part === \"\") {\r\n      return input;\r\n    }\r\n    const n = parseIPv4Number(part);\r\n    if (n === failure) {\r\n      return input;\r\n    }\r\n\r\n    numbers.push(n);\r\n  }\r\n\r\n  for (let i = 0; i < numbers.length - 1; ++i) {\r\n    if (numbers[i] > 255) {\r\n      return failure;\r\n    }\r\n  }\r\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\r\n    return failure;\r\n  }\r\n\r\n  let ipv4 = numbers.pop();\r\n  let counter = 0;\r\n\r\n  for (const n of numbers) {\r\n    ipv4 += n * Math.pow(256, 3 - counter);\r\n    ++counter;\r\n  }\r\n\r\n  return ipv4;\r\n}\r\n\r\nfunction serializeIPv4(address) {\r\n  let output = \"\";\r\n  let n = address;\r\n\r\n  for (let i = 1; i <= 4; ++i) {\r\n    output = String(n % 256) + output;\r\n    if (i !== 4) {\r\n      output = \".\" + output;\r\n    }\r\n    n = Math.floor(n / 256);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseIPv6(input) {\r\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\r\n  let pieceIndex = 0;\r\n  let compress = null;\r\n  let pointer = 0;\r\n\r\n  input = punycode.ucs2.decode(input);\r\n\r\n  if (input[pointer] === 58) {\r\n    if (input[pointer + 1] !== 58) {\r\n      return failure;\r\n    }\r\n\r\n    pointer += 2;\r\n    ++pieceIndex;\r\n    compress = pieceIndex;\r\n  }\r\n\r\n  while (pointer < input.length) {\r\n    if (pieceIndex === 8) {\r\n      return failure;\r\n    }\r\n\r\n    if (input[pointer] === 58) {\r\n      if (compress !== null) {\r\n        return failure;\r\n      }\r\n      ++pointer;\r\n      ++pieceIndex;\r\n      compress = pieceIndex;\r\n      continue;\r\n    }\r\n\r\n    let value = 0;\r\n    let length = 0;\r\n\r\n    while (length < 4 && isASCIIHex(input[pointer])) {\r\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\r\n      ++pointer;\r\n      ++length;\r\n    }\r\n\r\n    if (input[pointer] === 46) {\r\n      if (length === 0) {\r\n        return failure;\r\n      }\r\n\r\n      pointer -= length;\r\n\r\n      if (pieceIndex > 6) {\r\n        return failure;\r\n      }\r\n\r\n      let numbersSeen = 0;\r\n\r\n      while (input[pointer] !== undefined) {\r\n        let ipv4Piece = null;\r\n\r\n        if (numbersSeen > 0) {\r\n          if (input[pointer] === 46 && numbersSeen < 4) {\r\n            ++pointer;\r\n          } else {\r\n            return failure;\r\n          }\r\n        }\r\n\r\n        if (!isASCIIDigit(input[pointer])) {\r\n          return failure;\r\n        }\r\n\r\n        while (isASCIIDigit(input[pointer])) {\r\n          const number = parseInt(at(input, pointer));\r\n          if (ipv4Piece === null) {\r\n            ipv4Piece = number;\r\n          } else if (ipv4Piece === 0) {\r\n            return failure;\r\n          } else {\r\n            ipv4Piece = ipv4Piece * 10 + number;\r\n          }\r\n          if (ipv4Piece > 255) {\r\n            return failure;\r\n          }\r\n          ++pointer;\r\n        }\r\n\r\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\r\n\r\n        ++numbersSeen;\r\n\r\n        if (numbersSeen === 2 || numbersSeen === 4) {\r\n          ++pieceIndex;\r\n        }\r\n      }\r\n\r\n      if (numbersSeen !== 4) {\r\n        return failure;\r\n      }\r\n\r\n      break;\r\n    } else if (input[pointer] === 58) {\r\n      ++pointer;\r\n      if (input[pointer] === undefined) {\r\n        return failure;\r\n      }\r\n    } else if (input[pointer] !== undefined) {\r\n      return failure;\r\n    }\r\n\r\n    address[pieceIndex] = value;\r\n    ++pieceIndex;\r\n  }\r\n\r\n  if (compress !== null) {\r\n    let swaps = pieceIndex - compress;\r\n    pieceIndex = 7;\r\n    while (pieceIndex !== 0 && swaps > 0) {\r\n      const temp = address[compress + swaps - 1];\r\n      address[compress + swaps - 1] = address[pieceIndex];\r\n      address[pieceIndex] = temp;\r\n      --pieceIndex;\r\n      --swaps;\r\n    }\r\n  } else if (compress === null && pieceIndex !== 8) {\r\n    return failure;\r\n  }\r\n\r\n  return address;\r\n}\r\n\r\nfunction serializeIPv6(address) {\r\n  let output = \"\";\r\n  const seqResult = findLongestZeroSequence(address);\r\n  const compress = seqResult.idx;\r\n  let ignore0 = false;\r\n\r\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\r\n    if (ignore0 && address[pieceIndex] === 0) {\r\n      continue;\r\n    } else if (ignore0) {\r\n      ignore0 = false;\r\n    }\r\n\r\n    if (compress === pieceIndex) {\r\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\r\n      output += separator;\r\n      ignore0 = true;\r\n      continue;\r\n    }\r\n\r\n    output += address[pieceIndex].toString(16);\r\n\r\n    if (pieceIndex !== 7) {\r\n      output += \":\";\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseHost(input, isSpecialArg) {\r\n  if (input[0] === \"[\") {\r\n    if (input[input.length - 1] !== \"]\") {\r\n      return failure;\r\n    }\r\n\r\n    return parseIPv6(input.substring(1, input.length - 1));\r\n  }\r\n\r\n  if (!isSpecialArg) {\r\n    return parseOpaqueHost(input);\r\n  }\r\n\r\n  const domain = utf8PercentDecode(input);\r\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\r\n  if (asciiDomain === null) {\r\n    return failure;\r\n  }\r\n\r\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\r\n    return failure;\r\n  }\r\n\r\n  const ipv4Host = parseIPv4(asciiDomain);\r\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\r\n    return ipv4Host;\r\n  }\r\n\r\n  return asciiDomain;\r\n}\r\n\r\nfunction parseOpaqueHost(input) {\r\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\r\n    return failure;\r\n  }\r\n\r\n  let output = \"\";\r\n  const decoded = punycode.ucs2.decode(input);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction findLongestZeroSequence(arr) {\r\n  let maxIdx = null;\r\n  let maxLen = 1; // only find elements > 1\r\n  let currStart = null;\r\n  let currLen = 0;\r\n\r\n  for (let i = 0; i < arr.length; ++i) {\r\n    if (arr[i] !== 0) {\r\n      if (currLen > maxLen) {\r\n        maxIdx = currStart;\r\n        maxLen = currLen;\r\n      }\r\n\r\n      currStart = null;\r\n      currLen = 0;\r\n    } else {\r\n      if (currStart === null) {\r\n        currStart = i;\r\n      }\r\n      ++currLen;\r\n    }\r\n  }\r\n\r\n  // if trailing zeros\r\n  if (currLen > maxLen) {\r\n    maxIdx = currStart;\r\n    maxLen = currLen;\r\n  }\r\n\r\n  return {\r\n    idx: maxIdx,\r\n    len: maxLen\r\n  };\r\n}\r\n\r\nfunction serializeHost(host) {\r\n  if (typeof host === \"number\") {\r\n    return serializeIPv4(host);\r\n  }\r\n\r\n  // IPv6 serializer\r\n  if (host instanceof Array) {\r\n    return \"[\" + serializeIPv6(host) + \"]\";\r\n  }\r\n\r\n  return host;\r\n}\r\n\r\nfunction trimControlChars(url) {\r\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\r\n}\r\n\r\nfunction trimTabAndNewline(url) {\r\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\r\n}\r\n\r\nfunction shortenPath(url) {\r\n  const path = url.path;\r\n  if (path.length === 0) {\r\n    return;\r\n  }\r\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\r\n    return;\r\n  }\r\n\r\n  path.pop();\r\n}\r\n\r\nfunction includesCredentials(url) {\r\n  return url.username !== \"\" || url.password !== \"\";\r\n}\r\n\r\nfunction cannotHaveAUsernamePasswordPort(url) {\r\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetter(string) {\r\n  return /^[A-Za-z]:$/.test(string);\r\n}\r\n\r\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\r\n  this.pointer = 0;\r\n  this.input = input;\r\n  this.base = base || null;\r\n  this.encodingOverride = encodingOverride || \"utf-8\";\r\n  this.stateOverride = stateOverride;\r\n  this.url = url;\r\n  this.failure = false;\r\n  this.parseError = false;\r\n\r\n  if (!this.url) {\r\n    this.url = {\r\n      scheme: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      host: null,\r\n      port: null,\r\n      path: [],\r\n      query: null,\r\n      fragment: null,\r\n\r\n      cannotBeABaseURL: false\r\n    };\r\n\r\n    const res = trimControlChars(this.input);\r\n    if (res !== this.input) {\r\n      this.parseError = true;\r\n    }\r\n    this.input = res;\r\n  }\r\n\r\n  const res = trimTabAndNewline(this.input);\r\n  if (res !== this.input) {\r\n    this.parseError = true;\r\n  }\r\n  this.input = res;\r\n\r\n  this.state = stateOverride || \"scheme start\";\r\n\r\n  this.buffer = \"\";\r\n  this.atFlag = false;\r\n  this.arrFlag = false;\r\n  this.passwordTokenSeenFlag = false;\r\n\r\n  this.input = punycode.ucs2.decode(this.input);\r\n\r\n  for (; this.pointer <= this.input.length; ++this.pointer) {\r\n    const c = this.input[this.pointer];\r\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\r\n\r\n    // exec state machine\r\n    const ret = this[\"parse \" + this.state](c, cStr);\r\n    if (!ret) {\r\n      break; // terminate algorithm\r\n    } else if (ret === failure) {\r\n      this.failure = true;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\r\n  if (isASCIIAlpha(c)) {\r\n    this.buffer += cStr.toLowerCase();\r\n    this.state = \"scheme\";\r\n  } else if (!this.stateOverride) {\r\n    this.state = \"no scheme\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\r\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\r\n    this.buffer += cStr.toLowerCase();\r\n  } else if (c === 58) {\r\n    if (this.stateOverride) {\r\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\r\n        return false;\r\n      }\r\n\r\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\r\n        return false;\r\n      }\r\n    }\r\n    this.url.scheme = this.buffer;\r\n    this.buffer = \"\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    if (this.url.scheme === \"file\") {\r\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\r\n        this.parseError = true;\r\n      }\r\n      this.state = \"file\";\r\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\r\n      this.state = \"special relative or authority\";\r\n    } else if (isSpecial(this.url)) {\r\n      this.state = \"special authority slashes\";\r\n    } else if (this.input[this.pointer + 1] === 47) {\r\n      this.state = \"path or authority\";\r\n      ++this.pointer;\r\n    } else {\r\n      this.url.cannotBeABaseURL = true;\r\n      this.url.path.push(\"\");\r\n      this.state = \"cannot-be-a-base-URL path\";\r\n    }\r\n  } else if (!this.stateOverride) {\r\n    this.buffer = \"\";\r\n    this.state = \"no scheme\";\r\n    this.pointer = -1;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\r\n  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {\r\n    return failure;\r\n  } else if (this.base.cannotBeABaseURL && c === 35) {\r\n    this.url.scheme = this.base.scheme;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.url.cannotBeABaseURL = true;\r\n    this.state = \"fragment\";\r\n  } else if (this.base.scheme === \"file\") {\r\n    this.state = \"file\";\r\n    --this.pointer;\r\n  } else {\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\r\n  if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\r\n  this.url.scheme = this.base.scheme;\r\n  if (isNaN(c)) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n  } else if (c === 47) {\r\n    this.state = \"relative slash\";\r\n  } else if (c === 63) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (isSpecial(this.url) && c === 92) {\r\n    this.parseError = true;\r\n    this.state = \"relative slash\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\r\n\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\r\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"special authority ignore slashes\";\r\n  } else if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"special authority ignore slashes\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\r\n  if (c !== 47 && c !== 92) {\r\n    this.state = \"authority\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\r\n  if (c === 64) {\r\n    this.parseError = true;\r\n    if (this.atFlag) {\r\n      this.buffer = \"%40\" + this.buffer;\r\n    }\r\n    this.atFlag = true;\r\n\r\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\r\n    const len = countSymbols(this.buffer);\r\n    for (let pointer = 0; pointer < len; ++pointer) {\r\n      const codePoint = this.buffer.codePointAt(pointer);\r\n\r\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\r\n        this.passwordTokenSeenFlag = true;\r\n        continue;\r\n      }\r\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\r\n      if (this.passwordTokenSeenFlag) {\r\n        this.url.password += encodedCodePoints;\r\n      } else {\r\n        this.url.username += encodedCodePoints;\r\n      }\r\n    }\r\n    this.buffer = \"\";\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    if (this.atFlag && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n    this.pointer -= countSymbols(this.buffer) + 1;\r\n    this.buffer = \"\";\r\n    this.state = \"host\";\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse hostname\"] =\r\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\r\n  if (this.stateOverride && this.url.scheme === \"file\") {\r\n    --this.pointer;\r\n    this.state = \"file host\";\r\n  } else if (c === 58 && !this.arrFlag) {\r\n    if (this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"port\";\r\n    if (this.stateOverride === \"hostname\") {\r\n      return false;\r\n    }\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    --this.pointer;\r\n    if (isSpecial(this.url) && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    } else if (this.stateOverride && this.buffer === \"\" &&\r\n               (includesCredentials(this.url) || this.url.port !== null)) {\r\n      this.parseError = true;\r\n      return false;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"path start\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n  } else {\r\n    if (c === 91) {\r\n      this.arrFlag = true;\r\n    } else if (c === 93) {\r\n      this.arrFlag = false;\r\n    }\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\r\n  if (isASCIIDigit(c)) {\r\n    this.buffer += cStr;\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92) ||\r\n             this.stateOverride) {\r\n    if (this.buffer !== \"\") {\r\n      const port = parseInt(this.buffer);\r\n      if (port > Math.pow(2, 16) - 1) {\r\n        this.parseError = true;\r\n        return failure;\r\n      }\r\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\r\n      this.buffer = \"\";\r\n    }\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    this.state = \"path start\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\r\n\r\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\r\n  this.url.scheme = \"file\";\r\n\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file slash\";\r\n  } else if (this.base !== null && this.base.scheme === \"file\") {\r\n    if (isNaN(c)) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n    } else if (c === 63) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    } else if (c === 35) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    } else {\r\n      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points\r\n          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||\r\n          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points\r\n           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {\r\n        this.url.host = this.base.host;\r\n        this.url.path = this.base.path.slice();\r\n        shortenPath(this.url);\r\n      } else {\r\n        this.parseError = true;\r\n      }\r\n\r\n      this.state = \"path\";\r\n      --this.pointer;\r\n    }\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file host\";\r\n  } else {\r\n    if (this.base !== null && this.base.scheme === \"file\") {\r\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\r\n        this.url.path.push(this.base.path[0]);\r\n      } else {\r\n        this.url.host = this.base.host;\r\n      }\r\n    }\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\r\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\r\n    --this.pointer;\r\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\r\n      this.parseError = true;\r\n      this.state = \"path\";\r\n    } else if (this.buffer === \"\") {\r\n      this.url.host = \"\";\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n      this.state = \"path start\";\r\n    } else {\r\n      let host = parseHost(this.buffer, isSpecial(this.url));\r\n      if (host === failure) {\r\n        return failure;\r\n      }\r\n      if (host === \"localhost\") {\r\n        host = \"\";\r\n      }\r\n      this.url.host = host;\r\n\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n\r\n      this.buffer = \"\";\r\n      this.state = \"path start\";\r\n    }\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\r\n  if (isSpecial(this.url)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"path\";\r\n\r\n    if (c !== 47 && c !== 92) {\r\n      --this.pointer;\r\n    }\r\n  } else if (!this.stateOverride && c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (!this.stateOverride && c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (c !== undefined) {\r\n    this.state = \"path\";\r\n    if (c !== 47) {\r\n      --this.pointer;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\r\n  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||\r\n      (!this.stateOverride && (c === 63 || c === 35))) {\r\n    if (isSpecial(this.url) && c === 92) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (isDoubleDot(this.buffer)) {\r\n      shortenPath(this.url);\r\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\r\n        this.url.path.push(\"\");\r\n      }\r\n    } else if (isSingleDot(this.buffer) && c !== 47 &&\r\n               !(isSpecial(this.url) && c === 92)) {\r\n      this.url.path.push(\"\");\r\n    } else if (!isSingleDot(this.buffer)) {\r\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\r\n        if (this.url.host !== \"\" && this.url.host !== null) {\r\n          this.parseError = true;\r\n          this.url.host = \"\";\r\n        }\r\n        this.buffer = this.buffer[0] + \":\";\r\n      }\r\n      this.url.path.push(this.buffer);\r\n    }\r\n    this.buffer = \"\";\r\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\r\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\r\n        this.parseError = true;\r\n        this.url.path.shift();\r\n      }\r\n    }\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    }\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\r\n  if (c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else {\r\n    // TODO: Add: not a URL code point\r\n    if (!isNaN(c) && c !== 37) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (c === 37 &&\r\n        (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n         !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (!isNaN(c)) {\r\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\r\n  if (isNaN(c) || (!this.stateOverride && c === 35)) {\r\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\r\n      this.encodingOverride = \"utf-8\";\r\n    }\r\n\r\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\r\n    for (let i = 0; i < buffer.length; ++i) {\r\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||\r\n          buffer[i] === 0x3C || buffer[i] === 0x3E) {\r\n        this.url.query += percentEncode(buffer[i]);\r\n      } else {\r\n        this.url.query += String.fromCodePoint(buffer[i]);\r\n      }\r\n    }\r\n\r\n    this.buffer = \"\";\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\r\n  if (isNaN(c)) { // do nothing\r\n  } else if (c === 0x0) {\r\n    this.parseError = true;\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction serializeURL(url, excludeFragment) {\r\n  let output = url.scheme + \":\";\r\n  if (url.host !== null) {\r\n    output += \"//\";\r\n\r\n    if (url.username !== \"\" || url.password !== \"\") {\r\n      output += url.username;\r\n      if (url.password !== \"\") {\r\n        output += \":\" + url.password;\r\n      }\r\n      output += \"@\";\r\n    }\r\n\r\n    output += serializeHost(url.host);\r\n\r\n    if (url.port !== null) {\r\n      output += \":\" + url.port;\r\n    }\r\n  } else if (url.host === null && url.scheme === \"file\") {\r\n    output += \"//\";\r\n  }\r\n\r\n  if (url.cannotBeABaseURL) {\r\n    output += url.path[0];\r\n  } else {\r\n    for (const string of url.path) {\r\n      output += \"/\" + string;\r\n    }\r\n  }\r\n\r\n  if (url.query !== null) {\r\n    output += \"?\" + url.query;\r\n  }\r\n\r\n  if (!excludeFragment && url.fragment !== null) {\r\n    output += \"#\" + url.fragment;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction serializeOrigin(tuple) {\r\n  let result = tuple.scheme + \"://\";\r\n  result += serializeHost(tuple.host);\r\n\r\n  if (tuple.port !== null) {\r\n    result += \":\" + tuple.port;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports.serializeURL = serializeURL;\r\n\r\nmodule.exports.serializeURLOrigin = function (url) {\r\n  // https://url.spec.whatwg.org/#concept-url-origin\r\n  switch (url.scheme) {\r\n    case \"blob\":\r\n      try {\r\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\r\n      } catch (e) {\r\n        // serializing an opaque origin returns \"null\"\r\n        return \"null\";\r\n      }\r\n    case \"ftp\":\r\n    case \"gopher\":\r\n    case \"http\":\r\n    case \"https\":\r\n    case \"ws\":\r\n    case \"wss\":\r\n      return serializeOrigin({\r\n        scheme: url.scheme,\r\n        host: url.host,\r\n        port: url.port\r\n      });\r\n    case \"file\":\r\n      // spec says \"exercise to the reader\", chrome says \"file://\"\r\n      return \"file://\";\r\n    default:\r\n      // serializing an opaque origin returns \"null\"\r\n      return \"null\";\r\n  }\r\n};\r\n\r\nmodule.exports.basicURLParse = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\r\n  if (usm.failure) {\r\n    return \"failure\";\r\n  }\r\n\r\n  return usm.url;\r\n};\r\n\r\nmodule.exports.setTheUsername = function (url, username) {\r\n  url.username = \"\";\r\n  const decoded = punycode.ucs2.decode(username);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.setThePassword = function (url, password) {\r\n  url.password = \"\";\r\n  const decoded = punycode.ucs2.decode(password);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.serializeHost = serializeHost;\r\n\r\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\r\n\r\nmodule.exports.serializeInteger = function (integer) {\r\n  return String(integer);\r\n};\r\n\r\nmodule.exports.parseURL = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  // We don't handle blobs, so this just delegates:\r\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\r\n};\r\n","\"use strict\";\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\n\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\n\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\n\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};\n\n",null,"module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"assert\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"async_hooks\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"buffer\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"child_process\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"console\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"crypto\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"diagnostics_channel\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"events\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"fs\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"http\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"http2\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"https\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"net\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:events\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:stream\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:util\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"os\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"path\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"perf_hooks\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"punycode\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"querystring\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"stream\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"stream/web\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"string_decoder\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"timers\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"tls\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"url\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"util\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"util/types\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"worker_threads\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"zlib\");","'use strict'\n\nconst WritableStream = require('node:stream').Writable\nconst inherits = require('node:util').inherits\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst PartStream = require('./PartStream')\nconst HeaderParser = require('./HeaderParser')\n\nconst DASH = 45\nconst B_ONEDASH = Buffer.from('-')\nconst B_CRLF = Buffer.from('\\r\\n')\nconst EMPTY_FN = function () {}\n\nfunction Dicer (cfg) {\n  if (!(this instanceof Dicer)) { return new Dicer(cfg) }\n  WritableStream.call(this, cfg)\n\n  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }\n\n  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }\n\n  this._headerFirst = cfg.headerFirst\n\n  this._dashes = 0\n  this._parts = 0\n  this._finished = false\n  this._realFinish = false\n  this._isPreamble = true\n  this._justMatched = false\n  this._firstWrite = true\n  this._inHeader = true\n  this._part = undefined\n  this._cb = undefined\n  this._ignoreData = false\n  this._partOpts = { highWaterMark: cfg.partHwm }\n  this._pause = false\n\n  const self = this\n  this._hparser = new HeaderParser(cfg)\n  this._hparser.on('header', function (header) {\n    self._inHeader = false\n    self._part.emit('header', header)\n  })\n}\ninherits(Dicer, WritableStream)\n\nDicer.prototype.emit = function (ev) {\n  if (ev === 'finish' && !this._realFinish) {\n    if (!this._finished) {\n      const self = this\n      process.nextTick(function () {\n        self.emit('error', new Error('Unexpected end of multipart data'))\n        if (self._part && !self._ignoreData) {\n          const type = (self._isPreamble ? 'Preamble' : 'Part')\n          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))\n          self._part.push(null)\n          process.nextTick(function () {\n            self._realFinish = true\n            self.emit('finish')\n            self._realFinish = false\n          })\n          return\n        }\n        self._realFinish = true\n        self.emit('finish')\n        self._realFinish = false\n      })\n    }\n  } else { WritableStream.prototype.emit.apply(this, arguments) }\n}\n\nDicer.prototype._write = function (data, encoding, cb) {\n  // ignore unexpected data (e.g. extra trailer data after finished)\n  if (!this._hparser && !this._bparser) { return cb() }\n\n  if (this._headerFirst && this._isPreamble) {\n    if (!this._part) {\n      this._part = new PartStream(this._partOpts)\n      if (this._events.preamble) { this.emit('preamble', this._part) } else { this._ignore() }\n    }\n    const r = this._hparser.push(data)\n    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }\n  }\n\n  // allows for \"easier\" testing\n  if (this._firstWrite) {\n    this._bparser.push(B_CRLF)\n    this._firstWrite = false\n  }\n\n  this._bparser.push(data)\n\n  if (this._pause) { this._cb = cb } else { cb() }\n}\n\nDicer.prototype.reset = function () {\n  this._part = undefined\n  this._bparser = undefined\n  this._hparser = undefined\n}\n\nDicer.prototype.setBoundary = function (boundary) {\n  const self = this\n  this._bparser = new StreamSearch('\\r\\n--' + boundary)\n  this._bparser.on('info', function (isMatch, data, start, end) {\n    self._oninfo(isMatch, data, start, end)\n  })\n}\n\nDicer.prototype._ignore = function () {\n  if (this._part && !this._ignoreData) {\n    this._ignoreData = true\n    this._part.on('error', EMPTY_FN)\n    // we must perform some kind of read on the stream even though we are\n    // ignoring the data, otherwise node's Readable stream will not emit 'end'\n    // after pushing null to the stream\n    this._part.resume()\n  }\n}\n\nDicer.prototype._oninfo = function (isMatch, data, start, end) {\n  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true\n\n  if (!this._part && this._justMatched && data) {\n    while (this._dashes < 2 && (start + i) < end) {\n      if (data[start + i] === DASH) {\n        ++i\n        ++this._dashes\n      } else {\n        if (this._dashes) { buf = B_ONEDASH }\n        this._dashes = 0\n        break\n      }\n    }\n    if (this._dashes === 2) {\n      if ((start + i) < end && this._events.trailer) { this.emit('trailer', data.slice(start + i, end)) }\n      this.reset()\n      this._finished = true\n      // no more parts will be added\n      if (self._parts === 0) {\n        self._realFinish = true\n        self.emit('finish')\n        self._realFinish = false\n      }\n    }\n    if (this._dashes) { return }\n  }\n  if (this._justMatched) { this._justMatched = false }\n  if (!this._part) {\n    this._part = new PartStream(this._partOpts)\n    this._part._read = function (n) {\n      self._unpause()\n    }\n    if (this._isPreamble && this._events.preamble) { this.emit('preamble', this._part) } else if (this._isPreamble !== true && this._events.part) { this.emit('part', this._part) } else { this._ignore() }\n    if (!this._isPreamble) { this._inHeader = true }\n  }\n  if (data && start < end && !this._ignoreData) {\n    if (this._isPreamble || !this._inHeader) {\n      if (buf) { shouldWriteMore = this._part.push(buf) }\n      shouldWriteMore = this._part.push(data.slice(start, end))\n      if (!shouldWriteMore) { this._pause = true }\n    } else if (!this._isPreamble && this._inHeader) {\n      if (buf) { this._hparser.push(buf) }\n      r = this._hparser.push(data.slice(start, end))\n      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }\n    }\n  }\n  if (isMatch) {\n    this._hparser.reset()\n    if (this._isPreamble) { this._isPreamble = false } else {\n      if (start !== end) {\n        ++this._parts\n        this._part.on('end', function () {\n          if (--self._parts === 0) {\n            if (self._finished) {\n              self._realFinish = true\n              self.emit('finish')\n              self._realFinish = false\n            } else {\n              self._unpause()\n            }\n          }\n        })\n      }\n    }\n    this._part.push(null)\n    this._part = undefined\n    this._ignoreData = false\n    this._justMatched = true\n    this._dashes = 0\n  }\n}\n\nDicer.prototype._unpause = function () {\n  if (!this._pause) { return }\n\n  this._pause = false\n  if (this._cb) {\n    const cb = this._cb\n    this._cb = undefined\n    cb()\n  }\n}\n\nmodule.exports = Dicer\n","'use strict'\n\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\nconst getLimit = require('../../../lib/utils/getLimit')\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst B_DCRLF = Buffer.from('\\r\\n\\r\\n')\nconst RE_CRLF = /\\r\\n/g\nconst RE_HDR = /^([^:]+):[ \\t]?([\\x00-\\xFF]+)?$/ // eslint-disable-line no-control-regex\n\nfunction HeaderParser (cfg) {\n  EventEmitter.call(this)\n\n  cfg = cfg || {}\n  const self = this\n  this.nread = 0\n  this.maxed = false\n  this.npairs = 0\n  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)\n  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)\n  this.buffer = ''\n  this.header = {}\n  this.finished = false\n  this.ss = new StreamSearch(B_DCRLF)\n  this.ss.on('info', function (isMatch, data, start, end) {\n    if (data && !self.maxed) {\n      if (self.nread + end - start >= self.maxHeaderSize) {\n        end = self.maxHeaderSize - self.nread + start\n        self.nread = self.maxHeaderSize\n        self.maxed = true\n      } else { self.nread += (end - start) }\n\n      self.buffer += data.toString('binary', start, end)\n    }\n    if (isMatch) { self._finish() }\n  })\n}\ninherits(HeaderParser, EventEmitter)\n\nHeaderParser.prototype.push = function (data) {\n  const r = this.ss.push(data)\n  if (this.finished) { return r }\n}\n\nHeaderParser.prototype.reset = function () {\n  this.finished = false\n  this.buffer = ''\n  this.header = {}\n  this.ss.reset()\n}\n\nHeaderParser.prototype._finish = function () {\n  if (this.buffer) { this._parseHeader() }\n  this.ss.matches = this.ss.maxMatches\n  const header = this.header\n  this.header = {}\n  this.buffer = ''\n  this.finished = true\n  this.nread = this.npairs = 0\n  this.maxed = false\n  this.emit('header', header)\n}\n\nHeaderParser.prototype._parseHeader = function () {\n  if (this.npairs === this.maxHeaderPairs) { return }\n\n  const lines = this.buffer.split(RE_CRLF)\n  const len = lines.length\n  let m, h\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (lines[i].length === 0) { continue }\n    if (lines[i][0] === '\\t' || lines[i][0] === ' ') {\n      // folded header content\n      // RFC2822 says to just remove the CRLF and not the whitespace following\n      // it, so we follow the RFC and include the leading whitespace ...\n      if (h) {\n        this.header[h][this.header[h].length - 1] += lines[i]\n        continue\n      }\n    }\n\n    const posColon = lines[i].indexOf(':')\n    if (\n      posColon === -1 ||\n      posColon === 0\n    ) {\n      return\n    }\n    m = RE_HDR.exec(lines[i])\n    h = m[1].toLowerCase()\n    this.header[h] = this.header[h] || []\n    this.header[h].push((m[2] || ''))\n    if (++this.npairs === this.maxHeaderPairs) { break }\n  }\n}\n\nmodule.exports = HeaderParser\n","'use strict'\n\nconst inherits = require('node:util').inherits\nconst ReadableStream = require('node:stream').Readable\n\nfunction PartStream (opts) {\n  ReadableStream.call(this, opts)\n}\ninherits(PartStream, ReadableStream)\n\nPartStream.prototype._read = function (n) {}\n\nmodule.exports = PartStream\n","'use strict'\n\n/**\n * Copyright Brian White. All rights reserved.\n *\n * @see https://github.com/mscdex/streamsearch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n */\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\n\nfunction SBMH (needle) {\n  if (typeof needle === 'string') {\n    needle = Buffer.from(needle)\n  }\n\n  if (!Buffer.isBuffer(needle)) {\n    throw new TypeError('The needle has to be a String or a Buffer.')\n  }\n\n  const needleLength = needle.length\n\n  if (needleLength === 0) {\n    throw new Error('The needle cannot be an empty String/Buffer.')\n  }\n\n  if (needleLength > 256) {\n    throw new Error('The needle cannot have a length bigger than 256.')\n  }\n\n  this.maxMatches = Infinity\n  this.matches = 0\n\n  this._occ = new Array(256)\n    .fill(needleLength) // Initialize occurrence table.\n  this._lookbehind_size = 0\n  this._needle = needle\n  this._bufpos = 0\n\n  this._lookbehind = Buffer.alloc(needleLength)\n\n  // Populate occurrence table with analysis of the needle,\n  // ignoring last letter.\n  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var\n    this._occ[needle[i]] = needleLength - 1 - i\n  }\n}\ninherits(SBMH, EventEmitter)\n\nSBMH.prototype.reset = function () {\n  this._lookbehind_size = 0\n  this.matches = 0\n  this._bufpos = 0\n}\n\nSBMH.prototype.push = function (chunk, pos) {\n  if (!Buffer.isBuffer(chunk)) {\n    chunk = Buffer.from(chunk, 'binary')\n  }\n  const chlen = chunk.length\n  this._bufpos = pos || 0\n  let r\n  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }\n  return r\n}\n\nSBMH.prototype._sbmh_feed = function (data) {\n  const len = data.length\n  const needle = this._needle\n  const needleLength = needle.length\n  const lastNeedleChar = needle[needleLength - 1]\n\n  // Positive: points to a position in `data`\n  //           pos == 3 points to data[3]\n  // Negative: points to a position in the lookbehind buffer\n  //           pos == -2 points to lookbehind[lookbehind_size - 2]\n  let pos = -this._lookbehind_size\n  let ch\n\n  if (pos < 0) {\n    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n    // search with character lookup code that considers both the\n    // lookbehind buffer and the current round's haystack data.\n    //\n    // Loop until\n    //   there is a match.\n    // or until\n    //   we've moved past the position that requires the\n    //   lookbehind buffer. In this case we switch to the\n    //   optimized loop.\n    // or until\n    //   the character to look at lies outside the haystack.\n    while (pos < 0 && pos <= len - needleLength) {\n      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)\n\n      if (\n        ch === lastNeedleChar &&\n        this._sbmh_memcmp(data, pos, needleLength - 1)\n      ) {\n        this._lookbehind_size = 0\n        ++this.matches\n        this.emit('info', true)\n\n        return (this._bufpos = pos + needleLength)\n      }\n      pos += this._occ[ch]\n    }\n\n    // No match.\n\n    if (pos < 0) {\n      // There's too few data for Boyer-Moore-Horspool to run,\n      // so let's use a different algorithm to skip as much as\n      // we can.\n      // Forward pos until\n      //   the trailing part of lookbehind + data\n      //   looks like the beginning of the needle\n      // or until\n      //   pos == 0\n      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }\n    }\n\n    if (pos >= 0) {\n      // Discard lookbehind buffer.\n      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)\n      this._lookbehind_size = 0\n    } else {\n      // Cut off part of the lookbehind buffer that has\n      // been processed and append the entire haystack\n      // into it.\n      const bytesToCutOff = this._lookbehind_size + pos\n      if (bytesToCutOff > 0) {\n        // The cut off data is guaranteed not to contain the needle.\n        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)\n      }\n\n      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,\n        this._lookbehind_size - bytesToCutOff)\n      this._lookbehind_size -= bytesToCutOff\n\n      data.copy(this._lookbehind, this._lookbehind_size)\n      this._lookbehind_size += len\n\n      this._bufpos = len\n      return len\n    }\n  }\n\n  pos += (pos >= 0) * this._bufpos\n\n  // Lookbehind buffer is now empty. We only need to check if the\n  // needle is in the haystack.\n  if (data.indexOf(needle, pos) !== -1) {\n    pos = data.indexOf(needle, pos)\n    ++this.matches\n    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }\n\n    return (this._bufpos = pos + needleLength)\n  } else {\n    pos = len - needleLength\n  }\n\n  // There was no match. If there's trailing haystack data that we cannot\n  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n  // data is less than the needle size) then match using a modified\n  // algorithm that starts matching from the beginning instead of the end.\n  // Whatever trailing data is left after running this algorithm is added to\n  // the lookbehind buffer.\n  while (\n    pos < len &&\n    (\n      data[pos] !== needle[0] ||\n      (\n        (Buffer.compare(\n          data.subarray(pos, pos + len - pos),\n          needle.subarray(0, len - pos)\n        ) !== 0)\n      )\n    )\n  ) {\n    ++pos\n  }\n  if (pos < len) {\n    data.copy(this._lookbehind, 0, pos, pos + (len - pos))\n    this._lookbehind_size = len - pos\n  }\n\n  // Everything until pos is guaranteed not to contain needle data.\n  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }\n\n  this._bufpos = len\n  return len\n}\n\nSBMH.prototype._sbmh_lookup_char = function (data, pos) {\n  return (pos < 0)\n    ? this._lookbehind[this._lookbehind_size + pos]\n    : data[pos]\n}\n\nSBMH.prototype._sbmh_memcmp = function (data, pos, len) {\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }\n  }\n  return true\n}\n\nmodule.exports = SBMH\n","'use strict'\n\nconst WritableStream = require('node:stream').Writable\nconst { inherits } = require('node:util')\nconst Dicer = require('../deps/dicer/lib/Dicer')\n\nconst MultipartParser = require('./types/multipart')\nconst UrlencodedParser = require('./types/urlencoded')\nconst parseParams = require('./utils/parseParams')\n\nfunction Busboy (opts) {\n  if (!(this instanceof Busboy)) { return new Busboy(opts) }\n\n  if (typeof opts !== 'object') {\n    throw new TypeError('Busboy expected an options-Object.')\n  }\n  if (typeof opts.headers !== 'object') {\n    throw new TypeError('Busboy expected an options-Object with headers-attribute.')\n  }\n  if (typeof opts.headers['content-type'] !== 'string') {\n    throw new TypeError('Missing Content-Type-header.')\n  }\n\n  const {\n    headers,\n    ...streamOptions\n  } = opts\n\n  this.opts = {\n    autoDestroy: false,\n    ...streamOptions\n  }\n  WritableStream.call(this, this.opts)\n\n  this._done = false\n  this._parser = this.getParserByHeaders(headers)\n  this._finished = false\n}\ninherits(Busboy, WritableStream)\n\nBusboy.prototype.emit = function (ev) {\n  if (ev === 'finish') {\n    if (!this._done) {\n      this._parser?.end()\n      return\n    } else if (this._finished) {\n      return\n    }\n    this._finished = true\n  }\n  WritableStream.prototype.emit.apply(this, arguments)\n}\n\nBusboy.prototype.getParserByHeaders = function (headers) {\n  const parsed = parseParams(headers['content-type'])\n\n  const cfg = {\n    defCharset: this.opts.defCharset,\n    fileHwm: this.opts.fileHwm,\n    headers,\n    highWaterMark: this.opts.highWaterMark,\n    isPartAFile: this.opts.isPartAFile,\n    limits: this.opts.limits,\n    parsedConType: parsed,\n    preservePath: this.opts.preservePath\n  }\n\n  if (MultipartParser.detect.test(parsed[0])) {\n    return new MultipartParser(this, cfg)\n  }\n  if (UrlencodedParser.detect.test(parsed[0])) {\n    return new UrlencodedParser(this, cfg)\n  }\n  throw new Error('Unsupported Content-Type.')\n}\n\nBusboy.prototype._write = function (chunk, encoding, cb) {\n  this._parser.write(chunk, cb)\n}\n\nmodule.exports = Busboy\nmodule.exports.default = Busboy\nmodule.exports.Busboy = Busboy\n\nmodule.exports.Dicer = Dicer\n","'use strict'\n\n// TODO:\n//  * support 1 nested multipart level\n//    (see second multipart example here:\n//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)\n//  * support limits.fieldNameSize\n//     -- this will require modifications to utils.parseParams\n\nconst { Readable } = require('node:stream')\nconst { inherits } = require('node:util')\n\nconst Dicer = require('../../deps/dicer/lib/Dicer')\n\nconst parseParams = require('../utils/parseParams')\nconst decodeText = require('../utils/decodeText')\nconst basename = require('../utils/basename')\nconst getLimit = require('../utils/getLimit')\n\nconst RE_BOUNDARY = /^boundary$/i\nconst RE_FIELD = /^form-data$/i\nconst RE_CHARSET = /^charset$/i\nconst RE_FILENAME = /^filename$/i\nconst RE_NAME = /^name$/i\n\nMultipart.detect = /^multipart\\/form-data/i\nfunction Multipart (boy, cfg) {\n  let i\n  let len\n  const self = this\n  let boundary\n  const limits = cfg.limits\n  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))\n  const parsedConType = cfg.parsedConType || []\n  const defCharset = cfg.defCharset || 'utf8'\n  const preservePath = cfg.preservePath\n  const fileOpts = { highWaterMark: cfg.fileHwm }\n\n  for (i = 0, len = parsedConType.length; i < len; ++i) {\n    if (Array.isArray(parsedConType[i]) &&\n      RE_BOUNDARY.test(parsedConType[i][0])) {\n      boundary = parsedConType[i][1]\n      break\n    }\n  }\n\n  function checkFinished () {\n    if (nends === 0 && finished && !boy._done) {\n      finished = false\n      self.end()\n    }\n  }\n\n  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }\n\n  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)\n  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)\n  const filesLimit = getLimit(limits, 'files', Infinity)\n  const fieldsLimit = getLimit(limits, 'fields', Infinity)\n  const partsLimit = getLimit(limits, 'parts', Infinity)\n  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)\n  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)\n\n  let nfiles = 0\n  let nfields = 0\n  let nends = 0\n  let curFile\n  let curField\n  let finished = false\n\n  this._needDrain = false\n  this._pause = false\n  this._cb = undefined\n  this._nparts = 0\n  this._boy = boy\n\n  const parserCfg = {\n    boundary,\n    maxHeaderPairs: headerPairsLimit,\n    maxHeaderSize: headerSizeLimit,\n    partHwm: fileOpts.highWaterMark,\n    highWaterMark: cfg.highWaterMark\n  }\n\n  this.parser = new Dicer(parserCfg)\n  this.parser.on('drain', function () {\n    self._needDrain = false\n    if (self._cb && !self._pause) {\n      const cb = self._cb\n      self._cb = undefined\n      cb()\n    }\n  }).on('part', function onPart (part) {\n    if (++self._nparts > partsLimit) {\n      self.parser.removeListener('part', onPart)\n      self.parser.on('part', skipPart)\n      boy.hitPartsLimit = true\n      boy.emit('partsLimit')\n      return skipPart(part)\n    }\n\n    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let\n    // us emit 'end' early since we know the part has ended if we are already\n    // seeing the next part\n    if (curField) {\n      const field = curField\n      field.emit('end')\n      field.removeAllListeners('end')\n    }\n\n    part.on('header', function (header) {\n      let contype\n      let fieldname\n      let parsed\n      let charset\n      let encoding\n      let filename\n      let nsize = 0\n\n      if (header['content-type']) {\n        parsed = parseParams(header['content-type'][0])\n        if (parsed[0]) {\n          contype = parsed[0].toLowerCase()\n          for (i = 0, len = parsed.length; i < len; ++i) {\n            if (RE_CHARSET.test(parsed[i][0])) {\n              charset = parsed[i][1].toLowerCase()\n              break\n            }\n          }\n        }\n      }\n\n      if (contype === undefined) { contype = 'text/plain' }\n      if (charset === undefined) { charset = defCharset }\n\n      if (header['content-disposition']) {\n        parsed = parseParams(header['content-disposition'][0])\n        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }\n        for (i = 0, len = parsed.length; i < len; ++i) {\n          if (RE_NAME.test(parsed[i][0])) {\n            fieldname = parsed[i][1]\n          } else if (RE_FILENAME.test(parsed[i][0])) {\n            filename = parsed[i][1]\n            if (!preservePath) { filename = basename(filename) }\n          }\n        }\n      } else { return skipPart(part) }\n\n      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }\n\n      let onData,\n        onEnd\n\n      if (isPartAFile(fieldname, contype, filename)) {\n        // file/binary field\n        if (nfiles === filesLimit) {\n          if (!boy.hitFilesLimit) {\n            boy.hitFilesLimit = true\n            boy.emit('filesLimit')\n          }\n          return skipPart(part)\n        }\n\n        ++nfiles\n\n        if (!boy._events.file) {\n          self.parser._ignore()\n          return\n        }\n\n        ++nends\n        const file = new FileStream(fileOpts)\n        curFile = file\n        file.on('end', function () {\n          --nends\n          self._pause = false\n          checkFinished()\n          if (self._cb && !self._needDrain) {\n            const cb = self._cb\n            self._cb = undefined\n            cb()\n          }\n        })\n        file._read = function (n) {\n          if (!self._pause) { return }\n          self._pause = false\n          if (self._cb && !self._needDrain) {\n            const cb = self._cb\n            self._cb = undefined\n            cb()\n          }\n        }\n        boy.emit('file', fieldname, file, filename, encoding, contype)\n\n        onData = function (data) {\n          if ((nsize += data.length) > fileSizeLimit) {\n            const extralen = fileSizeLimit - nsize + data.length\n            if (extralen > 0) { file.push(data.slice(0, extralen)) }\n            file.truncated = true\n            file.bytesRead = fileSizeLimit\n            part.removeAllListeners('data')\n            file.emit('limit')\n            return\n          } else if (!file.push(data)) { self._pause = true }\n\n          file.bytesRead = nsize\n        }\n\n        onEnd = function () {\n          curFile = undefined\n          file.push(null)\n        }\n      } else {\n        // non-file field\n        if (nfields === fieldsLimit) {\n          if (!boy.hitFieldsLimit) {\n            boy.hitFieldsLimit = true\n            boy.emit('fieldsLimit')\n          }\n          return skipPart(part)\n        }\n\n        ++nfields\n        ++nends\n        let buffer = ''\n        let truncated = false\n        curField = part\n\n        onData = function (data) {\n          if ((nsize += data.length) > fieldSizeLimit) {\n            const extralen = (fieldSizeLimit - (nsize - data.length))\n            buffer += data.toString('binary', 0, extralen)\n            truncated = true\n            part.removeAllListeners('data')\n          } else { buffer += data.toString('binary') }\n        }\n\n        onEnd = function () {\n          curField = undefined\n          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }\n          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)\n          --nends\n          checkFinished()\n        }\n      }\n\n      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become\n         broken. Streams2/streams3 is a huge black box of confusion, but\n         somehow overriding the sync state seems to fix things again (and still\n         seems to work for previous node versions).\n      */\n      part._readableState.sync = false\n\n      part.on('data', onData)\n      part.on('end', onEnd)\n    }).on('error', function (err) {\n      if (curFile) { curFile.emit('error', err) }\n    })\n  }).on('error', function (err) {\n    boy.emit('error', err)\n  }).on('finish', function () {\n    finished = true\n    checkFinished()\n  })\n}\n\nMultipart.prototype.write = function (chunk, cb) {\n  const r = this.parser.write(chunk)\n  if (r && !this._pause) {\n    cb()\n  } else {\n    this._needDrain = !r\n    this._cb = cb\n  }\n}\n\nMultipart.prototype.end = function () {\n  const self = this\n\n  if (self.parser.writable) {\n    self.parser.end()\n  } else if (!self._boy._done) {\n    process.nextTick(function () {\n      self._boy._done = true\n      self._boy.emit('finish')\n    })\n  }\n}\n\nfunction skipPart (part) {\n  part.resume()\n}\n\nfunction FileStream (opts) {\n  Readable.call(this, opts)\n\n  this.bytesRead = 0\n\n  this.truncated = false\n}\n\ninherits(FileStream, Readable)\n\nFileStream.prototype._read = function (n) {}\n\nmodule.exports = Multipart\n","'use strict'\n\nconst Decoder = require('../utils/Decoder')\nconst decodeText = require('../utils/decodeText')\nconst getLimit = require('../utils/getLimit')\n\nconst RE_CHARSET = /^charset$/i\n\nUrlEncoded.detect = /^application\\/x-www-form-urlencoded/i\nfunction UrlEncoded (boy, cfg) {\n  const limits = cfg.limits\n  const parsedConType = cfg.parsedConType\n  this.boy = boy\n\n  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)\n  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)\n  this.fieldsLimit = getLimit(limits, 'fields', Infinity)\n\n  let charset\n  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var\n    if (Array.isArray(parsedConType[i]) &&\n        RE_CHARSET.test(parsedConType[i][0])) {\n      charset = parsedConType[i][1].toLowerCase()\n      break\n    }\n  }\n\n  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }\n\n  this.decoder = new Decoder()\n  this.charset = charset\n  this._fields = 0\n  this._state = 'key'\n  this._checkingBytes = true\n  this._bytesKey = 0\n  this._bytesVal = 0\n  this._key = ''\n  this._val = ''\n  this._keyTrunc = false\n  this._valTrunc = false\n  this._hitLimit = false\n}\n\nUrlEncoded.prototype.write = function (data, cb) {\n  if (this._fields === this.fieldsLimit) {\n    if (!this.boy.hitFieldsLimit) {\n      this.boy.hitFieldsLimit = true\n      this.boy.emit('fieldsLimit')\n    }\n    return cb()\n  }\n\n  let idxeq; let idxamp; let i; let p = 0; const len = data.length\n\n  while (p < len) {\n    if (this._state === 'key') {\n      idxeq = idxamp = undefined\n      for (i = p; i < len; ++i) {\n        if (!this._checkingBytes) { ++p }\n        if (data[i] === 0x3D/* = */) {\n          idxeq = i\n          break\n        } else if (data[i] === 0x26/* & */) {\n          idxamp = i\n          break\n        }\n        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {\n          this._hitLimit = true\n          break\n        } else if (this._checkingBytes) { ++this._bytesKey }\n      }\n\n      if (idxeq !== undefined) {\n        // key with assignment\n        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }\n        this._state = 'val'\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._val = ''\n        this._bytesVal = 0\n        this._valTrunc = false\n        this.decoder.reset()\n\n        p = idxeq + 1\n      } else if (idxamp !== undefined) {\n        // key with no assignment\n        ++this._fields\n        let key; const keyTrunc = this._keyTrunc\n        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._key = ''\n        this._bytesKey = 0\n        this._keyTrunc = false\n        this.decoder.reset()\n\n        if (key.length) {\n          this.boy.emit('field', decodeText(key, 'binary', this.charset),\n            '',\n            keyTrunc,\n            false)\n        }\n\n        p = idxamp + 1\n        if (this._fields === this.fieldsLimit) { return cb() }\n      } else if (this._hitLimit) {\n        // we may not have hit the actual limit if there are encoded bytes...\n        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }\n        p = i\n        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {\n          // yep, we actually did hit the limit\n          this._checkingBytes = false\n          this._keyTrunc = true\n        }\n      } else {\n        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }\n        p = len\n      }\n    } else {\n      idxamp = undefined\n      for (i = p; i < len; ++i) {\n        if (!this._checkingBytes) { ++p }\n        if (data[i] === 0x26/* & */) {\n          idxamp = i\n          break\n        }\n        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {\n          this._hitLimit = true\n          break\n        } else if (this._checkingBytes) { ++this._bytesVal }\n      }\n\n      if (idxamp !== undefined) {\n        ++this._fields\n        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }\n        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n          decodeText(this._val, 'binary', this.charset),\n          this._keyTrunc,\n          this._valTrunc)\n        this._state = 'key'\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._key = ''\n        this._bytesKey = 0\n        this._keyTrunc = false\n        this.decoder.reset()\n\n        p = idxamp + 1\n        if (this._fields === this.fieldsLimit) { return cb() }\n      } else if (this._hitLimit) {\n        // we may not have hit the actual limit if there are encoded bytes...\n        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }\n        p = i\n        if ((this._val === '' && this.fieldSizeLimit === 0) ||\n            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {\n          // yep, we actually did hit the limit\n          this._checkingBytes = false\n          this._valTrunc = true\n        }\n      } else {\n        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }\n        p = len\n      }\n    }\n  }\n  cb()\n}\n\nUrlEncoded.prototype.end = function () {\n  if (this.boy._done) { return }\n\n  if (this._state === 'key' && this._key.length > 0) {\n    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n      '',\n      this._keyTrunc,\n      false)\n  } else if (this._state === 'val') {\n    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n      decodeText(this._val, 'binary', this.charset),\n      this._keyTrunc,\n      this._valTrunc)\n  }\n  this.boy._done = true\n  this.boy.emit('finish')\n}\n\nmodule.exports = UrlEncoded\n","'use strict'\n\nconst RE_PLUS = /\\+/g\n\nconst HEX = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n]\n\nfunction Decoder () {\n  this.buffer = undefined\n}\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ')\n  let res = ''\n  let i = 0; let p = 0; const len = str.length\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer\n        this.buffer = undefined\n        --i // retry character\n      } else {\n        this.buffer += str[i]\n        ++p\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16))\n          this.buffer = undefined\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i)\n        p = i\n      }\n      this.buffer = ''\n      ++p\n    }\n  }\n  if (p < len && this.buffer === undefined) { res += str.substring(p) }\n  return res\n}\nDecoder.prototype.reset = function () {\n  this.buffer = undefined\n}\n\nmodule.exports = Decoder\n","'use strict'\n\nmodule.exports = function basename (path) {\n  if (typeof path !== 'string') { return '' }\n  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C: // '\\'\n        path = path.slice(i + 1)\n        return (path === '..' || path === '.' ? '' : path)\n    }\n  }\n  return (path === '..' || path === '.' ? '' : path)\n}\n","'use strict'\n\n// Node has always utf-8\nconst utf8Decoder = new TextDecoder('utf-8')\nconst textDecoders = new Map([\n  ['utf-8', utf8Decoder],\n  ['utf8', utf8Decoder]\n])\n\nfunction getDecoder (charset) {\n  let lc\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le\n      case 'base64':\n        return decoders.base64\n      default:\n        if (lc === undefined) {\n          lc = true\n          charset = charset.toLowerCase()\n          continue\n        }\n        return decoders.other.bind(charset)\n    }\n  }\n}\n\nconst decoders = {\n  utf8: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.utf8Slice(0, data.length)\n  },\n\n  latin1: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      return data\n    }\n    return data.latin1Slice(0, data.length)\n  },\n\n  utf16le: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.ucs2Slice(0, data.length)\n  },\n\n  base64: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.base64Slice(0, data.length)\n  },\n\n  other: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n\n    if (textDecoders.has(this.toString())) {\n      try {\n        return textDecoders.get(this).decode(data)\n      } catch (e) { }\n    }\n    return typeof data === 'string'\n      ? data\n      : data.toString()\n  }\n}\n\nfunction decodeText (text, sourceEncoding, destEncoding) {\n  if (text) {\n    return getDecoder(destEncoding)(text, sourceEncoding)\n  }\n  return text\n}\n\nmodule.exports = decodeText\n","'use strict'\n\nmodule.exports = function getLimit (limits, name, defaultLimit) {\n  if (\n    !limits ||\n    limits[name] === undefined ||\n    limits[name] === null\n  ) { return defaultLimit }\n\n  if (\n    typeof limits[name] !== 'number' ||\n    isNaN(limits[name])\n  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }\n\n  return limits[name]\n}\n","/* eslint-disable object-property-newline */\n'use strict'\n\nconst decodeText = require('./decodeText')\n\nconst RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g\n\nconst EncodedLookup = {\n  '%00': '\\x00', '%01': '\\x01', '%02': '\\x02', '%03': '\\x03', '%04': '\\x04',\n  '%05': '\\x05', '%06': '\\x06', '%07': '\\x07', '%08': '\\x08', '%09': '\\x09',\n  '%0a': '\\x0a', '%0A': '\\x0a', '%0b': '\\x0b', '%0B': '\\x0b', '%0c': '\\x0c',\n  '%0C': '\\x0c', '%0d': '\\x0d', '%0D': '\\x0d', '%0e': '\\x0e', '%0E': '\\x0e',\n  '%0f': '\\x0f', '%0F': '\\x0f', '%10': '\\x10', '%11': '\\x11', '%12': '\\x12',\n  '%13': '\\x13', '%14': '\\x14', '%15': '\\x15', '%16': '\\x16', '%17': '\\x17',\n  '%18': '\\x18', '%19': '\\x19', '%1a': '\\x1a', '%1A': '\\x1a', '%1b': '\\x1b',\n  '%1B': '\\x1b', '%1c': '\\x1c', '%1C': '\\x1c', '%1d': '\\x1d', '%1D': '\\x1d',\n  '%1e': '\\x1e', '%1E': '\\x1e', '%1f': '\\x1f', '%1F': '\\x1f', '%20': '\\x20',\n  '%21': '\\x21', '%22': '\\x22', '%23': '\\x23', '%24': '\\x24', '%25': '\\x25',\n  '%26': '\\x26', '%27': '\\x27', '%28': '\\x28', '%29': '\\x29', '%2a': '\\x2a',\n  '%2A': '\\x2a', '%2b': '\\x2b', '%2B': '\\x2b', '%2c': '\\x2c', '%2C': '\\x2c',\n  '%2d': '\\x2d', '%2D': '\\x2d', '%2e': '\\x2e', '%2E': '\\x2e', '%2f': '\\x2f',\n  '%2F': '\\x2f', '%30': '\\x30', '%31': '\\x31', '%32': '\\x32', '%33': '\\x33',\n  '%34': '\\x34', '%35': '\\x35', '%36': '\\x36', '%37': '\\x37', '%38': '\\x38',\n  '%39': '\\x39', '%3a': '\\x3a', '%3A': '\\x3a', '%3b': '\\x3b', '%3B': '\\x3b',\n  '%3c': '\\x3c', '%3C': '\\x3c', '%3d': '\\x3d', '%3D': '\\x3d', '%3e': '\\x3e',\n  '%3E': '\\x3e', '%3f': '\\x3f', '%3F': '\\x3f', '%40': '\\x40', '%41': '\\x41',\n  '%42': '\\x42', '%43': '\\x43', '%44': '\\x44', '%45': '\\x45', '%46': '\\x46',\n  '%47': '\\x47', '%48': '\\x48', '%49': '\\x49', '%4a': '\\x4a', '%4A': '\\x4a',\n  '%4b': '\\x4b', '%4B': '\\x4b', '%4c': '\\x4c', '%4C': '\\x4c', '%4d': '\\x4d',\n  '%4D': '\\x4d', '%4e': '\\x4e', '%4E': '\\x4e', '%4f': '\\x4f', '%4F': '\\x4f',\n  '%50': '\\x50', '%51': '\\x51', '%52': '\\x52', '%53': '\\x53', '%54': '\\x54',\n  '%55': '\\x55', '%56': '\\x56', '%57': '\\x57', '%58': '\\x58', '%59': '\\x59',\n  '%5a': '\\x5a', '%5A': '\\x5a', '%5b': '\\x5b', '%5B': '\\x5b', '%5c': '\\x5c',\n  '%5C': '\\x5c', '%5d': '\\x5d', '%5D': '\\x5d', '%5e': '\\x5e', '%5E': '\\x5e',\n  '%5f': '\\x5f', '%5F': '\\x5f', '%60': '\\x60', '%61': '\\x61', '%62': '\\x62',\n  '%63': '\\x63', '%64': '\\x64', '%65': '\\x65', '%66': '\\x66', '%67': '\\x67',\n  '%68': '\\x68', '%69': '\\x69', '%6a': '\\x6a', '%6A': '\\x6a', '%6b': '\\x6b',\n  '%6B': '\\x6b', '%6c': '\\x6c', '%6C': '\\x6c', '%6d': '\\x6d', '%6D': '\\x6d',\n  '%6e': '\\x6e', '%6E': '\\x6e', '%6f': '\\x6f', '%6F': '\\x6f', '%70': '\\x70',\n  '%71': '\\x71', '%72': '\\x72', '%73': '\\x73', '%74': '\\x74', '%75': '\\x75',\n  '%76': '\\x76', '%77': '\\x77', '%78': '\\x78', '%79': '\\x79', '%7a': '\\x7a',\n  '%7A': '\\x7a', '%7b': '\\x7b', '%7B': '\\x7b', '%7c': '\\x7c', '%7C': '\\x7c',\n  '%7d': '\\x7d', '%7D': '\\x7d', '%7e': '\\x7e', '%7E': '\\x7e', '%7f': '\\x7f',\n  '%7F': '\\x7f', '%80': '\\x80', '%81': '\\x81', '%82': '\\x82', '%83': '\\x83',\n  '%84': '\\x84', '%85': '\\x85', '%86': '\\x86', '%87': '\\x87', '%88': '\\x88',\n  '%89': '\\x89', '%8a': '\\x8a', '%8A': '\\x8a', '%8b': '\\x8b', '%8B': '\\x8b',\n  '%8c': '\\x8c', '%8C': '\\x8c', '%8d': '\\x8d', '%8D': '\\x8d', '%8e': '\\x8e',\n  '%8E': '\\x8e', '%8f': '\\x8f', '%8F': '\\x8f', '%90': '\\x90', '%91': '\\x91',\n  '%92': '\\x92', '%93': '\\x93', '%94': '\\x94', '%95': '\\x95', '%96': '\\x96',\n  '%97': '\\x97', '%98': '\\x98', '%99': '\\x99', '%9a': '\\x9a', '%9A': '\\x9a',\n  '%9b': '\\x9b', '%9B': '\\x9b', '%9c': '\\x9c', '%9C': '\\x9c', '%9d': '\\x9d',\n  '%9D': '\\x9d', '%9e': '\\x9e', '%9E': '\\x9e', '%9f': '\\x9f', '%9F': '\\x9f',\n  '%a0': '\\xa0', '%A0': '\\xa0', '%a1': '\\xa1', '%A1': '\\xa1', '%a2': '\\xa2',\n  '%A2': '\\xa2', '%a3': '\\xa3', '%A3': '\\xa3', '%a4': '\\xa4', '%A4': '\\xa4',\n  '%a5': '\\xa5', '%A5': '\\xa5', '%a6': '\\xa6', '%A6': '\\xa6', '%a7': '\\xa7',\n  '%A7': '\\xa7', '%a8': '\\xa8', '%A8': '\\xa8', '%a9': '\\xa9', '%A9': '\\xa9',\n  '%aa': '\\xaa', '%Aa': '\\xaa', '%aA': '\\xaa', '%AA': '\\xaa', '%ab': '\\xab',\n  '%Ab': '\\xab', '%aB': '\\xab', '%AB': '\\xab', '%ac': '\\xac', '%Ac': '\\xac',\n  '%aC': '\\xac', '%AC': '\\xac', '%ad': '\\xad', '%Ad': '\\xad', '%aD': '\\xad',\n  '%AD': '\\xad', '%ae': '\\xae', '%Ae': '\\xae', '%aE': '\\xae', '%AE': '\\xae',\n  '%af': '\\xaf', '%Af': '\\xaf', '%aF': '\\xaf', '%AF': '\\xaf', '%b0': '\\xb0',\n  '%B0': '\\xb0', '%b1': '\\xb1', '%B1': '\\xb1', '%b2': '\\xb2', '%B2': '\\xb2',\n  '%b3': '\\xb3', '%B3': '\\xb3', '%b4': '\\xb4', '%B4': '\\xb4', '%b5': '\\xb5',\n  '%B5': '\\xb5', '%b6': '\\xb6', '%B6': '\\xb6', '%b7': '\\xb7', '%B7': '\\xb7',\n  '%b8': '\\xb8', '%B8': '\\xb8', '%b9': '\\xb9', '%B9': '\\xb9', '%ba': '\\xba',\n  '%Ba': '\\xba', '%bA': '\\xba', '%BA': '\\xba', '%bb': '\\xbb', '%Bb': '\\xbb',\n  '%bB': '\\xbb', '%BB': '\\xbb', '%bc': '\\xbc', '%Bc': '\\xbc', '%bC': '\\xbc',\n  '%BC': '\\xbc', '%bd': '\\xbd', '%Bd': '\\xbd', '%bD': '\\xbd', '%BD': '\\xbd',\n  '%be': '\\xbe', '%Be': '\\xbe', '%bE': '\\xbe', '%BE': '\\xbe', '%bf': '\\xbf',\n  '%Bf': '\\xbf', '%bF': '\\xbf', '%BF': '\\xbf', '%c0': '\\xc0', '%C0': '\\xc0',\n  '%c1': '\\xc1', '%C1': '\\xc1', '%c2': '\\xc2', '%C2': '\\xc2', '%c3': '\\xc3',\n  '%C3': '\\xc3', '%c4': '\\xc4', '%C4': '\\xc4', '%c5': '\\xc5', '%C5': '\\xc5',\n  '%c6': '\\xc6', '%C6': '\\xc6', '%c7': '\\xc7', '%C7': '\\xc7', '%c8': '\\xc8',\n  '%C8': '\\xc8', '%c9': '\\xc9', '%C9': '\\xc9', '%ca': '\\xca', '%Ca': '\\xca',\n  '%cA': '\\xca', '%CA': '\\xca', '%cb': '\\xcb', '%Cb': '\\xcb', '%cB': '\\xcb',\n  '%CB': '\\xcb', '%cc': '\\xcc', '%Cc': '\\xcc', '%cC': '\\xcc', '%CC': '\\xcc',\n  '%cd': '\\xcd', '%Cd': '\\xcd', '%cD': '\\xcd', '%CD': '\\xcd', '%ce': '\\xce',\n  '%Ce': '\\xce', '%cE': '\\xce', '%CE': '\\xce', '%cf': '\\xcf', '%Cf': '\\xcf',\n  '%cF': '\\xcf', '%CF': '\\xcf', '%d0': '\\xd0', '%D0': '\\xd0', '%d1': '\\xd1',\n  '%D1': '\\xd1', '%d2': '\\xd2', '%D2': '\\xd2', '%d3': '\\xd3', '%D3': '\\xd3',\n  '%d4': '\\xd4', '%D4': '\\xd4', '%d5': '\\xd5', '%D5': '\\xd5', '%d6': '\\xd6',\n  '%D6': '\\xd6', '%d7': '\\xd7', '%D7': '\\xd7', '%d8': '\\xd8', '%D8': '\\xd8',\n  '%d9': '\\xd9', '%D9': '\\xd9', '%da': '\\xda', '%Da': '\\xda', '%dA': '\\xda',\n  '%DA': '\\xda', '%db': '\\xdb', '%Db': '\\xdb', '%dB': '\\xdb', '%DB': '\\xdb',\n  '%dc': '\\xdc', '%Dc': '\\xdc', '%dC': '\\xdc', '%DC': '\\xdc', '%dd': '\\xdd',\n  '%Dd': '\\xdd', '%dD': '\\xdd', '%DD': '\\xdd', '%de': '\\xde', '%De': '\\xde',\n  '%dE': '\\xde', '%DE': '\\xde', '%df': '\\xdf', '%Df': '\\xdf', '%dF': '\\xdf',\n  '%DF': '\\xdf', '%e0': '\\xe0', '%E0': '\\xe0', '%e1': '\\xe1', '%E1': '\\xe1',\n  '%e2': '\\xe2', '%E2': '\\xe2', '%e3': '\\xe3', '%E3': '\\xe3', '%e4': '\\xe4',\n  '%E4': '\\xe4', '%e5': '\\xe5', '%E5': '\\xe5', '%e6': '\\xe6', '%E6': '\\xe6',\n  '%e7': '\\xe7', '%E7': '\\xe7', '%e8': '\\xe8', '%E8': '\\xe8', '%e9': '\\xe9',\n  '%E9': '\\xe9', '%ea': '\\xea', '%Ea': '\\xea', '%eA': '\\xea', '%EA': '\\xea',\n  '%eb': '\\xeb', '%Eb': '\\xeb', '%eB': '\\xeb', '%EB': '\\xeb', '%ec': '\\xec',\n  '%Ec': '\\xec', '%eC': '\\xec', '%EC': '\\xec', '%ed': '\\xed', '%Ed': '\\xed',\n  '%eD': '\\xed', '%ED': '\\xed', '%ee': '\\xee', '%Ee': '\\xee', '%eE': '\\xee',\n  '%EE': '\\xee', '%ef': '\\xef', '%Ef': '\\xef', '%eF': '\\xef', '%EF': '\\xef',\n  '%f0': '\\xf0', '%F0': '\\xf0', '%f1': '\\xf1', '%F1': '\\xf1', '%f2': '\\xf2',\n  '%F2': '\\xf2', '%f3': '\\xf3', '%F3': '\\xf3', '%f4': '\\xf4', '%F4': '\\xf4',\n  '%f5': '\\xf5', '%F5': '\\xf5', '%f6': '\\xf6', '%F6': '\\xf6', '%f7': '\\xf7',\n  '%F7': '\\xf7', '%f8': '\\xf8', '%F8': '\\xf8', '%f9': '\\xf9', '%F9': '\\xf9',\n  '%fa': '\\xfa', '%Fa': '\\xfa', '%fA': '\\xfa', '%FA': '\\xfa', '%fb': '\\xfb',\n  '%Fb': '\\xfb', '%fB': '\\xfb', '%FB': '\\xfb', '%fc': '\\xfc', '%Fc': '\\xfc',\n  '%fC': '\\xfc', '%FC': '\\xfc', '%fd': '\\xfd', '%Fd': '\\xfd', '%fD': '\\xfd',\n  '%FD': '\\xfd', '%fe': '\\xfe', '%Fe': '\\xfe', '%fE': '\\xfe', '%FE': '\\xfe',\n  '%ff': '\\xff', '%Ff': '\\xff', '%fF': '\\xff', '%FF': '\\xff'\n}\n\nfunction encodedReplacer (match) {\n  return EncodedLookup[match]\n}\n\nconst STATE_KEY = 0\nconst STATE_VALUE = 1\nconst STATE_CHARSET = 2\nconst STATE_LANG = 3\n\nfunction parseParams (str) {\n  const res = []\n  let state = STATE_KEY\n  let charset = ''\n  let inquote = false\n  let escaping = false\n  let p = 0\n  let tmp = ''\n  const len = str.length\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    const char = str[i]\n    if (char === '\\\\' && inquote) {\n      if (escaping) { escaping = false } else {\n        escaping = true\n        continue\n      }\n    } else if (char === '\"') {\n      if (!escaping) {\n        if (inquote) {\n          inquote = false\n          state = STATE_KEY\n        } else { inquote = true }\n        continue\n      } else { escaping = false }\n    } else {\n      if (escaping && inquote) { tmp += '\\\\' }\n      escaping = false\n      if ((state === STATE_CHARSET || state === STATE_LANG) && char === \"'\") {\n        if (state === STATE_CHARSET) {\n          state = STATE_LANG\n          charset = tmp.substring(1)\n        } else { state = STATE_VALUE }\n        tmp = ''\n        continue\n      } else if (state === STATE_KEY &&\n        (char === '*' || char === '=') &&\n        res.length) {\n        state = char === '*'\n          ? STATE_CHARSET\n          : STATE_VALUE\n        res[p] = [tmp, undefined]\n        tmp = ''\n        continue\n      } else if (!inquote && char === ';') {\n        state = STATE_KEY\n        if (charset) {\n          if (tmp.length) {\n            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n              'binary',\n              charset)\n          }\n          charset = ''\n        } else if (tmp.length) {\n          tmp = decodeText(tmp, 'binary', 'utf8')\n        }\n        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }\n        tmp = ''\n        ++p\n        continue\n      } else if (!inquote && (char === ' ' || char === '\\t')) { continue }\n    }\n    tmp += char\n  }\n  if (charset && tmp.length) {\n    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n      'binary',\n      charset)\n  } else if (tmp) {\n    tmp = decodeText(tmp, 'binary', 'utf8')\n  }\n\n  if (res[p] === undefined) {\n    if (tmp) { res[p] = tmp }\n  } else { res[p][1] = tmp }\n\n  return res\n}\n\nmodule.exports = parseParams\n","/**\n * @license\n * web-streams-polyfill v4.0.0-beta.3\n * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */\nconst e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;function t(){}function r(e){return\"object\"==typeof e&&null!==e||\"function\"==typeof e}const o=t;function n(e,t){try{Object.defineProperty(e,\"name\",{value:t,configurable:!0})}catch(e){}}const a=Promise,i=Promise.prototype.then,l=Promise.resolve.bind(a),s=Promise.reject.bind(a);function u(e){return new a(e)}function c(e){return l(e)}function d(e){return s(e)}function f(e,t,r){return i.call(e,t,r)}function b(e,t,r){f(f(e,t,r),void 0,o)}function h(e,t){b(e,t)}function _(e,t){b(e,void 0,t)}function p(e,t,r){return f(e,t,r)}function m(e){f(e,void 0,o)}let y=e=>{if(\"function\"==typeof queueMicrotask)y=queueMicrotask;else{const e=c(void 0);y=t=>f(e,t)}return y(e)};function g(e,t,r){if(\"function\"!=typeof e)throw new TypeError(\"Argument is not a function\");return Function.prototype.apply.call(e,t,r)}function w(e,t,r){try{return c(g(e,t,r))}catch(e){return d(e)}}class S{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let o=r+1;const n=e._elements,a=n[r];return 16384===o&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,a}forEach(e){let t=this._cursor,r=this._front,o=r._elements;for(;!(t===o.length&&void 0===r._next||t===o.length&&(r=r._next,o=r._elements,t=0,0===o.length));)e(o[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}const v=e(\"[[AbortSteps]]\"),R=e(\"[[ErrorSteps]]\"),T=e(\"[[CancelSteps]]\"),q=e(\"[[PullSteps]]\"),C=e(\"[[ReleaseSteps]]\");function E(e,t){e._ownerReadableStream=t,t._reader=e,\"readable\"===t._state?O(e):\"closed\"===t._state?function(e){O(e),j(e)}(e):B(e,t._storedError)}function P(e,t){return Gt(e._ownerReadableStream,t)}function W(e){const t=e._ownerReadableStream;\"readable\"===t._state?A(e,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")):function(e,t){B(e,t)}(e,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")),t._readableStreamController[C](),t._reader=void 0,e._ownerReadableStream=void 0}function k(e){return new TypeError(\"Cannot \"+e+\" a stream using a released reader\")}function O(e){e._closedPromise=u(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function B(e,t){O(e),A(e,t)}function A(e,t){void 0!==e._closedPromise_reject&&(m(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function j(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}const z=Number.isFinite||function(e){return\"number\"==typeof e&&isFinite(e)},L=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function F(e,t){if(void 0!==e&&(\"object\"!=typeof(r=e)&&\"function\"!=typeof r))throw new TypeError(`${t} is not an object.`);var r}function I(e,t){if(\"function\"!=typeof e)throw new TypeError(`${t} is not a function.`)}function D(e,t){if(!function(e){return\"object\"==typeof e&&null!==e||\"function\"==typeof e}(e))throw new TypeError(`${t} is not an object.`)}function $(e,t,r){if(void 0===e)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}function M(e,t,r){if(void 0===e)throw new TypeError(`${t} is required in '${r}'.`)}function Y(e){return Number(e)}function Q(e){return 0===e?0:e}function N(e,t){const r=Number.MAX_SAFE_INTEGER;let o=Number(e);if(o=Q(o),!z(o))throw new TypeError(`${t} is not a finite number`);if(o=function(e){return Q(L(e))}(o),o<0||o>r)throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);return z(o)&&0!==o?o:0}function H(e){if(!r(e))return!1;if(\"function\"!=typeof e.getReader)return!1;try{return\"boolean\"==typeof e.locked}catch(e){return!1}}function x(e){if(!r(e))return!1;if(\"function\"!=typeof e.getWriter)return!1;try{return\"boolean\"==typeof e.locked}catch(e){return!1}}function V(e,t){if(!Vt(e))throw new TypeError(`${t} is not a ReadableStream.`)}function U(e,t){e._reader._readRequests.push(t)}function G(e,t,r){const o=e._reader._readRequests.shift();r?o._closeSteps():o._chunkSteps(t)}function X(e){return e._reader._readRequests.length}function J(e){const t=e._reader;return void 0!==t&&!!K(t)}class ReadableStreamDefaultReader{constructor(e){if($(e,1,\"ReadableStreamDefaultReader\"),V(e,\"First parameter\"),Ut(e))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");E(this,e),this._readRequests=new S}get closed(){return K(this)?this._closedPromise:d(ee(\"closed\"))}cancel(e){return K(this)?void 0===this._ownerReadableStream?d(k(\"cancel\")):P(this,e):d(ee(\"cancel\"))}read(){if(!K(this))return d(ee(\"read\"));if(void 0===this._ownerReadableStream)return d(k(\"read from\"));let e,t;const r=u(((r,o)=>{e=r,t=o}));return function(e,t){const r=e._ownerReadableStream;r._disturbed=!0,\"closed\"===r._state?t._closeSteps():\"errored\"===r._state?t._errorSteps(r._storedError):r._readableStreamController[q](t)}(this,{_chunkSteps:t=>e({value:t,done:!1}),_closeSteps:()=>e({value:void 0,done:!0}),_errorSteps:e=>t(e)}),r}releaseLock(){if(!K(this))throw ee(\"releaseLock\");void 0!==this._ownerReadableStream&&function(e){W(e);const t=new TypeError(\"Reader was released\");Z(e,t)}(this)}}function K(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_readRequests\")&&e instanceof ReadableStreamDefaultReader)}function Z(e,t){const r=e._readRequests;e._readRequests=new S,r.forEach((e=>{e._errorSteps(t)}))}function ee(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(ReadableStreamDefaultReader.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),n(ReadableStreamDefaultReader.prototype.cancel,\"cancel\"),n(ReadableStreamDefaultReader.prototype.read,\"read\"),n(ReadableStreamDefaultReader.prototype.releaseLock,\"releaseLock\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamDefaultReader.prototype,e.toStringTag,{value:\"ReadableStreamDefaultReader\",configurable:!0});class te{constructor(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}next(){const e=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?p(this._ongoingPromise,e,e):e(),this._ongoingPromise}return(e){const t=()=>this._returnSteps(e);return this._ongoingPromise?p(this._ongoingPromise,t,t):t()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const e=this._reader;return void 0===e?d(k(\"iterate\")):f(e.read(),(e=>{var t;return this._ongoingPromise=void 0,e.done&&(this._isFinished=!0,null===(t=this._reader)||void 0===t||t.releaseLock(),this._reader=void 0),e}),(e=>{var t;throw this._ongoingPromise=void 0,this._isFinished=!0,null===(t=this._reader)||void 0===t||t.releaseLock(),this._reader=void 0,e}))}_returnSteps(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;const t=this._reader;if(void 0===t)return d(k(\"finish iterating\"));if(this._reader=void 0,!this._preventCancel){const r=t.cancel(e);return t.releaseLock(),p(r,(()=>({value:e,done:!0})))}return t.releaseLock(),c({value:e,done:!0})}}const re={next(){return oe(this)?this._asyncIteratorImpl.next():d(ne(\"next\"))},return(e){return oe(this)?this._asyncIteratorImpl.return(e):d(ne(\"return\"))}};function oe(e){if(!r(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,\"_asyncIteratorImpl\"))return!1;try{return e._asyncIteratorImpl instanceof te}catch(e){return!1}}function ne(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}\"symbol\"==typeof e.asyncIterator&&Object.defineProperty(re,e.asyncIterator,{value(){return this},writable:!0,configurable:!0});const ae=Number.isNaN||function(e){return e!=e};function ie(e,t,r,o,n){new Uint8Array(e).set(new Uint8Array(r,o,n),t)}function le(e){const t=function(e,t,r){if(e.slice)return e.slice(t,r);const o=r-t,n=new ArrayBuffer(o);return ie(n,0,e,t,o),n}(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function se(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function ue(e,t,r){if(\"number\"!=typeof(o=r)||ae(o)||o<0||r===1/0)throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");var o;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function ce(e){e._queue=new S,e._queueTotalSize=0}class ReadableStreamBYOBRequest{constructor(){throw new TypeError(\"Illegal constructor\")}get view(){if(!fe(this))throw Be(\"view\");return this._view}respond(e){if(!fe(this))throw Be(\"respond\");if($(e,1,\"respond\"),e=N(e,\"First parameter\"),void 0===this._associatedReadableByteStreamController)throw new TypeError(\"This BYOB request has been invalidated\");this._view.buffer,function(e,t){const r=e._pendingPullIntos.peek();if(\"closed\"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\")}else{if(0===t)throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");if(r.bytesFilled+t>r.byteLength)throw new RangeError(\"bytesWritten out of range\")}r.buffer=r.buffer,qe(e,t)}(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!fe(this))throw Be(\"respondWithNewView\");if($(e,1,\"respondWithNewView\"),!ArrayBuffer.isView(e))throw new TypeError(\"You can only respond with array buffer views\");if(void 0===this._associatedReadableByteStreamController)throw new TypeError(\"This BYOB request has been invalidated\");e.buffer,function(e,t){const r=e._pendingPullIntos.peek();if(\"closed\"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\")}else if(0===t.byteLength)throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError(\"The region specified by view does not match byobRequest\");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError(\"The buffer of view has different capacity than byobRequest\");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError(\"The region specified by view is larger than byobRequest\");const o=t.byteLength;r.buffer=t.buffer,qe(e,o)}(this._associatedReadableByteStreamController,e)}}Object.defineProperties(ReadableStreamBYOBRequest.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),n(ReadableStreamBYOBRequest.prototype.respond,\"respond\"),n(ReadableStreamBYOBRequest.prototype.respondWithNewView,\"respondWithNewView\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamBYOBRequest.prototype,e.toStringTag,{value:\"ReadableStreamBYOBRequest\",configurable:!0});class ReadableByteStreamController{constructor(){throw new TypeError(\"Illegal constructor\")}get byobRequest(){if(!de(this))throw Ae(\"byobRequest\");return function(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),o=Object.create(ReadableStreamBYOBRequest.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(o,e,r),e._byobRequest=o}return e._byobRequest}(this)}get desiredSize(){if(!de(this))throw Ae(\"desiredSize\");return ke(this)}close(){if(!de(this))throw Ae(\"close\");if(this._closeRequested)throw new TypeError(\"The stream has already been closed; do not close it again!\");const e=this._controlledReadableByteStream._state;if(\"readable\"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);!function(e){const t=e._controlledReadableByteStream;if(e._closeRequested||\"readable\"!==t._state)return;if(e._queueTotalSize>0)return void(e._closeRequested=!0);if(e._pendingPullIntos.length>0){if(e._pendingPullIntos.peek().bytesFilled>0){const t=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");throw Pe(e,t),t}}Ee(e),Xt(t)}(this)}enqueue(e){if(!de(this))throw Ae(\"enqueue\");if($(e,1,\"enqueue\"),!ArrayBuffer.isView(e))throw new TypeError(\"chunk must be an array buffer view\");if(0===e.byteLength)throw new TypeError(\"chunk must have non-zero byteLength\");if(0===e.buffer.byteLength)throw new TypeError(\"chunk's buffer must have non-zero byteLength\");if(this._closeRequested)throw new TypeError(\"stream is closed or draining\");const t=this._controlledReadableByteStream._state;if(\"readable\"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);!function(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||\"readable\"!==r._state)return;const o=t.buffer,n=t.byteOffset,a=t.byteLength,i=o;if(e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek();t.buffer,0,Re(e),t.buffer=t.buffer,\"none\"===t.readerType&&ge(e,t)}if(J(r))if(function(e){const t=e._controlledReadableByteStream._reader;for(;t._readRequests.length>0;){if(0===e._queueTotalSize)return;We(e,t._readRequests.shift())}}(e),0===X(r))me(e,i,n,a);else{e._pendingPullIntos.length>0&&Ce(e);G(r,new Uint8Array(i,n,a),!1)}else Le(r)?(me(e,i,n,a),Te(e)):me(e,i,n,a);be(e)}(this,e)}error(e){if(!de(this))throw Ae(\"error\");Pe(this,e)}[T](e){he(this),ce(this);const t=this._cancelAlgorithm(e);return Ee(this),t}[q](e){const t=this._controlledReadableByteStream;if(this._queueTotalSize>0)return void We(this,e);const r=this._autoAllocateChunkSize;if(void 0!==r){let t;try{t=new ArrayBuffer(r)}catch(t){return void e._errorSteps(t)}const o={buffer:t,bufferByteLength:r,byteOffset:0,byteLength:r,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:\"default\"};this._pendingPullIntos.push(o)}U(t,e),be(this)}[C](){if(this._pendingPullIntos.length>0){const e=this._pendingPullIntos.peek();e.readerType=\"none\",this._pendingPullIntos=new S,this._pendingPullIntos.push(e)}}}function de(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledReadableByteStream\")&&e instanceof ReadableByteStreamController)}function fe(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_associatedReadableByteStreamController\")&&e instanceof ReadableStreamBYOBRequest)}function be(e){const t=function(e){const t=e._controlledReadableByteStream;if(\"readable\"!==t._state)return!1;if(e._closeRequested)return!1;if(!e._started)return!1;if(J(t)&&X(t)>0)return!0;if(Le(t)&&ze(t)>0)return!0;if(ke(e)>0)return!0;return!1}(e);if(!t)return;if(e._pulling)return void(e._pullAgain=!0);e._pulling=!0;b(e._pullAlgorithm(),(()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,be(e)),null)),(t=>(Pe(e,t),null)))}function he(e){Re(e),e._pendingPullIntos=new S}function _e(e,t){let r=!1;\"closed\"===e._state&&(r=!0);const o=pe(t);\"default\"===t.readerType?G(e,o,r):function(e,t,r){const o=e._reader._readIntoRequests.shift();r?o._closeSteps(t):o._chunkSteps(t)}(e,o,r)}function pe(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function me(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function ye(e,t,r,o){let n;try{n=t.slice(r,r+o)}catch(t){throw Pe(e,t),t}me(e,n,0,o)}function ge(e,t){t.bytesFilled>0&&ye(e,t.buffer,t.byteOffset,t.bytesFilled),Ce(e)}function we(e,t){const r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),a=t.bytesFilled+n,i=a-a%r;let l=n,s=!1;i>o&&(l=i-t.bytesFilled,s=!0);const u=e._queue;for(;l>0;){const r=u.peek(),o=Math.min(l,r.byteLength),n=t.byteOffset+t.bytesFilled;ie(t.buffer,n,r.buffer,r.byteOffset,o),r.byteLength===o?u.shift():(r.byteOffset+=o,r.byteLength-=o),e._queueTotalSize-=o,Se(e,o,t),l-=o}return s}function Se(e,t,r){r.bytesFilled+=t}function ve(e){0===e._queueTotalSize&&e._closeRequested?(Ee(e),Xt(e._controlledReadableByteStream)):be(e)}function Re(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Te(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();we(e,t)&&(Ce(e),_e(e._controlledReadableByteStream,t))}}function qe(e,t){const r=e._pendingPullIntos.peek();Re(e);\"closed\"===e._controlledReadableByteStream._state?function(e,t){\"none\"===t.readerType&&Ce(e);const r=e._controlledReadableByteStream;if(Le(r))for(;ze(r)>0;)_e(r,Ce(e))}(e,r):function(e,t,r){if(Se(0,t,r),\"none\"===r.readerType)return ge(e,r),void Te(e);if(r.bytesFilled<r.elementSize)return;Ce(e);const o=r.bytesFilled%r.elementSize;if(o>0){const t=r.byteOffset+r.bytesFilled;ye(e,r.buffer,t-o,o)}r.bytesFilled-=o,_e(e._controlledReadableByteStream,r),Te(e)}(e,t,r),be(e)}function Ce(e){return e._pendingPullIntos.shift()}function Ee(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function Pe(e,t){const r=e._controlledReadableByteStream;\"readable\"===r._state&&(he(e),ce(e),Ee(e),Jt(r,t))}function We(e,t){const r=e._queue.shift();e._queueTotalSize-=r.byteLength,ve(e);const o=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);t._chunkSteps(o)}function ke(e){const t=e._controlledReadableByteStream._state;return\"errored\"===t?null:\"closed\"===t?0:e._strategyHWM-e._queueTotalSize}function Oe(e,t,r){const o=Object.create(ReadableByteStreamController.prototype);let n,a,i;n=void 0!==t.start?()=>t.start(o):()=>{},a=void 0!==t.pull?()=>t.pull(o):()=>c(void 0),i=void 0!==t.cancel?e=>t.cancel(e):()=>c(void 0);const l=t.autoAllocateChunkSize;if(0===l)throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");!function(e,t,r,o,n,a,i){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,ce(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=a,t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=i,t._pendingPullIntos=new S,e._readableStreamController=t,b(c(r()),(()=>(t._started=!0,be(t),null)),(e=>(Pe(t,e),null)))}(e,o,n,a,i,r,l)}function Be(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function Ae(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}function je(e,t){e._reader._readIntoRequests.push(t)}function ze(e){return e._reader._readIntoRequests.length}function Le(e){const t=e._reader;return void 0!==t&&!!Fe(t)}Object.defineProperties(ReadableByteStreamController.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),n(ReadableByteStreamController.prototype.close,\"close\"),n(ReadableByteStreamController.prototype.enqueue,\"enqueue\"),n(ReadableByteStreamController.prototype.error,\"error\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableByteStreamController.prototype,e.toStringTag,{value:\"ReadableByteStreamController\",configurable:!0});class ReadableStreamBYOBReader{constructor(e){if($(e,1,\"ReadableStreamBYOBReader\"),V(e,\"First parameter\"),Ut(e))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");if(!de(e._readableStreamController))throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");E(this,e),this._readIntoRequests=new S}get closed(){return Fe(this)?this._closedPromise:d(De(\"closed\"))}cancel(e){return Fe(this)?void 0===this._ownerReadableStream?d(k(\"cancel\")):P(this,e):d(De(\"cancel\"))}read(e){if(!Fe(this))return d(De(\"read\"));if(!ArrayBuffer.isView(e))return d(new TypeError(\"view must be an array buffer view\"));if(0===e.byteLength)return d(new TypeError(\"view must have non-zero byteLength\"));if(0===e.buffer.byteLength)return d(new TypeError(\"view's buffer must have non-zero byteLength\"));if(e.buffer,void 0===this._ownerReadableStream)return d(k(\"read from\"));let t,r;const o=u(((e,o)=>{t=e,r=o}));return function(e,t,r){const o=e._ownerReadableStream;o._disturbed=!0,\"errored\"===o._state?r._errorSteps(o._storedError):function(e,t,r){const o=e._controlledReadableByteStream;let n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);const a=t.constructor,i=t.buffer,l={buffer:i,bufferByteLength:i.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,viewConstructor:a,readerType:\"byob\"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(l),void je(o,r);if(\"closed\"!==o._state){if(e._queueTotalSize>0){if(we(e,l)){const t=pe(l);return ve(e),void r._chunkSteps(t)}if(e._closeRequested){const t=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");return Pe(e,t),void r._errorSteps(t)}}e._pendingPullIntos.push(l),je(o,r),be(e)}else{const e=new a(l.buffer,l.byteOffset,0);r._closeSteps(e)}}(o._readableStreamController,t,r)}(this,e,{_chunkSteps:e=>t({value:e,done:!1}),_closeSteps:e=>t({value:e,done:!0}),_errorSteps:e=>r(e)}),o}releaseLock(){if(!Fe(this))throw De(\"releaseLock\");void 0!==this._ownerReadableStream&&function(e){W(e);const t=new TypeError(\"Reader was released\");Ie(e,t)}(this)}}function Fe(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_readIntoRequests\")&&e instanceof ReadableStreamBYOBReader)}function Ie(e,t){const r=e._readIntoRequests;e._readIntoRequests=new S,r.forEach((e=>{e._errorSteps(t)}))}function De(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function $e(e,t){const{highWaterMark:r}=e;if(void 0===r)return t;if(ae(r)||r<0)throw new RangeError(\"Invalid highWaterMark\");return r}function Me(e){const{size:t}=e;return t||(()=>1)}function Ye(e,t){F(e,t);const r=null==e?void 0:e.highWaterMark,o=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:Y(r),size:void 0===o?void 0:Qe(o,`${t} has member 'size' that`)}}function Qe(e,t){return I(e,t),t=>Y(e(t))}function Ne(e,t,r){return I(e,r),r=>w(e,t,[r])}function He(e,t,r){return I(e,r),()=>w(e,t,[])}function xe(e,t,r){return I(e,r),r=>g(e,t,[r])}function Ve(e,t,r){return I(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(ReadableStreamBYOBReader.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),n(ReadableStreamBYOBReader.prototype.cancel,\"cancel\"),n(ReadableStreamBYOBReader.prototype.read,\"read\"),n(ReadableStreamBYOBReader.prototype.releaseLock,\"releaseLock\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamBYOBReader.prototype,e.toStringTag,{value:\"ReadableStreamBYOBReader\",configurable:!0});const Ue=\"function\"==typeof AbortController;class WritableStream{constructor(e={},t={}){void 0===e?e=null:D(e,\"First parameter\");const r=Ye(t,\"Second parameter\"),o=function(e,t){F(e,t);const r=null==e?void 0:e.abort,o=null==e?void 0:e.close,n=null==e?void 0:e.start,a=null==e?void 0:e.type,i=null==e?void 0:e.write;return{abort:void 0===r?void 0:Ne(r,e,`${t} has member 'abort' that`),close:void 0===o?void 0:He(o,e,`${t} has member 'close' that`),start:void 0===n?void 0:xe(n,e,`${t} has member 'start' that`),write:void 0===i?void 0:Ve(i,e,`${t} has member 'write' that`),type:a}}(e,\"First parameter\");var n;(n=this)._state=\"writable\",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new S,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1;if(void 0!==o.type)throw new RangeError(\"Invalid type is specified\");const a=Me(r);!function(e,t,r,o){const n=Object.create(WritableStreamDefaultController.prototype);let a,i,l,s;a=void 0!==t.start?()=>t.start(n):()=>{};i=void 0!==t.write?e=>t.write(e,n):()=>c(void 0);l=void 0!==t.close?()=>t.close():()=>c(void 0);s=void 0!==t.abort?e=>t.abort(e):()=>c(void 0);!function(e,t,r,o,n,a,i,l){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,ce(t),t._abortReason=void 0,t._abortController=function(){if(Ue)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=l,t._strategyHWM=i,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=a;const s=bt(t);nt(e,s);const u=r();b(c(u),(()=>(t._started=!0,dt(t),null)),(r=>(t._started=!0,Ze(e,r),null)))}(e,n,a,i,l,s,r,o)}(this,o,$e(r,1),a)}get locked(){if(!Ge(this))throw _t(\"locked\");return Xe(this)}abort(e){return Ge(this)?Xe(this)?d(new TypeError(\"Cannot abort a stream that already has a writer\")):Je(this,e):d(_t(\"abort\"))}close(){return Ge(this)?Xe(this)?d(new TypeError(\"Cannot close a stream that already has a writer\")):rt(this)?d(new TypeError(\"Cannot close an already-closing stream\")):Ke(this):d(_t(\"close\"))}getWriter(){if(!Ge(this))throw _t(\"getWriter\");return new WritableStreamDefaultWriter(this)}}function Ge(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_writableStreamController\")&&e instanceof WritableStream)}function Xe(e){return void 0!==e._writer}function Je(e,t){var r;if(\"closed\"===e._state||\"errored\"===e._state)return c(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort(t);const o=e._state;if(\"closed\"===o||\"errored\"===o)return c(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let n=!1;\"erroring\"===o&&(n=!0,t=void 0);const a=u(((r,o)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=a,n||et(e,t),a}function Ke(e){const t=e._state;if(\"closed\"===t||\"errored\"===t)return d(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=u(((t,r)=>{const o={_resolve:t,_reject:r};e._closeRequest=o})),o=e._writer;var n;return void 0!==o&&e._backpressure&&\"writable\"===t&&Et(o),ue(n=e._writableStreamController,lt,0),dt(n),r}function Ze(e,t){\"writable\"!==e._state?tt(e):et(e,t)}function et(e,t){const r=e._writableStreamController;e._state=\"erroring\",e._storedError=t;const o=e._writer;void 0!==o&&it(o,t),!function(e){if(void 0===e._inFlightWriteRequest&&void 0===e._inFlightCloseRequest)return!1;return!0}(e)&&r._started&&tt(e)}function tt(e){e._state=\"errored\",e._writableStreamController[R]();const t=e._storedError;if(e._writeRequests.forEach((e=>{e._reject(t)})),e._writeRequests=new S,void 0===e._pendingAbortRequest)return void ot(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void ot(e);b(e._writableStreamController[v](r._reason),(()=>(r._resolve(),ot(e),null)),(t=>(r._reject(t),ot(e),null)))}function rt(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function ot(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&St(t,e._storedError)}function nt(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){Rt(e)}(r):Et(r)),e._backpressure=t}Object.defineProperties(WritableStream.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),n(WritableStream.prototype.abort,\"abort\"),n(WritableStream.prototype.close,\"close\"),n(WritableStream.prototype.getWriter,\"getWriter\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(WritableStream.prototype,e.toStringTag,{value:\"WritableStream\",configurable:!0});class WritableStreamDefaultWriter{constructor(e){if($(e,1,\"WritableStreamDefaultWriter\"),function(e,t){if(!Ge(e))throw new TypeError(`${t} is not a WritableStream.`)}(e,\"First parameter\"),Xe(e))throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");this._ownerWritableStream=e,e._writer=this;const t=e._state;if(\"writable\"===t)!rt(e)&&e._backpressure?Rt(this):qt(this),gt(this);else if(\"erroring\"===t)Tt(this,e._storedError),gt(this);else if(\"closed\"===t)qt(this),gt(r=this),vt(r);else{const t=e._storedError;Tt(this,t),wt(this,t)}var r}get closed(){return at(this)?this._closedPromise:d(mt(\"closed\"))}get desiredSize(){if(!at(this))throw mt(\"desiredSize\");if(void 0===this._ownerWritableStream)throw yt(\"desiredSize\");return function(e){const t=e._ownerWritableStream,r=t._state;if(\"errored\"===r||\"erroring\"===r)return null;if(\"closed\"===r)return 0;return ct(t._writableStreamController)}(this)}get ready(){return at(this)?this._readyPromise:d(mt(\"ready\"))}abort(e){return at(this)?void 0===this._ownerWritableStream?d(yt(\"abort\")):function(e,t){return Je(e._ownerWritableStream,t)}(this,e):d(mt(\"abort\"))}close(){if(!at(this))return d(mt(\"close\"));const e=this._ownerWritableStream;return void 0===e?d(yt(\"close\")):rt(e)?d(new TypeError(\"Cannot close an already-closing stream\")):Ke(this._ownerWritableStream)}releaseLock(){if(!at(this))throw mt(\"releaseLock\");void 0!==this._ownerWritableStream&&function(e){const t=e._ownerWritableStream,r=new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");it(e,r),function(e,t){\"pending\"===e._closedPromiseState?St(e,t):function(e,t){wt(e,t)}(e,t)}(e,r),t._writer=void 0,e._ownerWritableStream=void 0}(this)}write(e){return at(this)?void 0===this._ownerWritableStream?d(yt(\"write to\")):function(e,t){const r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return ft(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return d(yt(\"write to\"));const a=r._state;if(\"errored\"===a)return d(r._storedError);if(rt(r)||\"closed\"===a)return d(new TypeError(\"The stream is closing or closed and cannot be written to\"));if(\"erroring\"===a)return d(r._storedError);const i=function(e){return u(((t,r)=>{const o={_resolve:t,_reject:r};e._writeRequests.push(o)}))}(r);return function(e,t,r){try{ue(e,t,r)}catch(t){return void ft(e,t)}const o=e._controlledWritableStream;if(!rt(o)&&\"writable\"===o._state){nt(o,bt(e))}dt(e)}(o,t,n),i}(this,e):d(mt(\"write\"))}}function at(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_ownerWritableStream\")&&e instanceof WritableStreamDefaultWriter)}function it(e,t){\"pending\"===e._readyPromiseState?Ct(e,t):function(e,t){Tt(e,t)}(e,t)}Object.defineProperties(WritableStreamDefaultWriter.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),n(WritableStreamDefaultWriter.prototype.abort,\"abort\"),n(WritableStreamDefaultWriter.prototype.close,\"close\"),n(WritableStreamDefaultWriter.prototype.releaseLock,\"releaseLock\"),n(WritableStreamDefaultWriter.prototype.write,\"write\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(WritableStreamDefaultWriter.prototype,e.toStringTag,{value:\"WritableStreamDefaultWriter\",configurable:!0});const lt={};class WritableStreamDefaultController{constructor(){throw new TypeError(\"Illegal constructor\")}get abortReason(){if(!st(this))throw pt(\"abortReason\");return this._abortReason}get signal(){if(!st(this))throw pt(\"signal\");if(void 0===this._abortController)throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");return this._abortController.signal}error(e){if(!st(this))throw pt(\"error\");\"writable\"===this._controlledWritableStream._state&&ht(this,e)}[v](e){const t=this._abortAlgorithm(e);return ut(this),t}[R](){ce(this)}}function st(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledWritableStream\")&&e instanceof WritableStreamDefaultController)}function ut(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function ct(e){return e._strategyHWM-e._queueTotalSize}function dt(e){const t=e._controlledWritableStream;if(!e._started)return;if(void 0!==t._inFlightWriteRequest)return;if(\"erroring\"===t._state)return void tt(t);if(0===e._queue.length)return;const r=e._queue.peek().value;r===lt?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),se(e);const r=e._closeAlgorithm();ut(e),b(r,(()=>(function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,\"erroring\"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state=\"closed\";const t=e._writer;void 0!==t&&vt(t)}(t),null)),(e=>(function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),Ze(e,t)}(t,e),null)))}(e):function(e,t){const r=e._controlledWritableStream;!function(e){e._inFlightWriteRequest=e._writeRequests.shift()}(r);b(e._writeAlgorithm(t),(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(se(e),!rt(r)&&\"writable\"===t){const t=bt(e);nt(r,t)}return dt(e),null}),(t=>(\"writable\"===r._state&&ut(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,Ze(e,t)}(r,t),null)))}(e,r)}function ft(e,t){\"writable\"===e._controlledWritableStream._state&&ht(e,t)}function bt(e){return ct(e)<=0}function ht(e,t){const r=e._controlledWritableStream;ut(e),et(r,t)}function _t(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function pt(e){return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`)}function mt(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function yt(e){return new TypeError(\"Cannot \"+e+\" a stream using a released writer\")}function gt(e){e._closedPromise=u(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState=\"pending\"}))}function wt(e,t){gt(e),St(e,t)}function St(e,t){void 0!==e._closedPromise_reject&&(m(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState=\"rejected\")}function vt(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState=\"resolved\")}function Rt(e){e._readyPromise=u(((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState=\"pending\"}function Tt(e,t){Rt(e),Ct(e,t)}function qt(e){Rt(e),Et(e)}function Ct(e,t){void 0!==e._readyPromise_reject&&(m(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState=\"rejected\")}function Et(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState=\"fulfilled\")}Object.defineProperties(WritableStreamDefaultController.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(WritableStreamDefaultController.prototype,e.toStringTag,{value:\"WritableStreamDefaultController\",configurable:!0});const Pt=\"undefined\"!=typeof DOMException?DOMException:void 0;const Wt=function(e){if(\"function\"!=typeof e&&\"object\"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Pt)?Pt:function(){const e=function(e,t){this.message=e||\"\",this.name=t||\"Error\",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,\"constructor\",{value:e,writable:!0,configurable:!0}),e}();function kt(e,t,r,o,n,a){const i=e.getReader(),l=t.getWriter();Vt(e)&&(e._disturbed=!0);let s,_,g,w=!1,S=!1,v=\"readable\",R=\"writable\",T=!1,q=!1;const C=u((e=>{g=e}));let E=Promise.resolve(void 0);return u(((P,W)=>{let k;function O(){if(w)return;const e=u(((e,t)=>{!function r(o){o?e():f(function(){if(w)return c(!0);return f(l.ready,(()=>f(i.read(),(e=>!!e.done||(E=l.write(e.value),m(E),!1)))))}(),r,t)}(!1)}));m(e)}function B(){return v=\"closed\",r?L():z((()=>(Ge(t)&&(T=rt(t),R=t._state),T||\"closed\"===R?c(void 0):\"erroring\"===R||\"errored\"===R?d(_):(T=!0,l.close()))),!1,void 0),null}function A(e){return w||(v=\"errored\",s=e,o?L(!0,e):z((()=>l.abort(e)),!0,e)),null}function j(e){return S||(R=\"errored\",_=e,n?L(!0,e):z((()=>i.cancel(e)),!0,e)),null}if(void 0!==a&&(k=()=>{const e=void 0!==a.reason?a.reason:new Wt(\"Aborted\",\"AbortError\"),t=[];o||t.push((()=>\"writable\"===R?l.abort(e):c(void 0))),n||t.push((()=>\"readable\"===v?i.cancel(e):c(void 0))),z((()=>Promise.all(t.map((e=>e())))),!0,e)},a.aborted?k():a.addEventListener(\"abort\",k)),Vt(e)&&(v=e._state,s=e._storedError),Ge(t)&&(R=t._state,_=t._storedError,T=rt(t)),Vt(e)&&Ge(t)&&(q=!0,g()),\"errored\"===v)A(s);else if(\"erroring\"===R||\"errored\"===R)j(_);else if(\"closed\"===v)B();else if(T||\"closed\"===R){const e=new TypeError(\"the destination writable stream closed before all data could be piped to it\");n?L(!0,e):z((()=>i.cancel(e)),!0,e)}function z(e,t,r){function o(){return\"writable\"!==R||T?n():h(function(){let e;return c(function t(){if(e!==E)return e=E,p(E,t,t)}())}(),n),null}function n(){return e?b(e(),(()=>F(t,r)),(e=>F(!0,e))):F(t,r),null}w||(w=!0,q?o():h(C,o))}function L(e,t){z(void 0,e,t)}function F(e,t){return S=!0,l.releaseLock(),i.releaseLock(),void 0!==a&&a.removeEventListener(\"abort\",k),e?W(t):P(void 0),null}w||(b(i.closed,B,A),b(l.closed,(function(){return S||(R=\"closed\"),null}),j)),q?O():y((()=>{q=!0,g(),O()}))}))}function Ot(e,t){return function(e){try{return e.getReader({mode:\"byob\"}).releaseLock(),!0}catch(e){return!1}}(e)?function(e){let t,r,o,n,a,i=e.getReader(),l=!1,s=!1,d=!1,f=!1,h=!1,p=!1;const m=u((e=>{a=e}));function y(e){_(e.closed,(t=>(e!==i||(o.error(t),n.error(t),h&&p||a(void 0)),null)))}function g(){l&&(i.releaseLock(),i=e.getReader(),y(i),l=!1),b(i.read(),(e=>{var t,r;if(d=!1,f=!1,e.done)return h||o.close(),p||n.close(),null===(t=o.byobRequest)||void 0===t||t.respond(0),null===(r=n.byobRequest)||void 0===r||r.respond(0),h&&p||a(void 0),null;const l=e.value,u=l;let c=l;if(!h&&!p)try{c=le(l)}catch(e){return o.error(e),n.error(e),a(i.cancel(e)),null}return h||o.enqueue(u),p||n.enqueue(c),s=!1,d?S():f&&v(),null}),(()=>(s=!1,null)))}function w(t,r){l||(i.releaseLock(),i=e.getReader({mode:\"byob\"}),y(i),l=!0);const u=r?n:o,c=r?o:n;b(i.read(t),(e=>{var t;d=!1,f=!1;const o=r?p:h,n=r?h:p;if(e.done){o||u.close(),n||c.close();const r=e.value;return void 0!==r&&(o||u.byobRequest.respondWithNewView(r),n||null===(t=c.byobRequest)||void 0===t||t.respond(0)),o&&n||a(void 0),null}const l=e.value;if(n)o||u.byobRequest.respondWithNewView(l);else{let e;try{e=le(l)}catch(e){return u.error(e),c.error(e),a(i.cancel(e)),null}o||u.byobRequest.respondWithNewView(l),c.enqueue(e)}return s=!1,d?S():f&&v(),null}),(()=>(s=!1,null)))}function S(){if(s)return d=!0,c(void 0);s=!0;const e=o.byobRequest;return null===e?g():w(e.view,!1),c(void 0)}function v(){if(s)return f=!0,c(void 0);s=!0;const e=n.byobRequest;return null===e?g():w(e.view,!0),c(void 0)}function R(e){if(h=!0,t=e,p){const e=[t,r],o=i.cancel(e);a(o)}return m}function T(e){if(p=!0,r=e,h){const e=[t,r],o=i.cancel(e);a(o)}return m}const q=new ReadableStream({type:\"bytes\",start(e){o=e},pull:S,cancel:R}),C=new ReadableStream({type:\"bytes\",start(e){n=e},pull:v,cancel:T});return y(i),[q,C]}(e):function(e,t){const r=e.getReader();let o,n,a,i,l,s=!1,d=!1,f=!1,h=!1;const p=u((e=>{l=e}));function m(){return s?(d=!0,c(void 0)):(s=!0,b(r.read(),(e=>{if(d=!1,e.done)return f||a.close(),h||i.close(),f&&h||l(void 0),null;const t=e.value,r=t,o=t;return f||a.enqueue(r),h||i.enqueue(o),s=!1,d&&m(),null}),(()=>(s=!1,null))),c(void 0))}function y(e){if(f=!0,o=e,h){const e=[o,n],t=r.cancel(e);l(t)}return p}function g(e){if(h=!0,n=e,f){const e=[o,n],t=r.cancel(e);l(t)}return p}const w=new ReadableStream({start(e){a=e},pull:m,cancel:y}),S=new ReadableStream({start(e){i=e},pull:m,cancel:g});return _(r.closed,(e=>(a.error(e),i.error(e),f&&h||l(void 0),null))),[w,S]}(e)}class ReadableStreamDefaultController{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Bt(this))throw Dt(\"desiredSize\");return Lt(this)}close(){if(!Bt(this))throw Dt(\"close\");if(!Ft(this))throw new TypeError(\"The stream is not in a state that permits close\");!function(e){if(!Ft(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(jt(e),Xt(t))}(this)}enqueue(e){if(!Bt(this))throw Dt(\"enqueue\");if(!Ft(this))throw new TypeError(\"The stream is not in a state that permits enqueue\");return function(e,t){if(!Ft(e))return;const r=e._controlledReadableStream;if(Ut(r)&&X(r)>0)G(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw zt(e,t),t}try{ue(e,t,r)}catch(t){throw zt(e,t),t}}At(e)}(this,e)}error(e){if(!Bt(this))throw Dt(\"error\");zt(this,e)}[T](e){ce(this);const t=this._cancelAlgorithm(e);return jt(this),t}[q](e){const t=this._controlledReadableStream;if(this._queue.length>0){const r=se(this);this._closeRequested&&0===this._queue.length?(jt(this),Xt(t)):At(this),e._chunkSteps(r)}else U(t,e),At(this)}[C](){}}function Bt(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledReadableStream\")&&e instanceof ReadableStreamDefaultController)}function At(e){const t=function(e){const t=e._controlledReadableStream;if(!Ft(e))return!1;if(!e._started)return!1;if(Ut(t)&&X(t)>0)return!0;if(Lt(e)>0)return!0;return!1}(e);if(!t)return;if(e._pulling)return void(e._pullAgain=!0);e._pulling=!0;b(e._pullAlgorithm(),(()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,At(e)),null)),(t=>(zt(e,t),null)))}function jt(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function zt(e,t){const r=e._controlledReadableStream;\"readable\"===r._state&&(ce(e),jt(e),Jt(r,t))}function Lt(e){const t=e._controlledReadableStream._state;return\"errored\"===t?null:\"closed\"===t?0:e._strategyHWM-e._queueTotalSize}function Ft(e){return!e._closeRequested&&\"readable\"===e._controlledReadableStream._state}function It(e,t,r,o){const n=Object.create(ReadableStreamDefaultController.prototype);let a,i,l;a=void 0!==t.start?()=>t.start(n):()=>{},i=void 0!==t.pull?()=>t.pull(n):()=>c(void 0),l=void 0!==t.cancel?e=>t.cancel(e):()=>c(void 0),function(e,t,r,o,n,a,i){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,ce(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=i,t._strategyHWM=a,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t,b(c(r()),(()=>(t._started=!0,At(t),null)),(e=>(zt(t,e),null)))}(e,n,a,i,l,r,o)}function Dt(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function $t(e,t,r){return I(e,r),r=>w(e,t,[r])}function Mt(e,t,r){return I(e,r),r=>w(e,t,[r])}function Yt(e,t,r){return I(e,r),r=>g(e,t,[r])}function Qt(e,t){if(\"bytes\"!==(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}function Nt(e,t){if(\"byob\"!==(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}function Ht(e,t){F(e,t);const r=null==e?void 0:e.preventAbort,o=null==e?void 0:e.preventCancel,n=null==e?void 0:e.preventClose,a=null==e?void 0:e.signal;return void 0!==a&&function(e,t){if(!function(e){if(\"object\"!=typeof e||null===e)return!1;try{return\"boolean\"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(`${t} is not an AbortSignal.`)}(a,`${t} has member 'signal' that`),{preventAbort:Boolean(r),preventCancel:Boolean(o),preventClose:Boolean(n),signal:a}}function xt(e,t){F(e,t);const r=null==e?void 0:e.readable;M(r,\"readable\",\"ReadableWritablePair\"),function(e,t){if(!H(e))throw new TypeError(`${t} is not a ReadableStream.`)}(r,`${t} has member 'readable' that`);const o=null==e?void 0:e.writable;return M(o,\"writable\",\"ReadableWritablePair\"),function(e,t){if(!x(e))throw new TypeError(`${t} is not a WritableStream.`)}(o,`${t} has member 'writable' that`),{readable:r,writable:o}}Object.defineProperties(ReadableStreamDefaultController.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),n(ReadableStreamDefaultController.prototype.close,\"close\"),n(ReadableStreamDefaultController.prototype.enqueue,\"enqueue\"),n(ReadableStreamDefaultController.prototype.error,\"error\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamDefaultController.prototype,e.toStringTag,{value:\"ReadableStreamDefaultController\",configurable:!0});class ReadableStream{constructor(e={},t={}){void 0===e?e=null:D(e,\"First parameter\");const r=Ye(t,\"Second parameter\"),o=function(e,t){F(e,t);const r=e,o=null==r?void 0:r.autoAllocateChunkSize,n=null==r?void 0:r.cancel,a=null==r?void 0:r.pull,i=null==r?void 0:r.start,l=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===o?void 0:N(o,`${t} has member 'autoAllocateChunkSize' that`),cancel:void 0===n?void 0:$t(n,r,`${t} has member 'cancel' that`),pull:void 0===a?void 0:Mt(a,r,`${t} has member 'pull' that`),start:void 0===i?void 0:Yt(i,r,`${t} has member 'start' that`),type:void 0===l?void 0:Qt(l,`${t} has member 'type' that`)}}(e,\"First parameter\");var n;if((n=this)._state=\"readable\",n._reader=void 0,n._storedError=void 0,n._disturbed=!1,\"bytes\"===o.type){if(void 0!==r.size)throw new RangeError(\"The strategy for a byte stream cannot have a size function\");Oe(this,o,$e(r,0))}else{const e=Me(r);It(this,o,$e(r,1),e)}}get locked(){if(!Vt(this))throw Kt(\"locked\");return Ut(this)}cancel(e){return Vt(this)?Ut(this)?d(new TypeError(\"Cannot cancel a stream that already has a reader\")):Gt(this,e):d(Kt(\"cancel\"))}getReader(e){if(!Vt(this))throw Kt(\"getReader\");return void 0===function(e,t){F(e,t);const r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:Nt(r,`${t} has member 'mode' that`)}}(e,\"First parameter\").mode?new ReadableStreamDefaultReader(this):function(e){return new ReadableStreamBYOBReader(e)}(this)}pipeThrough(e,t={}){if(!H(this))throw Kt(\"pipeThrough\");$(e,1,\"pipeThrough\");const r=xt(e,\"First parameter\"),o=Ht(t,\"Second parameter\");if(this.locked)throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");if(r.writable.locked)throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");return m(kt(this,r.writable,o.preventClose,o.preventAbort,o.preventCancel,o.signal)),r.readable}pipeTo(e,t={}){if(!H(this))return d(Kt(\"pipeTo\"));if(void 0===e)return d(\"Parameter 1 is required in 'pipeTo'.\");if(!x(e))return d(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));let r;try{r=Ht(t,\"Second parameter\")}catch(e){return d(e)}return this.locked?d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")):e.locked?d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")):kt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)}tee(){if(!H(this))throw Kt(\"tee\");if(this.locked)throw new TypeError(\"Cannot tee a stream that already has a reader\");return Ot(this)}values(e){if(!H(this))throw Kt(\"values\");return function(e,t){const r=e.getReader(),o=new te(r,t),n=Object.create(re);return n._asyncIteratorImpl=o,n}(this,function(e,t){F(e,t);const r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e,\"First parameter\").preventCancel)}}function Vt(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_readableStreamController\")&&e instanceof ReadableStream)}function Ut(e){return void 0!==e._reader}function Gt(e,r){if(e._disturbed=!0,\"closed\"===e._state)return c(void 0);if(\"errored\"===e._state)return d(e._storedError);Xt(e);const o=e._reader;if(void 0!==o&&Fe(o)){const e=o._readIntoRequests;o._readIntoRequests=new S,e.forEach((e=>{e._closeSteps(void 0)}))}return p(e._readableStreamController[T](r),t)}function Xt(e){e._state=\"closed\";const t=e._reader;if(void 0!==t&&(j(t),K(t))){const e=t._readRequests;t._readRequests=new S,e.forEach((e=>{e._closeSteps()}))}}function Jt(e,t){e._state=\"errored\",e._storedError=t;const r=e._reader;void 0!==r&&(A(r,t),K(r)?Z(r,t):Ie(r,t))}function Kt(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function Zt(e,t){F(e,t);const r=null==e?void 0:e.highWaterMark;return M(r,\"highWaterMark\",\"QueuingStrategyInit\"),{highWaterMark:Y(r)}}Object.defineProperties(ReadableStream.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),n(ReadableStream.prototype.cancel,\"cancel\"),n(ReadableStream.prototype.getReader,\"getReader\"),n(ReadableStream.prototype.pipeThrough,\"pipeThrough\"),n(ReadableStream.prototype.pipeTo,\"pipeTo\"),n(ReadableStream.prototype.tee,\"tee\"),n(ReadableStream.prototype.values,\"values\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ReadableStream.prototype,e.toStringTag,{value:\"ReadableStream\",configurable:!0}),\"symbol\"==typeof e.asyncIterator&&Object.defineProperty(ReadableStream.prototype,e.asyncIterator,{value:ReadableStream.prototype.values,writable:!0,configurable:!0});const er=e=>e.byteLength;n(er,\"size\");class ByteLengthQueuingStrategy{constructor(e){$(e,1,\"ByteLengthQueuingStrategy\"),e=Zt(e,\"First parameter\"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!rr(this))throw tr(\"highWaterMark\");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!rr(this))throw tr(\"size\");return er}}function tr(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}function rr(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_byteLengthQueuingStrategyHighWaterMark\")&&e instanceof ByteLengthQueuingStrategy)}Object.defineProperties(ByteLengthQueuingStrategy.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(ByteLengthQueuingStrategy.prototype,e.toStringTag,{value:\"ByteLengthQueuingStrategy\",configurable:!0});const or=()=>1;n(or,\"size\");class CountQueuingStrategy{constructor(e){$(e,1,\"CountQueuingStrategy\"),e=Zt(e,\"First parameter\"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!ar(this))throw nr(\"highWaterMark\");return this._countQueuingStrategyHighWaterMark}get size(){if(!ar(this))throw nr(\"size\");return or}}function nr(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}function ar(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_countQueuingStrategyHighWaterMark\")&&e instanceof CountQueuingStrategy)}function ir(e,t,r){return I(e,r),r=>w(e,t,[r])}function lr(e,t,r){return I(e,r),r=>g(e,t,[r])}function sr(e,t,r){return I(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(CountQueuingStrategy.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(CountQueuingStrategy.prototype,e.toStringTag,{value:\"CountQueuingStrategy\",configurable:!0});class TransformStream{constructor(e={},t={},r={}){void 0===e&&(e=null);const o=Ye(t,\"Second parameter\"),n=Ye(r,\"Third parameter\"),a=function(e,t){F(e,t);const r=null==e?void 0:e.flush,o=null==e?void 0:e.readableType,n=null==e?void 0:e.start,a=null==e?void 0:e.transform,i=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:ir(r,e,`${t} has member 'flush' that`),readableType:o,start:void 0===n?void 0:lr(n,e,`${t} has member 'start' that`),transform:void 0===a?void 0:sr(a,e,`${t} has member 'transform' that`),writableType:i}}(e,\"First parameter\");if(void 0!==a.readableType)throw new RangeError(\"Invalid readableType specified\");if(void 0!==a.writableType)throw new RangeError(\"Invalid writableType specified\");const i=$e(n,0),l=Me(n),s=$e(o,1),f=Me(o);let b;!function(e,t,r,o,n,a){function i(){return t}function l(t){return function(e,t){const r=e._transformStreamController;if(e._backpressure){return p(e._backpressureChangePromise,(()=>{if(\"erroring\"===(Ge(e._writable)?e._writable._state:e._writableState))throw Ge(e._writable)?e._writable._storedError:e._writableStoredError;return pr(r,t)}))}return pr(r,t)}(e,t)}function s(t){return function(e,t){return cr(e,t),c(void 0)}(e,t)}function u(){return function(e){const t=e._transformStreamController,r=t._flushAlgorithm();return hr(t),p(r,(()=>{if(\"errored\"===e._readableState)throw e._readableStoredError;gr(e)&&wr(e)}),(t=>{throw cr(e,t),e._readableStoredError}))}(e)}function d(){return function(e){return fr(e,!1),e._backpressureChangePromise}(e)}function f(t){return dr(e,t),c(void 0)}e._writableState=\"writable\",e._writableStoredError=void 0,e._writableHasInFlightOperation=!1,e._writableStarted=!1,e._writable=function(e,t,r,o,n,a,i){return new WritableStream({start(r){e._writableController=r;try{const t=r.signal;void 0!==t&&t.addEventListener(\"abort\",(()=>{\"writable\"===e._writableState&&(e._writableState=\"erroring\",t.reason&&(e._writableStoredError=t.reason))}))}catch(e){}return p(t(),(()=>(e._writableStarted=!0,Cr(e),null)),(t=>{throw e._writableStarted=!0,Rr(e,t),t}))},write:t=>(function(e){e._writableHasInFlightOperation=!0}(e),p(r(t),(()=>(function(e){e._writableHasInFlightOperation=!1}(e),Cr(e),null)),(t=>{throw function(e,t){e._writableHasInFlightOperation=!1,Rr(e,t)}(e,t),t}))),close:()=>(function(e){e._writableHasInFlightOperation=!0}(e),p(o(),(()=>(function(e){e._writableHasInFlightOperation=!1;\"erroring\"===e._writableState&&(e._writableStoredError=void 0);e._writableState=\"closed\"}(e),null)),(t=>{throw function(e,t){e._writableHasInFlightOperation=!1,e._writableState,Rr(e,t)}(e,t),t}))),abort:t=>(e._writableState=\"errored\",e._writableStoredError=t,n(t))},{highWaterMark:a,size:i})}(e,i,l,u,s,r,o),e._readableState=\"readable\",e._readableStoredError=void 0,e._readableCloseRequested=!1,e._readablePulling=!1,e._readable=function(e,t,r,o,n,a){return new ReadableStream({start:r=>(e._readableController=r,t().catch((t=>{Sr(e,t)}))),pull:()=>(e._readablePulling=!0,r().catch((t=>{Sr(e,t)}))),cancel:t=>(e._readableState=\"closed\",o(t))},{highWaterMark:n,size:a})}(e,i,d,f,n,a),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,fr(e,!0),e._transformStreamController=void 0}(this,u((e=>{b=e})),s,f,i,l),function(e,t){const r=Object.create(TransformStreamDefaultController.prototype);let o,n;o=void 0!==t.transform?e=>t.transform(e,r):e=>{try{return _r(r,e),c(void 0)}catch(e){return d(e)}};n=void 0!==t.flush?()=>t.flush(r):()=>c(void 0);!function(e,t,r,o){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=o}(e,r,o,n)}(this,a),void 0!==a.start?b(a.start(this._transformStreamController)):b(void 0)}get readable(){if(!ur(this))throw yr(\"readable\");return this._readable}get writable(){if(!ur(this))throw yr(\"writable\");return this._writable}}function ur(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_transformStreamController\")&&e instanceof TransformStream)}function cr(e,t){Sr(e,t),dr(e,t)}function dr(e,t){hr(e._transformStreamController),function(e,t){e._writableController.error(t);\"writable\"===e._writableState&&Tr(e,t)}(e,t),e._backpressure&&fr(e,!1)}function fr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=u((t=>{e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(TransformStream.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(TransformStream.prototype,e.toStringTag,{value:\"TransformStream\",configurable:!0});class TransformStreamDefaultController{constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!br(this))throw mr(\"desiredSize\");return vr(this._controlledTransformStream)}enqueue(e){if(!br(this))throw mr(\"enqueue\");_r(this,e)}error(e){if(!br(this))throw mr(\"error\");var t;t=e,cr(this._controlledTransformStream,t)}terminate(){if(!br(this))throw mr(\"terminate\");!function(e){const t=e._controlledTransformStream;gr(t)&&wr(t);const r=new TypeError(\"TransformStream terminated\");dr(t,r)}(this)}}function br(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,\"_controlledTransformStream\")&&e instanceof TransformStreamDefaultController)}function hr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function _r(e,t){const r=e._controlledTransformStream;if(!gr(r))throw new TypeError(\"Readable side is not in a state that permits enqueue\");try{!function(e,t){e._readablePulling=!1;try{e._readableController.enqueue(t)}catch(t){throw Sr(e,t),t}}(r,t)}catch(e){throw dr(r,e),r._readableStoredError}const o=function(e){return!function(e){if(!gr(e))return!1;if(e._readablePulling)return!0;if(vr(e)>0)return!0;return!1}(e)}(r);o!==r._backpressure&&fr(r,!0)}function pr(e,t){return p(e._transformAlgorithm(t),void 0,(t=>{throw cr(e._controlledTransformStream,t),t}))}function mr(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function yr(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}function gr(e){return!e._readableCloseRequested&&\"readable\"===e._readableState}function wr(e){e._readableState=\"closed\",e._readableCloseRequested=!0,e._readableController.close()}function Sr(e,t){\"readable\"===e._readableState&&(e._readableState=\"errored\",e._readableStoredError=t),e._readableController.error(t)}function vr(e){return e._readableController.desiredSize}function Rr(e,t){\"writable\"!==e._writableState?qr(e):Tr(e,t)}function Tr(e,t){e._writableState=\"erroring\",e._writableStoredError=t,!function(e){return e._writableHasInFlightOperation}(e)&&e._writableStarted&&qr(e)}function qr(e){e._writableState=\"errored\"}function Cr(e){\"erroring\"===e._writableState&&qr(e)}Object.defineProperties(TransformStreamDefaultController.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),n(TransformStreamDefaultController.prototype.enqueue,\"enqueue\"),n(TransformStreamDefaultController.prototype.error,\"error\"),n(TransformStreamDefaultController.prototype.terminate,\"terminate\"),\"symbol\"==typeof e.toStringTag&&Object.defineProperty(TransformStreamDefaultController.prototype,e.toStringTag,{value:\"TransformStreamDefaultController\",configurable:!0});export{ByteLengthQueuingStrategy,CountQueuingStrategy,ReadableByteStreamController,ReadableStream,ReadableStreamBYOBReader,ReadableStreamBYOBRequest,ReadableStreamDefaultController,ReadableStreamDefaultReader,TransformStream,TransformStreamDefaultController,WritableStream,WritableStreamDefaultController,WritableStreamDefaultWriter};\n","/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */\nimport { isFunction } from \"./isFunction.js\";\nconst CHUNK_SIZE = 65536;\nasync function* clonePart(part) {\n    const end = part.byteOffset + part.byteLength;\n    let position = part.byteOffset;\n    while (position !== end) {\n        const size = Math.min(end - position, CHUNK_SIZE);\n        const chunk = part.buffer.slice(position, position + size);\n        position += chunk.byteLength;\n        yield new Uint8Array(chunk);\n    }\n}\nasync function* consumeNodeBlob(blob) {\n    let position = 0;\n    while (position !== blob.size) {\n        const chunk = blob.slice(position, Math.min(blob.size, position + CHUNK_SIZE));\n        const buffer = await chunk.arrayBuffer();\n        position += buffer.byteLength;\n        yield new Uint8Array(buffer);\n    }\n}\nexport async function* consumeBlobParts(parts, clone = false) {\n    for (const part of parts) {\n        if (ArrayBuffer.isView(part)) {\n            if (clone) {\n                yield* clonePart(part);\n            }\n            else {\n                yield part;\n            }\n        }\n        else if (isFunction(part.stream)) {\n            yield* part.stream();\n        }\n        else {\n            yield* consumeNodeBlob(part);\n        }\n    }\n}\nexport function* sliceBlob(blobParts, blobSize, start = 0, end) {\n    end !== null && end !== void 0 ? end : (end = blobSize);\n    let relativeStart = start < 0\n        ? Math.max(blobSize + start, 0)\n        : Math.min(start, blobSize);\n    let relativeEnd = end < 0\n        ? Math.max(blobSize + end, 0)\n        : Math.min(end, blobSize);\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    let added = 0;\n    for (const part of blobParts) {\n        if (added >= span) {\n            break;\n        }\n        const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n        if (relativeStart && partSize <= relativeStart) {\n            relativeStart -= partSize;\n            relativeEnd -= partSize;\n        }\n        else {\n            let chunk;\n            if (ArrayBuffer.isView(part)) {\n                chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));\n                added += chunk.byteLength;\n            }\n            else {\n                chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));\n                added += chunk.size;\n            }\n            relativeEnd -= partSize;\n            relativeStart = 0;\n            yield chunk;\n        }\n    }\n}\n","/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _Blob_parts, _Blob_type, _Blob_size;\nimport { ReadableStream } from \"web-streams-polyfill\";\nimport { isFunction } from \"./isFunction.js\";\nimport { consumeBlobParts, sliceBlob } from \"./blobHelpers.js\";\nexport class Blob {\n    constructor(blobParts = [], options = {}) {\n        _Blob_parts.set(this, []);\n        _Blob_type.set(this, \"\");\n        _Blob_size.set(this, 0);\n        options !== null && options !== void 0 ? options : (options = {});\n        if (typeof blobParts !== \"object\" || blobParts === null) {\n            throw new TypeError(\"Failed to construct 'Blob': \"\n                + \"The provided value cannot be converted to a sequence.\");\n        }\n        if (!isFunction(blobParts[Symbol.iterator])) {\n            throw new TypeError(\"Failed to construct 'Blob': \"\n                + \"The object must have a callable @@iterator property.\");\n        }\n        if (typeof options !== \"object\" && !isFunction(options)) {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n        }\n        const encoder = new TextEncoder();\n        for (const raw of blobParts) {\n            let part;\n            if (ArrayBuffer.isView(raw)) {\n                part = new Uint8Array(raw.buffer.slice(raw.byteOffset, raw.byteOffset + raw.byteLength));\n            }\n            else if (raw instanceof ArrayBuffer) {\n                part = new Uint8Array(raw.slice(0));\n            }\n            else if (raw instanceof Blob) {\n                part = raw;\n            }\n            else {\n                part = encoder.encode(String(raw));\n            }\n            __classPrivateFieldSet(this, _Blob_size, __classPrivateFieldGet(this, _Blob_size, \"f\") + (ArrayBuffer.isView(part) ? part.byteLength : part.size), \"f\");\n            __classPrivateFieldGet(this, _Blob_parts, \"f\").push(part);\n        }\n        const type = options.type === undefined ? \"\" : String(options.type);\n        __classPrivateFieldSet(this, _Blob_type, /^[\\x20-\\x7E]*$/.test(type) ? type : \"\", \"f\");\n    }\n    static [(_Blob_parts = new WeakMap(), _Blob_type = new WeakMap(), _Blob_size = new WeakMap(), Symbol.hasInstance)](value) {\n        return Boolean(value\n            && typeof value === \"object\"\n            && isFunction(value.constructor)\n            && (isFunction(value.stream)\n                || isFunction(value.arrayBuffer))\n            && /^(Blob|File)$/.test(value[Symbol.toStringTag]));\n    }\n    get type() {\n        return __classPrivateFieldGet(this, _Blob_type, \"f\");\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _Blob_size, \"f\");\n    }\n    slice(start, end, contentType) {\n        return new Blob(sliceBlob(__classPrivateFieldGet(this, _Blob_parts, \"f\"), this.size, start, end), {\n            type: contentType\n        });\n    }\n    async text() {\n        const decoder = new TextDecoder();\n        let result = \"\";\n        for await (const chunk of consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, \"f\"))) {\n            result += decoder.decode(chunk, { stream: true });\n        }\n        result += decoder.decode();\n        return result;\n    }\n    async arrayBuffer() {\n        const view = new Uint8Array(this.size);\n        let offset = 0;\n        for await (const chunk of consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, \"f\"))) {\n            view.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return view.buffer;\n    }\n    stream() {\n        const iterator = consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, \"f\"), true);\n        return new ReadableStream({\n            async pull(controller) {\n                const { value, done } = await iterator.next();\n                if (done) {\n                    return queueMicrotask(() => controller.close());\n                }\n                controller.enqueue(value);\n            },\n            async cancel() {\n                await iterator.return();\n            }\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n}\nObject.defineProperties(Blob.prototype, {\n    type: { enumerable: true },\n    size: { enumerable: true },\n    slice: { enumerable: true },\n    stream: { enumerable: true },\n    text: { enumerable: true },\n    arrayBuffer: { enumerable: true }\n});\n","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _File_name, _File_lastModified;\nimport { Blob } from \"./Blob.js\";\nexport class File extends Blob {\n    constructor(fileBits, name, options = {}) {\n        super(fileBits, options);\n        _File_name.set(this, void 0);\n        _File_lastModified.set(this, 0);\n        if (arguments.length < 2) {\n            throw new TypeError(\"Failed to construct 'File': 2 arguments required, \"\n                + `but only ${arguments.length} present.`);\n        }\n        __classPrivateFieldSet(this, _File_name, String(name), \"f\");\n        const lastModified = options.lastModified === undefined\n            ? Date.now()\n            : Number(options.lastModified);\n        if (!Number.isNaN(lastModified)) {\n            __classPrivateFieldSet(this, _File_lastModified, lastModified, \"f\");\n        }\n    }\n    static [(_File_name = new WeakMap(), _File_lastModified = new WeakMap(), Symbol.hasInstance)](value) {\n        return value instanceof Blob\n            && value[Symbol.toStringTag] === \"File\"\n            && typeof value.name === \"string\";\n    }\n    get name() {\n        return __classPrivateFieldGet(this, _File_name, \"f\");\n    }\n    get lastModified() {\n        return __classPrivateFieldGet(this, _File_lastModified, \"f\");\n    }\n    get webkitRelativePath() {\n        return \"\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n}\n","import { File } from \"./File.js\";\nexport const isFile = (value) => value instanceof File;\n","export const isFunction = (value) => (typeof value === \"function\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\nvar installChunk = (data) => {\n\tvar {ids, modules, runtime} = data;\n\t// add \"modules\" to the modules object,\n\t// then flag all \"ids\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tfor(moduleId in modules) {\n\t\tif(__webpack_require__.o(modules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = modules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(;i < ids.length; i++) {\n\t\tchunkId = ids[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[ids[i]] = 0;\n\t}\n\n}\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// import() chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[1]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = import(\"./\" + __webpack_require__.u(chunkId)).then(installChunk, (e) => {\n\t\t\t\t\t\tif(installedChunks[chunkId] !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t});\n\t\t\t\t\tvar promise = Promise.race([promise, new Promise((resolve) => (installedChunkData = installedChunks[chunkId] = [resolve]))])\n\t\t\t\t\tpromises.push(installedChunkData[1] = promise);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no external install chunk\n\n// no on chunks loaded","export const default_format = 'RFC3986';\nexport const formatters = {\n    RFC1738: (v) => String(v).replace(/%20/g, '+'),\n    RFC3986: (v) => String(v),\n};\nexport const RFC1738 = 'RFC1738';\nexport const RFC3986 = 'RFC3986';\n//# sourceMappingURL=formats.mjs.map","import { RFC1738 } from \"./formats.mjs\";\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\nconst hex_table = (() => {\n    const array = [];\n    for (let i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n    return array;\n})();\nfunction compact_queue(queue) {\n    while (queue.length > 1) {\n        const item = queue.pop();\n        if (!item)\n            continue;\n        const obj = item.obj[item.prop];\n        if (is_array(obj)) {\n            const compacted = [];\n            for (let j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n            // @ts-ignore\n            item.obj[item.prop] = compacted;\n        }\n    }\n}\nfunction array_to_object(source, options) {\n    const obj = options && options.plainObjects ? Object.create(null) : {};\n    for (let i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n}\nexport function merge(target, source, options = {}) {\n    if (!source) {\n        return target;\n    }\n    if (typeof source !== 'object') {\n        if (is_array(target)) {\n            target.push(source);\n        }\n        else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) ||\n                !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        }\n        else {\n            return [target, source];\n        }\n        return target;\n    }\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n    let mergeTarget = target;\n    if (is_array(target) && !is_array(source)) {\n        // @ts-ignore\n        mergeTarget = array_to_object(target, options);\n    }\n    if (is_array(target) && is_array(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                const targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n            else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function (acc, key) {\n        const value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        }\n        else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n}\nexport function assign_single_source(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n}\nexport function decode(str, _, charset) {\n    const strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    }\n    catch (e) {\n        return strWithoutPlus;\n    }\n}\nconst limit = 1024;\nexport const encode = (str, _defaultEncoder, charset, _kind, format) => {\n    // This code was originally written by Brian White for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    let string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    }\n    else if (typeof str !== 'string') {\n        string = String(str);\n    }\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n    let out = '';\n    for (let j = 0; j < string.length; j += limit) {\n        const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        const arr = [];\n        for (let i = 0; i < segment.length; ++i) {\n            let c = segment.charCodeAt(i);\n            if (c === 0x2d || // -\n                c === 0x2e || // .\n                c === 0x5f || // _\n                c === 0x7e || // ~\n                (c >= 0x30 && c <= 0x39) || // 0-9\n                (c >= 0x41 && c <= 0x5a) || // a-z\n                (c >= 0x61 && c <= 0x7a) || // A-Z\n                (format === RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n            if (c < 0x80) {\n                arr[arr.length] = hex_table[c];\n                continue;\n            }\n            if (c < 0x800) {\n                arr[arr.length] = hex_table[0xc0 | (c >> 6)] + hex_table[0x80 | (c & 0x3f)];\n                continue;\n            }\n            if (c < 0xd800 || c >= 0xe000) {\n                arr[arr.length] =\n                    hex_table[0xe0 | (c >> 12)] + hex_table[0x80 | ((c >> 6) & 0x3f)] + hex_table[0x80 | (c & 0x3f)];\n                continue;\n            }\n            i += 1;\n            c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff));\n            arr[arr.length] =\n                hex_table[0xf0 | (c >> 18)] +\n                    hex_table[0x80 | ((c >> 12) & 0x3f)] +\n                    hex_table[0x80 | ((c >> 6) & 0x3f)] +\n                    hex_table[0x80 | (c & 0x3f)];\n        }\n        out += arr.join('');\n    }\n    return out;\n};\nexport function compact(value) {\n    const queue = [{ obj: { o: value }, prop: 'o' }];\n    const refs = [];\n    for (let i = 0; i < queue.length; ++i) {\n        const item = queue[i];\n        // @ts-ignore\n        const obj = item.obj[item.prop];\n        const keys = Object.keys(obj);\n        for (let j = 0; j < keys.length; ++j) {\n            const key = keys[j];\n            const val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n    compact_queue(queue);\n    return value;\n}\nexport function is_regexp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\nexport function is_buffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\nexport function combine(a, b) {\n    return [].concat(a, b);\n}\nexport function maybe_map(val, fn) {\n    if (is_array(val)) {\n        const mapped = [];\n        for (let i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n}\n//# sourceMappingURL=utils.mjs.map","import { encode, is_buffer, maybe_map } from \"./utils.mjs\";\nimport { default_format, formatters } from \"./formats.mjs\";\nconst has = Object.prototype.hasOwnProperty;\nconst array_prefix_generators = {\n    brackets(prefix) {\n        return String(prefix) + '[]';\n    },\n    comma: 'comma',\n    indices(prefix, key) {\n        return String(prefix) + '[' + key + ']';\n    },\n    repeat(prefix) {\n        return String(prefix);\n    },\n};\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function (arr, value_or_array) {\n    push.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);\n};\nconst to_ISO = Date.prototype.toISOString;\nconst defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: encode,\n    encodeValuesOnly: false,\n    format: default_format,\n    formatter: formatters[default_format],\n    /** @deprecated */\n    indices: false,\n    serializeDate(date) {\n        return to_ISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false,\n};\nfunction is_non_nullish_primitive(v) {\n    return (typeof v === 'string' ||\n        typeof v === 'number' ||\n        typeof v === 'boolean' ||\n        typeof v === 'symbol' ||\n        typeof v === 'bigint');\n}\nconst sentinel = {};\nfunction inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    let obj = object;\n    let tmp_sc = sideChannel;\n    let step = 0;\n    let find_flag = false;\n    while ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {\n        // Where object last appeared in the ref tree\n        const pos = tmp_sc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            }\n            else {\n                find_flag = true; // Break while\n            }\n        }\n        if (typeof tmp_sc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    }\n    else if (obj instanceof Date) {\n        obj = serializeDate?.(obj);\n    }\n    else if (generateArrayPrefix === 'comma' && is_array(obj)) {\n        obj = maybe_map(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate?.(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ?\n                // @ts-expect-error\n                encoder(prefix, defaults.encoder, charset, 'key', format)\n                : prefix;\n        }\n        obj = '';\n    }\n    if (is_non_nullish_primitive(obj) || is_buffer(obj)) {\n        if (encoder) {\n            const key_value = encodeValuesOnly ? prefix\n                // @ts-expect-error\n                : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [\n                formatter?.(key_value) +\n                    '=' +\n                    // @ts-expect-error\n                    formatter?.(encoder(obj, defaults.encoder, charset, 'value', format)),\n            ];\n        }\n        return [formatter?.(prefix) + '=' + formatter?.(String(obj))];\n    }\n    const values = [];\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n    let obj_keys;\n    if (generateArrayPrefix === 'comma' && is_array(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            // @ts-expect-error values only\n            obj = maybe_map(obj, encoder);\n        }\n        obj_keys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    }\n    else if (is_array(filter)) {\n        obj_keys = filter;\n    }\n    else {\n        const keys = Object.keys(obj);\n        obj_keys = sort ? keys.sort(sort) : keys;\n    }\n    const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n    const adjusted_prefix = commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;\n    if (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n        return adjusted_prefix + '[]';\n    }\n    for (let j = 0; j < obj_keys.length; ++j) {\n        const key = obj_keys[j];\n        const value = \n        // @ts-ignore\n        typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        // @ts-ignore\n        const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        const key_prefix = is_array(obj) ?\n            typeof generateArrayPrefix === 'function' ?\n                generateArrayPrefix(adjusted_prefix, encoded_key)\n                : adjusted_prefix\n            : adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');\n        sideChannel.set(object, step);\n        const valueSideChannel = new WeakMap();\n        valueSideChannel.set(sentinel, sideChannel);\n        push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, \n        // @ts-ignore\n        generateArrayPrefix === 'comma' && encodeValuesOnly && is_array(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n}\nfunction normalize_stringify_options(opts = defaults) {\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n    const charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    let format = default_format;\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    const formatter = formatters[format];\n    let filter = defaults.filter;\n    if (typeof opts.filter === 'function' || is_array(opts.filter)) {\n        filter = opts.filter;\n    }\n    let arrayFormat;\n    if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n        arrayFormat = opts.arrayFormat;\n    }\n    else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    }\n    else {\n        arrayFormat = defaults.arrayFormat;\n    }\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    const allowDots = typeof opts.allowDots === 'undefined' ?\n        !!opts.encodeDotInKeys === true ?\n            true\n            : defaults.allowDots\n        : !!opts.allowDots;\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        // @ts-ignore\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        // @ts-ignore\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n    };\n}\nexport function stringify(object, opts = {}) {\n    let obj = object;\n    const options = normalize_stringify_options(opts);\n    let obj_keys;\n    let filter;\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    }\n    else if (is_array(options.filter)) {\n        filter = options.filter;\n        obj_keys = filter;\n    }\n    const keys = [];\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n    const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n    const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n    if (!obj_keys) {\n        obj_keys = Object.keys(obj);\n    }\n    if (options.sort) {\n        obj_keys.sort(options.sort);\n    }\n    const sideChannel = new WeakMap();\n    for (let i = 0; i < obj_keys.length; ++i) {\n        const key = obj_keys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        push_to_array(keys, inner_stringify(obj[key], key, \n        // @ts-expect-error\n        generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    const joined = keys.join(options.delimiter);\n    let prefix = options.addQueryPrefix === true ? '?' : '';\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        }\n        else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n    return joined.length > 0 ? prefix + joined : '';\n}\n//# sourceMappingURL=stringify.mjs.map","export const VERSION = '5.0.0'; // x-release-please-version\n//# sourceMappingURL=version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { castToError } from \"./core.mjs\";\nexport class CloudflareError extends Error {\n}\nexport class APIError extends CloudflareError {\n    constructor(status, error, message, headers) {\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.error = error;\n        const data = error;\n        this.errors = data?.['errors'] ?? [];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ?\n            typeof error.message === 'string' ?\n                error.message\n                : JSON.stringify(error.message)\n            : error ? JSON.stringify(error)\n                : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return '(no status code or body)';\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({ message, cause: castToError(errorResponse) });\n        }\n        const error = errorResponse;\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nexport class APIUserAbortError extends APIError {\n    constructor({ message } = {}) {\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\n    }\n}\nexport class APIConnectionError extends APIError {\n    constructor({ message, cause }) {\n        super(undefined, undefined, message || 'Connection error.', undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause)\n            this.cause = cause;\n    }\n}\nexport class APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}) {\n        super({ message: message ?? 'Request timed out.' });\n    }\n}\nexport class BadRequestError extends APIError {\n}\nexport class AuthenticationError extends APIError {\n}\nexport class PermissionDeniedError extends APIError {\n}\nexport class NotFoundError extends APIError {\n}\nexport class ConflictError extends APIError {\n}\nexport class UnprocessableEntityError extends APIError {\n}\nexport class RateLimitError extends APIError {\n}\nexport class InternalServerError extends APIError {\n}\n//# sourceMappingURL=error.mjs.map","export let auto = false;\nexport let kind = undefined;\nexport let fetch = undefined;\nexport let Request = undefined;\nexport let Response = undefined;\nexport let Headers = undefined;\nexport let FormData = undefined;\nexport let Blob = undefined;\nexport let File = undefined;\nexport let ReadableStream = undefined;\nexport let getMultipartRequestOptions = undefined;\nexport let getDefaultAgent = undefined;\nexport let fileFromPath = undefined;\nexport let isFsReadStream = undefined;\nexport function setShims(shims, options = { auto: false }) {\n    if (auto) {\n        throw new Error(`you must \\`import 'cloudflare/shims/${shims.kind}'\\` before importing anything else from cloudflare`);\n    }\n    if (kind) {\n        throw new Error(`can't \\`import 'cloudflare/shims/${shims.kind}'\\` after \\`import 'cloudflare/shims/${kind}'\\``);\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n}\n//# sourceMappingURL=registry.mjs.map","import { Blob } from \"./Blob.js\";\nexport const isBlob = (value) => value instanceof Blob;\n","import { deprecate } from \"util\";\nexport const deprecateConstructorEntries = deprecate(() => { }, \"Constructor \\\"entries\\\" argument is not spec-compliant \"\n    + \"and will be removed in next major release.\");\n","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FormData_instances, _FormData_entries, _FormData_setEntry;\nimport { inspect } from \"util\";\nimport { File } from \"./File.js\";\nimport { isFile } from \"./isFile.js\";\nimport { isBlob } from \"./isBlob.js\";\nimport { isFunction } from \"./isFunction.js\";\nimport { deprecateConstructorEntries } from \"./deprecateConstructorEntries.js\";\nexport class FormData {\n    constructor(entries) {\n        _FormData_instances.add(this);\n        _FormData_entries.set(this, new Map());\n        if (entries) {\n            deprecateConstructorEntries();\n            entries.forEach(({ name, value, fileName }) => this.append(name, value, fileName));\n        }\n    }\n    static [(_FormData_entries = new WeakMap(), _FormData_instances = new WeakSet(), Symbol.hasInstance)](value) {\n        return Boolean(value\n            && isFunction(value.constructor)\n            && value[Symbol.toStringTag] === \"FormData\"\n            && isFunction(value.append)\n            && isFunction(value.set)\n            && isFunction(value.get)\n            && isFunction(value.getAll)\n            && isFunction(value.has)\n            && isFunction(value.delete)\n            && isFunction(value.entries)\n            && isFunction(value.values)\n            && isFunction(value.keys)\n            && isFunction(value[Symbol.iterator])\n            && isFunction(value.forEach));\n    }\n    append(name, value, fileName) {\n        __classPrivateFieldGet(this, _FormData_instances, \"m\", _FormData_setEntry).call(this, {\n            name,\n            fileName,\n            append: true,\n            rawValue: value,\n            argsLength: arguments.length\n        });\n    }\n    set(name, value, fileName) {\n        __classPrivateFieldGet(this, _FormData_instances, \"m\", _FormData_setEntry).call(this, {\n            name,\n            fileName,\n            append: false,\n            rawValue: value,\n            argsLength: arguments.length\n        });\n    }\n    get(name) {\n        const field = __classPrivateFieldGet(this, _FormData_entries, \"f\").get(String(name));\n        if (!field) {\n            return null;\n        }\n        return field[0];\n    }\n    getAll(name) {\n        const field = __classPrivateFieldGet(this, _FormData_entries, \"f\").get(String(name));\n        if (!field) {\n            return [];\n        }\n        return field.slice();\n    }\n    has(name) {\n        return __classPrivateFieldGet(this, _FormData_entries, \"f\").has(String(name));\n    }\n    delete(name) {\n        __classPrivateFieldGet(this, _FormData_entries, \"f\").delete(String(name));\n    }\n    *keys() {\n        for (const key of __classPrivateFieldGet(this, _FormData_entries, \"f\").keys()) {\n            yield key;\n        }\n    }\n    *entries() {\n        for (const name of this.keys()) {\n            const values = this.getAll(name);\n            for (const value of values) {\n                yield [name, value];\n            }\n        }\n    }\n    *values() {\n        for (const [, value] of this) {\n            yield value;\n        }\n    }\n    [(_FormData_setEntry = function _FormData_setEntry({ name, rawValue, append, fileName, argsLength }) {\n        const methodName = append ? \"append\" : \"set\";\n        if (argsLength < 2) {\n            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `\n                + `2 arguments required, but only ${argsLength} present.`);\n        }\n        name = String(name);\n        let value;\n        if (isFile(rawValue)) {\n            value = fileName === undefined\n                ? rawValue\n                : new File([rawValue], fileName, {\n                    type: rawValue.type,\n                    lastModified: rawValue.lastModified\n                });\n        }\n        else if (isBlob(rawValue)) {\n            value = new File([rawValue], fileName === undefined ? \"blob\" : fileName, {\n                type: rawValue.type\n            });\n        }\n        else if (fileName) {\n            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `\n                + \"parameter 2 is not of type 'Blob'.\");\n        }\n        else {\n            value = String(rawValue);\n        }\n        const values = __classPrivateFieldGet(this, _FormData_entries, \"f\").get(name);\n        if (!values) {\n            return void __classPrivateFieldGet(this, _FormData_entries, \"f\").set(name, [value]);\n        }\n        if (!append) {\n            return void __classPrivateFieldGet(this, _FormData_entries, \"f\").set(name, [value]);\n        }\n        values.push(value);\n    }, Symbol.iterator)]() {\n        return this.entries();\n    }\n    forEach(callback, thisArg) {\n        for (const [name, value] of this) {\n            callback.call(thisArg, value, name, this);\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"FormData\";\n    }\n    [inspect.custom]() {\n        return this[Symbol.toStringTag];\n    }\n}\n","export * from \"./FormData.js\";\nexport * from \"./Blob.js\";\nexport * from \"./File.js\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs\");","const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\nfunction createBoundary() {\n    let size = 16;\n    let res = \"\";\n    while (size--) {\n        res += alphabet[(Math.random() * alphabet.length) << 0];\n    }\n    return res;\n}\nexport default createBoundary;\n","const getType = (value) => (Object.prototype.toString.call(value).slice(8, -1).toLowerCase());\nfunction isPlainObject(value) {\n    if (getType(value) !== \"object\") {\n        return false;\n    }\n    const pp = Object.getPrototypeOf(value);\n    if (pp === null || pp === undefined) {\n        return true;\n    }\n    const Ctor = pp.constructor && pp.constructor.toString();\n    return Ctor === Object.toString();\n}\nexport default isPlainObject;\n","const normalizeValue = (value) => String(value)\n    .replace(/\\r|\\n/g, (match, i, str) => {\n    if ((match === \"\\r\" && str[i + 1] !== \"\\n\")\n        || (match === \"\\n\" && str[i - 1] !== \"\\r\")) {\n        return \"\\r\\n\";\n    }\n    return match;\n});\nexport default normalizeValue;\n","const escapeName = (name) => String(name)\n    .replace(/\\r/g, \"%0D\")\n    .replace(/\\n/g, \"%0A\")\n    .replace(/\"/g, \"%22\");\nexport default escapeName;\n","const isFunction = (value) => (typeof value === \"function\");\nexport default isFunction;\n","import isFunction from \"./isFunction.js\";\nexport const isFileLike = (value) => Boolean(value\n    && typeof value === \"object\"\n    && isFunction(value.constructor)\n    && value[Symbol.toStringTag] === \"File\"\n    && isFunction(value.stream)\n    && value.name != null\n    && value.size != null\n    && value.lastModified != null);\n","import isFunction from \"./isFunction.js\";\nexport const isFormData = (value) => Boolean(value\n    && isFunction(value.constructor)\n    && value[Symbol.toStringTag] === \"FormData\"\n    && isFunction(value.append)\n    && isFunction(value.getAll)\n    && isFunction(value.entries)\n    && isFunction(value[Symbol.iterator]));\nexport const isFormDataLike = isFormData;\n","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FormDataEncoder_instances, _FormDataEncoder_CRLF, _FormDataEncoder_CRLF_BYTES, _FormDataEncoder_CRLF_BYTES_LENGTH, _FormDataEncoder_DASHES, _FormDataEncoder_encoder, _FormDataEncoder_footer, _FormDataEncoder_form, _FormDataEncoder_options, _FormDataEncoder_getFieldHeader;\nimport createBoundary from \"./util/createBoundary.js\";\nimport isPlainObject from \"./util/isPlainObject.js\";\nimport normalize from \"./util/normalizeValue.js\";\nimport escape from \"./util/escapeName.js\";\nimport { isFileLike } from \"./util/isFileLike.js\";\nimport { isFormData } from \"./util/isFormData.js\";\nconst defaultOptions = {\n    enableAdditionalHeaders: false\n};\nexport class FormDataEncoder {\n    constructor(form, boundaryOrOptions, options) {\n        _FormDataEncoder_instances.add(this);\n        _FormDataEncoder_CRLF.set(this, \"\\r\\n\");\n        _FormDataEncoder_CRLF_BYTES.set(this, void 0);\n        _FormDataEncoder_CRLF_BYTES_LENGTH.set(this, void 0);\n        _FormDataEncoder_DASHES.set(this, \"-\".repeat(2));\n        _FormDataEncoder_encoder.set(this, new TextEncoder());\n        _FormDataEncoder_footer.set(this, void 0);\n        _FormDataEncoder_form.set(this, void 0);\n        _FormDataEncoder_options.set(this, void 0);\n        if (!isFormData(form)) {\n            throw new TypeError(\"Expected first argument to be a FormData instance.\");\n        }\n        let boundary;\n        if (isPlainObject(boundaryOrOptions)) {\n            options = boundaryOrOptions;\n        }\n        else {\n            boundary = boundaryOrOptions;\n        }\n        if (!boundary) {\n            boundary = createBoundary();\n        }\n        if (typeof boundary !== \"string\") {\n            throw new TypeError(\"Expected boundary argument to be a string.\");\n        }\n        if (options && !isPlainObject(options)) {\n            throw new TypeError(\"Expected options argument to be an object.\");\n        }\n        __classPrivateFieldSet(this, _FormDataEncoder_form, form, \"f\");\n        __classPrivateFieldSet(this, _FormDataEncoder_options, { ...defaultOptions, ...options }, \"f\");\n        __classPrivateFieldSet(this, _FormDataEncoder_CRLF_BYTES, __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _FormDataEncoder_CRLF_BYTES_LENGTH, __classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES, \"f\").byteLength, \"f\");\n        this.boundary = `form-data-boundary-${boundary}`;\n        this.contentType = `multipart/form-data; boundary=${this.boundary}`;\n        __classPrivateFieldSet(this, _FormDataEncoder_footer, __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(`${__classPrivateFieldGet(this, _FormDataEncoder_DASHES, \"f\")}${this.boundary}${__classPrivateFieldGet(this, _FormDataEncoder_DASHES, \"f\")}${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\").repeat(2)}`), \"f\");\n        this.contentLength = String(this.getContentLength());\n        this.headers = Object.freeze({\n            \"Content-Type\": this.contentType,\n            \"Content-Length\": this.contentLength\n        });\n        Object.defineProperties(this, {\n            boundary: { writable: false, configurable: false },\n            contentType: { writable: false, configurable: false },\n            contentLength: { writable: false, configurable: false },\n            headers: { writable: false, configurable: false }\n        });\n    }\n    getContentLength() {\n        let length = 0;\n        for (const [name, raw] of __classPrivateFieldGet(this, _FormDataEncoder_form, \"f\")) {\n            const value = isFileLike(raw) ? raw : __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(normalize(raw));\n            length += __classPrivateFieldGet(this, _FormDataEncoder_instances, \"m\", _FormDataEncoder_getFieldHeader).call(this, name, value).byteLength;\n            length += isFileLike(value) ? value.size : value.byteLength;\n            length += __classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES_LENGTH, \"f\");\n        }\n        return length + __classPrivateFieldGet(this, _FormDataEncoder_footer, \"f\").byteLength;\n    }\n    *values() {\n        for (const [name, raw] of __classPrivateFieldGet(this, _FormDataEncoder_form, \"f\").entries()) {\n            const value = isFileLike(raw) ? raw : __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(normalize(raw));\n            yield __classPrivateFieldGet(this, _FormDataEncoder_instances, \"m\", _FormDataEncoder_getFieldHeader).call(this, name, value);\n            yield value;\n            yield __classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES, \"f\");\n        }\n        yield __classPrivateFieldGet(this, _FormDataEncoder_footer, \"f\");\n    }\n    async *encode() {\n        for (const part of this.values()) {\n            if (isFileLike(part)) {\n                yield* part.stream();\n            }\n            else {\n                yield part;\n            }\n        }\n    }\n    [(_FormDataEncoder_CRLF = new WeakMap(), _FormDataEncoder_CRLF_BYTES = new WeakMap(), _FormDataEncoder_CRLF_BYTES_LENGTH = new WeakMap(), _FormDataEncoder_DASHES = new WeakMap(), _FormDataEncoder_encoder = new WeakMap(), _FormDataEncoder_footer = new WeakMap(), _FormDataEncoder_form = new WeakMap(), _FormDataEncoder_options = new WeakMap(), _FormDataEncoder_instances = new WeakSet(), _FormDataEncoder_getFieldHeader = function _FormDataEncoder_getFieldHeader(name, value) {\n        let header = \"\";\n        header += `${__classPrivateFieldGet(this, _FormDataEncoder_DASHES, \"f\")}${this.boundary}${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")}`;\n        header += `Content-Disposition: form-data; name=\"${escape(name)}\"`;\n        if (isFileLike(value)) {\n            header += `; filename=\"${escape(value.name)}\"${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")}`;\n            header += `Content-Type: ${value.type || \"application/octet-stream\"}`;\n        }\n        if (__classPrivateFieldGet(this, _FormDataEncoder_options, \"f\").enableAdditionalHeaders === true) {\n            header += `${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\")}Content-Length: ${isFileLike(value) ? value.size : value.byteLength}`;\n        }\n        return __classPrivateFieldGet(this, _FormDataEncoder_encoder, \"f\").encode(`${header}${__classPrivateFieldGet(this, _FormDataEncoder_CRLF, \"f\").repeat(2)}`);\n    }, Symbol.iterator)]() {\n        return this.values();\n    }\n    [Symbol.asyncIterator]() {\n        return this.encode();\n    }\n}\nexport const Encoder = FormDataEncoder;\n","export * from \"./FormDataEncoder.js\";\nexport * from \"./FileLike.js\";\nexport * from \"./FormDataLike.js\";\nexport * from \"./util/isFileLike.js\";\nexport * from \"./util/isFormData.js\";\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n    constructor(body) {\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return 'MultipartBody';\n    }\n}\n//# sourceMappingURL=MultipartBody.mjs.map","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:stream/web\");","import * as nf from 'node-fetch';\nimport * as fd from 'formdata-node';\nimport KeepAliveAgent from 'agentkeepalive';\nimport { AbortController as AbortControllerPolyfill } from 'abort-controller';\nimport { ReadStream as FsReadStream } from 'node:fs';\nimport { FormDataEncoder } from 'form-data-encoder';\nimport { Readable } from 'node:stream';\nimport { MultipartBody } from \"./MultipartBody.mjs\";\nimport { ReadableStream } from 'node:stream/web';\nlet fileFromPathWarned = false;\nasync function fileFromPath(path, ...args) {\n    // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n    const { fileFromPath: _fileFromPath } = await import('formdata-node/file-from-path');\n    if (!fileFromPathWarned) {\n        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n        fileFromPathWarned = true;\n    }\n    // @ts-ignore\n    return await _fileFromPath(path, ...args);\n}\nconst defaultHttpAgent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\nconst defaultHttpsAgent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\nasync function getMultipartRequestOptions(form, opts) {\n    const encoder = new FormDataEncoder(form);\n    const readable = Readable.from(encoder);\n    const body = new MultipartBody(readable);\n    const headers = {\n        ...opts.headers,\n        ...encoder.headers,\n        'Content-Length': encoder.contentLength,\n    };\n    return { ...opts, body: body, headers };\n}\nexport function getRuntime() {\n    // Polyfill global object if needed.\n    if (typeof AbortController === 'undefined') {\n        // @ts-expect-error (the types are subtly different, but compatible in practice)\n        globalThis.AbortController = AbortControllerPolyfill;\n    }\n    return {\n        kind: 'node',\n        fetch: nf.default,\n        Request: nf.Request,\n        Response: nf.Response,\n        Headers: nf.Headers,\n        FormData: fd.FormData,\n        Blob: fd.Blob,\n        File: fd.File,\n        ReadableStream,\n        getMultipartRequestOptions,\n        getDefaultAgent: (url) => (url.startsWith('https') ? defaultHttpsAgent : defaultHttpAgent),\n        fileFromPath,\n        isFsReadStream: (value) => value instanceof FsReadStream,\n    };\n}\n//# sourceMappingURL=node-runtime.mjs.map","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'cloudflare/_shims/auto/runtime';\nexport const init = () => {\n  if (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\n};\nexport * from './registry.mjs';\n\ninit();\n","import { FormData, File, getMultipartRequestOptions, isFsReadStream, } from \"./_shims/index.mjs\";\nexport { fileFromPath } from \"./_shims/index.mjs\";\nexport const isResponseLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.url === 'string' &&\n    typeof value.blob === 'function';\nexport const isFileLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.name === 'string' &&\n    typeof value.lastModified === 'number' &&\n    isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.size === 'number' &&\n    typeof value.type === 'string' &&\n    typeof value.text === 'function' &&\n    typeof value.slice === 'function' &&\n    typeof value.arrayBuffer === 'function';\nexport const isUploadable = (value) => {\n    return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options) {\n    // If it's a promise, resolve it.\n    value = await value;\n    // If we've been given a `File` we don't need to do anything\n    if (isFileLike(value)) {\n        return value;\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file');\n        // we need to convert the `Blob` into an array buffer because the `Blob` class\n        // that `node-fetch` defines is incompatible with the web standard which results\n        // in `new File` interpreting it as a string instead of binary data.\n        const data = isBlobLike(blob) ? [(await blob.arrayBuffer())] : [blob];\n        return new File(data, name, options);\n    }\n    const bits = await getBytes(value);\n    name || (name = getName(value) ?? 'unknown_file');\n    if (!options?.type) {\n        const type = bits[0]?.type;\n        if (typeof type === 'string') {\n            options = { ...options, type };\n        }\n    }\n    return new File(bits, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === 'string' ||\n        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n        value instanceof ArrayBuffer) {\n        parts.push(value);\n    }\n    else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    }\n    else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value) {\n            parts.push(chunk); // TODO, consider validating?\n        }\n    }\n    else {\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n            ?.name}; props: ${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\nfunction getName(value) {\n    return (getStringFromMaybeBuffer(value.name) ||\n        getStringFromMaybeBuffer(value.filename) ||\n        // For fs.ReadStream\n        getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop());\n}\nconst getStringFromMaybeBuffer = (x) => {\n    if (typeof x === 'string')\n        return x;\n    if (typeof Buffer !== 'undefined' && x instanceof Buffer)\n        return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\nexport const isMultipartBody = (body) => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async (opts) => {\n    if (!hasUploadableValue(opts.body))\n        return opts;\n    const form = await createForm(opts.body, opts);\n    return getMultipartRequestOptions(form, opts);\n};\nexport const multipartFormRequestOptions = async (opts) => {\n    const form = await createForm(opts.body, opts);\n    return getMultipartRequestOptions(form, opts);\n};\nexport const createForm = async (body, opts) => {\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value, opts)));\n    return form;\n};\nconst hasUploadableValue = (value) => {\n    if (isUploadable(value))\n        return true;\n    if (Array.isArray(value))\n        return value.some(hasUploadableValue);\n    if (value && typeof value === 'object') {\n        for (const k in value) {\n            if (hasUploadableValue(value[k]))\n                return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value, opts) => {\n    if (opts?.__multipartSyntax === 'json') {\n        return await addFormValueJson(form, key, value);\n    }\n    if (value === undefined)\n        return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        form.append(key, String(value));\n    }\n    else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    }\n    else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n    }\n    else if (typeof value === 'object') {\n        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n    }\n};\nconst addFormValueJson = async (form, key, value) => {\n    if (value === undefined)\n        return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        form.append(key, String(value));\n        return;\n    }\n    if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n        return;\n    }\n    if (Array.isArray(value) && value.some((e) => isUploadable(e))) {\n        for (const entry of value) {\n            form.append(key, await toFile(entry));\n        }\n        return;\n    }\n    if (Array.isArray(value) || typeof value === 'object') {\n        form.append(key, new File([JSON.stringify(value)], key, { type: 'application/json' }));\n        return;\n    }\n    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n};\n//# sourceMappingURL=uploads.mjs.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _APIClient_baseURLOverridden, _AbstractPage_client;\nimport { VERSION } from \"./version.mjs\";\nimport { CloudflareError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, } from \"./error.mjs\";\nimport { kind as shimsKind, getDefaultAgent, fetch, init, } from \"./_shims/index.mjs\";\n// try running side effects outside of _shims/index to workaround https://github.com/vercel/next.js/issues/76881\ninit();\nimport { isBlobLike, isMultipartBody } from \"./uploads.mjs\";\nexport { maybeMultipartFormRequestOptions, multipartFormRequestOptions, createForm, } from \"./uploads.mjs\";\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get('content-type');\n    const mediaType = contentType?.split(';')[0]?.trim();\n    const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');\n    if (isJSON) {\n        const json = await response.json();\n        debug('response', response.status, response.url, response.headers, json);\n        return json;\n    }\n    const text = await response.text();\n    debug('response', response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse) {\n        super((resolve) => {\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props), props));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'cloudflare'`:\n     * - `import 'cloudflare/shims/node'` (if you're running on Node)\n     * - `import 'cloudflare/shims/web'` (otherwise)\n     */\n    asResponse() {\n        return this.responsePromise.then((p) => p.response);\n    }\n    /**\n     * Gets the parsed response data and the raw `Response` instance.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'cloudflare'`:\n     * - `import 'cloudflare/shims/node'` (if you're running on Node)\n     * - `import 'cloudflare/shims/web'` (otherwise)\n     */\n    async withResponse() {\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n        return { data, response };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nexport class APIClient {\n    constructor({ baseURL, apiVersion, baseURLOverridden, maxRetries = 2, timeout = 60000, // 1 minute\n    httpAgent, fetch: overriddenFetch, }) {\n        _APIClient_baseURLOverridden.set(this, void 0);\n        this.baseURL = baseURL;\n        this.apiVersion = apiVersion;\n        __classPrivateFieldSet(this, _APIClient_baseURLOverridden, baseURLOverridden, \"f\");\n        this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n        this.timeout = validatePositiveInteger('timeout', timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overriddenFetch ?? fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */\n    defaultHeaders(opts) {\n        return {\n            Accept: 'application/json',\n            ...(['head', 'get'].includes(opts.method) ? {} : { 'Content-Type': 'application/json' }),\n            'User-Agent': this.getUserAgent(),\n            'api-version': this.getAPIVerson(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts),\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */\n    validateHeaders(headers, customHeaders, usingCustomFetch) { }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest('get', path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest('post', path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest('patch', path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest('put', path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest('delete', path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then(async (opts) => {\n            const body = opts && isBlobLike(opts?.body) ? new DataView(await opts.body.arrayBuffer())\n                : opts?.body instanceof DataView ? opts.body\n                    : opts?.body instanceof ArrayBuffer ? new DataView(opts.body)\n                        : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer)\n                            : opts?.body;\n            return { method, path, ...opts, body };\n        }));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\n    }\n    calculateContentLength(body) {\n        if (typeof body === 'string') {\n            if (typeof Buffer !== 'undefined') {\n                return Buffer.byteLength(body, 'utf8').toString();\n            }\n            if (typeof TextEncoder !== 'undefined') {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        }\n        else if (ArrayBuffer.isView(body)) {\n            return body.byteLength.toString();\n        }\n        return null;\n    }\n    async buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = { ...inputOptions };\n        const { method, path, query, defaultBaseURL, headers: headers = {} } = options;\n        const body = ArrayBuffer.isView(options.body) || (options.__binaryRequest && typeof options.body === 'string') ?\n            options.body\n            : isMultipartBody(options.body) ? options.body.body\n                : options.body ? JSON.stringify(options.body, null, 2)\n                    : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query, defaultBaseURL);\n        if ('timeout' in options)\n            validatePositiveInteger('timeout', options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n        const minAgentTimeout = options.timeout + 1000;\n        if (typeof httpAgent?.options?.timeout === 'number' &&\n            minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== 'get') {\n            if (!inputOptions.idempotencyKey)\n                inputOptions.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = inputOptions.idempotencyKey;\n        }\n        const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });\n        const req = {\n            method,\n            ...(body && { body: body }),\n            headers: reqHeaders,\n            ...(httpAgent && { agent: httpAgent }),\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: options.signal ?? null,\n        };\n        return { req, url, timeout: options.timeout };\n    }\n    buildHeaders({ options, headers, contentLength, retryCount, }) {\n        const reqHeaders = {};\n        if (contentLength) {\n            reqHeaders['content-length'] = contentLength;\n        }\n        const defaultHeaders = this.defaultHeaders(options);\n        applyHeadersMut(reqHeaders, defaultHeaders);\n        applyHeadersMut(reqHeaders, headers);\n        // let builtin fetch set the Content-Type for multipart bodies\n        if (isMultipartBody(options.body) && shimsKind !== 'node') {\n            delete reqHeaders['content-type'];\n        }\n        // Don't set theses headers if they were already set or removed through default headers or by the caller.\n        // We check `defaultHeaders` and `headers`, which can contain nulls, instead of `reqHeaders` to account\n        // for the removal case.\n        if (getHeader(defaultHeaders, 'x-stainless-retry-count') === undefined &&\n            getHeader(headers, 'x-stainless-retry-count') === undefined) {\n            reqHeaders['x-stainless-retry-count'] = String(retryCount);\n        }\n        if (getHeader(defaultHeaders, 'x-stainless-timeout') === undefined &&\n            getHeader(headers, 'x-stainless-timeout') === undefined &&\n            options.timeout) {\n            reqHeaders['x-stainless-timeout'] = String(options.timeout);\n        }\n        this.validateHeaders(reqHeaders, headers, this.fetch !== fetch);\n        return reqHeaders;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */\n    async prepareOptions(options) { }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */\n    async prepareRequest(request, { url, options }) { }\n    parseHeaders(headers) {\n        return (!headers ? {}\n            : Symbol.iterator in headers ?\n                Object.fromEntries(Array.from(headers).map((header) => [...header]))\n                : { ...headers });\n    }\n    makeStatusError(status, error, message, headers) {\n        return APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = await this.buildRequest(options, {\n            retryCount: maxRetries - retriesRemaining,\n        });\n        await this.prepareRequest(req, { url, options });\n        debug('request', url, options, req.headers);\n        if (options.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if (options.signal?.aborted) {\n                throw new APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === 'AbortError') {\n                throw new APIConnectionTimeoutError();\n            }\n            throw new APIConnectionError({ cause: response });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e) => castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return { response, options, controller };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query, defaultBaseURL) {\n        const baseURL = (!__classPrivateFieldGet(this, _APIClient_baseURLOverridden, \"f\") && defaultBaseURL) || this.baseURL;\n        const url = isAbsoluteURL(path) ?\n            new URL(path)\n            : new URL(baseURL + (baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = { ...defaultQuery, ...query };\n        }\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query)\n            .filter(([_, value]) => typeof value !== 'undefined')\n            .map(([key, value]) => {\n            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new CloudflareError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        })\n            .join('&');\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal)\n            signal.addEventListener('abort', () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        const fetchOptions = {\n            signal: controller.signal,\n            ...options,\n        };\n        if (fetchOptions.method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = fetchOptions.method.toUpperCase();\n        }\n        return (\n        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        this.fetch.call(undefined, url, fetchOptions).finally(() => {\n            clearTimeout(timeout);\n        }));\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get('x-should-retry');\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === 'true')\n            return true;\n        if (shouldRetryHeader === 'false')\n            return false;\n        // Retry on request timeouts.\n        if (response.status === 408)\n            return true;\n        // Retry on lock timeouts.\n        if (response.status === 409)\n            return true;\n        // Retry on rate limits.\n        if (response.status === 429)\n            return true;\n        // Retry internal errors.\n        if (response.status >= 500)\n            return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.['retry-after'];\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            }\n            else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${VERSION}`;\n    }\n    getAPIVerson() {\n        return this.apiVersion;\n    }\n}\n_APIClient_baseURLOverridden = new WeakMap();\nexport class AbstractPage {\n    constructor(client, response, body, options) {\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length)\n            return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new CloudflareError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n        }\n        const nextOptions = { ...this.options };\n        if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n            nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n        }\n        else if ('url' in nextInfo) {\n            const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n            for (const [key, value] of params) {\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while (page.hasNextPage()) {\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()) {\n            for (const item of page.getPaginatedItems()) {\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n    constructor(client, request, Page) {\n        super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */\n    async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page) {\n            yield item;\n        }\n    }\n}\nexport const createResponseHeaders = (headers) => {\n    return new Proxy(Object.fromEntries(\n    // @ts-ignore\n    headers.entries()), {\n        get(target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        },\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    defaultBaseURL: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __multipartSyntax: true,\n    __binaryRequest: true,\n    __binaryResponse: true,\n};\nexport const isRequestOptions = (obj) => {\n    return (typeof obj === 'object' &&\n        obj !== null &&\n        !isEmptyObj(obj) &&\n        Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k)));\n};\nconst getPlatformProperties = () => {\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n            'X-Stainless-Runtime': 'deno',\n            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n        };\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\n            'X-Stainless-Runtime': 'edge',\n            'X-Stainless-Runtime-Version': process.version,\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(process.platform),\n            'X-Stainless-Arch': normalizeArch(process.arch),\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': process.version,\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': 'unknown',\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n            'X-Stainless-Runtime-Version': browserInfo.version,\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        'X-Stainless-Lang': 'js',\n        'X-Stainless-Package-Version': VERSION,\n        'X-Stainless-OS': 'Unknown',\n        'X-Stainless-Arch': 'unknown',\n        'X-Stainless-Runtime': 'unknown',\n        'X-Stainless-Runtime-Version': 'unknown',\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === 'undefined' || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns) {\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return { browser: key, version: `${major}.${minor}.${patch}` };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch) => {\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === 'x32')\n        return 'x32';\n    if (arch === 'x86_64' || arch === 'x64')\n        return 'x64';\n    if (arch === 'arm')\n        return 'arm';\n    if (arch === 'aarch64' || arch === 'arm64')\n        return 'arm64';\n    if (arch)\n        return `other:${arch}`;\n    return 'unknown';\n};\nconst normalizePlatform = (platform) => {\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes('ios'))\n        return 'iOS';\n    if (platform === 'android')\n        return 'Android';\n    if (platform === 'darwin')\n        return 'MacOS';\n    if (platform === 'win32')\n        return 'Windows';\n    if (platform === 'freebsd')\n        return 'FreeBSD';\n    if (platform === 'openbsd')\n        return 'OpenBSD';\n    if (platform === 'linux')\n        return 'Linux';\n    if (platform)\n        return `Other:${platform}`;\n    return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\n};\nexport const safeJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url) => {\n    return startsWithSchemeRegexp.test(url);\n};\nexport const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n) => {\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\n        throw new CloudflareError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new CloudflareError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nexport const castToError = (err) => {\n    if (err instanceof Error)\n        return err;\n    if (typeof err === 'object' && err !== null) {\n        try {\n            return new Error(JSON.stringify(err));\n        }\n        catch { }\n    }\n    return new Error(err);\n};\nexport const ensurePresent = (value) => {\n    if (value == null)\n        throw new CloudflareError(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env) => {\n    if (typeof process !== 'undefined') {\n        return process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof Deno !== 'undefined') {\n        return Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\nexport const coerceInteger = (value) => {\n    if (typeof value === 'number')\n        return Math.round(value);\n    if (typeof value === 'string')\n        return parseInt(value, 10);\n    throw new CloudflareError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = (value) => {\n    if (typeof value === 'number')\n        return value;\n    if (typeof value === 'string')\n        return parseFloat(value);\n    throw new CloudflareError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = (value) => {\n    if (typeof value === 'boolean')\n        return value;\n    if (typeof value === 'string')\n        return value === 'true';\n    return Boolean(value);\n};\nexport const maybeCoerceInteger = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nexport const maybeCoerceFloat = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n    if (!obj)\n        return true;\n    for (const _k in obj)\n        return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders, newHeaders) {\n    for (const k in newHeaders) {\n        if (!hasOwn(newHeaders, k))\n            continue;\n        const lowerKey = k.toLowerCase();\n        if (!lowerKey)\n            continue;\n        const val = newHeaders[k];\n        if (val === null) {\n            delete targetHeaders[lowerKey];\n        }\n        else if (val !== undefined) {\n            targetHeaders[lowerKey] = val;\n        }\n    }\n}\nexport function debug(action, ...args) {\n    if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\n        console.log(`Cloudflare:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\nexport const isRunningInBrowser = () => {\n    return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n        // @ts-ignore\n        typeof window.document !== 'undefined' &&\n        // @ts-ignore\n        typeof navigator !== 'undefined');\n};\nexport const isHeadersProtocol = (headers) => {\n    return typeof headers?.get === 'function';\n};\nexport const getRequiredHeader = (headers, header) => {\n    const foundHeader = getHeader(headers, header);\n    if (foundHeader === undefined) {\n        throw new Error(`Could not find ${header} header`);\n    }\n    return foundHeader;\n};\nexport const getHeader = (headers, header) => {\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = header[0]?.toUpperCase() +\n            header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)) {\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1)\n                    return value[0];\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n                return value[0];\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str) => {\n    if (!str)\n        return '';\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str).toString('base64');\n    }\n    if (typeof btoa !== 'undefined') {\n        return btoa(str);\n    }\n    throw new CloudflareError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexport function isObj(obj) {\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n//# sourceMappingURL=core.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport class APIResource {\n    constructor(client) {\n        this._client = client;\n    }\n}\n//# sourceMappingURL=resource.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { AbstractPage } from \"./core.mjs\";\nexport class V4PagePagination extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.result = body.result || {};\n        this.result_info = body.result_info || {};\n    }\n    getPaginatedItems() {\n        return this.result?.items ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info)\n            return null;\n        if ('params' in info)\n            return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length)\n            return null;\n        return params;\n    }\n    nextPageInfo() {\n        const query = this.options.query;\n        const currentPage = query?.page ?? 1;\n        return { params: { page: currentPage + 1 } };\n    }\n}\nexport class V4PagePaginationArray extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.result = body.result || [];\n        this.result_info = body.result_info || {};\n    }\n    getPaginatedItems() {\n        return this.result ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info)\n            return null;\n        if ('params' in info)\n            return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length)\n            return null;\n        return params;\n    }\n    nextPageInfo() {\n        const query = this.options.query;\n        const currentPage = query?.page ?? 1;\n        return { params: { page: currentPage + 1 } };\n    }\n}\nexport class CursorPagination extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.result = body.result || [];\n        this.result_info = body.result_info || {};\n    }\n    getPaginatedItems() {\n        return this.result ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info)\n            return null;\n        if ('params' in info)\n            return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length)\n            return null;\n        return params;\n    }\n    nextPageInfo() {\n        const cursor = this.result_info?.cursor;\n        if (!cursor) {\n            return null;\n        }\n        return {\n            params: {\n                cursor,\n            },\n        };\n    }\n}\nexport class CursorPaginationAfter extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.result = body.result || [];\n        this.result_info = body.result_info || {};\n    }\n    getPaginatedItems() {\n        return this.result ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info)\n            return null;\n        if ('params' in info)\n            return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length)\n            return null;\n        return params;\n    }\n    nextPageInfo() {\n        const cursor = this.result_info?.cursors?.after;\n        if (!cursor) {\n            return null;\n        }\n        return {\n            params: {\n                cursor,\n            },\n        };\n    }\n}\nexport class CursorLimitPagination extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.result = body.result || [];\n        this.result_info = body.result_info || {};\n    }\n    getPaginatedItems() {\n        return this.result ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info)\n            return null;\n        if ('params' in info)\n            return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length)\n            return null;\n        return params;\n    }\n    nextPageInfo() {\n        const cursor = this.result_info?.cursor;\n        if (!cursor) {\n            return null;\n        }\n        return {\n            params: {\n                cursor,\n            },\n        };\n    }\n}\nexport class SinglePage extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.result = body.result || [];\n    }\n    getPaginatedItems() {\n        return this.result ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    /**\n     * This page represents a response that isn't actually paginated at the API level\n     * so there will never be any next page params.\n     */\n    nextPageParams() {\n        return null;\n    }\n    nextPageInfo() {\n        return null;\n    }\n}\n//# sourceMappingURL=pagination.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { SinglePage, V4PagePaginationArray } from \"../pagination.mjs\";\nexport class MembersV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class RolesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class SubscriptionsSinglePage extends SinglePage {\n}\nexport class TokensV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class AuditLogsV4PagePaginationArray extends V4PagePaginationArray {\n}\n//# sourceMappingURL=shared.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { MembersV4PagePaginationArray } from \"../shared.mjs\";\nexport class Members extends APIResource {\n    /**\n     * Add a user to the list of members for this account.\n     *\n     * @example\n     * ```ts\n     * const member = await client.accounts.members.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   email: 'user@example.com',\n     *   roles: ['3536bcfad5faccb999b47003c79917fb'],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/members`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify an account member.\n     *\n     * @example\n     * ```ts\n     * const member = await client.accounts.members.update(\n     *   '4536bcfad5faccb111b47003c79917fa',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(memberId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/members/${memberId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all members of an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const member of client.accounts.members.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/members`, MembersV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Remove a member from an account.\n     *\n     * @example\n     * ```ts\n     * const member = await client.accounts.members.delete(\n     *   '4536bcfad5faccb111b47003c79917fa',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(memberId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/members/${memberId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a specific member of an account.\n     *\n     * @example\n     * ```ts\n     * const member = await client.accounts.members.get(\n     *   '4536bcfad5faccb111b47003c79917fa',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(memberId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/members/${memberId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport { MembersV4PagePaginationArray };\n//# sourceMappingURL=members.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { RolesV4PagePaginationArray } from \"../shared.mjs\";\nexport class Roles extends APIResource {\n    /**\n     * Get all available roles for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const role of client.accounts.roles.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/roles`, RolesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Get information about a specific role for an account.\n     *\n     * @example\n     * ```ts\n     * const role = await client.accounts.roles.get(\n     *   '3536bcfad5faccb999b47003c79917fb',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(roleId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/roles/${roleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport { RolesV4PagePaginationArray };\n//# sourceMappingURL=roles.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SubscriptionsSinglePage } from \"../shared.mjs\";\nexport class Subscriptions extends APIResource {\n    /**\n     * Creates an account subscription.\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.accounts.subscriptions.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/subscriptions`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an account subscription.\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.accounts.subscriptions.update(\n     *     '506e3185e9c882d175a2d0cb0093d9f2',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(subscriptionIdentifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/subscriptions/${subscriptionIdentifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes an account's subscription.\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.accounts.subscriptions.delete(\n     *     '506e3185e9c882d175a2d0cb0093d9f2',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(subscriptionIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/subscriptions/${subscriptionIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all of an account's subscriptions.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const subscription of client.accounts.subscriptions.get(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/subscriptions`, SubscriptionsSinglePage, options);\n    }\n}\nexport { SubscriptionsSinglePage };\n//# sourceMappingURL=subscriptions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { CursorPaginationAfter } from \"../../../pagination.mjs\";\nexport class Audit extends APIResource {\n    /**\n     * Gets a list of audit logs for an account. <br /> <br /> This is the beta release\n     * of Audit Logs Version 2. Since this is a beta version, there may be gaps or\n     * missing entries in the available audit logs. Be aware of the following\n     * limitations. <br /> <ul> <li>Audit logs are available only for the past 30 days.\n     * <br /></li> <li>Error handling is not yet implemented. <br /> </li> </ul>\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const auditListResponse of client.accounts.logs.audit.list(\n     *   {\n     *     account_id: 'a67e14daa5f8dceeb91fe5449ba496ef',\n     *     before: '2024-10-31',\n     *     since: '2024-10-30',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/logs/audit`, AuditListResponsesCursorPaginationAfter, { query, ...options });\n    }\n}\nexport class AuditListResponsesCursorPaginationAfter extends CursorPaginationAfter {\n}\nAudit.AuditListResponsesCursorPaginationAfter = AuditListResponsesCursorPaginationAfter;\n//# sourceMappingURL=audit.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AuditAPI from \"./audit.mjs\";\nimport { Audit, AuditListResponsesCursorPaginationAfter } from \"./audit.mjs\";\nexport class Logs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.audit = new AuditAPI.Audit(this._client);\n    }\n}\nLogs.Audit = Audit;\nLogs.AuditListResponsesCursorPaginationAfter = AuditListResponsesCursorPaginationAfter;\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class PermissionGroups extends APIResource {\n    /**\n     * Find all available permission groups for Account Owned API Tokens\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const permissionGroupListResponse of client.accounts.tokens.permissionGroups.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/tokens/permission_groups`, PermissionGroupListResponsesSinglePage, { query, ...options });\n    }\n    /**\n     * Find all available permission groups for Account Owned API Tokens\n     *\n     * @example\n     * ```ts\n     * const permissionGroups =\n     *   await client.accounts.tokens.permissionGroups.get({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/tokens/permission_groups`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PermissionGroupListResponsesSinglePage extends SinglePage {\n}\nPermissionGroups.PermissionGroupListResponsesSinglePage = PermissionGroupListResponsesSinglePage;\n//# sourceMappingURL=permission-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Value extends APIResource {\n    /**\n     * Roll the Account Owned API token secret.\n     *\n     * @example\n     * ```ts\n     * const tokenValue =\n     *   await client.accounts.tokens.value.update(\n     *     'ed17574386854bf78a67040be0a770b0',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(tokenId, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/tokens/${tokenId}/value`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=value.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { TokensV4PagePaginationArray } from \"../../shared.mjs\";\nimport * as PermissionGroupsAPI from \"./permission-groups.mjs\";\nimport { PermissionGroupListResponsesSinglePage, PermissionGroups, } from \"./permission-groups.mjs\";\nimport * as ValueAPI from \"./value.mjs\";\nimport { Value } from \"./value.mjs\";\nexport class Tokens extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.permissionGroups = new PermissionGroupsAPI.PermissionGroups(this._client);\n        this.value = new ValueAPI.Value(this._client);\n    }\n    /**\n     * Create a new Account Owned API token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.accounts.tokens.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'readonly token',\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       permission_groups: [\n     *         { id: 'c8fed203ed3043cba015a93ad1616f1f' },\n     *         { id: '82e64a83756745bbbb1c9c2701bf816b' },\n     *       ],\n     *       resources: { foo: 'string' },\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/tokens`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.accounts.tokens.update(\n     *   'ed17574386854bf78a67040be0a770b0',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'readonly token',\n     *     policies: [\n     *       {\n     *         effect: 'allow',\n     *         permission_groups: [\n     *           { id: 'c8fed203ed3043cba015a93ad1616f1f' },\n     *           { id: '82e64a83756745bbbb1c9c2701bf816b' },\n     *         ],\n     *         resources: { foo: 'string' },\n     *       },\n     *     ],\n     *   },\n     * );\n     * ```\n     */\n    update(tokenId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/tokens/${tokenId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all Account Owned API tokens created for this account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const token of client.accounts.tokens.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/tokens`, TokensV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Destroy an Account Owned API token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.accounts.tokens.delete(\n     *   'ed17574386854bf78a67040be0a770b0',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(tokenId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/tokens/${tokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a specific Account Owned API token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.accounts.tokens.get(\n     *   'ed17574386854bf78a67040be0a770b0',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(tokenId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/tokens/${tokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Test whether a token works.\n     *\n     * @example\n     * ```ts\n     * const response = await client.accounts.tokens.verify({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    verify(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/tokens/verify`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nTokens.PermissionGroups = PermissionGroups;\nTokens.PermissionGroupListResponsesSinglePage = PermissionGroupListResponsesSinglePage;\nTokens.Value = Value;\nexport { TokensV4PagePaginationArray };\n//# sourceMappingURL=tokens.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport * as MembersAPI from \"./members.mjs\";\nimport { Members, } from \"./members.mjs\";\nimport * as RolesAPI from \"./roles.mjs\";\nimport { Roles } from \"./roles.mjs\";\nimport * as SubscriptionsAPI from \"./subscriptions.mjs\";\nimport { Subscriptions, } from \"./subscriptions.mjs\";\nimport * as LogsAPI from \"./logs/logs.mjs\";\nimport { Logs } from \"./logs/logs.mjs\";\nimport * as TokensAPI from \"./tokens/tokens.mjs\";\nimport { Tokens, } from \"./tokens/tokens.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Accounts extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.members = new MembersAPI.Members(this._client);\n        this.roles = new RolesAPI.Roles(this._client);\n        this.subscriptions = new SubscriptionsAPI.Subscriptions(this._client);\n        this.tokens = new TokensAPI.Tokens(this._client);\n        this.logs = new LogsAPI.Logs(this._client);\n    }\n    /**\n     * Create an account (only available for tenant admins at this time)\n     *\n     * @example\n     * ```ts\n     * const account = await client.accounts.create({\n     *   name: 'name',\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/accounts', { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing account.\n     *\n     * @example\n     * ```ts\n     * const account = await client.accounts.update({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'Demo Account',\n     *   type: 'standard',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/accounts', AccountsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a specific account (only available for tenant admins at this time). This\n     * is a permanent operation that will delete any zones or other resources under the\n     * account\n     *\n     * @example\n     * ```ts\n     * const account = await client.accounts.delete({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a specific account that you are a member of.\n     *\n     * @example\n     * ```ts\n     * const account = await client.accounts.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AccountsV4PagePaginationArray extends V4PagePaginationArray {\n}\nAccounts.AccountsV4PagePaginationArray = AccountsV4PagePaginationArray;\nAccounts.Members = Members;\nAccounts.Roles = Roles;\nAccounts.Subscriptions = Subscriptions;\nAccounts.Tokens = Tokens;\nAccounts.Logs = Logs;\n//# sourceMappingURL=accounts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { V4PagePaginationArray } from \"../pagination.mjs\";\nexport class OriginCACertificates extends APIResource {\n    /**\n     * Create an Origin CA certificate. You can use an Origin CA Key as your User\n     * Service Key or an API token when calling this endpoint ([see above](#requests)).\n     *\n     * @example\n     * ```ts\n     * const originCACertificate =\n     *   await client.originCACertificates.create();\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/certificates', { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all existing Origin CA certificates for a given zone. You can use an Origin\n     * CA Key as your User Service Key or an API token when calling this endpoint\n     * ([see above](#requests)).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const originCACertificate of client.originCACertificates.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query, options) {\n        return this._client.getAPIList('/certificates', OriginCACertificatesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Revoke an existing Origin CA certificate by its serial number. You can use an\n     * Origin CA Key as your User Service Key or an API token when calling this\n     * endpoint ([see above](#requests)).\n     *\n     * @example\n     * ```ts\n     * const originCACertificate =\n     *   await client.originCACertificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *   );\n     * ```\n     */\n    delete(certificateId, options) {\n        return this._client.delete(`/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get an existing Origin CA certificate by its serial number. You can use an\n     * Origin CA Key as your User Service Key or an API token when calling this\n     * endpoint ([see above](#requests)).\n     *\n     * @example\n     * ```ts\n     * const originCACertificate =\n     *   await client.originCACertificates.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *   );\n     * ```\n     */\n    get(certificateId, options) {\n        return this._client.get(`/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OriginCACertificatesV4PagePaginationArray extends V4PagePaginationArray {\n}\nOriginCACertificates.OriginCACertificatesV4PagePaginationArray = OriginCACertificatesV4PagePaginationArray;\n//# sourceMappingURL=origin-ca-certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { isRequestOptions } from \"../core.mjs\";\nexport class IPs extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/ips', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ips.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { isRequestOptions } from \"../core.mjs\";\nimport { V4PagePaginationArray } from \"../pagination.mjs\";\nexport class Memberships extends APIResource {\n    /**\n     * Accept or reject this account invitation.\n     *\n     * @example\n     * ```ts\n     * const membership = await client.memberships.update(\n     *   '4536bcfad5faccb111b47003c79917fa',\n     *   { status: 'accepted' },\n     * );\n     * ```\n     */\n    update(membershipId, body, options) {\n        return this._client.put(`/memberships/${membershipId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/memberships', MembershipsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Remove the associated member from an account.\n     *\n     * @example\n     * ```ts\n     * const membership = await client.memberships.delete(\n     *   '4536bcfad5faccb111b47003c79917fa',\n     * );\n     * ```\n     */\n    delete(membershipId, options) {\n        return this._client.delete(`/memberships/${membershipId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a specific membership.\n     *\n     * @example\n     * ```ts\n     * const membership = await client.memberships.get(\n     *   '4536bcfad5faccb111b47003c79917fa',\n     * );\n     * ```\n     */\n    get(membershipId, options) {\n        return this._client.get(`/memberships/${membershipId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class MembershipsV4PagePaginationArray extends V4PagePaginationArray {\n}\nMemberships.MembershipsV4PagePaginationArray = MembershipsV4PagePaginationArray;\n//# sourceMappingURL=memberships.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport { AuditLogsV4PagePaginationArray } from \"../shared.mjs\";\nexport class AuditLogs extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/user/audit_logs', AuditLogsV4PagePaginationArray, { query, ...options });\n    }\n}\nexport { AuditLogsV4PagePaginationArray };\n//# sourceMappingURL=audit-logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Invites extends APIResource {\n    /**\n     * Lists all invitations associated with my user.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const invite of client.user.invites.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(options) {\n        return this._client.getAPIList('/user/invites', InvitesSinglePage, options);\n    }\n    /**\n     * Responds to an invitation.\n     *\n     * @example\n     * ```ts\n     * const invite = await client.user.invites.edit(\n     *   '4f5f0c14a2a41d5063dd301b2f829f04',\n     *   { status: 'accepted' },\n     * );\n     * ```\n     */\n    edit(inviteId, body, options) {\n        return this._client.patch(`/user/invites/${inviteId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets the details of an invitation.\n     *\n     * @example\n     * ```ts\n     * const invite = await client.user.invites.get(\n     *   '4f5f0c14a2a41d5063dd301b2f829f04',\n     * );\n     * ```\n     */\n    get(inviteId, options) {\n        return this._client.get(`/user/invites/${inviteId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class InvitesSinglePage extends SinglePage {\n}\nInvites.InvitesSinglePage = InvitesSinglePage;\n//# sourceMappingURL=invites.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Organizations extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/user/organizations', OrganizationsV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Removes association to an organization.\n     *\n     * @deprecated\n     */\n    delete(organizationId, options) {\n        return this._client.delete(`/user/organizations/${organizationId}`, options);\n    }\n    /**\n     * Gets a specific organization the user is associated with.\n     *\n     * @deprecated\n     */\n    get(organizationId, options) {\n        return this._client.get(`/user/organizations/${organizationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OrganizationsV4PagePaginationArray extends V4PagePaginationArray {\n}\nOrganizations.OrganizationsV4PagePaginationArray = OrganizationsV4PagePaginationArray;\n//# sourceMappingURL=organizations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SubscriptionsSinglePage } from \"../shared.mjs\";\nexport class Subscriptions extends APIResource {\n    /**\n     * Updates a user's subscriptions.\n     *\n     * @example\n     * ```ts\n     * const subscription = await client.user.subscriptions.update(\n     *   '506e3185e9c882d175a2d0cb0093d9f2',\n     * );\n     * ```\n     */\n    update(identifier, body, options) {\n        return this._client.put(`/user/subscriptions/${identifier}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a user's subscription.\n     *\n     * @example\n     * ```ts\n     * const subscription = await client.user.subscriptions.delete(\n     *   '506e3185e9c882d175a2d0cb0093d9f2',\n     * );\n     * ```\n     */\n    delete(identifier, options) {\n        return this._client.delete(`/user/subscriptions/${identifier}`, options);\n    }\n    /**\n     * Lists all of a user's subscriptions.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const subscription of client.user.subscriptions.get()) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(options) {\n        return this._client.getAPIList('/user/subscriptions', SubscriptionsSinglePage, options);\n    }\n}\nexport { SubscriptionsSinglePage };\n//# sourceMappingURL=subscriptions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class History extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/user/billing/history', BillingHistoriesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class BillingHistoriesV4PagePaginationArray extends V4PagePaginationArray {\n}\nHistory.BillingHistoriesV4PagePaginationArray = BillingHistoriesV4PagePaginationArray;\n//# sourceMappingURL=history.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Profile extends APIResource {\n    /**\n     * Accesses your billing profile object.\n     *\n     * @deprecated\n     */\n    get(options) {\n        return this._client.get('/user/billing/profile', options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=profile.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as HistoryAPI from \"./history.mjs\";\nimport { BillingHistoriesV4PagePaginationArray, History } from \"./history.mjs\";\nimport * as ProfileAPI from \"./profile.mjs\";\nimport { Profile } from \"./profile.mjs\";\nexport class Billing extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.history = new HistoryAPI.History(this._client);\n        this.profile = new ProfileAPI.Profile(this._client);\n    }\n}\nBilling.History = History;\nBilling.BillingHistoriesV4PagePaginationArray = BillingHistoriesV4PagePaginationArray;\nBilling.Profile = Profile;\n//# sourceMappingURL=billing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class PermissionGroups extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/user/tokens/permission_groups', PermissionGroupListResponsesSinglePage, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class PermissionGroupListResponsesSinglePage extends SinglePage {\n}\nPermissionGroups.PermissionGroupListResponsesSinglePage = PermissionGroupListResponsesSinglePage;\n//# sourceMappingURL=permission-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Value extends APIResource {\n    /**\n     * Roll the token secret.\n     *\n     * @example\n     * ```ts\n     * const tokenValue = await client.user.tokens.value.update(\n     *   'ed17574386854bf78a67040be0a770b0',\n     *   {},\n     * );\n     * ```\n     */\n    update(tokenId, body, options) {\n        return this._client.put(`/user/tokens/${tokenId}/value`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=value.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { TokensV4PagePaginationArray } from \"../../shared.mjs\";\nimport * as PermissionGroupsAPI from \"./permission-groups.mjs\";\nimport { PermissionGroupListResponsesSinglePage, PermissionGroups, } from \"./permission-groups.mjs\";\nimport * as ValueAPI from \"./value.mjs\";\nimport { Value } from \"./value.mjs\";\nexport class Tokens extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.permissionGroups = new PermissionGroupsAPI.PermissionGroups(this._client);\n        this.value = new ValueAPI.Value(this._client);\n    }\n    /**\n     * Create a new access token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.user.tokens.create({\n     *   name: 'readonly token',\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       permission_groups: [\n     *         { id: 'c8fed203ed3043cba015a93ad1616f1f' },\n     *         { id: '82e64a83756745bbbb1c9c2701bf816b' },\n     *       ],\n     *       resources: { foo: 'string' },\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/user/tokens', { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.user.tokens.update(\n     *   'ed17574386854bf78a67040be0a770b0',\n     *   {\n     *     name: 'readonly token',\n     *     policies: [\n     *       {\n     *         effect: 'allow',\n     *         permission_groups: [\n     *           { id: 'c8fed203ed3043cba015a93ad1616f1f' },\n     *           { id: '82e64a83756745bbbb1c9c2701bf816b' },\n     *         ],\n     *         resources: { foo: 'string' },\n     *       },\n     *     ],\n     *   },\n     * );\n     * ```\n     */\n    update(tokenId, body, options) {\n        return this._client.put(`/user/tokens/${tokenId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/user/tokens', TokensV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Destroy a token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.user.tokens.delete(\n     *   'ed17574386854bf78a67040be0a770b0',\n     * );\n     * ```\n     */\n    delete(tokenId, options) {\n        return this._client.delete(`/user/tokens/${tokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a specific token.\n     *\n     * @example\n     * ```ts\n     * const token = await client.user.tokens.get(\n     *   'ed17574386854bf78a67040be0a770b0',\n     * );\n     * ```\n     */\n    get(tokenId, options) {\n        return this._client.get(`/user/tokens/${tokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Test whether a token works.\n     *\n     * @example\n     * ```ts\n     * const response = await client.user.tokens.verify();\n     * ```\n     */\n    verify(options) {\n        return this._client.get('/user/tokens/verify', options)._thenUnwrap((obj) => obj.result);\n    }\n}\nTokens.PermissionGroups = PermissionGroups;\nTokens.PermissionGroupListResponsesSinglePage = PermissionGroupListResponsesSinglePage;\nTokens.Value = Value;\nexport { TokensV4PagePaginationArray };\n//# sourceMappingURL=tokens.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AuditLogsAPI from \"./audit-logs.mjs\";\nimport { AuditLogs } from \"./audit-logs.mjs\";\nimport * as InvitesAPI from \"./invites.mjs\";\nimport { Invites, InvitesSinglePage } from \"./invites.mjs\";\nimport * as OrganizationsAPI from \"./organizations.mjs\";\nimport { Organizations, OrganizationsV4PagePaginationArray, } from \"./organizations.mjs\";\nimport * as SubscriptionsAPI from \"./subscriptions.mjs\";\nimport { Subscriptions, } from \"./subscriptions.mjs\";\nimport * as BillingAPI from \"./billing/billing.mjs\";\nimport { Billing } from \"./billing/billing.mjs\";\nimport * as TokensAPI from \"./tokens/tokens.mjs\";\nimport { Tokens, } from \"./tokens/tokens.mjs\";\nexport class User extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.auditLogs = new AuditLogsAPI.AuditLogs(this._client);\n        this.billing = new BillingAPI.Billing(this._client);\n        this.invites = new InvitesAPI.Invites(this._client);\n        this.organizations = new OrganizationsAPI.Organizations(this._client);\n        this.subscriptions = new SubscriptionsAPI.Subscriptions(this._client);\n        this.tokens = new TokensAPI.Tokens(this._client);\n    }\n    /**\n     * Edit part of your user details.\n     *\n     * @example\n     * ```ts\n     * const response = await client.user.edit();\n     * ```\n     */\n    edit(body, options) {\n        return this._client.patch('/user', { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * User Details\n     *\n     * @example\n     * ```ts\n     * const user = await client.user.get();\n     * ```\n     */\n    get(options) {\n        return this._client.get('/user', options)._thenUnwrap((obj) => obj.result);\n    }\n}\nUser.AuditLogs = AuditLogs;\nUser.Billing = Billing;\nUser.Invites = Invites;\nUser.InvitesSinglePage = InvitesSinglePage;\nUser.Organizations = Organizations;\nUser.OrganizationsV4PagePaginationArray = OrganizationsV4PagePaginationArray;\nUser.Subscriptions = Subscriptions;\nUser.Tokens = Tokens;\n//# sourceMappingURL=user.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class ActivationCheck extends APIResource {\n    /**\n     * Triggeres a new activation check for a PENDING Zone. This can be triggered every\n     * 5 min for paygo/ent customers, every hour for FREE Zones.\n     *\n     * @example\n     * ```ts\n     * const response = await client.zones.activationCheck.trigger(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    trigger(params, options) {\n        const { zone_id } = params;\n        return this._client.put(`/zones/${zone_id}/activation_check`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=activation-check.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\n/**\n * @deprecated Use DNS settings API instead.\n */\nexport class CustomNameservers extends APIResource {\n    /**\n     * Set metadata for account-level custom nameservers on a zone.\n     *\n     * If you would like new zones in the account to use account custom nameservers by\n     * default, use PUT /accounts/:identifier to set the account setting\n     * use_account_custom_ns_by_default to true.\n     *\n     * Deprecated in favor of\n     * [Update DNS Settings](https://developers.cloudflare.com/api/operations/dns-settings-for-a-zone-update-dns-settings).\n     *\n     * @deprecated Use [DNS settings API](https://developers.cloudflare.com/api/resources/dns/subresources/settings/methods/put/) instead.\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/custom_ns`, CustomNameserverUpdateResponsesSinglePage, {\n            body,\n            method: 'put',\n            ...options,\n        });\n    }\n    /**\n     * Get metadata for account-level custom nameservers on a zone.\n     *\n     * Deprecated in favor of\n     * [Show DNS Settings](https://developers.cloudflare.com/api/operations/dns-settings-for-a-zone-list-dns-settings).\n     *\n     * @deprecated Use [DNS settings API](https://developers.cloudflare.com/api/resources/dns/subresources/settings/methods/get/) instead.\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/custom_ns`, options);\n    }\n}\nexport class CustomNameserverUpdateResponsesSinglePage extends SinglePage {\n}\nCustomNameservers.CustomNameserverUpdateResponsesSinglePage = CustomNameserverUpdateResponsesSinglePage;\n//# sourceMappingURL=custom-nameservers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Holds extends APIResource {\n    /**\n     * Enforce a zone hold on the zone, blocking the creation and activation of zones\n     * with this zone's hostname.\n     *\n     * @example\n     * ```ts\n     * const zoneHold = await client.zones.holds.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, include_subdomains } = params;\n        return this._client.post(`/zones/${zone_id}/hold`, {\n            query: { include_subdomains },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Stop enforcement of a zone hold on the zone, permanently or temporarily,\n     * allowing the creation and activation of zones with this zone's hostname.\n     *\n     * @example\n     * ```ts\n     * const zoneHold = await client.zones.holds.delete({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id, hold_after } = params;\n        return this._client.delete(`/zones/${zone_id}/hold`, {\n            query: { hold_after },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update the `hold_after` and/or `include_subdomains` values on an existing zone\n     * hold. The hold is enabled if the `hold_after` date-time value is in the past.\n     *\n     * @example\n     * ```ts\n     * const zoneHold = await client.zones.holds.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/hold`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve whether the zone is subject to a zone hold, and metadata about the\n     * hold.\n     *\n     * @example\n     * ```ts\n     * const zoneHold = await client.zones.holds.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/hold`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=holds.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Plans extends APIResource {\n    /**\n     * Lists available plans the zone can subscribe to.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const availableRatePlan of client.zones.plans.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/available_plans`, AvailableRatePlansSinglePage, options);\n    }\n    /**\n     * Details of the available plan that the zone can subscribe to.\n     *\n     * @example\n     * ```ts\n     * const availableRatePlan = await client.zones.plans.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(planIdentifier, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/available_plans/${planIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AvailableRatePlansSinglePage extends SinglePage {\n}\nPlans.AvailableRatePlansSinglePage = AvailableRatePlansSinglePage;\n//# sourceMappingURL=plans.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class RatePlans extends APIResource {\n    /**\n     * Lists all rate plans the zone can subscribe to.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const ratePlanGetResponse of client.zones.ratePlans.get(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/available_rate_plans`, RatePlanGetResponsesSinglePage, options);\n    }\n}\nexport class RatePlanGetResponsesSinglePage extends SinglePage {\n}\nRatePlans.RatePlanGetResponsesSinglePage = RatePlanGetResponsesSinglePage;\n//# sourceMappingURL=rate-plans.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Updates a single zone setting by the identifier\n     *\n     * @example\n     * ```ts\n     * const response = await client.zones.settings.edit(\n     *   'always_online',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(settingId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/settings/${settingId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single zone setting by name\n     *\n     * @example\n     * ```ts\n     * const setting = await client.zones.settings.get(\n     *   'always_online',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(settingId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/settings/${settingId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Subscriptions extends APIResource {\n    /**\n     * Create a zone subscription, either plan or add-ons.\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.zones.subscriptions.create({\n     *     zone_id: '506e3185e9c882d175a2d0cb0093d9f2',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/subscription`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates zone subscriptions, either plan or add-ons.\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.zones.subscriptions.update({\n     *     zone_id: '506e3185e9c882d175a2d0cb0093d9f2',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/subscription`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists zone subscription details.\n     *\n     * @example\n     * ```ts\n     * const subscription = await client.zones.subscriptions.get({\n     *   zone_id: '506e3185e9c882d175a2d0cb0093d9f2',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/subscription`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=subscriptions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport * as ActivationCheckAPI from \"./activation-check.mjs\";\nimport { ActivationCheck, } from \"./activation-check.mjs\";\nimport * as CustomNameserversAPI from \"./custom-nameservers.mjs\";\nimport { CustomNameserverUpdateResponsesSinglePage, CustomNameservers, } from \"./custom-nameservers.mjs\";\nimport * as HoldsAPI from \"./holds.mjs\";\nimport { Holds } from \"./holds.mjs\";\nimport * as PlansAPI from \"./plans.mjs\";\nimport { AvailableRatePlansSinglePage, Plans, } from \"./plans.mjs\";\nimport * as RatePlansAPI from \"./rate-plans.mjs\";\nimport { RatePlanGetResponsesSinglePage, RatePlans, } from \"./rate-plans.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as SubscriptionsAPI from \"./subscriptions.mjs\";\nimport { Subscriptions, } from \"./subscriptions.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Zones extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.activationCheck = new ActivationCheckAPI.ActivationCheck(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.customNameservers = new CustomNameserversAPI.CustomNameservers(this._client);\n        this.holds = new HoldsAPI.Holds(this._client);\n        this.subscriptions = new SubscriptionsAPI.Subscriptions(this._client);\n        this.plans = new PlansAPI.Plans(this._client);\n        this.ratePlans = new RatePlansAPI.RatePlans(this._client);\n    }\n    /**\n     * Create Zone\n     *\n     * @example\n     * ```ts\n     * const zone = await client.zones.create({\n     *   account: {},\n     *   name: 'example.com',\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/zones', { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/zones', ZonesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes an existing zone.\n     *\n     * @example\n     * ```ts\n     * const zone = await client.zones.delete({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edits a zone. Only one zone property can be changed at a time.\n     *\n     * @example\n     * ```ts\n     * const zone = await client.zones.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Zone Details\n     *\n     * @example\n     * ```ts\n     * const zone = await client.zones.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ZonesV4PagePaginationArray extends V4PagePaginationArray {\n}\nZones.ZonesV4PagePaginationArray = ZonesV4PagePaginationArray;\nZones.ActivationCheck = ActivationCheck;\nZones.Settings = Settings;\nZones.CustomNameservers = CustomNameservers;\nZones.CustomNameserverUpdateResponsesSinglePage = CustomNameserverUpdateResponsesSinglePage;\nZones.Holds = Holds;\nZones.Subscriptions = Subscriptions;\nZones.Plans = Plans;\nZones.AvailableRatePlansSinglePage = AvailableRatePlansSinglePage;\nZones.RatePlans = RatePlans;\nZones.RatePlanGetResponsesSinglePage = RatePlanGetResponsesSinglePage;\n//# sourceMappingURL=zones.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Previews extends APIResource {\n    /**\n     * Get the result of a previous preview operation using the provided preview_id.\n     *\n     * @example\n     * ```ts\n     * const preview = await client.loadBalancers.previews.get(\n     *   'p1aba936b94213e5b8dca0c0dbf1f9cc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(previewId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/load_balancers/preview/${previewId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=previews.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Regions extends APIResource {\n    /**\n     * List all region mappings.\n     *\n     * @example\n     * ```ts\n     * const regions = await client.loadBalancers.regions.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/load_balancers/regions`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a single region mapping.\n     *\n     * @example\n     * ```ts\n     * const region = await client.loadBalancers.regions.get(\n     *   'WNAM',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(regionId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/load_balancers/regions/${regionId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=regions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePagination } from \"../../pagination.mjs\";\nexport class Searches extends APIResource {\n    /**\n     * Search for Load Balancing resources.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const searchListResponse of client.loadBalancers.searches.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/load_balancers/search`, SearchListResponsesV4PagePagination, { query, ...options });\n    }\n}\nexport class SearchListResponsesV4PagePagination extends V4PagePagination {\n}\nSearches.SearchListResponsesV4PagePagination = SearchListResponsesV4PagePagination;\n//# sourceMappingURL=searches.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Previews extends APIResource {\n    /**\n     * Preview pools using the specified monitor with provided monitor details. The\n     * returned preview_id can be used in the preview endpoint to retrieve the results.\n     *\n     * @example\n     * ```ts\n     * const preview =\n     *   await client.loadBalancers.monitors.previews.create(\n     *     'f1aba936b94213e5b8dca0c0dbf1f9cc',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(monitorId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/load_balancers/monitors/${monitorId}/preview`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=previews.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class References extends APIResource {\n    /**\n     * Get the list of resources that reference the provided monitor.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const referenceGetResponse of client.loadBalancers.monitors.references.get(\n     *   'f1aba936b94213e5b8dca0c0dbf1f9cc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(monitorId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/load_balancers/monitors/${monitorId}/references`, ReferenceGetResponsesSinglePage, options);\n    }\n}\nexport class ReferenceGetResponsesSinglePage extends SinglePage {\n}\nReferences.ReferenceGetResponsesSinglePage = ReferenceGetResponsesSinglePage;\n//# sourceMappingURL=references.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as PreviewsAPI from \"./previews.mjs\";\nimport { Previews } from \"./previews.mjs\";\nimport * as ReferencesAPI from \"./references.mjs\";\nimport { ReferenceGetResponsesSinglePage, References, } from \"./references.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Monitors extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.previews = new PreviewsAPI.Previews(this._client);\n        this.references = new ReferencesAPI.References(this._client);\n    }\n    /**\n     * Create a configured monitor.\n     *\n     * @example\n     * ```ts\n     * const monitor = await client.loadBalancers.monitors.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/load_balancers/monitors`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify a configured monitor.\n     *\n     * @example\n     * ```ts\n     * const monitor = await client.loadBalancers.monitors.update(\n     *   'f1aba936b94213e5b8dca0c0dbf1f9cc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(monitorId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/load_balancers/monitors/${monitorId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List configured monitors for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const monitor of client.loadBalancers.monitors.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/load_balancers/monitors`, MonitorsSinglePage, options);\n    }\n    /**\n     * Delete a configured monitor.\n     *\n     * @example\n     * ```ts\n     * const monitor = await client.loadBalancers.monitors.delete(\n     *   'f1aba936b94213e5b8dca0c0dbf1f9cc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(monitorId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/load_balancers/monitors/${monitorId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Apply changes to an existing monitor, overwriting the supplied properties.\n     *\n     * @example\n     * ```ts\n     * const monitor = await client.loadBalancers.monitors.edit(\n     *   'f1aba936b94213e5b8dca0c0dbf1f9cc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(monitorId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/load_balancers/monitors/${monitorId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List a single configured monitor for an account.\n     *\n     * @example\n     * ```ts\n     * const monitor = await client.loadBalancers.monitors.get(\n     *   'f1aba936b94213e5b8dca0c0dbf1f9cc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(monitorId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/load_balancers/monitors/${monitorId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class MonitorsSinglePage extends SinglePage {\n}\nMonitors.MonitorsSinglePage = MonitorsSinglePage;\nMonitors.Previews = Previews;\nMonitors.References = References;\nMonitors.ReferenceGetResponsesSinglePage = ReferenceGetResponsesSinglePage;\n//# sourceMappingURL=monitors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Health extends APIResource {\n    /**\n     * Preview pool health using provided monitor details. The returned preview_id can\n     * be used in the preview endpoint to retrieve the results.\n     *\n     * @example\n     * ```ts\n     * const health =\n     *   await client.loadBalancers.pools.health.create(\n     *     '17b5962d775c646f3f9725cbc7a53df4',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(poolId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/load_balancers/pools/${poolId}/preview`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch the latest pool health status for a single pool.\n     *\n     * @example\n     * ```ts\n     * const health = await client.loadBalancers.pools.health.get(\n     *   '17b5962d775c646f3f9725cbc7a53df4',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(poolId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/load_balancers/pools/${poolId}/health`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=health.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class References extends APIResource {\n    /**\n     * Get the list of resources that reference the provided pool.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const referenceGetResponse of client.loadBalancers.pools.references.get(\n     *   '17b5962d775c646f3f9725cbc7a53df4',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(poolId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/load_balancers/pools/${poolId}/references`, ReferenceGetResponsesSinglePage, options);\n    }\n}\nexport class ReferenceGetResponsesSinglePage extends SinglePage {\n}\nReferences.ReferenceGetResponsesSinglePage = ReferenceGetResponsesSinglePage;\n//# sourceMappingURL=references.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as HealthAPI from \"./health.mjs\";\nimport { Health, } from \"./health.mjs\";\nimport * as ReferencesAPI from \"./references.mjs\";\nimport { ReferenceGetResponsesSinglePage, References, } from \"./references.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Pools extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.health = new HealthAPI.Health(this._client);\n        this.references = new ReferencesAPI.References(this._client);\n    }\n    /**\n     * Create a new pool.\n     *\n     * @example\n     * ```ts\n     * const pool = await client.loadBalancers.pools.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'primary-dc-1',\n     *   origins: [{}],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/load_balancers/pools`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify a configured pool.\n     *\n     * @example\n     * ```ts\n     * const pool = await client.loadBalancers.pools.update(\n     *   '17b5962d775c646f3f9725cbc7a53df4',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'primary-dc-1',\n     *     origins: [{}],\n     *   },\n     * );\n     * ```\n     */\n    update(poolId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/load_balancers/pools/${poolId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List configured pools.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const pool of client.loadBalancers.pools.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/load_balancers/pools`, PoolsSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete a configured pool.\n     *\n     * @example\n     * ```ts\n     * const pool = await client.loadBalancers.pools.delete(\n     *   '17b5962d775c646f3f9725cbc7a53df4',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(poolId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/load_balancers/pools/${poolId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Apply changes to a number of existing pools, overwriting the supplied\n     * properties. Pools are ordered by ascending `name`. Returns the list of affected\n     * pools. Supports the standard pagination query parameters, either\n     * `limit`/`offset` or `per_page`/`page`.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const pool of client.loadBalancers.pools.bulkEdit(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulkEdit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/load_balancers/pools`, PoolsSinglePage, {\n            body,\n            method: 'patch',\n            ...options,\n        });\n    }\n    /**\n     * Apply changes to an existing pool, overwriting the supplied properties.\n     *\n     * @example\n     * ```ts\n     * const pool = await client.loadBalancers.pools.edit(\n     *   '17b5962d775c646f3f9725cbc7a53df4',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(poolId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/load_balancers/pools/${poolId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single configured pool.\n     *\n     * @example\n     * ```ts\n     * const pool = await client.loadBalancers.pools.get(\n     *   '17b5962d775c646f3f9725cbc7a53df4',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(poolId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/load_balancers/pools/${poolId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PoolsSinglePage extends SinglePage {\n}\nPools.PoolsSinglePage = PoolsSinglePage;\nPools.Health = Health;\nPools.References = References;\nPools.ReferenceGetResponsesSinglePage = ReferenceGetResponsesSinglePage;\n//# sourceMappingURL=pools.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as PreviewsAPI from \"./previews.mjs\";\nimport { Previews } from \"./previews.mjs\";\nimport * as RegionsAPI from \"./regions.mjs\";\nimport { Regions } from \"./regions.mjs\";\nimport * as SearchesAPI from \"./searches.mjs\";\nimport { SearchListResponsesV4PagePagination, Searches, } from \"./searches.mjs\";\nimport * as MonitorsAPI from \"./monitors/monitors.mjs\";\nimport { Monitors, MonitorsSinglePage, } from \"./monitors/monitors.mjs\";\nimport * as PoolsAPI from \"./pools/pools.mjs\";\nimport { Pools, PoolsSinglePage, } from \"./pools/pools.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class LoadBalancers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.monitors = new MonitorsAPI.Monitors(this._client);\n        this.pools = new PoolsAPI.Pools(this._client);\n        this.previews = new PreviewsAPI.Previews(this._client);\n        this.regions = new RegionsAPI.Regions(this._client);\n        this.searches = new SearchesAPI.Searches(this._client);\n    }\n    /**\n     * Create a new load balancer.\n     *\n     * @example\n     * ```ts\n     * const loadBalancer = await client.loadBalancers.create({\n     *   zone_id: '699d98642c564d2e855e9661899b7252',\n     *   default_pools: [\n     *     '17b5962d775c646f3f9725cbc7a53df4',\n     *     '9290f38c5d07c2e2f4df57b1f61d4196',\n     *     '00920f38ce07c2e2f4df50b1f61d4194',\n     *   ],\n     *   fallback_pool: 'fallback_pool',\n     *   name: 'www.example.com',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/load_balancers`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a configured load balancer.\n     *\n     * @example\n     * ```ts\n     * const loadBalancer = await client.loadBalancers.update(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   {\n     *     zone_id: '699d98642c564d2e855e9661899b7252',\n     *     default_pools: [\n     *       '17b5962d775c646f3f9725cbc7a53df4',\n     *       '9290f38c5d07c2e2f4df57b1f61d4196',\n     *       '00920f38ce07c2e2f4df50b1f61d4194',\n     *     ],\n     *     fallback_pool: 'fallback_pool',\n     *     name: 'www.example.com',\n     *   },\n     * );\n     * ```\n     */\n    update(loadBalancerId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/load_balancers/${loadBalancerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List configured load balancers.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const loadBalancer of client.loadBalancers.list({\n     *   zone_id: '699d98642c564d2e855e9661899b7252',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/load_balancers`, LoadBalancersSinglePage, options);\n    }\n    /**\n     * Delete a configured load balancer.\n     *\n     * @example\n     * ```ts\n     * const loadBalancer = await client.loadBalancers.delete(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    delete(loadBalancerId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/load_balancers/${loadBalancerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Apply changes to an existing load balancer, overwriting the supplied properties.\n     *\n     * @example\n     * ```ts\n     * const loadBalancer = await client.loadBalancers.edit(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    edit(loadBalancerId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/load_balancers/${loadBalancerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single configured load balancer.\n     *\n     * @example\n     * ```ts\n     * const loadBalancer = await client.loadBalancers.get(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    get(loadBalancerId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/load_balancers/${loadBalancerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class LoadBalancersSinglePage extends SinglePage {\n}\nLoadBalancers.LoadBalancersSinglePage = LoadBalancersSinglePage;\nLoadBalancers.Monitors = Monitors;\nLoadBalancers.MonitorsSinglePage = MonitorsSinglePage;\nLoadBalancers.Pools = Pools;\nLoadBalancers.PoolsSinglePage = PoolsSinglePage;\nLoadBalancers.Previews = Previews;\nLoadBalancers.Regions = Regions;\nLoadBalancers.Searches = Searches;\nLoadBalancers.SearchListResponsesV4PagePagination = SearchListResponsesV4PagePagination;\n//# sourceMappingURL=load-balancers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class CacheReserveResource extends APIResource {\n    /**\n     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first\n     * disable Cache Reserve. In most cases, this will be accomplished within 24 hours.\n     * You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind\n     * that you cannot undo or cancel this operation.\n     *\n     * @example\n     * ```ts\n     * const response = await client.cache.cacheReserve.clear({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   body: {},\n     * });\n     * ```\n     */\n    clear(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/cache/cache_reserve_clear`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Increase cache lifetimes by automatically storing all cacheable files into\n     * Cloudflare's persistent object storage buckets. Requires Cache Reserve\n     * subscription. Note: using Tiered Cache with Cache Reserve is highly recommended\n     * to reduce Reserve operations costs. See the\n     * [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve)\n     * for more information.\n     *\n     * @example\n     * ```ts\n     * const response = await client.cache.cacheReserve.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   value: 'on',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/cache/cache_reserve`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Increase cache lifetimes by automatically storing all cacheable files into\n     * Cloudflare's persistent object storage buckets. Requires Cache Reserve\n     * subscription. Note: using Tiered Cache with Cache Reserve is highly recommended\n     * to reduce Reserve operations costs. See the\n     * [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve)\n     * for more information.\n     *\n     * @example\n     * ```ts\n     * const cacheReserve = await client.cache.cacheReserve.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/cache/cache_reserve`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first\n     * disable Cache Reserve. In most cases, this will be accomplished within 24 hours.\n     * You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind\n     * that you cannot undo or cancel this operation.\n     *\n     * @example\n     * ```ts\n     * const response = await client.cache.cacheReserve.status({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    status(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/cache/cache_reserve_clear`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=cache-reserve.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class RegionalTieredCacheResource extends APIResource {\n    /**\n     * Instructs Cloudflare to check a regional hub data center on the way to your\n     * upper tier. This can help improve performance for smart and custom tiered cache\n     * topologies.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cache.regionalTieredCache.edit({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     value: 'on',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/cache/regional_tiered_cache`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Instructs Cloudflare to check a regional hub data center on the way to your\n     * upper tier. This can help improve performance for smart and custom tiered cache\n     * topologies.\n     *\n     * @example\n     * ```ts\n     * const regionalTieredCache =\n     *   await client.cache.regionalTieredCache.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/cache/regional_tiered_cache`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=regional-tiered-cache.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class SmartTieredCache extends APIResource {\n    /**\n     * Smart Tiered Cache dynamically selects the single closest upper tier for each of\n     * your website’s origins with no configuration required, using our in-house\n     * performance and routing data. Cloudflare collects latency data for each request\n     * to an origin, and uses the latency data to determine how well any upper-tier\n     * data center is connected with an origin. As a result, Cloudflare can select the\n     * data center with the lowest latency to be the upper-tier for an origin.\n     *\n     * @example\n     * ```ts\n     * const smartTieredCache =\n     *   await client.cache.smartTieredCache.delete({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/cache/tiered_cache_smart_topology_enable`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Smart Tiered Cache dynamically selects the single closest upper tier for each of\n     * your website’s origins with no configuration required, using our in-house\n     * performance and routing data. Cloudflare collects latency data for each request\n     * to an origin, and uses the latency data to determine how well any upper-tier\n     * data center is connected with an origin. As a result, Cloudflare can select the\n     * data center with the lowest latency to be the upper-tier for an origin.\n     *\n     * @example\n     * ```ts\n     * const response = await client.cache.smartTieredCache.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   value: 'on',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/cache/tiered_cache_smart_topology_enable`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Smart Tiered Cache dynamically selects the single closest upper tier for each of\n     * your website’s origins with no configuration required, using our in-house\n     * performance and routing data. Cloudflare collects latency data for each request\n     * to an origin, and uses the latency data to determine how well any upper-tier\n     * data center is connected with an origin. As a result, Cloudflare can select the\n     * data center with the lowest latency to be the upper-tier for an origin.\n     *\n     * @example\n     * ```ts\n     * const smartTieredCache =\n     *   await client.cache.smartTieredCache.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/cache/tiered_cache_smart_topology_enable`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=smart-tiered-cache.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Variants extends APIResource {\n    /**\n     * Variant support enables caching variants of images with certain file extensions\n     * in addition to the original. This only applies when the origin server sends the\n     * 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but\n     * does not serve the variant requested, the response will not be cached. This will\n     * be indicated with BYPASS cache status in the response headers.\n     *\n     * @example\n     * ```ts\n     * const variant = await client.cache.variants.delete({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/cache/variants`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Variant support enables caching variants of images with certain file extensions\n     * in addition to the original. This only applies when the origin server sends the\n     * 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but\n     * does not serve the variant requested, the response will not be cached. This will\n     * be indicated with BYPASS cache status in the response headers.\n     *\n     * @example\n     * ```ts\n     * const response = await client.cache.variants.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   value: {},\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/cache/variants`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Variant support enables caching variants of images with certain file extensions\n     * in addition to the original. This only applies when the origin server sends the\n     * 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but\n     * does not serve the variant requested, the response will not be cached. This will\n     * be indicated with BYPASS cache status in the response headers.\n     *\n     * @example\n     * ```ts\n     * const variant = await client.cache.variants.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/cache/variants`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=variants.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as CacheReserveAPI from \"./cache-reserve.mjs\";\nimport { CacheReserveResource, } from \"./cache-reserve.mjs\";\nimport * as RegionalTieredCacheAPI from \"./regional-tiered-cache.mjs\";\nimport { RegionalTieredCacheResource, } from \"./regional-tiered-cache.mjs\";\nimport * as SmartTieredCacheAPI from \"./smart-tiered-cache.mjs\";\nimport { SmartTieredCache, } from \"./smart-tiered-cache.mjs\";\nimport * as VariantsAPI from \"./variants.mjs\";\nimport { Variants, } from \"./variants.mjs\";\nexport class Cache extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.cacheReserve = new CacheReserveAPI.CacheReserveResource(this._client);\n        this.smartTieredCache = new SmartTieredCacheAPI.SmartTieredCache(this._client);\n        this.variants = new VariantsAPI.Variants(this._client);\n        this.regionalTieredCache = new RegionalTieredCacheAPI.RegionalTieredCacheResource(this._client);\n    }\n    /**\n     * ### Purge All Cached Content\n     *\n     * Removes ALL files from Cloudflare's cache. All tiers can purge everything.\n     *\n     * ```\n     * {\"purge_everything\": true}\n     * ```\n     *\n     * ### Purge Cached Content by URL\n     *\n     * Granularly removes one or more files from Cloudflare's cache by specifying URLs.\n     * All tiers can purge by URL.\n     *\n     * To purge files with custom cache keys, include the headers used to compute the\n     * cache key as in the example. If you have a device type or geo in your cache key,\n     * you will need to include the CF-Device-Type or CF-IPCountry headers. If you have\n     * lang in your cache key, you will need to include the Accept-Language header.\n     *\n     * **NB:** When including the Origin header, be sure to include the **scheme** and\n     * **hostname**. The port number can be omitted if it is the default port (80 for\n     * http, 443 for https), but must be included otherwise.\n     *\n     * Single file purge example with files:\n     *\n     * ```\n     * {\"files\": [\"http://www.example.com/css/styles.css\", \"http://www.example.com/js/index.js\"]}\n     * ```\n     *\n     * Single file purge example with url and header pairs:\n     *\n     * ```\n     * {\"files\": [{url: \"http://www.example.com/cat_picture.jpg\", headers: { \"CF-IPCountry\": \"US\", \"CF-Device-Type\": \"desktop\", \"Accept-Language\": \"zh-CN\" }}, {url: \"http://www.example.com/dog_picture.jpg\", headers: { \"CF-IPCountry\": \"EU\", \"CF-Device-Type\": \"mobile\", \"Accept-Language\": \"en-US\" }}]}\n     * ```\n     *\n     * ### Purge Cached Content by Tag, Host or Prefix\n     *\n     * Granularly removes one or more files from Cloudflare's cache either by\n     * specifying the host, the associated Cache-Tag, or a Prefix.\n     *\n     * Flex purge with tags:\n     *\n     * ```\n     * {\"tags\": [\"a-cache-tag\", \"another-cache-tag\"]}\n     * ```\n     *\n     * Flex purge with hosts:\n     *\n     * ```\n     * {\"hosts\": [\"www.example.com\", \"images.example.com\"]}\n     * ```\n     *\n     * Flex purge with prefixes:\n     *\n     * ```\n     * {\"prefixes\": [\"www.example.com/foo\", \"images.example.com/bar/baz\"]}\n     * ```\n     *\n     * ### Availability and limits\n     *\n     * please refer to\n     * [purge cache availability and limits documentation page](https://developers.cloudflare.com/cache/how-to/purge-cache/#availability-and-limits).\n     *\n     * @example\n     * ```ts\n     * const response = await client.cache.purge({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    purge(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/purge_cache`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nCache.CacheReserveResource = CacheReserveResource;\nCache.SmartTieredCache = SmartTieredCache;\nCache.Variants = Variants;\nCache.RegionalTieredCacheResource = RegionalTieredCacheResource;\n//# sourceMappingURL=cache.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Analyze extends APIResource {\n    /**\n     * Returns the set of hostnames, the signature algorithm, and the expiration date\n     * of the certificate.\n     *\n     * @example\n     * ```ts\n     * const analyze = await client.ssl.analyze.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/ssl/analyze`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=analyze.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Recommendations extends APIResource {\n    /**\n     * Retrieve the SSL/TLS Recommender's recommendation for a zone.\n     *\n     * @deprecated SSL/TLS Recommender has been decommissioned in favor of Automatic SSL/TLS\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/ssl/recommendation`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=recommendations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class VerificationResource extends APIResource {\n    /**\n     * Edit SSL validation method for a certificate pack. A PATCH request will request\n     * an immediate validation check on any certificate, and return the updated status.\n     * If a validation method is provided, the validation will be immediately attempted\n     * using that method.\n     *\n     * @example\n     * ```ts\n     * const response = await client.ssl.verification.edit(\n     *   'a77f8bd7-3b47-46b4-a6f1-75cf98109948',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     validation_method: 'txt',\n     *   },\n     * );\n     * ```\n     */\n    edit(certificatePackId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/ssl/verification/${certificatePackId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get SSL Verification Info for a Zone.\n     *\n     * @example\n     * ```ts\n     * const verifications = await client.ssl.verification.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/ssl/verification`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=verification.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Quota extends APIResource {\n    /**\n     * For a given zone, list certificate pack quotas.\n     *\n     * @example\n     * ```ts\n     * const quota = await client.ssl.certificatePacks.quota.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/ssl/certificate_packs/quota`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=quota.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as QuotaAPI from \"./quota.mjs\";\nimport { Quota } from \"./quota.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class CertificatePacks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.quota = new QuotaAPI.Quota(this._client);\n    }\n    /**\n     * For a given zone, order an advanced certificate pack.\n     *\n     * @example\n     * ```ts\n     * const certificatePack =\n     *   await client.ssl.certificatePacks.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     certificate_authority: 'lets_encrypt',\n     *     hosts: [\n     *       'example.com',\n     *       '*.example.com',\n     *       'www.example.com',\n     *     ],\n     *     type: 'advanced',\n     *     validation_method: 'txt',\n     *     validity_days: 14,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/ssl/certificate_packs/order`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * For a given zone, list all active certificate packs.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const certificatePackListResponse of client.ssl.certificatePacks.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/ssl/certificate_packs`, CertificatePackListResponsesSinglePage, { query, ...options });\n    }\n    /**\n     * For a given zone, delete an advanced certificate pack.\n     *\n     * @example\n     * ```ts\n     * const certificatePack =\n     *   await client.ssl.certificatePacks.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(certificatePackId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/ssl/certificate_packs/${certificatePackId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * For a given zone, restart validation or add cloudflare branding for an advanced\n     * certificate pack. The former is only a validation operation for a Certificate\n     * Pack in a validation_timed_out status.\n     *\n     * @example\n     * ```ts\n     * const response = await client.ssl.certificatePacks.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(certificatePackId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/ssl/certificate_packs/${certificatePackId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * For a given zone, get a certificate pack.\n     *\n     * @example\n     * ```ts\n     * const certificatePack =\n     *   await client.ssl.certificatePacks.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(certificatePackId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/ssl/certificate_packs/${certificatePackId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CertificatePackListResponsesSinglePage extends SinglePage {\n}\nCertificatePacks.CertificatePackListResponsesSinglePage = CertificatePackListResponsesSinglePage;\nCertificatePacks.Quota = Quota;\n//# sourceMappingURL=certificate-packs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Patch Universal SSL Settings for a Zone.\n     *\n     * @example\n     * ```ts\n     * const universalSSLSettings =\n     *   await client.ssl.universal.settings.edit({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/ssl/universal/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Universal SSL Settings for a Zone.\n     *\n     * @example\n     * ```ts\n     * const universalSSLSettings =\n     *   await client.ssl.universal.settings.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/ssl/universal/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings } from \"./settings.mjs\";\nexport class Universal extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n}\nUniversal.Settings = Settings;\n//# sourceMappingURL=universal.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AnalyzeAPI from \"./analyze.mjs\";\nimport { Analyze } from \"./analyze.mjs\";\nimport * as RecommendationsAPI from \"./recommendations.mjs\";\nimport { Recommendations } from \"./recommendations.mjs\";\nimport * as VerificationAPI from \"./verification.mjs\";\nimport { VerificationResource, } from \"./verification.mjs\";\nimport * as CertificatePacksAPI from \"./certificate-packs/certificate-packs.mjs\";\nimport { CertificatePackListResponsesSinglePage, CertificatePacks, } from \"./certificate-packs/certificate-packs.mjs\";\nimport * as UniversalAPI from \"./universal/universal.mjs\";\nimport { Universal } from \"./universal/universal.mjs\";\nexport class SSL extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.analyze = new AnalyzeAPI.Analyze(this._client);\n        this.certificatePacks = new CertificatePacksAPI.CertificatePacks(this._client);\n        this.recommendations = new RecommendationsAPI.Recommendations(this._client);\n        this.universal = new UniversalAPI.Universal(this._client);\n        this.verification = new VerificationAPI.VerificationResource(this._client);\n    }\n}\nSSL.Analyze = Analyze;\nSSL.CertificatePacks = CertificatePacks;\nSSL.CertificatePackListResponsesSinglePage = CertificatePackListResponsesSinglePage;\nSSL.Recommendations = Recommendations;\nSSL.Universal = Universal;\nSSL.VerificationResource = VerificationResource;\n//# sourceMappingURL=ssl.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class TotalTLS extends APIResource {\n    /**\n     * Set Total TLS Settings or disable the feature for a Zone.\n     *\n     * @example\n     * ```ts\n     * const totalTLS = await client.acm.totalTLS.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   enabled: true,\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/acm/total_tls`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Total TLS Settings for a Zone.\n     *\n     * @example\n     * ```ts\n     * const totalTLS = await client.acm.totalTLS.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/acm/total_tls`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=total-tls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as TotalTLSAPI from \"./total-tls.mjs\";\nimport { TotalTLS, } from \"./total-tls.mjs\";\nexport class ACM extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.totalTLS = new TotalTLSAPI.TotalTLS(this._client);\n    }\n}\nACM.TotalTLS = TotalTLS;\n//# sourceMappingURL=acm.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class SmartRouting extends APIResource {\n    /**\n     * Configures the value of the Argo Smart Routing enablement setting.\n     *\n     * @example\n     * ```ts\n     * const response = await client.argo.smartRouting.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   value: 'on',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/argo/smart_routing`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves the value of Argo Smart Routing enablement setting.\n     *\n     * @example\n     * ```ts\n     * const smartRouting = await client.argo.smartRouting.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/argo/smart_routing`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=smart-routing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class TieredCaching extends APIResource {\n    /**\n     * Tiered Cache works by dividing Cloudflare's data centers into a hierarchy of\n     * lower-tiers and upper-tiers. If content is not cached in lower-tier data centers\n     * (generally the ones closest to a visitor), the lower-tier must ask an upper-tier\n     * to see if it has the content. If the upper-tier does not have the content, only\n     * the upper-tier can ask the origin for content. This practice improves bandwidth\n     * efficiency by limiting the number of data centers that can ask the origin for\n     * content, which reduces origin load and makes websites more cost-effective to\n     * operate. Additionally, Tiered Cache concentrates connections to origin servers\n     * so they come from a small number of data centers rather than the full set of\n     * network locations. This results in fewer open connections using server\n     * resources.\n     *\n     * @example\n     * ```ts\n     * const response = await client.argo.tieredCaching.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   value: 'on',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/argo/tiered_caching`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Tiered Cache works by dividing Cloudflare's data centers into a hierarchy of\n     * lower-tiers and upper-tiers. If content is not cached in lower-tier data centers\n     * (generally the ones closest to a visitor), the lower-tier must ask an upper-tier\n     * to see if it has the content. If the upper-tier does not have the content, only\n     * the upper-tier can ask the origin for content. This practice improves bandwidth\n     * efficiency by limiting the number of data centers that can ask the origin for\n     * content, which reduces origin load and makes websites more cost-effective to\n     * operate. Additionally, Tiered Cache concentrates connections to origin servers\n     * so they come from a small number of data centers rather than the full set of\n     * network locations. This results in fewer open connections using server\n     * resources.\n     *\n     * @example\n     * ```ts\n     * const tieredCaching = await client.argo.tieredCaching.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/argo/tiered_caching`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=tiered-caching.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as SmartRoutingAPI from \"./smart-routing.mjs\";\nimport { SmartRouting, } from \"./smart-routing.mjs\";\nimport * as TieredCachingAPI from \"./tiered-caching.mjs\";\nimport { TieredCaching, } from \"./tiered-caching.mjs\";\nexport class Argo extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.smartRouting = new SmartRoutingAPI.SmartRouting(this._client);\n        this.tieredCaching = new TieredCachingAPI.TieredCaching(this._client);\n    }\n}\nArgo.SmartRouting = SmartRouting;\nArgo.TieredCaching = TieredCaching;\n//# sourceMappingURL=argo.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class HostnameAssociations extends APIResource {\n    /**\n     * Replace Hostname Associations\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/certificate_authorities/hostname_associations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Hostname Associations\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/certificate_authorities/hostname_associations`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=hostname-associations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as HostnameAssociationsAPI from \"./hostname-associations.mjs\";\nimport { HostnameAssociations, } from \"./hostname-associations.mjs\";\nexport class CertificateAuthorities extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.hostnameAssociations = new HostnameAssociationsAPI.HostnameAssociations(this._client);\n    }\n}\nCertificateAuthorities.HostnameAssociations = HostnameAssociations;\n//# sourceMappingURL=certificate-authorities.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { V4PagePaginationArray } from \"../pagination.mjs\";\nexport class ClientCertificates extends APIResource {\n    /**\n     * Create a new API Shield mTLS Client Certificate\n     *\n     * @example\n     * ```ts\n     * const clientCertificate =\n     *   await client.clientCertificates.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     csr: '-----BEGIN CERTIFICATE REQUEST-----\\\\nMIICY....\\\\n-----END CERTIFICATE REQUEST-----\\\\n',\n     *     validity_days: 3650,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/client_certificates`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all of your Zone's API Shield mTLS Client Certificates by Status and/or\n     * using Pagination\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const clientCertificate of client.clientCertificates.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/client_certificates`, ClientCertificatesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Set a API Shield mTLS Client Certificate to pending_revocation status for\n     * processing to revoked status.\n     *\n     * @example\n     * ```ts\n     * const clientCertificate =\n     *   await client.clientCertificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(clientCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/client_certificates/${clientCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * If a API Shield mTLS Client Certificate is in a pending_revocation state, you\n     * may reactivate it with this endpoint.\n     *\n     * @example\n     * ```ts\n     * const clientCertificate =\n     *   await client.clientCertificates.edit(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(clientCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.patch(`/zones/${zone_id}/client_certificates/${clientCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Details for a single mTLS API Shield Client Certificate\n     *\n     * @example\n     * ```ts\n     * const clientCertificate =\n     *   await client.clientCertificates.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(clientCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/client_certificates/${clientCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ClientCertificatesV4PagePaginationArray extends V4PagePaginationArray {\n}\nClientCertificates.ClientCertificatesV4PagePaginationArray = ClientCertificatesV4PagePaginationArray;\n//# sourceMappingURL=client-certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { CustomCertificatesSinglePage } from \"./custom-certificates.mjs\";\nexport class Prioritize extends APIResource {\n    /**\n     * If a zone has multiple SSL certificates, you can set the order in which they\n     * should be used during a request. The higher priority will break ties across\n     * overlapping 'legacy_custom' certificates.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customCertificate of client.customCertificates.prioritize.update(\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     certificates: [{}, {}],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/custom_certificates/prioritize`, CustomCertificatesSinglePage, { body, method: 'put', ...options });\n    }\n}\nexport { CustomCertificatesSinglePage };\n//# sourceMappingURL=prioritize.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as PrioritizeAPI from \"./prioritize.mjs\";\nimport { Prioritize } from \"./prioritize.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class CustomCertificates extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.prioritize = new PrioritizeAPI.Prioritize(this._client);\n    }\n    /**\n     * Upload a new SSL certificate for a zone.\n     *\n     * @example\n     * ```ts\n     * const customCertificate =\n     *   await client.customCertificates.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     certificate:\n     *       '-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n',\n     *     private_key:\n     *       '-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/custom_certificates`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List, search, and filter all of your custom SSL certificates. The higher\n     * priority will break ties across overlapping 'legacy_custom' certificates, but\n     * 'legacy_custom' certificates will always supercede 'sni_custom' certificates.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customCertificate of client.customCertificates.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/custom_certificates`, CustomCertificatesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Remove a SSL certificate from a zone.\n     *\n     * @example\n     * ```ts\n     * const customCertificate =\n     *   await client.customCertificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(customCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/custom_certificates/${customCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Upload a new private key and/or PEM/CRT for the SSL certificate. Note: PATCHing\n     * a configuration for sni_custom certificates will result in a new resource id\n     * being returned, and the previous one being deleted.\n     *\n     * @example\n     * ```ts\n     * const customCertificate =\n     *   await client.customCertificates.edit(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(customCertificateId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/custom_certificates/${customCertificateId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * SSL Configuration Details\n     *\n     * @example\n     * ```ts\n     * const customCertificate =\n     *   await client.customCertificates.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(customCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/custom_certificates/${customCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CustomCertificatesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class CustomCertificatesSinglePage extends SinglePage {\n}\nCustomCertificates.CustomCertificatesV4PagePaginationArray = CustomCertificatesV4PagePaginationArray;\nCustomCertificates.Prioritize = Prioritize;\n//# sourceMappingURL=custom-certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class FallbackOrigin extends APIResource {\n    /**\n     * Update Fallback Origin for Custom Hostnames\n     *\n     * @example\n     * ```ts\n     * const fallbackOrigin =\n     *   await client.customHostnames.fallbackOrigin.update({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     origin: 'fallback.example.com',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/custom_hostnames/fallback_origin`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete Fallback Origin for Custom Hostnames\n     *\n     * @example\n     * ```ts\n     * const fallbackOrigin =\n     *   await client.customHostnames.fallbackOrigin.delete({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/custom_hostnames/fallback_origin`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Fallback Origin for Custom Hostnames\n     *\n     * @example\n     * ```ts\n     * const fallbackOrigin =\n     *   await client.customHostnames.fallbackOrigin.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/custom_hostnames/fallback_origin`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=fallback-origin.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Certificates extends APIResource {\n    /**\n     * Replace a single custom certificate within a certificate pack that contains two\n     * bundled certificates. The replacement must adhere to the following constraints.\n     * You can only replace an RSA certificate with another RSA certificate or an ECDSA\n     * certificate with another ECDSA certificate.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.customHostnames.certificatePack.certificates.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       custom_certificate:\n     *         '-----BEGIN CERTIFICATE-----\\nMIIDdjCCAl6gAwIBAgIJAPnMg0Fs+/B0MA0GCSqGSIb3DQEBCwUAMFsx...\\n-----END CERTIFICATE-----\\n',\n     *       custom_key:\n     *         '-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/SCB5...\\n-----END PRIVATE KEY-----\\n',\n     *     },\n     *   );\n     * ```\n     */\n    update(customHostnameId, certificatePackId, certificateId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/custom_hostnames/${customHostnameId}/certificate_pack/${certificatePackId}/certificates/${certificateId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a single custom certificate from a certificate pack that contains two\n     * bundled certificates. Deletion is subject to the following constraints. You\n     * cannot delete a certificate if it is the only remaining certificate in the pack.\n     * At least one certificate must remain in the pack.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.customHostnames.certificatePack.certificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(customHostnameId, certificatePackId, certificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/custom_hostnames/${customHostnameId}/certificate_pack/${certificatePackId}/certificates/${certificateId}`, options);\n    }\n}\n//# sourceMappingURL=certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as CertificatesAPI from \"./certificates.mjs\";\nimport { Certificates, } from \"./certificates.mjs\";\nexport class CertificatePack extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.certificates = new CertificatesAPI.Certificates(this._client);\n    }\n}\nCertificatePack.Certificates = Certificates;\n//# sourceMappingURL=certificate-pack.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as FallbackOriginAPI from \"./fallback-origin.mjs\";\nimport { FallbackOrigin, } from \"./fallback-origin.mjs\";\nimport * as CertificatePackAPI from \"./certificate-pack/certificate-pack.mjs\";\nimport { CertificatePack } from \"./certificate-pack/certificate-pack.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class CustomHostnames extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.fallbackOrigin = new FallbackOriginAPI.FallbackOrigin(this._client);\n        this.certificatePack = new CertificatePackAPI.CertificatePack(this._client);\n    }\n    /**\n     * Add a new custom hostname and request that an SSL certificate be issued for it.\n     * One of three validation methods—http, txt, email—should be used, with 'http'\n     * recommended if the CNAME is already in place (or will be soon). Specifying\n     * 'email' will send an email to the WHOIS contacts on file for the base domain\n     * plus hostmaster, postmaster, webmaster, admin, administrator. If http is used\n     * and the domain is not already pointing to the Managed CNAME host, the PATCH\n     * method must be used once it is (to complete validation). Enable bundling of\n     * certificates using the custom_cert_bundle field. The bundling process requires\n     * the following condition One certificate in the bundle must use an RSA, and the\n     * other must use an ECDSA.\n     *\n     * @example\n     * ```ts\n     * const customHostname = await client.customHostnames.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   hostname: 'app.example.com',\n     *   ssl: {},\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/custom_hostnames`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List, search, sort, and filter all of your custom hostnames.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customHostnameListResponse of client.customHostnames.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/custom_hostnames`, CustomHostnameListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete Custom Hostname (and any issued SSL certificates)\n     *\n     * @example\n     * ```ts\n     * const customHostname = await client.customHostnames.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(customHostnameId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/custom_hostnames/${customHostnameId}`, options);\n    }\n    /**\n     * Modify SSL configuration for a custom hostname. When sent with SSL config that\n     * matches existing config, used to indicate that hostname should pass domain\n     * control validation (DCV). Can also be used to change validation type, e.g., from\n     * 'http' to 'email'. Bundle an existing certificate with another certificate by\n     * using the \"custom_cert_bundle\" field. The bundling process supports combining\n     * certificates as long as the following condition is met. One certificate must use\n     * the RSA algorithm, and the other must use the ECDSA algorithm.\n     *\n     * @example\n     * ```ts\n     * const response = await client.customHostnames.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(customHostnameId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/custom_hostnames/${customHostnameId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Custom Hostname Details\n     *\n     * @example\n     * ```ts\n     * const customHostname = await client.customHostnames.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(customHostnameId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/custom_hostnames/${customHostnameId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CustomHostnameListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nCustomHostnames.CustomHostnameListResponsesV4PagePaginationArray =\n    CustomHostnameListResponsesV4PagePaginationArray;\nCustomHostnames.FallbackOrigin = FallbackOrigin;\nCustomHostnames.CertificatePack = CertificatePack;\n//# sourceMappingURL=custom-hostnames.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { SinglePage } from \"../pagination.mjs\";\nexport class CustomNameservers extends APIResource {\n    /**\n     * Add Account Custom Nameserver\n     *\n     * @example\n     * ```ts\n     * const customNameserver =\n     *   await client.customNameservers.create({\n     *     account_id: '372e67954025e0ba6aaa6d586b9e0b59',\n     *     ns_name: 'ns1.example.com',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/custom_ns`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete Account Custom Nameserver\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customNameserverDeleteResponse of client.customNameservers.delete(\n     *   'ns1.example.com',\n     *   { account_id: '372e67954025e0ba6aaa6d586b9e0b59' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    delete(customNSId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/custom_ns/${customNSId}`, CustomNameserverDeleteResponsesSinglePage, { method: 'delete', ...options });\n    }\n    /**\n     * List an account's custom nameservers.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customNameserver of client.customNameservers.get(\n     *   { account_id: '372e67954025e0ba6aaa6d586b9e0b59' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/custom_ns`, CustomNameserversSinglePage, options);\n    }\n}\nexport class CustomNameserverDeleteResponsesSinglePage extends SinglePage {\n}\nexport class CustomNameserversSinglePage extends SinglePage {\n}\nCustomNameservers.CustomNameserverDeleteResponsesSinglePage = CustomNameserverDeleteResponsesSinglePage;\nCustomNameservers.CustomNameserversSinglePage = CustomNameserversSinglePage;\n//# sourceMappingURL=custom-nameservers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class ReverseDNS extends APIResource {\n    /**\n     * Update reverse DNS configuration (PTR records) for a DNS Firewall cluster\n     *\n     * @example\n     * ```ts\n     * const response = await client.dnsFirewall.reverseDNS.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(dnsFirewallId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}/reverse_dns`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show reverse DNS configuration (PTR records) for a DNS Firewall cluster\n     *\n     * @example\n     * ```ts\n     * const reverseDNS = await client.dnsFirewall.reverseDNS.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(dnsFirewallId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}/reverse_dns`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=reverse-dns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Bytimes extends APIResource {\n    /**\n     * Retrieves a list of aggregate metrics grouped by time interval.\n     *\n     * See\n     * [Analytics API properties](https://developers.cloudflare.com/dns/reference/analytics-api-properties/)\n     * for detailed information about the available query parameters.\n     *\n     * @example\n     * ```ts\n     * const byTime =\n     *   await client.dnsFirewall.analytics.reports.bytimes.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(dnsFirewallId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}/dns_analytics/report/bytime`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bytimes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as BytimesAPI from \"./bytimes.mjs\";\nimport { Bytimes } from \"./bytimes.mjs\";\nexport class Reports extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.bytimes = new BytimesAPI.Bytimes(this._client);\n    }\n    /**\n     * Retrieves a list of summarised aggregate metrics over a given time period.\n     *\n     * See\n     * [Analytics API properties](https://developers.cloudflare.com/dns/reference/analytics-api-properties/)\n     * for detailed information about the available query parameters.\n     *\n     * @example\n     * ```ts\n     * const report =\n     *   await client.dnsFirewall.analytics.reports.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(dnsFirewallId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}/dns_analytics/report`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nReports.Bytimes = Bytimes;\n//# sourceMappingURL=reports.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ReportsAPI from \"./reports/reports.mjs\";\nimport { Reports } from \"./reports/reports.mjs\";\nexport class Analytics extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.reports = new ReportsAPI.Reports(this._client);\n    }\n}\nAnalytics.Reports = Reports;\n//# sourceMappingURL=analytics.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ReverseDNSAPI from \"./reverse-dns.mjs\";\nimport { ReverseDNS, } from \"./reverse-dns.mjs\";\nimport * as AnalyticsAPI from \"./analytics/analytics.mjs\";\nimport { Analytics } from \"./analytics/analytics.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class DNSFirewall extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.analytics = new AnalyticsAPI.Analytics(this._client);\n        this.reverseDNS = new ReverseDNSAPI.ReverseDNS(this._client);\n    }\n    /**\n     * Create a DNS Firewall cluster\n     *\n     * @example\n     * ```ts\n     * const dnsFirewall = await client.dnsFirewall.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'My Awesome DNS Firewall cluster',\n     *   upstream_ips: [\n     *     '192.0.2.1',\n     *     '198.51.100.1',\n     *     '2001:DB8:100::CF',\n     *   ],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dns_firewall`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List DNS Firewall clusters for an account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const dnsFirewallListResponse of client.dnsFirewall.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dns_firewall`, DNSFirewallListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a DNS Firewall cluster\n     *\n     * @example\n     * ```ts\n     * const dnsFirewall = await client.dnsFirewall.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(dnsFirewallId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify the configuration of a DNS Firewall cluster\n     *\n     * @example\n     * ```ts\n     * const response = await client.dnsFirewall.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(dnsFirewallId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show a single DNS Firewall cluster for an account\n     *\n     * @example\n     * ```ts\n     * const dnsFirewall = await client.dnsFirewall.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(dnsFirewallId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dns_firewall/${dnsFirewallId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DNSFirewallListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nDNSFirewall.DNSFirewallListResponsesV4PagePaginationArray = DNSFirewallListResponsesV4PagePaginationArray;\nDNSFirewall.Analytics = Analytics;\nDNSFirewall.ReverseDNS = ReverseDNS;\n//# sourceMappingURL=dns-firewall.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class DNSSECResource extends APIResource {\n    /**\n     * Delete DNSSEC.\n     *\n     * @example\n     * ```ts\n     * const dnssec = await client.dns.dnssec.delete({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/dnssec`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Enable or disable DNSSEC.\n     *\n     * @example\n     * ```ts\n     * const dnssec = await client.dns.dnssec.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/dnssec`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Details about DNSSEC status and configuration.\n     *\n     * @example\n     * ```ts\n     * const dnssec = await client.dns.dnssec.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/dnssec`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=dnssec.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Records extends APIResource {\n    /**\n     * Create a new DNS record for a zone.\n     *\n     * Notes:\n     *\n     * - A/AAAA records cannot exist on the same name as CNAME records.\n     * - NS records cannot exist on the same name as any other record type.\n     * - Domain names are always represented in Punycode, even if Unicode characters\n     *   were used when creating the record.\n     *\n     * @example\n     * ```ts\n     * const recordResponse = await client.dns.records.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'example.com',\n     *   ttl: 3600,\n     *   type: 'A',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/dns_records`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Overwrite an existing DNS record.\n     *\n     * Notes:\n     *\n     * - A/AAAA records cannot exist on the same name as CNAME records.\n     * - NS records cannot exist on the same name as any other record type.\n     * - Domain names are always represented in Punycode, even if Unicode characters\n     *   were used when creating the record.\n     *\n     * @example\n     * ```ts\n     * const recordResponse = await client.dns.records.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'example.com',\n     *     ttl: 3600,\n     *     type: 'A',\n     *   },\n     * );\n     * ```\n     */\n    update(dnsRecordId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/dns_records/${dnsRecordId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List, search, sort, and filter a zones' DNS records.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const recordResponse of client.dns.records.list({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/dns_records`, RecordResponsesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete DNS Record\n     *\n     * @example\n     * ```ts\n     * const record = await client.dns.records.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(dnsRecordId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/dns_records/${dnsRecordId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Send a Batch of DNS Record API calls to be executed together.\n     *\n     * Notes:\n     *\n     * - Although Cloudflare will execute the batched operations in a single database\n     *   transaction, Cloudflare's distributed KV store must treat each record change\n     *   as a single key-value pair. This means that the propagation of changes is not\n     *   atomic. See\n     *   [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/batch-record-changes/ \"Batch DNS records\")\n     *   for more information.\n     * - The operations you specify within the /batch request body are always executed\n     *   in the following order:\n     *\n     *   - Deletes\n     *   - Patches\n     *   - Puts\n     *   - Posts\n     *\n     * @example\n     * ```ts\n     * const response = await client.dns.records.batch({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    batch(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/dns_records/batch`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing DNS record.\n     *\n     * Notes:\n     *\n     * - A/AAAA records cannot exist on the same name as CNAME records.\n     * - NS records cannot exist on the same name as any other record type.\n     * - Domain names are always represented in Punycode, even if Unicode characters\n     *   were used when creating the record.\n     *\n     * @example\n     * ```ts\n     * const recordResponse = await client.dns.records.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'example.com',\n     *     ttl: 3600,\n     *     type: 'A',\n     *   },\n     * );\n     * ```\n     */\n    edit(dnsRecordId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/dns_records/${dnsRecordId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * You can export your\n     * [BIND config](https://en.wikipedia.org/wiki/Zone_file \"Zone file\") through this\n     * endpoint.\n     *\n     * See\n     * [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \"Import and export records\")\n     * for more information.\n     *\n     * @example\n     * ```ts\n     * const response = await client.dns.records.export({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    export(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/dns_records/export`, {\n            ...options,\n            headers: { Accept: 'text/plain', ...options?.headers },\n        });\n    }\n    /**\n     * DNS Record Details\n     *\n     * @example\n     * ```ts\n     * const recordResponse = await client.dns.records.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(dnsRecordId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/dns_records/${dnsRecordId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * You can upload your\n     * [BIND config](https://en.wikipedia.org/wiki/Zone_file \"Zone file\") through this\n     * endpoint. It assumes that cURL is called from a location with bind_config.txt\n     * (valid BIND config) present.\n     *\n     * See\n     * [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \"Import and export records\")\n     * for more information.\n     *\n     * @example\n     * ```ts\n     * const response = await client.dns.records.import({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   file: 'www.example.com. 300 IN  A 127.0.0.1',\n     * });\n     * ```\n     */\n    import(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/dns_records/import`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Scan for common DNS records on your domain and automatically add them to your\n     * zone. Useful if you haven't updated your nameservers yet.\n     *\n     * @example\n     * ```ts\n     * const response = await client.dns.records.scan({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   body: {},\n     * });\n     * ```\n     */\n    scan(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/dns_records/scan`, { body: body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RecordResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nRecords.RecordResponsesV4PagePaginationArray = RecordResponsesV4PagePaginationArray;\n//# sourceMappingURL=records.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Bytimes extends APIResource {\n    /**\n     * Retrieves a list of aggregate metrics grouped by time interval.\n     *\n     * See\n     * [Analytics API properties](https://developers.cloudflare.com/dns/reference/analytics-api-properties/)\n     * for detailed information about the available query parameters.\n     *\n     * @example\n     * ```ts\n     * const byTime =\n     *   await client.dns.analytics.reports.bytimes.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/dns_analytics/report/bytime`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bytimes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as BytimesAPI from \"./bytimes.mjs\";\nimport { Bytimes } from \"./bytimes.mjs\";\nexport class Reports extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.bytimes = new BytimesAPI.Bytimes(this._client);\n    }\n    /**\n     * Retrieves a list of summarised aggregate metrics over a given time period.\n     *\n     * See\n     * [Analytics API properties](https://developers.cloudflare.com/dns/reference/analytics-api-properties/)\n     * for detailed information about the available query parameters.\n     *\n     * @example\n     * ```ts\n     * const report = await client.dns.analytics.reports.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/dns_analytics/report`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nReports.Bytimes = Bytimes;\n//# sourceMappingURL=reports.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ReportsAPI from \"./reports/reports.mjs\";\nimport { Reports } from \"./reports/reports.mjs\";\nexport class Analytics extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.reports = new ReportsAPI.Reports(this._client);\n    }\n}\nAnalytics.Reports = Reports;\n//# sourceMappingURL=analytics.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Zone extends APIResource {\n    /**\n     * Update DNS settings for a zone\n     *\n     * @example\n     * ```ts\n     * const response = await client.dns.settings.zone.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/dns_settings`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show DNS settings for a zone\n     *\n     * @example\n     * ```ts\n     * const zone = await client.dns.settings.zone.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/dns_settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=zone.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Views extends APIResource {\n    /**\n     * Create Internal DNS View for an account\n     *\n     * @example\n     * ```ts\n     * const view = await client.dns.settings.account.views.create(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'my view',\n     *     zones: ['372e67954025e0ba6aaa6d586b9e0b59'],\n     *   },\n     * );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dns_settings/views`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List DNS Internal Views for an Account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const viewListResponse of client.dns.settings.account.views.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dns_settings/views`, ViewListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete an existing Internal DNS View\n     *\n     * @example\n     * ```ts\n     * const view = await client.dns.settings.account.views.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(viewId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dns_settings/views/${viewId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing Internal DNS View\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.dns.settings.account.views.edit(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(viewId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/dns_settings/views/${viewId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get DNS Internal View\n     *\n     * @example\n     * ```ts\n     * const view = await client.dns.settings.account.views.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(viewId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dns_settings/views/${viewId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ViewListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nViews.ViewListResponsesV4PagePaginationArray = ViewListResponsesV4PagePaginationArray;\n//# sourceMappingURL=views.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ViewsAPI from \"./views.mjs\";\nimport { ViewListResponsesV4PagePaginationArray, Views, } from \"./views.mjs\";\nexport class Account extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.views = new ViewsAPI.Views(this._client);\n    }\n    /**\n     * Update DNS settings for an account\n     *\n     * @example\n     * ```ts\n     * const response = await client.dns.settings.account.edit({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/dns_settings`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show DNS settings for an account\n     *\n     * @example\n     * ```ts\n     * const account = await client.dns.settings.account.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dns_settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nAccount.Views = Views;\nAccount.ViewListResponsesV4PagePaginationArray = ViewListResponsesV4PagePaginationArray;\n//# sourceMappingURL=account.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ZoneAPI from \"./zone.mjs\";\nimport { Zone } from \"./zone.mjs\";\nimport * as AccountAPI from \"./account/account.mjs\";\nimport { Account, } from \"./account/account.mjs\";\nexport class Settings extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.zone = new ZoneAPI.Zone(this._client);\n        this.account = new AccountAPI.Account(this._client);\n    }\n}\nSettings.Zone = Zone;\nSettings.Account = Account;\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class ACLs extends APIResource {\n    /**\n     * Create ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.dns.zoneTransfers.acls.create({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     *   ip_range: '192.0.2.53/28',\n     *   name: 'my-acl-1',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/secondary_dns/acls`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.dns.zoneTransfers.acls.update(\n     *   '23ff594956f20c2a721606e94745a8aa',\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     ip_range: '192.0.2.53/28',\n     *     name: 'my-acl-1',\n     *   },\n     * );\n     * ```\n     */\n    update(aclId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/secondary_dns/acls/${aclId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List ACLs.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const acl of client.dns.zoneTransfers.acls.list({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secondary_dns/acls`, ACLsSinglePage, options);\n    }\n    /**\n     * Delete ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.dns.zoneTransfers.acls.delete(\n     *   '23ff594956f20c2a721606e94745a8aa',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    delete(aclId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/secondary_dns/acls/${aclId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.dns.zoneTransfers.acls.get(\n     *   '23ff594956f20c2a721606e94745a8aa',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    get(aclId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/secondary_dns/acls/${aclId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ACLsSinglePage extends SinglePage {\n}\nACLs.ACLsSinglePage = ACLsSinglePage;\n//# sourceMappingURL=acls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class ForceAXFRResource extends APIResource {\n    /**\n     * Sends AXFR zone transfer request to primary nameserver(s).\n     *\n     * @example\n     * ```ts\n     * const forceAXFR =\n     *   await client.dns.zoneTransfers.forceAXFR.create({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     body: {},\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/secondary_dns/force_axfr`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=force-axfr.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class IncomingResource extends APIResource {\n    /**\n     * Create secondary zone configuration for incoming zone transfers.\n     *\n     * @example\n     * ```ts\n     * const incoming =\n     *   await client.dns.zoneTransfers.incoming.create({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     auto_refresh_seconds: 86400,\n     *     name: 'www.example.com.',\n     *     peers: [\n     *       '23ff594956f20c2a721606e94745a8aa',\n     *       '00920f38ce07c2e2f4df50b1f61d4194',\n     *     ],\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/secondary_dns/incoming`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update secondary zone configuration for incoming zone transfers.\n     *\n     * @example\n     * ```ts\n     * const incoming =\n     *   await client.dns.zoneTransfers.incoming.update({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     auto_refresh_seconds: 86400,\n     *     name: 'www.example.com.',\n     *     peers: [\n     *       '23ff594956f20c2a721606e94745a8aa',\n     *       '00920f38ce07c2e2f4df50b1f61d4194',\n     *     ],\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/secondary_dns/incoming`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete secondary zone configuration for incoming zone transfers.\n     *\n     * @example\n     * ```ts\n     * const incoming =\n     *   await client.dns.zoneTransfers.incoming.delete({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/secondary_dns/incoming`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get secondary zone configuration for incoming zone transfers.\n     *\n     * @example\n     * ```ts\n     * const incoming =\n     *   await client.dns.zoneTransfers.incoming.get({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/secondary_dns/incoming`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=incoming.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Peers extends APIResource {\n    /**\n     * Create Peer.\n     *\n     * @example\n     * ```ts\n     * const peer = await client.dns.zoneTransfers.peers.create({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     *   name: 'my-peer-1',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/secondary_dns/peers`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify Peer.\n     *\n     * @example\n     * ```ts\n     * const peer = await client.dns.zoneTransfers.peers.update(\n     *   '23ff594956f20c2a721606e94745a8aa',\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     name: 'my-peer-1',\n     *   },\n     * );\n     * ```\n     */\n    update(peerId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/secondary_dns/peers/${peerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Peers.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const peer of client.dns.zoneTransfers.peers.list(\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secondary_dns/peers`, PeersSinglePage, options);\n    }\n    /**\n     * Delete Peer.\n     *\n     * @example\n     * ```ts\n     * const peer = await client.dns.zoneTransfers.peers.delete(\n     *   '23ff594956f20c2a721606e94745a8aa',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    delete(peerId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/secondary_dns/peers/${peerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Peer.\n     *\n     * @example\n     * ```ts\n     * const peer = await client.dns.zoneTransfers.peers.get(\n     *   '23ff594956f20c2a721606e94745a8aa',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    get(peerId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/secondary_dns/peers/${peerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PeersSinglePage extends SinglePage {\n}\nPeers.PeersSinglePage = PeersSinglePage;\n//# sourceMappingURL=peers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class TSIGs extends APIResource {\n    /**\n     * Create TSIG.\n     *\n     * @example\n     * ```ts\n     * const tsig = await client.dns.zoneTransfers.tsigs.create({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     *   algo: 'hmac-sha512.',\n     *   name: 'tsig.customer.cf.',\n     *   secret:\n     *     'caf79a7804b04337c9c66ccd7bef9190a1e1679b5dd03d8aa10f7ad45e1a9dab92b417896c15d4d007c7c14194538d2a5d0feffdecc5a7f0e1c570cfa700837c',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/secondary_dns/tsigs`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify TSIG.\n     *\n     * @example\n     * ```ts\n     * const tsig = await client.dns.zoneTransfers.tsigs.update(\n     *   '69cd1e104af3e6ed3cb344f263fd0d5a',\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     algo: 'hmac-sha512.',\n     *     name: 'tsig.customer.cf.',\n     *     secret:\n     *       'caf79a7804b04337c9c66ccd7bef9190a1e1679b5dd03d8aa10f7ad45e1a9dab92b417896c15d4d007c7c14194538d2a5d0feffdecc5a7f0e1c570cfa700837c',\n     *   },\n     * );\n     * ```\n     */\n    update(tsigId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/secondary_dns/tsigs/${tsigId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List TSIGs.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tsig of client.dns.zoneTransfers.tsigs.list(\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secondary_dns/tsigs`, TSIGsSinglePage, options);\n    }\n    /**\n     * Delete TSIG.\n     *\n     * @example\n     * ```ts\n     * const tsig = await client.dns.zoneTransfers.tsigs.delete(\n     *   '69cd1e104af3e6ed3cb344f263fd0d5a',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    delete(tsigId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/secondary_dns/tsigs/${tsigId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get TSIG.\n     *\n     * @example\n     * ```ts\n     * const tsig = await client.dns.zoneTransfers.tsigs.get(\n     *   '69cd1e104af3e6ed3cb344f263fd0d5a',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    get(tsigId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/secondary_dns/tsigs/${tsigId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TSIGsSinglePage extends SinglePage {\n}\nTSIGs.TSIGsSinglePage = TSIGsSinglePage;\n//# sourceMappingURL=tsigs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Status extends APIResource {\n    /**\n     * Get primary zone transfer status.\n     *\n     * @example\n     * ```ts\n     * const enableTransfer =\n     *   await client.dns.zoneTransfers.outgoing.status.get({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/secondary_dns/outgoing/status`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=status.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as StatusAPI from \"./status.mjs\";\nimport { Status } from \"./status.mjs\";\nexport class OutgoingResource extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.status = new StatusAPI.Status(this._client);\n    }\n    /**\n     * Create primary zone configuration for outgoing zone transfers.\n     *\n     * @example\n     * ```ts\n     * const outgoing =\n     *   await client.dns.zoneTransfers.outgoing.create({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     name: 'www.example.com.',\n     *     peers: [\n     *       '23ff594956f20c2a721606e94745a8aa',\n     *       '00920f38ce07c2e2f4df50b1f61d4194',\n     *     ],\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/secondary_dns/outgoing`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update primary zone configuration for outgoing zone transfers.\n     *\n     * @example\n     * ```ts\n     * const outgoing =\n     *   await client.dns.zoneTransfers.outgoing.update({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     name: 'www.example.com.',\n     *     peers: [\n     *       '23ff594956f20c2a721606e94745a8aa',\n     *       '00920f38ce07c2e2f4df50b1f61d4194',\n     *     ],\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/secondary_dns/outgoing`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete primary zone configuration for outgoing zone transfers.\n     *\n     * @example\n     * ```ts\n     * const outgoing =\n     *   await client.dns.zoneTransfers.outgoing.delete({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/secondary_dns/outgoing`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of\n     * primary zone.\n     *\n     * @example\n     * ```ts\n     * const disableTransfer =\n     *   await client.dns.zoneTransfers.outgoing.disable({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     body: {},\n     *   });\n     * ```\n     */\n    disable(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/secondary_dns/outgoing/disable`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Enable outgoing zone transfers for primary zone.\n     *\n     * @example\n     * ```ts\n     * const enableTransfer =\n     *   await client.dns.zoneTransfers.outgoing.enable({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     body: {},\n     *   });\n     * ```\n     */\n    enable(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/secondary_dns/outgoing/enable`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.dns.zoneTransfers.outgoing.forceNotify({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *     body: {},\n     *   });\n     * ```\n     */\n    forceNotify(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/secondary_dns/outgoing/force_notify`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get primary zone configuration for outgoing zone transfers.\n     *\n     * @example\n     * ```ts\n     * const outgoing =\n     *   await client.dns.zoneTransfers.outgoing.get({\n     *     zone_id: '269d8f4853475ca241c4e730be286b20',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/secondary_dns/outgoing`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nOutgoingResource.Status = Status;\n//# sourceMappingURL=outgoing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ACLsAPI from \"./acls.mjs\";\nimport { ACLs, ACLsSinglePage, } from \"./acls.mjs\";\nimport * as ForceAXFRAPI from \"./force-axfr.mjs\";\nimport { ForceAXFRResource } from \"./force-axfr.mjs\";\nimport * as IncomingAPI from \"./incoming.mjs\";\nimport { IncomingResource, } from \"./incoming.mjs\";\nimport * as PeersAPI from \"./peers.mjs\";\nimport { Peers, PeersSinglePage, } from \"./peers.mjs\";\nimport * as TSIGsAPI from \"./tsigs.mjs\";\nimport { TSIGs, TSIGsSinglePage, } from \"./tsigs.mjs\";\nimport * as OutgoingAPI from \"./outgoing/outgoing.mjs\";\nimport { OutgoingResource, } from \"./outgoing/outgoing.mjs\";\nexport class ZoneTransfers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.forceAXFR = new ForceAXFRAPI.ForceAXFRResource(this._client);\n        this.incoming = new IncomingAPI.IncomingResource(this._client);\n        this.outgoing = new OutgoingAPI.OutgoingResource(this._client);\n        this.acls = new ACLsAPI.ACLs(this._client);\n        this.peers = new PeersAPI.Peers(this._client);\n        this.tsigs = new TSIGsAPI.TSIGs(this._client);\n    }\n}\nZoneTransfers.ForceAXFRResource = ForceAXFRResource;\nZoneTransfers.IncomingResource = IncomingResource;\nZoneTransfers.OutgoingResource = OutgoingResource;\nZoneTransfers.ACLs = ACLs;\nZoneTransfers.ACLsSinglePage = ACLsSinglePage;\nZoneTransfers.Peers = Peers;\nZoneTransfers.PeersSinglePage = PeersSinglePage;\nZoneTransfers.TSIGs = TSIGs;\nZoneTransfers.TSIGsSinglePage = TSIGsSinglePage;\n//# sourceMappingURL=zone-transfers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DNSSECAPI from \"./dnssec.mjs\";\nimport { DNSSECResource, } from \"./dnssec.mjs\";\nimport * as RecordsAPI from \"./records.mjs\";\nimport { RecordResponsesV4PagePaginationArray, Records, } from \"./records.mjs\";\nimport * as AnalyticsAPI from \"./analytics/analytics.mjs\";\nimport { Analytics } from \"./analytics/analytics.mjs\";\nimport * as SettingsAPI from \"./settings/settings.mjs\";\nimport { Settings } from \"./settings/settings.mjs\";\nimport * as ZoneTransfersAPI from \"./zone-transfers/zone-transfers.mjs\";\nimport { ZoneTransfers } from \"./zone-transfers/zone-transfers.mjs\";\nexport class DNS extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.dnssec = new DNSSECAPI.DNSSECResource(this._client);\n        this.records = new RecordsAPI.Records(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.analytics = new AnalyticsAPI.Analytics(this._client);\n        this.zoneTransfers = new ZoneTransfersAPI.ZoneTransfers(this._client);\n    }\n}\nDNS.DNSSECResource = DNSSECResource;\nDNS.Records = Records;\nDNS.RecordResponsesV4PagePaginationArray = RecordResponsesV4PagePaginationArray;\nDNS.Settings = Settings;\nDNS.Analytics = Analytics;\nDNS.ZoneTransfers = ZoneTransfers;\n//# sourceMappingURL=dns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Submissions extends APIResource {\n    /**\n     * This endpoint returns information for submissions to made to reclassify emails.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const submissionListResponse of client.emailSecurity.submissions.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/submissions`, SubmissionListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class SubmissionListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nSubmissions.SubmissionListResponsesV4PagePaginationArray = SubmissionListResponsesV4PagePaginationArray;\n//# sourceMappingURL=submissions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Detections extends APIResource {\n    /**\n     * Returns detection details such as threat categories and sender information for\n     * non-benign messages.\n     *\n     * @example\n     * ```ts\n     * const detection =\n     *   await client.emailSecurity.investigate.detections.get(\n     *     '4Njp3P0STMz2c02Q',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(postfixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/investigate/${postfixId}/detections`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=detections.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Move extends APIResource {\n    /**\n     * Move a message\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const moveCreateResponse of client.emailSecurity.investigate.move.create(\n     *   '4Njp3P0STMz2c02Q',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     destination: 'Inbox',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(postfixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/investigate/${postfixId}/move`, MoveCreateResponsesSinglePage, { body, method: 'post', ...options });\n    }\n    /**\n     * Move multiple messages\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const moveBulkResponse of client.emailSecurity.investigate.move.bulk(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     destination: 'Inbox',\n     *     postfix_ids: ['4Njp3P0STMz2c02Q'],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulk(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/investigate/move`, MoveBulkResponsesSinglePage, { body, method: 'post', ...options });\n    }\n}\nexport class MoveCreateResponsesSinglePage extends SinglePage {\n}\nexport class MoveBulkResponsesSinglePage extends SinglePage {\n}\nMove.MoveCreateResponsesSinglePage = MoveCreateResponsesSinglePage;\nMove.MoveBulkResponsesSinglePage = MoveBulkResponsesSinglePage;\n//# sourceMappingURL=move.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Preview extends APIResource {\n    /**\n     * Preview for non-detection messages\n     *\n     * @example\n     * ```ts\n     * const preview =\n     *   await client.emailSecurity.investigate.preview.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     postfix_id: '4Njp3P0STMz2c02Q',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email-security/investigate/preview`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a preview of the message body as a base64 encoded PNG image for\n     * non-benign messages.\n     *\n     * @example\n     * ```ts\n     * const preview =\n     *   await client.emailSecurity.investigate.preview.get(\n     *     '4Njp3P0STMz2c02Q',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(postfixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/investigate/${postfixId}/preview`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=preview.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Raw extends APIResource {\n    /**\n     * Returns the raw eml of any non-benign message.\n     *\n     * @example\n     * ```ts\n     * const raw = await client.emailSecurity.investigate.raw.get(\n     *   '4Njp3P0STMz2c02Q',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(postfixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/investigate/${postfixId}/raw`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=raw.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Reclassify extends APIResource {\n    /**\n     * Change email classfication\n     *\n     * @example\n     * ```ts\n     * const reclassify =\n     *   await client.emailSecurity.investigate.reclassify.create(\n     *     '4Njp3P0STMz2c02Q',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       expected_disposition: 'NONE',\n     *     },\n     *   );\n     * ```\n     */\n    create(postfixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email-security/investigate/${postfixId}/reclassify`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=reclassify.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Release extends APIResource {\n    /**\n     * Release messages from quarantine\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const releaseBulkResponse of client.emailSecurity.investigate.release.bulk(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: ['4Njp3P0STMz2c02Q'],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulk(params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/investigate/release`, ReleaseBulkResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n}\nexport class ReleaseBulkResponsesSinglePage extends SinglePage {\n}\nRelease.ReleaseBulkResponsesSinglePage = ReleaseBulkResponsesSinglePage;\n//# sourceMappingURL=release.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Trace extends APIResource {\n    /**\n     * Get email trace\n     *\n     * @example\n     * ```ts\n     * const trace =\n     *   await client.emailSecurity.investigate.trace.get(\n     *     '4Njp3P0STMz2c02Q',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(postfixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/investigate/${postfixId}/trace`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=trace.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DetectionsAPI from \"./detections.mjs\";\nimport { Detections } from \"./detections.mjs\";\nimport * as MoveAPI from \"./move.mjs\";\nimport { Move, MoveBulkResponsesSinglePage, MoveCreateResponsesSinglePage, } from \"./move.mjs\";\nimport * as PreviewAPI from \"./preview.mjs\";\nimport { Preview, } from \"./preview.mjs\";\nimport * as RawAPI from \"./raw.mjs\";\nimport { Raw } from \"./raw.mjs\";\nimport * as ReclassifyAPI from \"./reclassify.mjs\";\nimport { Reclassify } from \"./reclassify.mjs\";\nimport * as ReleaseAPI from \"./release.mjs\";\nimport { Release, ReleaseBulkResponsesSinglePage } from \"./release.mjs\";\nimport * as TraceAPI from \"./trace.mjs\";\nimport { Trace } from \"./trace.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Investigate extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.detections = new DetectionsAPI.Detections(this._client);\n        this.preview = new PreviewAPI.Preview(this._client);\n        this.raw = new RawAPI.Raw(this._client);\n        this.trace = new TraceAPI.Trace(this._client);\n        this.move = new MoveAPI.Move(this._client);\n        this.reclassify = new ReclassifyAPI.Reclassify(this._client);\n        this.release = new ReleaseAPI.Release(this._client);\n    }\n    /**\n     * Returns information for each email that matches the search parameter(s).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const investigateListResponse of client.emailSecurity.investigate.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/investigate`, InvestigateListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Get message details\n     *\n     * @example\n     * ```ts\n     * const investigate =\n     *   await client.emailSecurity.investigate.get(\n     *     '4Njp3P0STMz2c02Q',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(postfixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/investigate/${postfixId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class InvestigateListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nInvestigate.InvestigateListResponsesV4PagePaginationArray = InvestigateListResponsesV4PagePaginationArray;\nInvestigate.Detections = Detections;\nInvestigate.Preview = Preview;\nInvestigate.Raw = Raw;\nInvestigate.Trace = Trace;\nInvestigate.Move = Move;\nInvestigate.MoveCreateResponsesSinglePage = MoveCreateResponsesSinglePage;\nInvestigate.MoveBulkResponsesSinglePage = MoveBulkResponsesSinglePage;\nInvestigate.Reclassify = Reclassify;\nInvestigate.Release = Release;\nInvestigate.ReleaseBulkResponsesSinglePage = ReleaseBulkResponsesSinglePage;\n//# sourceMappingURL=investigate.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class AllowPolicies extends APIResource {\n    /**\n     * Create an email allow policy\n     *\n     * @example\n     * ```ts\n     * const allowPolicy =\n     *   await client.emailSecurity.settings.allowPolicies.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     is_acceptable_sender: false,\n     *     is_exempt_recipient: false,\n     *     is_regex: false,\n     *     is_trusted_sender: true,\n     *     pattern: 'test@example.com',\n     *     pattern_type: 'EMAIL',\n     *     verify_sender: true,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email-security/settings/allow_policies`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists, searches, and sorts an account’s email allow policies.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const allowPolicyListResponse of client.emailSecurity.settings.allowPolicies.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/settings/allow_policies`, AllowPolicyListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete an email allow policy\n     *\n     * @example\n     * ```ts\n     * const allowPolicy =\n     *   await client.emailSecurity.settings.allowPolicies.delete(\n     *     2401,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/email-security/settings/allow_policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an email allow policy\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.emailSecurity.settings.allowPolicies.edit(\n     *     2401,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(policyId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/email-security/settings/allow_policies/${policyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get an email allow policy\n     *\n     * @example\n     * ```ts\n     * const allowPolicy =\n     *   await client.emailSecurity.settings.allowPolicies.get(\n     *     2401,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/settings/allow_policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AllowPolicyListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nAllowPolicies.AllowPolicyListResponsesV4PagePaginationArray = AllowPolicyListResponsesV4PagePaginationArray;\n//# sourceMappingURL=allow-policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class BlockSenders extends APIResource {\n    /**\n     * Create a blocked email sender\n     *\n     * @example\n     * ```ts\n     * const blockSender =\n     *   await client.emailSecurity.settings.blockSenders.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     is_regex: false,\n     *     pattern: 'test@example.com',\n     *     pattern_type: 'EMAIL',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email-security/settings/block_senders`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List blocked email senders\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const blockSenderListResponse of client.emailSecurity.settings.blockSenders.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/settings/block_senders`, BlockSenderListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a blocked email sender\n     *\n     * @example\n     * ```ts\n     * const blockSender =\n     *   await client.emailSecurity.settings.blockSenders.delete(\n     *     2402,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(patternId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/email-security/settings/block_senders/${patternId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a blocked email sender\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.emailSecurity.settings.blockSenders.edit(\n     *     2402,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(patternId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/email-security/settings/block_senders/${patternId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a blocked email sender\n     *\n     * @example\n     * ```ts\n     * const blockSender =\n     *   await client.emailSecurity.settings.blockSenders.get(\n     *     2402,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(patternId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/settings/block_senders/${patternId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class BlockSenderListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nBlockSenders.BlockSenderListResponsesV4PagePaginationArray = BlockSenderListResponsesV4PagePaginationArray;\n//# sourceMappingURL=block-senders.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Domains extends APIResource {\n    /**\n     * Lists, searches, and sorts an account’s email domains.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const domainListResponse of client.emailSecurity.settings.domains.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/settings/domains`, DomainListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Unprotect an email domain\n     *\n     * @example\n     * ```ts\n     * const domain =\n     *   await client.emailSecurity.settings.domains.delete(2400, {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    delete(domainId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/email-security/settings/domains/${domainId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Unprotect multiple email domains\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const domainBulkDeleteResponse of client.emailSecurity.settings.domains.bulkDelete(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulkDelete(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/settings/domains`, DomainBulkDeleteResponsesSinglePage, { method: 'delete', ...options });\n    }\n    /**\n     * Update an email domain\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.emailSecurity.settings.domains.edit(2400, {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     ip_restrictions: ['192.0.2.0/24', '2001:db8::/32'],\n     *   });\n     * ```\n     */\n    edit(domainId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/email-security/settings/domains/${domainId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get an email domain\n     *\n     * @example\n     * ```ts\n     * const domain =\n     *   await client.emailSecurity.settings.domains.get(2400, {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(domainId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/settings/domains/${domainId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DomainListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class DomainBulkDeleteResponsesSinglePage extends SinglePage {\n}\nDomains.DomainListResponsesV4PagePaginationArray = DomainListResponsesV4PagePaginationArray;\nDomains.DomainBulkDeleteResponsesSinglePage = DomainBulkDeleteResponsesSinglePage;\n//# sourceMappingURL=domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class ImpersonationRegistry extends APIResource {\n    /**\n     * Create an entry in impersonation registry\n     *\n     * @example\n     * ```ts\n     * const impersonationRegistry =\n     *   await client.emailSecurity.settings.impersonationRegistry.create(\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       email: 'email',\n     *       is_email_regex: true,\n     *       name: 'name',\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email-security/settings/impersonation_registry`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists, searches, and sorts entries in the impersonation registry.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const impersonationRegistryListResponse of client.emailSecurity.settings.impersonationRegistry.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/settings/impersonation_registry`, ImpersonationRegistryListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete an entry from impersonation registry\n     *\n     * @example\n     * ```ts\n     * const impersonationRegistry =\n     *   await client.emailSecurity.settings.impersonationRegistry.delete(\n     *     2403,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(displayNameId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/email-security/settings/impersonation_registry/${displayNameId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an entry in impersonation registry\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.emailSecurity.settings.impersonationRegistry.edit(\n     *     2403,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(displayNameId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/email-security/settings/impersonation_registry/${displayNameId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get an entry in impersonation registry\n     *\n     * @example\n     * ```ts\n     * const impersonationRegistry =\n     *   await client.emailSecurity.settings.impersonationRegistry.get(\n     *     2403,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(displayNameId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/settings/impersonation_registry/${displayNameId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ImpersonationRegistryListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nImpersonationRegistry.ImpersonationRegistryListResponsesV4PagePaginationArray =\n    ImpersonationRegistryListResponsesV4PagePaginationArray;\n//# sourceMappingURL=impersonation-registry.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class TrustedDomains extends APIResource {\n    /**\n     * Create a trusted email domain\n     *\n     * @example\n     * ```ts\n     * const trustedDomain =\n     *   await client.emailSecurity.settings.trustedDomains.create(\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       is_recent: true,\n     *       is_regex: false,\n     *       is_similarity: false,\n     *       pattern: 'example.com',\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email-security/settings/trusted_domains`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists, searches, and sorts an account’s trusted email domains.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const trustedDomainListResponse of client.emailSecurity.settings.trustedDomains.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email-security/settings/trusted_domains`, TrustedDomainListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a trusted email domain\n     *\n     * @example\n     * ```ts\n     * const trustedDomain =\n     *   await client.emailSecurity.settings.trustedDomains.delete(\n     *     2401,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(trustedDomainId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/email-security/settings/trusted_domains/${trustedDomainId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a trusted email domain\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.emailSecurity.settings.trustedDomains.edit(\n     *     2401,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(trustedDomainId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/email-security/settings/trusted_domains/${trustedDomainId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a trusted email domain\n     *\n     * @example\n     * ```ts\n     * const trustedDomain =\n     *   await client.emailSecurity.settings.trustedDomains.get(\n     *     2401,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(trustedDomainId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email-security/settings/trusted_domains/${trustedDomainId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TrustedDomainListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nTrustedDomains.TrustedDomainListResponsesV4PagePaginationArray =\n    TrustedDomainListResponsesV4PagePaginationArray;\n//# sourceMappingURL=trusted-domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AllowPoliciesAPI from \"./allow-policies.mjs\";\nimport { AllowPolicies, AllowPolicyListResponsesV4PagePaginationArray, } from \"./allow-policies.mjs\";\nimport * as BlockSendersAPI from \"./block-senders.mjs\";\nimport { BlockSenderListResponsesV4PagePaginationArray, BlockSenders, } from \"./block-senders.mjs\";\nimport * as DomainsAPI from \"./domains.mjs\";\nimport { DomainBulkDeleteResponsesSinglePage, DomainListResponsesV4PagePaginationArray, Domains, } from \"./domains.mjs\";\nimport * as ImpersonationRegistryAPI from \"./impersonation-registry.mjs\";\nimport { ImpersonationRegistry, ImpersonationRegistryListResponsesV4PagePaginationArray, } from \"./impersonation-registry.mjs\";\nimport * as TrustedDomainsAPI from \"./trusted-domains.mjs\";\nimport { TrustedDomainListResponsesV4PagePaginationArray, TrustedDomains, } from \"./trusted-domains.mjs\";\nexport class Settings extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.allowPolicies = new AllowPoliciesAPI.AllowPolicies(this._client);\n        this.blockSenders = new BlockSendersAPI.BlockSenders(this._client);\n        this.domains = new DomainsAPI.Domains(this._client);\n        this.impersonationRegistry = new ImpersonationRegistryAPI.ImpersonationRegistry(this._client);\n        this.trustedDomains = new TrustedDomainsAPI.TrustedDomains(this._client);\n    }\n}\nSettings.AllowPolicies = AllowPolicies;\nSettings.AllowPolicyListResponsesV4PagePaginationArray = AllowPolicyListResponsesV4PagePaginationArray;\nSettings.BlockSenders = BlockSenders;\nSettings.BlockSenderListResponsesV4PagePaginationArray = BlockSenderListResponsesV4PagePaginationArray;\nSettings.Domains = Domains;\nSettings.DomainListResponsesV4PagePaginationArray = DomainListResponsesV4PagePaginationArray;\nSettings.DomainBulkDeleteResponsesSinglePage = DomainBulkDeleteResponsesSinglePage;\nSettings.ImpersonationRegistry = ImpersonationRegistry;\nSettings.ImpersonationRegistryListResponsesV4PagePaginationArray =\n    ImpersonationRegistryListResponsesV4PagePaginationArray;\nSettings.TrustedDomains = TrustedDomains;\nSettings.TrustedDomainListResponsesV4PagePaginationArray = TrustedDomainListResponsesV4PagePaginationArray;\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as SubmissionsAPI from \"./submissions.mjs\";\nimport { SubmissionListResponsesV4PagePaginationArray, Submissions, } from \"./submissions.mjs\";\nimport * as InvestigateAPI from \"./investigate/investigate.mjs\";\nimport { Investigate, InvestigateListResponsesV4PagePaginationArray, } from \"./investigate/investigate.mjs\";\nimport * as SettingsAPI from \"./settings/settings.mjs\";\nimport { Settings } from \"./settings/settings.mjs\";\nexport class EmailSecurity extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.investigate = new InvestigateAPI.Investigate(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.submissions = new SubmissionsAPI.Submissions(this._client);\n    }\n}\nEmailSecurity.Investigate = Investigate;\nEmailSecurity.InvestigateListResponsesV4PagePaginationArray = InvestigateListResponsesV4PagePaginationArray;\nEmailSecurity.Settings = Settings;\nEmailSecurity.Submissions = Submissions;\nEmailSecurity.SubmissionListResponsesV4PagePaginationArray = SubmissionListResponsesV4PagePaginationArray;\n//# sourceMappingURL=email-security.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Addresses extends APIResource {\n    /**\n     * Create a destination address to forward your emails to. Destination addresses\n     * need to be verified before they can be used.\n     *\n     * @example\n     * ```ts\n     * const address = await client.emailRouting.addresses.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   email: 'user@example.com',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/email/routing/addresses`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists existing destination addresses.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const address of client.emailRouting.addresses.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/email/routing/addresses`, AddressesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a specific destination address.\n     *\n     * @example\n     * ```ts\n     * const address = await client.emailRouting.addresses.delete(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(destinationAddressIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/email/routing/addresses/${destinationAddressIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets information for a specific destination email already created.\n     *\n     * @example\n     * ```ts\n     * const address = await client.emailRouting.addresses.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(destinationAddressIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/email/routing/addresses/${destinationAddressIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AddressesV4PagePaginationArray extends V4PagePaginationArray {\n}\nAddresses.AddressesV4PagePaginationArray = AddressesV4PagePaginationArray;\n//# sourceMappingURL=addresses.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class DNS extends APIResource {\n    /**\n     * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.\n     *\n     * @example\n     * ```ts\n     * const settings = await client.emailRouting.dns.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'example.net',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/email/routing/dns`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disable your Email Routing zone. Also removes additional MX records previously\n     * required for Email Routing to work.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const dnsRecord of client.emailRouting.dns.delete(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/email/routing/dns`, DNSRecordsSinglePage, {\n            method: 'delete',\n            ...options,\n        });\n    }\n    /**\n     * Unlock MX Records previously locked by Email Routing.\n     *\n     * @example\n     * ```ts\n     * const settings = await client.emailRouting.dns.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'example.net',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/email/routing/dns`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show the DNS records needed to configure your Email Routing zone.\n     *\n     * @example\n     * ```ts\n     * const dns = await client.emailRouting.dns.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/email/routing/dns`, { query, ...options });\n    }\n}\nexport class DNSRecordsSinglePage extends SinglePage {\n}\nDNS.DNSRecordsSinglePage = DNSRecordsSinglePage;\n//# sourceMappingURL=dns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class CatchAlls extends APIResource {\n    /**\n     * Enable or disable catch-all routing rule, or change action to forward to\n     * specific destination address.\n     *\n     * @example\n     * ```ts\n     * const catchAll =\n     *   await client.emailRouting.rules.catchAlls.update({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     actions: [{ type: 'forward' }],\n     *     matchers: [{ type: 'all' }],\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/email/routing/rules/catch_all`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information on the default catch-all routing rule.\n     *\n     * @example\n     * ```ts\n     * const catchAll =\n     *   await client.emailRouting.rules.catchAlls.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/email/routing/rules/catch_all`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=catch-alls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as CatchAllsAPI from \"./catch-alls.mjs\";\nimport { CatchAlls, } from \"./catch-alls.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Rules extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.catchAlls = new CatchAllsAPI.CatchAlls(this._client);\n    }\n    /**\n     * Rules consist of a set of criteria for matching emails (such as an email being\n     * sent to a specific custom email address) plus a set of actions to take on the\n     * email (like forwarding it to a specific destination address).\n     *\n     * @example\n     * ```ts\n     * const emailRoutingRule =\n     *   await client.emailRouting.rules.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     actions: [{ type: 'forward' }],\n     *     matchers: [{ type: 'literal' }],\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/email/routing/rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update actions and matches, or enable/disable specific routing rules.\n     *\n     * @example\n     * ```ts\n     * const emailRoutingRule =\n     *   await client.emailRouting.rules.update(\n     *     'a7e6fb77503c41d8a7f3113c6918f10c',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       actions: [{ type: 'forward' }],\n     *       matchers: [{ type: 'literal' }],\n     *     },\n     *   );\n     * ```\n     */\n    update(ruleIdentifier, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/email/routing/rules/${ruleIdentifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists existing routing rules.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const emailRoutingRule of client.emailRouting.rules.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/email/routing/rules`, EmailRoutingRulesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a specific routing rule.\n     *\n     * @example\n     * ```ts\n     * const emailRoutingRule =\n     *   await client.emailRouting.rules.delete(\n     *     'a7e6fb77503c41d8a7f3113c6918f10c',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(ruleIdentifier, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/email/routing/rules/${ruleIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information for a specific routing rule already created.\n     *\n     * @example\n     * ```ts\n     * const emailRoutingRule =\n     *   await client.emailRouting.rules.get(\n     *     'a7e6fb77503c41d8a7f3113c6918f10c',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(ruleIdentifier, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/email/routing/rules/${ruleIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class EmailRoutingRulesV4PagePaginationArray extends V4PagePaginationArray {\n}\nRules.EmailRoutingRulesV4PagePaginationArray = EmailRoutingRulesV4PagePaginationArray;\nRules.CatchAlls = CatchAlls;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AddressesAPI from \"./addresses.mjs\";\nimport { Addresses, AddressesV4PagePaginationArray, } from \"./addresses.mjs\";\nimport * as DNSAPI from \"./dns.mjs\";\nimport { DNS, DNSRecordsSinglePage, } from \"./dns.mjs\";\nimport * as RulesAPI from \"./rules/rules.mjs\";\nimport { EmailRoutingRulesV4PagePaginationArray, Rules, } from \"./rules/rules.mjs\";\nexport class EmailRouting extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.dns = new DNSAPI.DNS(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n        this.addresses = new AddressesAPI.Addresses(this._client);\n    }\n    /**\n     * Disable your Email Routing zone. Also removes additional MX records previously\n     * required for Email Routing to work.\n     *\n     * @deprecated\n     */\n    disable(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/email/routing/disable`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.\n     *\n     * @deprecated\n     */\n    enable(params, options) {\n        const { zone_id, body } = params;\n        return this._client.post(`/zones/${zone_id}/email/routing/enable`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about the settings for your Email Routing zone.\n     *\n     * @example\n     * ```ts\n     * const settings = await client.emailRouting.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/email/routing`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nEmailRouting.DNS = DNS;\nEmailRouting.DNSRecordsSinglePage = DNSRecordsSinglePage;\nEmailRouting.Rules = Rules;\nEmailRouting.EmailRoutingRulesV4PagePaginationArray = EmailRoutingRulesV4PagePaginationArray;\nEmailRouting.Addresses = Addresses;\nEmailRouting.AddressesV4PagePaginationArray = AddressesV4PagePaginationArray;\n//# sourceMappingURL=email-routing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../pagination.mjs\";\n/**\n * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n */\nexport class Filters extends APIResource {\n    /**\n     * Creates one or more filters.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    create(params, options) {\n        const { zone_id, body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/filters`, FirewallFiltersSinglePage, {\n            body: body,\n            method: 'post',\n            ...options,\n        });\n    }\n    /**\n     * Updates an existing filter.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    update(filterId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/filters/${filterId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches filters in a zone. You can filter the results using several optional\n     * parameters.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/filters`, FirewallFiltersV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes an existing filter.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    delete(filterId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/filters/${filterId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes one or more existing filters.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    bulkDelete(params, options) {\n        const { zone_id, id } = params;\n        return this._client.delete(`/zones/${zone_id}/filters`, { query: { id }, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates one or more existing filters.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    bulkUpdate(params, options) {\n        const { zone_id, body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/filters`, FirewallFiltersSinglePage, {\n            body: body,\n            method: 'put',\n            ...options,\n        });\n    }\n    /**\n     * Fetches the details of a filter.\n     *\n     * @deprecated The Filters API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    get(filterId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/filters/${filterId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class FirewallFiltersSinglePage extends SinglePage {\n}\nexport class FirewallFiltersV4PagePaginationArray extends V4PagePaginationArray {\n}\nFilters.FirewallFiltersSinglePage = FirewallFiltersSinglePage;\nFilters.FirewallFiltersV4PagePaginationArray = FirewallFiltersV4PagePaginationArray;\n//# sourceMappingURL=filters.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class AccessRules extends APIResource {\n    /**\n     * Creates a new IP Access rule for an account or zone. The rule will apply to all\n     * zones in the account or zone.\n     *\n     * Note: To create an IP Access rule that applies to a single zone, refer to the\n     * [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.\n     *\n     * @example\n     * ```ts\n     * const accessRule = await client.firewall.accessRules.create(\n     *   {\n     *     configuration: {},\n     *     mode: 'challenge',\n     *     account_id: 'account_id',\n     *   },\n     * );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/firewall/access_rules/rules`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/firewall/access_rules/rules`, AccessRuleListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    delete(ruleId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(ruleId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/firewall/access_rules/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an IP Access rule defined.\n     *\n     * Note: This operation will affect all zones in the account or zone.\n     *\n     * @example\n     * ```ts\n     * const response = await client.firewall.accessRules.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     configuration: {},\n     *     mode: 'challenge',\n     *     account_id: 'account_id',\n     *   },\n     * );\n     * ```\n     */\n    edit(ruleId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.patch(`/${accountOrZone}/${accountOrZoneId}/firewall/access_rules/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    get(ruleId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(ruleId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/firewall/access_rules/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AccessRuleListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nAccessRules.AccessRuleListResponsesV4PagePaginationArray = AccessRuleListResponsesV4PagePaginationArray;\n//# sourceMappingURL=access-rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Lockdowns extends APIResource {\n    /**\n     * Creates a new Zone Lockdown rule.\n     *\n     * @example\n     * ```ts\n     * const lockdown = await client.firewall.lockdowns.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   configurations: [{}],\n     *   urls: ['shop.example.com/*'],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/firewall/lockdowns`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing Zone Lockdown rule.\n     *\n     * @example\n     * ```ts\n     * const lockdown = await client.firewall.lockdowns.update(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     configurations: [{}],\n     *     urls: ['shop.example.com/*'],\n     *   },\n     * );\n     * ```\n     */\n    update(lockDownsId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/firewall/lockdowns/${lockDownsId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches Zone Lockdown rules. You can filter the results using several optional\n     * parameters.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const lockdown of client.firewall.lockdowns.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/lockdowns`, LockdownsV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes an existing Zone Lockdown rule.\n     *\n     * @example\n     * ```ts\n     * const lockdown = await client.firewall.lockdowns.delete(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(lockDownsId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/firewall/lockdowns/${lockDownsId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a Zone Lockdown rule.\n     *\n     * @example\n     * ```ts\n     * const lockdown = await client.firewall.lockdowns.get(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(lockDownsId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/lockdowns/${lockDownsId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class LockdownsV4PagePaginationArray extends V4PagePaginationArray {\n}\nLockdowns.LockdownsV4PagePaginationArray = LockdownsV4PagePaginationArray;\n//# sourceMappingURL=lockdowns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../pagination.mjs\";\n/**\n * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n */\nexport class Rules extends APIResource {\n    /**\n     * Create one or more firewall rules.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/rules`, FirewallRulesSinglePage, {\n            body,\n            method: 'post',\n            ...options,\n        });\n    }\n    /**\n     * Updates an existing firewall rule.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    update(ruleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/firewall/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches firewall rules in a zone. You can filter the results using several\n     * optional parameters.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/rules`, FirewallRulesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes an existing firewall rule.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    delete(ruleId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/firewall/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes existing firewall rules.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    bulkDelete(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/rules`, FirewallRulesSinglePage, {\n            method: 'delete',\n            ...options,\n        });\n    }\n    /**\n     * Updates the priority of existing firewall rules.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    bulkEdit(params, options) {\n        const { zone_id, body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/rules`, FirewallRulesSinglePage, {\n            body: body,\n            method: 'patch',\n            ...options,\n        });\n    }\n    /**\n     * Updates one or more existing firewall rules.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    bulkUpdate(params, options) {\n        const { zone_id, body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/rules`, FirewallRulesSinglePage, {\n            body: body,\n            method: 'put',\n            ...options,\n        });\n    }\n    /**\n     * Updates the priority of an existing firewall rule.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    edit(ruleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/rules/${ruleId}`, FirewallRulesSinglePage, {\n            body,\n            method: 'patch',\n            ...options,\n        });\n    }\n    /**\n     * Fetches the details of a firewall rule.\n     *\n     * @deprecated The Firewall Rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#firewall-rules-api-and-filters-api for full details.\n     */\n    get(ruleId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class FirewallRulesSinglePage extends SinglePage {\n}\nexport class FirewallRulesV4PagePaginationArray extends V4PagePaginationArray {\n}\nRules.FirewallRulesSinglePage = FirewallRulesSinglePage;\nRules.FirewallRulesV4PagePaginationArray = FirewallRulesV4PagePaginationArray;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class UARules extends APIResource {\n    /**\n     * Creates a new User Agent Blocking rule in a zone.\n     *\n     * @example\n     * ```ts\n     * const uaRule = await client.firewall.uaRules.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   configuration: {},\n     *   mode: 'challenge',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/firewall/ua_rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing User Agent Blocking rule.\n     *\n     * @example\n     * ```ts\n     * const uaRule = await client.firewall.uaRules.update(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     configuration: {},\n     *     mode: 'challenge',\n     *   },\n     * );\n     * ```\n     */\n    update(uaRuleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/firewall/ua_rules/${uaRuleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches User Agent Blocking rules in a zone. You can filter the results using\n     * several optional parameters.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const uaRuleListResponse of client.firewall.uaRules.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/ua_rules`, UARuleListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes an existing User Agent Blocking rule.\n     *\n     * @example\n     * ```ts\n     * const uaRule = await client.firewall.uaRules.delete(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(uaRuleId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/firewall/ua_rules/${uaRuleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a User Agent Blocking rule.\n     *\n     * @example\n     * ```ts\n     * const uaRule = await client.firewall.uaRules.get(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(uaRuleId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/ua_rules/${uaRuleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class UARuleListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nUARules.UARuleListResponsesV4PagePaginationArray = UARuleListResponsesV4PagePaginationArray;\n//# sourceMappingURL=ua-rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Overrides extends APIResource {\n    /**\n     * Creates a URI-based WAF override for a zone.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/firewall/waf/overrides`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing URI-based WAF override.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    update(overridesId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/firewall/waf/overrides/${overridesId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the URI-based WAF overrides in a zone.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/waf/overrides`, OverridesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes an existing URI-based WAF override.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    delete(overridesId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/firewall/waf/overrides/${overridesId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a URI-based WAF override.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    get(overridesId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/waf/overrides/${overridesId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OverridesV4PagePaginationArray extends V4PagePaginationArray {\n}\nOverrides.OverridesV4PagePaginationArray = OverridesV4PagePaginationArray;\n//# sourceMappingURL=overrides.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Groups extends APIResource {\n    /**\n     * Fetches the WAF rule groups in a WAF package.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    list(packageId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/waf/packages/${packageId}/groups`, GroupsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Updates a WAF rule group. You can update the state (`mode` parameter) of a rule\n     * group.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    edit(packageId, groupId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/firewall/waf/packages/${packageId}/groups/${groupId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a WAF rule group.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    get(packageId, groupId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/waf/packages/${packageId}/groups/${groupId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class GroupsV4PagePaginationArray extends V4PagePaginationArray {\n}\nGroups.GroupsV4PagePaginationArray = GroupsV4PagePaginationArray;\n//# sourceMappingURL=groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Fetches WAF rules in a WAF package.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    list(packageId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/waf/packages/${packageId}/rules`, RuleListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Updates a WAF rule. You can only update the mode/action of the rule.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    edit(packageId, ruleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/firewall/waf/packages/${packageId}/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a WAF rule in a WAF package.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    get(packageId, ruleId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/waf/packages/${packageId}/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RuleListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nRules.RuleListResponsesV4PagePaginationArray = RuleListResponsesV4PagePaginationArray;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as GroupsAPI from \"./groups.mjs\";\nimport { Groups, GroupsV4PagePaginationArray, } from \"./groups.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { RuleListResponsesV4PagePaginationArray, Rules, } from \"./rules.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Packages extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.groups = new GroupsAPI.Groups(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n    }\n    /**\n     * Fetches WAF packages for a zone.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/firewall/waf/packages`, PackageListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Fetches the details of a WAF package.\n     *\n     * **Note:** Applies only to the\n     * [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).\n     *\n     * @deprecated\n     */\n    get(packageId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/firewall/waf/packages/${packageId}`, options);\n    }\n}\nexport class PackageListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nPackages.PackageListResponsesV4PagePaginationArray = PackageListResponsesV4PagePaginationArray;\nPackages.Groups = Groups;\nPackages.GroupsV4PagePaginationArray = GroupsV4PagePaginationArray;\nPackages.Rules = Rules;\nPackages.RuleListResponsesV4PagePaginationArray = RuleListResponsesV4PagePaginationArray;\n//# sourceMappingURL=packages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as OverridesAPI from \"./overrides.mjs\";\nimport { Overrides, OverridesV4PagePaginationArray, } from \"./overrides.mjs\";\nimport * as PackagesAPI from \"./packages/packages.mjs\";\nimport { PackageListResponsesV4PagePaginationArray, Packages, } from \"./packages/packages.mjs\";\n/**\n * @deprecated WAF managed rules API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#waf-managed-rules-apis-previous-version for full details.\n */\nexport class WAF extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.overrides = new OverridesAPI.Overrides(this._client);\n        this.packages = new PackagesAPI.Packages(this._client);\n    }\n}\nWAF.Overrides = Overrides;\nWAF.OverridesV4PagePaginationArray = OverridesV4PagePaginationArray;\nWAF.Packages = Packages;\nWAF.PackageListResponsesV4PagePaginationArray = PackageListResponsesV4PagePaginationArray;\n//# sourceMappingURL=waf.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AccessRulesAPI from \"./access-rules.mjs\";\nimport { AccessRuleListResponsesV4PagePaginationArray, AccessRules, } from \"./access-rules.mjs\";\nimport * as LockdownsAPI from \"./lockdowns.mjs\";\nimport { Lockdowns, LockdownsV4PagePaginationArray, } from \"./lockdowns.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { FirewallRulesSinglePage, FirewallRulesV4PagePaginationArray, Rules, } from \"./rules.mjs\";\nimport * as UARulesAPI from \"./ua-rules.mjs\";\nimport { UARuleListResponsesV4PagePaginationArray, UARules, } from \"./ua-rules.mjs\";\nimport * as WAFAPI from \"./waf/waf.mjs\";\nimport { WAF } from \"./waf/waf.mjs\";\nexport class Firewall extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.lockdowns = new LockdownsAPI.Lockdowns(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n        this.accessRules = new AccessRulesAPI.AccessRules(this._client);\n        this.uaRules = new UARulesAPI.UARules(this._client);\n        this.waf = new WAFAPI.WAF(this._client);\n    }\n}\nFirewall.Lockdowns = Lockdowns;\nFirewall.LockdownsV4PagePaginationArray = LockdownsV4PagePaginationArray;\nFirewall.Rules = Rules;\nFirewall.FirewallRulesSinglePage = FirewallRulesSinglePage;\nFirewall.FirewallRulesV4PagePaginationArray = FirewallRulesV4PagePaginationArray;\nFirewall.AccessRules = AccessRules;\nFirewall.AccessRuleListResponsesV4PagePaginationArray = AccessRuleListResponsesV4PagePaginationArray;\nFirewall.UARules = UARules;\nFirewall.UARuleListResponsesV4PagePaginationArray = UARuleListResponsesV4PagePaginationArray;\nFirewall.WAF = WAF;\n//# sourceMappingURL=firewall.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Previews extends APIResource {\n    /**\n     * Create a new preview health check.\n     *\n     * @example\n     * ```ts\n     * const healthcheck =\n     *   await client.healthchecks.previews.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     address: 'www.example.com',\n     *     name: 'server-1',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/healthchecks/preview`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a health check.\n     *\n     * @example\n     * ```ts\n     * const preview = await client.healthchecks.previews.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(healthcheckId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/healthchecks/preview/${healthcheckId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single configured health check preview.\n     *\n     * @example\n     * ```ts\n     * const healthcheck = await client.healthchecks.previews.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(healthcheckId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/healthchecks/preview/${healthcheckId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=previews.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as PreviewsAPI from \"./previews.mjs\";\nimport { Previews, } from \"./previews.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Healthchecks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.previews = new PreviewsAPI.Previews(this._client);\n    }\n    /**\n     * Create a new health check.\n     *\n     * @example\n     * ```ts\n     * const healthcheck = await client.healthchecks.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   address: 'www.example.com',\n     *   name: 'server-1',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/healthchecks`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a configured health check.\n     *\n     * @example\n     * ```ts\n     * const healthcheck = await client.healthchecks.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     address: 'www.example.com',\n     *     name: 'server-1',\n     *   },\n     * );\n     * ```\n     */\n    update(healthcheckId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/healthchecks/${healthcheckId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List configured health checks.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const healthcheck of client.healthchecks.list({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/healthchecks`, HealthchecksV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete a health check.\n     *\n     * @example\n     * ```ts\n     * const healthcheck = await client.healthchecks.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(healthcheckId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/healthchecks/${healthcheckId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patch a configured health check.\n     *\n     * @example\n     * ```ts\n     * const healthcheck = await client.healthchecks.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     address: 'www.example.com',\n     *     name: 'server-1',\n     *   },\n     * );\n     * ```\n     */\n    edit(healthcheckId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/healthchecks/${healthcheckId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single configured health check.\n     *\n     * @example\n     * ```ts\n     * const healthcheck = await client.healthchecks.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(healthcheckId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/healthchecks/${healthcheckId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class HealthchecksV4PagePaginationArray extends V4PagePaginationArray {\n}\nHealthchecks.HealthchecksV4PagePaginationArray = HealthchecksV4PagePaginationArray;\nHealthchecks.Previews = Previews;\n//# sourceMappingURL=healthchecks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { SinglePage } from \"../pagination.mjs\";\nexport class KeylessCertificates extends APIResource {\n    /**\n     * Create Keyless SSL Configuration\n     *\n     * @example\n     * ```ts\n     * const keylessCertificate =\n     *   await client.keylessCertificates.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     certificate:\n     *       '-----BEGIN CERTIFICATE----- MIIDtTCCAp2gAwIBAgIJAM15n7fdxhRtMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV BAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX aWRnaXRzIFB0eSBMdGQwHhcNMTQwMzExMTkyMTU5WhcNMTQwNDEwMTkyMTU5WjBF MQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50 ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAvq3sKsHpeduJHimOK+fvQdKsI8z8A05MZyyLp2/R/GE8FjNv+hkVY1WQ LIyTNNQH7CJecE1nbTfo8Y56S7x/rhxC6/DJ8MIulapFPnorq46KU6yRxiM0MQ3N nTJHlHA2ozZta6YBBfVfhHWl1F0IfNbXCLKvGwWWMbCx43OfW6KTkbRnE6gFWKuO fSO5h2u5TaWVuSIzBvYs7Vza6m+gtYAvKAJV2nSZ+eSEFPDo29corOy8+huEOUL8 5FAw4BFPsr1TlrlGPFitduQUHGrSL7skk1ESGza0to3bOtrodKei2s9bk5MXm7lZ qI+WZJX4Zu9+mzZhc9pCVi8r/qlXuQIDAQABo4GnMIGkMB0GA1UdDgQWBBRvavf+ sWM4IwKiH9X9w1vl6nUVRDB1BgNVHSMEbjBsgBRvavf+sWM4IwKiH9X9w1vl6nUV RKFJpEcwRTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAM15n7fdxhRtMAwGA1UdEwQF MAMBAf8wDQYJKoZIhvcNAQEFBQADggEBABY2ZzBaW0dMsAAT7tPJzrVWVzQx6KU4 UEBLudIlWPlkAwTnINCWR/8eNjCCmGA4heUdHmazdpPa8RzwOmc0NT1NQqzSyktt vTqb4iHD7+8f9MqJ9/FssCfTtqr/Qst/hGH4Wmdf1EJ/6FqYAAb5iRlPgshFZxU8 uXtA8hWn6fK6eISD9HBdcAFToUvKNZ1BIDPvh9f95Ine8ar6yGd56TUNrHR8eHBs ESxz5ddVR/oWRysNJ+aGAyYqHS8S/ttmC7r4XCAHqXptkHPCGRqkAhsterYhd4I8 /cBzejUobNCjjHFbtkAL/SjxZOLW+pNkZwfeYdM8iPkD54Uua1v2tdw= -----END CERTIFICATE-----',\n     *     host: 'example.com',\n     *     port: 24008,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/keyless_certificates`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all Keyless SSL configurations for a given zone.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const keylessCertificate of client.keylessCertificates.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/keyless_certificates`, KeylessCertificatesSinglePage, options);\n    }\n    /**\n     * Delete Keyless SSL Configuration\n     *\n     * @example\n     * ```ts\n     * const keylessCertificate =\n     *   await client.keylessCertificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(keylessCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/keyless_certificates/${keylessCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * This will update attributes of a Keyless SSL. Consists of one or more of the\n     * following: host,name,port.\n     *\n     * @example\n     * ```ts\n     * const keylessCertificate =\n     *   await client.keylessCertificates.edit(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(keylessCertificateId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/keyless_certificates/${keylessCertificateId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get details for one Keyless SSL configuration.\n     *\n     * @example\n     * ```ts\n     * const keylessCertificate =\n     *   await client.keylessCertificates.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(keylessCertificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/keyless_certificates/${keylessCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class KeylessCertificatesSinglePage extends SinglePage {\n}\nKeylessCertificates.KeylessCertificatesSinglePage = KeylessCertificatesSinglePage;\n//# sourceMappingURL=keyless-certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Edge extends APIResource {\n    /**\n     * Creates a new Instant Logs job for a zone.\n     *\n     * @example\n     * ```ts\n     * const instantLogpushJob = await client.logpush.edge.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/logpush/edge/jobs`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Instant Logs jobs for a zone.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const instantLogpushJob of client.logpush.edge.get(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/logpush/edge/jobs`, InstantLogpushJobsSinglePage, options);\n    }\n}\nexport class InstantLogpushJobsSinglePage extends SinglePage {\n}\nEdge.InstantLogpushJobsSinglePage = InstantLogpushJobsSinglePage;\n//# sourceMappingURL=edge.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Jobs extends APIResource {\n    /**\n     * Creates a new Logpush job for an account or zone.\n     *\n     * @example\n     * ```ts\n     * const logpushJob = await client.logpush.jobs.create({\n     *   destination_conf: 's3://mybucket/logs?region=us-west-2',\n     *   account_id: 'account_id',\n     *   dataset: 'gateway_dns',\n     *   filter:\n     *     '{\"where\":{\"and\":[{\"key\":\"ClientRequestPath\",\"operator\":\"contains\",\"value\":\"/static\"},{\"key\":\"ClientRequestHost\",\"operator\":\"eq\",\"value\":\"example.com\"}]}}',\n     *   max_upload_bytes: 5000000,\n     *   max_upload_interval_seconds: 30,\n     *   max_upload_records: 1000,\n     *   name: 'example.com',\n     *   output_options: {\n     *     'CVE-2021-44228': false,\n     *     batch_prefix: '',\n     *     batch_suffix: '',\n     *     field_delimiter: ',',\n     *     field_names: ['Datetime', 'DstIP', 'SrcIP'],\n     *     output_type: 'ndjson',\n     *     record_delimiter: '',\n     *     record_prefix: '{',\n     *     record_suffix: '}\\n',\n     *     sample_rate: 1,\n     *     timestamp_format: 'unixnano',\n     *   },\n     *   ownership_challenge: '00000000000000000000',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/logpush/jobs`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a Logpush job.\n     *\n     * @example\n     * ```ts\n     * const logpushJob = await client.logpush.jobs.update(1, {\n     *   account_id: 'account_id',\n     *   destination_conf: 's3://mybucket/logs?region=us-west-2',\n     *   filter:\n     *     '{\"where\":{\"and\":[{\"key\":\"ClientRequestPath\",\"operator\":\"contains\",\"value\":\"/static\"},{\"key\":\"ClientRequestHost\",\"operator\":\"eq\",\"value\":\"example.com\"}]}}',\n     *   max_upload_bytes: 5000000,\n     *   max_upload_interval_seconds: 30,\n     *   max_upload_records: 1000,\n     *   output_options: {\n     *     'CVE-2021-44228': false,\n     *     batch_prefix: '',\n     *     batch_suffix: '',\n     *     field_delimiter: ',',\n     *     field_names: ['Datetime', 'DstIP', 'SrcIP'],\n     *     output_type: 'ndjson',\n     *     record_delimiter: '',\n     *     record_prefix: '{',\n     *     record_suffix: '}\\n',\n     *     sample_rate: 1,\n     *     timestamp_format: 'unixnano',\n     *   },\n     *   ownership_challenge: '00000000000000000000',\n     * });\n     * ```\n     */\n    update(jobId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/logpush/jobs/${jobId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/logpush/jobs`, LogpushJobsSinglePage, options);\n    }\n    delete(jobId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(jobId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/logpush/jobs/${jobId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(jobId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(jobId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/logpush/jobs/${jobId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class LogpushJobsSinglePage extends SinglePage {\n}\nJobs.LogpushJobsSinglePage = LogpushJobsSinglePage;\n//# sourceMappingURL=jobs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nexport class Ownership extends APIResource {\n    /**\n     * Gets a new ownership challenge sent to your destination.\n     *\n     * @example\n     * ```ts\n     * const ownership = await client.logpush.ownership.create({\n     *   destination_conf: 's3://mybucket/logs?region=us-west-2',\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/logpush/ownership`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Validates ownership challenge of the destination.\n     *\n     * @example\n     * ```ts\n     * const ownershipValidation =\n     *   await client.logpush.ownership.validate({\n     *     destination_conf: 's3://mybucket/logs?region=us-west-2',\n     *     ownership_challenge: '00000000000000000000',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    validate(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/logpush/ownership/validate`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ownership.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nexport class Validate extends APIResource {\n    /**\n     * Validates destination.\n     *\n     * @example\n     * ```ts\n     * const response = await client.logpush.validate.destination({\n     *   destination_conf: 's3://mybucket/logs?region=us-west-2',\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    destination(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/logpush/validate/destination`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Checks if there is an existing job with a destination.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.logpush.validate.destinationExists({\n     *     destination_conf: 's3://mybucket/logs?region=us-west-2',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    destinationExists(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/logpush/validate/destination/exists`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Validates logpull origin with logpull_options.\n     *\n     * @example\n     * ```ts\n     * const response = await client.logpush.validate.origin({\n     *   logpull_options:\n     *     'fields=RayID,ClientIP,EdgeStartTimestamp&timestamps=rfc3339',\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    origin(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/logpush/validate/origin`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=validate.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Fields extends APIResource {\n    get(datasetId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(datasetId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/logpush/datasets/${datasetId}/fields`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=fields.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { LogpushJobsSinglePage } from \"../jobs.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Jobs extends APIResource {\n    get(datasetId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(datasetId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/logpush/datasets/${datasetId}/jobs`, LogpushJobsSinglePage, options);\n    }\n}\nexport { LogpushJobsSinglePage };\n//# sourceMappingURL=jobs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as FieldsAPI from \"./fields.mjs\";\nimport { Fields } from \"./fields.mjs\";\nimport * as JobsAPI from \"./jobs.mjs\";\nimport { Jobs } from \"./jobs.mjs\";\nexport class Datasets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.fields = new FieldsAPI.Fields(this._client);\n        this.jobs = new JobsAPI.Jobs(this._client);\n    }\n}\nDatasets.Fields = Fields;\nDatasets.Jobs = Jobs;\n//# sourceMappingURL=datasets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as EdgeAPI from \"./edge.mjs\";\nimport { Edge, InstantLogpushJobsSinglePage, } from \"./edge.mjs\";\nimport * as JobsAPI from \"./jobs.mjs\";\nimport { Jobs, LogpushJobsSinglePage, } from \"./jobs.mjs\";\nimport * as OwnershipAPI from \"./ownership.mjs\";\nimport { Ownership, } from \"./ownership.mjs\";\nimport * as ValidateAPI from \"./validate.mjs\";\nimport { Validate, } from \"./validate.mjs\";\nimport * as DatasetsAPI from \"./datasets/datasets.mjs\";\nimport { Datasets } from \"./datasets/datasets.mjs\";\nexport class Logpush extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.datasets = new DatasetsAPI.Datasets(this._client);\n        this.edge = new EdgeAPI.Edge(this._client);\n        this.jobs = new JobsAPI.Jobs(this._client);\n        this.ownership = new OwnershipAPI.Ownership(this._client);\n        this.validate = new ValidateAPI.Validate(this._client);\n    }\n}\nLogpush.Datasets = Datasets;\nLogpush.Edge = Edge;\nLogpush.InstantLogpushJobsSinglePage = InstantLogpushJobsSinglePage;\nLogpush.Jobs = Jobs;\nLogpush.LogpushJobsSinglePage = LogpushJobsSinglePage;\nLogpush.Ownership = Ownership;\nLogpush.Validate = Validate;\n//# sourceMappingURL=logpush.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class RayID extends APIResource {\n    /**\n     * The `/rayids` api route allows lookups by specific rayid. The rayids route will\n     * return zero, one, or more records (ray ids are not unique).\n     *\n     * @example\n     * ```ts\n     * const RayID = await client.logs.RayID.get(\n     *   '41ddf1740f67442d',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(RayID, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/logs/rayids/${RayID}`, { query, ...options });\n    }\n}\n//# sourceMappingURL=rayid.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Retention extends APIResource {\n    /**\n     * Updates log retention flag for Logpull API.\n     *\n     * @example\n     * ```ts\n     * const retention =\n     *   await client.logs.control.retention.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/logs/control/retention/flag`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets log retention flag for Logpull API.\n     *\n     * @example\n     * ```ts\n     * const retention = await client.logs.control.retention.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/logs/control/retention/flag`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=retention.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Config extends APIResource {\n    /**\n     * Updates CMB config.\n     *\n     * @example\n     * ```ts\n     * const cmbConfig =\n     *   await client.logs.control.cmb.config.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/logs/control/cmb/config`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes CMB config.\n     *\n     * @example\n     * ```ts\n     * const config = await client.logs.control.cmb.config.delete({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/logs/control/cmb/config`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets CMB config.\n     *\n     * @example\n     * ```ts\n     * const cmbConfig = await client.logs.control.cmb.config.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/logs/control/cmb/config`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=config.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ConfigAPI from \"./config.mjs\";\nimport { Config, } from \"./config.mjs\";\nexport class Cmb extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.config = new ConfigAPI.Config(this._client);\n    }\n}\nCmb.Config = Config;\n//# sourceMappingURL=cmb.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as RetentionAPI from \"./retention.mjs\";\nimport { Retention, } from \"./retention.mjs\";\nimport * as CmbAPI from \"./cmb/cmb.mjs\";\nimport { Cmb } from \"./cmb/cmb.mjs\";\nexport class Control extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.retention = new RetentionAPI.Retention(this._client);\n        this.cmb = new CmbAPI.Cmb(this._client);\n    }\n}\nControl.Retention = Retention;\nControl.Cmb = Cmb;\n//# sourceMappingURL=control.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Fields extends APIResource {\n    /**\n     * Lists all fields available. The response is json object with key-value pairs,\n     * where keys are field names, and values are descriptions.\n     *\n     * @example\n     * ```ts\n     * const field = await client.logs.received.fields.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/logs/received/fields`, options);\n    }\n}\n//# sourceMappingURL=fields.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as FieldsAPI from \"./fields.mjs\";\nimport { Fields } from \"./fields.mjs\";\nexport class Received extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.fields = new FieldsAPI.Fields(this._client);\n    }\n    /**\n     * The `/received` api route allows customers to retrieve their edge HTTP logs. The\n     * basic access pattern is \"give me all the logs for zone Z for minute M\", where\n     * the minute M refers to the time records were received at Cloudflare's central\n     * data center. `start` is inclusive, and `end` is exclusive. Because of that, to\n     * get all data, at minutely cadence, starting at 10AM, the proper values are:\n     * `start=2018-05-20T10:00:00Z&end=2018-05-20T10:01:00Z`, then\n     * `start=2018-05-20T10:01:00Z&end=2018-05-20T10:02:00Z` and so on; the overlap\n     * will be handled properly.\n     *\n     * @example\n     * ```ts\n     * const received = await client.logs.received.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   end: '2018-05-20T10:01:00Z',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/logs/received`, { query, ...options });\n    }\n}\nReceived.Fields = Fields;\n//# sourceMappingURL=received.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as RayIDAPI from \"./rayid.mjs\";\nimport { RayID } from \"./rayid.mjs\";\nimport * as ControlAPI from \"./control/control.mjs\";\nimport { Control } from \"./control/control.mjs\";\nimport * as ReceivedAPI from \"./received/received.mjs\";\nimport { Received } from \"./received/received.mjs\";\nexport class Logs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.control = new ControlAPI.Control(this._client);\n        this.RayID = new RayIDAPI.RayID(this._client);\n        this.received = new ReceivedAPI.Received(this._client);\n    }\n}\nLogs.Control = Control;\nLogs.RayID = RayID;\nLogs.Received = Received;\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Enable or disable zone-level authenticated origin pulls. 'enabled' should be set\n     * true either before/after the certificate is uploaded to see the certificate in\n     * use.\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.originTLSClientAuth.settings.update({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     enabled: true,\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/origin_tls_client_auth/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get whether zone-level authenticated origin pulls is enabled or not. It is false\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.originTLSClientAuth.settings.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/origin_tls_client_auth/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Certificates extends APIResource {\n    /**\n     * Upload a certificate to be used for client authentication on a hostname. 10\n     * hostname certificates per zone are allowed.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.originTLSClientAuth.hostnames.certificates.create(\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       certificate:\n     *         '-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n',\n     *       private_key:\n     *         '-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n',\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/origin_tls_client_auth/hostnames/certificates`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Certificates\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const certificateListResponse of client.originTLSClientAuth.hostnames.certificates.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/origin_tls_client_auth/hostnames/certificates`, CertificateListResponsesSinglePage, options);\n    }\n    /**\n     * Delete Hostname Client Certificate\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.originTLSClientAuth.hostnames.certificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(certificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/origin_tls_client_auth/hostnames/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get the certificate by ID to be used for client authentication on a hostname.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.originTLSClientAuth.hostnames.certificates.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(certificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/origin_tls_client_auth/hostnames/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CertificateListResponsesSinglePage extends SinglePage {\n}\nCertificates.CertificateListResponsesSinglePage = CertificateListResponsesSinglePage;\n//# sourceMappingURL=certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as CertificatesAPI from \"./certificates.mjs\";\nimport { CertificateListResponsesSinglePage, Certificates, } from \"./certificates.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Hostnames extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.certificates = new CertificatesAPI.Certificates(this._client);\n    }\n    /**\n     * Associate a hostname to a certificate and enable, disable or invalidate the\n     * association. If disabled, client certificate will not be sent to the hostname\n     * even if activated at the zone level. 100 maximum associations on a single\n     * certificate are allowed. Note: Use a null value for parameter _enabled_ to\n     * invalidate the association.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const hostnameUpdateResponse of client.originTLSClientAuth.hostnames.update(\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     config: [{}],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/origin_tls_client_auth/hostnames`, HostnameUpdateResponsesSinglePage, { body, method: 'put', ...options });\n    }\n    /**\n     * Get the Hostname Status for Client Authentication\n     *\n     * @example\n     * ```ts\n     * const authenticatedOriginPull =\n     *   await client.originTLSClientAuth.hostnames.get(\n     *     'app.example.com',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(hostname, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/origin_tls_client_auth/hostnames/${hostname}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class HostnameUpdateResponsesSinglePage extends SinglePage {\n}\nHostnames.HostnameUpdateResponsesSinglePage = HostnameUpdateResponsesSinglePage;\nHostnames.Certificates = Certificates;\nHostnames.CertificateListResponsesSinglePage = CertificateListResponsesSinglePage;\n//# sourceMappingURL=hostnames.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as HostnamesAPI from \"./hostnames/hostnames.mjs\";\nimport { HostnameUpdateResponsesSinglePage, Hostnames, } from \"./hostnames/hostnames.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class OriginTLSClientAuth extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.hostnames = new HostnamesAPI.Hostnames(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n    /**\n     * Upload your own certificate you want Cloudflare to use for edge-to-origin\n     * communication to override the shared certificate. Please note that it is\n     * important to keep only one certificate active. Also, make sure to enable\n     * zone-level authenticated origin pulls by making a PUT call to settings endpoint\n     * to see the uploaded certificate in use.\n     *\n     * @example\n     * ```ts\n     * const originTLSClientAuth =\n     *   await client.originTLSClientAuth.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     certificate:\n     *       '-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n',\n     *     private_key:\n     *       '-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/origin_tls_client_auth`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Certificates\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const originTLSClientAuthListResponse of client.originTLSClientAuth.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/origin_tls_client_auth`, OriginTLSClientAuthListResponsesSinglePage, options);\n    }\n    /**\n     * Delete Certificate\n     *\n     * @example\n     * ```ts\n     * const originTLSClientAuth =\n     *   await client.originTLSClientAuth.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(certificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/origin_tls_client_auth/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Certificate Details\n     *\n     * @example\n     * ```ts\n     * const originTLSClientAuth =\n     *   await client.originTLSClientAuth.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(certificateId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/origin_tls_client_auth/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OriginTLSClientAuthListResponsesSinglePage extends SinglePage {\n}\nOriginTLSClientAuth.OriginTLSClientAuthListResponsesSinglePage = OriginTLSClientAuthListResponsesSinglePage;\nOriginTLSClientAuth.Hostnames = Hostnames;\nOriginTLSClientAuth.HostnameUpdateResponsesSinglePage = HostnameUpdateResponsesSinglePage;\nOriginTLSClientAuth.Settings = Settings;\n//# sourceMappingURL=origin-tls-client-auth.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class PageRules extends APIResource {\n    /**\n     * Creates a new Page Rule.\n     *\n     * @example\n     * ```ts\n     * const pageRule = await client.pageRules.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   actions: [{}],\n     *   targets: [{}],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/pagerules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Replaces the configuration of an existing Page Rule. The configuration of the\n     * updated Page Rule will exactly match the data passed in the API request.\n     *\n     * @example\n     * ```ts\n     * const pageRule = await client.pageRules.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     actions: [{}],\n     *     targets: [{}],\n     *   },\n     * );\n     * ```\n     */\n    update(pageruleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/pagerules/${pageruleId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches Page Rules in a zone.\n     *\n     * @example\n     * ```ts\n     * const pageRules = await client.pageRules.list({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/pagerules`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes an existing Page Rule.\n     *\n     * @example\n     * ```ts\n     * const pageRule = await client.pageRules.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(pageruleId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/pagerules/${pageruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates one or more fields of an existing Page Rule.\n     *\n     * @example\n     * ```ts\n     * const pageRule = await client.pageRules.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(pageruleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/pagerules/${pageruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a Page Rule.\n     *\n     * @example\n     * ```ts\n     * const pageRule = await client.pageRules.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(pageruleId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/pagerules/${pageruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=page-rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { V4PagePaginationArray } from \"../pagination.mjs\";\n/**\n * @deprecated Rate limiting API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#rate-limiting-api-previous-version for full details.\n */\nexport class RateLimits extends APIResource {\n    /**\n     * Creates a new rate limit for a zone. Refer to the object definition for a list\n     * of required attributes.\n     *\n     * @deprecated Rate limiting API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#rate-limiting-api-previous-version for full details.\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/rate_limits`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the rate limits for a zone.\n     *\n     * @deprecated Rate limiting API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#rate-limiting-api-previous-version for full details.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/rate_limits`, RateLimitsV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes an existing rate limit.\n     *\n     * @deprecated Rate limiting API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#rate-limiting-api-previous-version for full details.\n     */\n    delete(rateLimitId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/rate_limits/${rateLimitId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing rate limit.\n     *\n     * @deprecated Rate limiting API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#rate-limiting-api-previous-version for full details.\n     */\n    edit(rateLimitId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/rate_limits/${rateLimitId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a rate limit.\n     *\n     * @deprecated Rate limiting API is deprecated in favour of using the Ruleset Engine. See https://developers.cloudflare.com/fundamentals/api/reference/deprecations/#rate-limiting-api-previous-version for full details.\n     */\n    get(rateLimitId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/rate_limits/${rateLimitId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RateLimitsV4PagePaginationArray extends V4PagePaginationArray {\n}\nRateLimits.RateLimitsV4PagePaginationArray = RateLimitsV4PagePaginationArray;\n//# sourceMappingURL=rate-limits.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Page extends APIResource {\n    /**\n     * Creates a waiting room page preview. Upload a custom waiting room page for\n     * preview. You will receive a preview URL in the form\n     * `http://waitingrooms.dev/preview/<uuid>`. You can use the following query\n     * parameters to change the state of the preview:\n     *\n     * 1. `force_queue`: Boolean indicating if all users will be queued in the waiting\n     *    room and no one will be let into the origin website (also known as queueAll).\n     * 2. `queue_is_full`: Boolean indicating if the waiting room's queue is currently\n     *    full and not accepting new users at the moment.\n     * 3. `queueing_method`: The queueing method currently used by the waiting room.\n     *    - **fifo** indicates a FIFO queue.\n     *    - **random** indicates a Random queue.\n     *    - **passthrough** indicates a Passthrough queue. Keep in mind that the\n     *      waiting room page will only be displayed if `force_queue=true` or\n     *      `event=prequeueing` — for other cases the request will pass through to the\n     *      origin. For our preview, this will be a fake origin website returning\n     *      \\\"Welcome\\\".\n     *    - **reject** indicates a Reject queue.\n     * 4. `event`: Used to preview a waiting room event.\n     *    - **none** indicates no event is occurring.\n     *    - **prequeueing** indicates that an event is prequeueing (between\n     *      `prequeue_start_time` and `event_start_time`).\n     *    - **started** indicates that an event has started (between `event_start_time`\n     *      and `event_end_time`).\n     * 5. `shuffle_at_event_start`: Boolean indicating if the event will shuffle users\n     *    in the prequeue when it starts. This can only be set to **true** if an event\n     *    is active (`event` is not **none**).\n     *\n     * For example, you can make a request to\n     * `http://waitingrooms.dev/preview/<uuid>?force_queue=false&queue_is_full=false&queueing_method=random&event=started&shuffle_at_event_start=true` 6.\n     * `waitTime`: Non-zero, positive integer indicating the estimated wait time in\n     * minutes. The default value is 10 minutes.\n     *\n     * For example, you can make a request to\n     * `http://waitingrooms.dev/preview/<uuid>?waitTime=50` to configure the estimated\n     * wait time as 50 minutes.\n     *\n     * @example\n     * ```ts\n     * const response = await client.waitingRooms.page.preview({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   custom_html:\n     *     '{{#waitTimeKnown}} {{waitTime}} mins {{/waitTimeKnown}} {{^waitTimeKnown}} Queue all enabled {{/waitTimeKnown}}',\n     * });\n     * ```\n     */\n    preview(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/waiting_rooms/preview`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=page.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Only available for the Waiting Room Advanced subscription. Creates a rule for a\n     * waiting room.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const waitingRoomRule of client.waitingRooms.rules.create(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     rules: {\n     *       action: 'bypass_waiting_room',\n     *       expression: 'ip.src in {10.20.30.40}',\n     *     },\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(waitingRoomId, params, options) {\n        const { zone_id, rules } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/rules`, WaitingRoomRulesSinglePage, { body: rules, method: 'post', ...options });\n    }\n    /**\n     * Only available for the Waiting Room Advanced subscription. Replaces all rules\n     * for a waiting room.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const waitingRoomRule of client.waitingRooms.rules.update(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     rules: [\n     *       {\n     *         action: 'bypass_waiting_room',\n     *         expression: 'ip.src in {10.20.30.40}',\n     *       },\n     *     ],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(waitingRoomId, params, options) {\n        const { zone_id, rules } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/rules`, WaitingRoomRulesSinglePage, { body: rules, method: 'put', ...options });\n    }\n    /**\n     * Deletes a rule for a waiting room.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const waitingRoomRule of client.waitingRooms.rules.delete(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    delete(waitingRoomId, ruleId, params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/rules/${ruleId}`, WaitingRoomRulesSinglePage, { method: 'delete', ...options });\n    }\n    /**\n     * Patches a rule for a waiting room.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const waitingRoomRule of client.waitingRooms.rules.edit(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     action: 'bypass_waiting_room',\n     *     expression: 'ip.src in {10.20.30.40}',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    edit(waitingRoomId, ruleId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/rules/${ruleId}`, WaitingRoomRulesSinglePage, { body, method: 'patch', ...options });\n    }\n    /**\n     * Lists rules for a waiting room.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const waitingRoomRule of client.waitingRooms.rules.get(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(waitingRoomId, params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/rules`, WaitingRoomRulesSinglePage, options);\n    }\n}\nexport class WaitingRoomRulesSinglePage extends SinglePage {\n}\nRules.WaitingRoomRulesSinglePage = WaitingRoomRulesSinglePage;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Update zone-level Waiting Room settings\n     *\n     * @example\n     * ```ts\n     * const setting = await client.waitingRooms.settings.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/waiting_rooms/settings`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patch zone-level Waiting Room settings\n     *\n     * @example\n     * ```ts\n     * const response = await client.waitingRooms.settings.edit({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/waiting_rooms/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get zone-level Waiting Room settings\n     *\n     * @example\n     * ```ts\n     * const setting = await client.waitingRooms.settings.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/waiting_rooms/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Statuses extends APIResource {\n    /**\n     * Fetches the status of a configured waiting room. Response fields include:\n     *\n     * 1. `status`: String indicating the status of the waiting room. The possible\n     *    status are:\n     *    - **not_queueing** indicates that the configured thresholds have not been met\n     *      and all users are going through to the origin.\n     *    - **queueing** indicates that the thresholds have been met and some users are\n     *      held in the waiting room.\n     *    - **event_prequeueing** indicates that an event is active and is currently\n     *      prequeueing users before it starts.\n     *    - **suspended** indicates that the room is suspended.\n     * 2. `event_id`: String of the current event's `id` if an event is active,\n     *    otherwise an empty string.\n     * 3. `estimated_queued_users`: Integer of the estimated number of users currently\n     *    waiting in the queue.\n     * 4. `estimated_total_active_users`: Integer of the estimated number of users\n     *    currently active on the origin.\n     * 5. `max_estimated_time_minutes`: Integer of the maximum estimated time currently\n     *    presented to the users.\n     *\n     * @example\n     * ```ts\n     * const status = await client.waitingRooms.statuses.get(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(waitingRoomId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/status`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=statuses.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Details extends APIResource {\n    /**\n     * Previews an event's configuration as if it was active. Inherited fields from the\n     * waiting room will be displayed with their current values.\n     *\n     * @example\n     * ```ts\n     * const detail = await client.waitingRooms.events.details.get(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(waitingRoomId, eventId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events/${eventId}/details`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=details.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DetailsAPI from \"./details.mjs\";\nimport { Details } from \"./details.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Events extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.details = new DetailsAPI.Details(this._client);\n    }\n    /**\n     * Only available for the Waiting Room Advanced subscription. Creates an event for\n     * a waiting room. An event takes place during a specified period of time,\n     * temporarily changing the behavior of a waiting room. While the event is active,\n     * some of the properties in the event's configuration may either override or\n     * inherit from the waiting room's configuration. Note that events cannot overlap\n     * with each other, so only one event can be active at a time.\n     *\n     * @example\n     * ```ts\n     * const event = await client.waitingRooms.events.create(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     event_end_time: '2021-09-28T17:00:00.000Z',\n     *     event_start_time: '2021-09-28T15:30:00.000Z',\n     *     name: 'production_webinar_event',\n     *   },\n     * );\n     * ```\n     */\n    create(waitingRoomId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured event for a waiting room.\n     *\n     * @example\n     * ```ts\n     * const event = await client.waitingRooms.events.update(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     event_end_time: '2021-09-28T17:00:00.000Z',\n     *     event_start_time: '2021-09-28T15:30:00.000Z',\n     *     name: 'production_webinar_event',\n     *   },\n     * );\n     * ```\n     */\n    update(waitingRoomId, eventId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events/${eventId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists events for a waiting room.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const event of client.waitingRooms.events.list(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(waitingRoomId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events`, EventsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes an event for a waiting room.\n     *\n     * @example\n     * ```ts\n     * const event = await client.waitingRooms.events.delete(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(waitingRoomId, eventId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events/${eventId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patches a configured event for a waiting room.\n     *\n     * @example\n     * ```ts\n     * const event = await client.waitingRooms.events.edit(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     event_end_time: '2021-09-28T17:00:00.000Z',\n     *     event_start_time: '2021-09-28T15:30:00.000Z',\n     *     name: 'production_webinar_event',\n     *   },\n     * );\n     * ```\n     */\n    edit(waitingRoomId, eventId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events/${eventId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single configured event for a waiting room.\n     *\n     * @example\n     * ```ts\n     * const event = await client.waitingRooms.events.get(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   '25756b2dfe6e378a06b033b670413757',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(waitingRoomId, eventId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}/events/${eventId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class EventsV4PagePaginationArray extends V4PagePaginationArray {\n}\nEvents.EventsV4PagePaginationArray = EventsV4PagePaginationArray;\nEvents.Details = Details;\n//# sourceMappingURL=events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport * as PageAPI from \"./page.mjs\";\nimport { Page } from \"./page.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { Rules, WaitingRoomRulesSinglePage, } from \"./rules.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as StatusesAPI from \"./statuses.mjs\";\nimport { Statuses } from \"./statuses.mjs\";\nimport * as EventsAPI from \"./events/events.mjs\";\nimport { Events, EventsV4PagePaginationArray, } from \"./events/events.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class WaitingRooms extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.page = new PageAPI.Page(this._client);\n        this.events = new EventsAPI.Events(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n        this.statuses = new StatusesAPI.Statuses(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n    /**\n     * Creates a new waiting room.\n     *\n     * @example\n     * ```ts\n     * const waitingRoom = await client.waitingRooms.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   host: 'shop.example.com',\n     *   name: 'production_webinar',\n     *   new_users_per_minute: 200,\n     *   total_active_users: 200,\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/waiting_rooms`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured waiting room.\n     *\n     * @example\n     * ```ts\n     * const waitingRoom = await client.waitingRooms.update(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     host: 'shop.example.com',\n     *     name: 'production_webinar',\n     *     new_users_per_minute: 200,\n     *     total_active_users: 200,\n     *   },\n     * );\n     * ```\n     */\n    update(waitingRoomId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/waiting_rooms`, WaitingRoomsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a waiting room.\n     *\n     * @example\n     * ```ts\n     * const waitingRoom = await client.waitingRooms.delete(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(waitingRoomId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patches a configured waiting room.\n     *\n     * @example\n     * ```ts\n     * const waitingRoom = await client.waitingRooms.edit(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     host: 'shop.example.com',\n     *     name: 'production_webinar',\n     *     new_users_per_minute: 200,\n     *     total_active_users: 200,\n     *   },\n     * );\n     * ```\n     */\n    edit(waitingRoomId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single configured waiting room.\n     *\n     * @example\n     * ```ts\n     * const waitingRoom = await client.waitingRooms.get(\n     *   '699d98642c564d2e855e9661899b7252',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(waitingRoomId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/waiting_rooms/${waitingRoomId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WaitingRoomsV4PagePaginationArray extends V4PagePaginationArray {\n}\nWaitingRooms.WaitingRoomsV4PagePaginationArray = WaitingRoomsV4PagePaginationArray;\nWaitingRooms.Page = Page;\nWaitingRooms.Events = Events;\nWaitingRooms.EventsV4PagePaginationArray = EventsV4PagePaginationArray;\nWaitingRooms.Rules = Rules;\nWaitingRooms.WaitingRoomRulesSinglePage = WaitingRoomRulesSinglePage;\nWaitingRooms.Statuses = Statuses;\nWaitingRooms.Settings = Settings;\n//# sourceMappingURL=waiting-rooms.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nexport class Entries extends APIResource {\n    /**\n     * Create IPFS Universal Path Gateway Content List Entry\n     *\n     * @example\n     * ```ts\n     * const entry =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.entries.create(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       content:\n     *         'QmPZ9gcCEpqKTo6aq61g2nXGUhM4iCL3ewB6LDXZCtioEB',\n     *       type: 'cid',\n     *     },\n     *   );\n     * ```\n     */\n    create(identifier, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list/entries`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit IPFS Universal Path Gateway Content List Entry\n     *\n     * @example\n     * ```ts\n     * const entry =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.entries.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       content:\n     *         'QmPZ9gcCEpqKTo6aq61g2nXGUhM4iCL3ewB6LDXZCtioEB',\n     *       type: 'cid',\n     *     },\n     *   );\n     * ```\n     */\n    update(identifier, contentListEntryIdentifier, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list/entries/${contentListEntryIdentifier}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List IPFS Universal Path Gateway Content List Entries\n     *\n     * @example\n     * ```ts\n     * const entries =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.entries.list(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(identifier, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list/entries`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete IPFS Universal Path Gateway Content List Entry\n     *\n     * @example\n     * ```ts\n     * const entry =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.entries.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(identifier, contentListEntryIdentifier, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list/entries/${contentListEntryIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * IPFS Universal Path Gateway Content List Entry Details\n     *\n     * @example\n     * ```ts\n     * const entry =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.entries.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(identifier, contentListEntryIdentifier, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list/entries/${contentListEntryIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=entries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as EntriesAPI from \"./entries.mjs\";\nimport { Entries, } from \"./entries.mjs\";\nexport class ContentLists extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.entries = new EntriesAPI.Entries(this._client);\n    }\n    /**\n     * Update IPFS Universal Path Gateway Content List\n     *\n     * @example\n     * ```ts\n     * const contentList =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       action: 'block',\n     *       entries: [{}],\n     *     },\n     *   );\n     * ```\n     */\n    update(identifier, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * IPFS Universal Path Gateway Content List Details\n     *\n     * @example\n     * ```ts\n     * const contentList =\n     *   await client.web3.hostnames.ipfsUniversalPaths.contentLists.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(identifier, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/web3/hostnames/${identifier}/ipfs_universal_path/content_list`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nContentLists.Entries = Entries;\n//# sourceMappingURL=content-lists.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ContentListsAPI from \"./content-lists/content-lists.mjs\";\nimport { ContentLists, } from \"./content-lists/content-lists.mjs\";\nexport class IPFSUniversalPaths extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.contentLists = new ContentListsAPI.ContentLists(this._client);\n    }\n}\nIPFSUniversalPaths.ContentLists = ContentLists;\n//# sourceMappingURL=ipfs-universal-paths.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as IPFSUniversalPathsAPI from \"./ipfs-universal-paths/ipfs-universal-paths.mjs\";\nimport { IPFSUniversalPaths } from \"./ipfs-universal-paths/ipfs-universal-paths.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Hostnames extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.ipfsUniversalPaths = new IPFSUniversalPathsAPI.IPFSUniversalPaths(this._client);\n    }\n    /**\n     * Create Web3 Hostname\n     *\n     * @example\n     * ```ts\n     * const hostname = await client.web3.hostnames.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'gateway.example.com',\n     *   target: 'ipfs',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/web3/hostnames`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Web3 Hostnames\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const hostname of client.web3.hostnames.list({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/web3/hostnames`, HostnamesSinglePage, options);\n    }\n    /**\n     * Delete Web3 Hostname\n     *\n     * @example\n     * ```ts\n     * const hostname = await client.web3.hostnames.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(identifier, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/web3/hostnames/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit Web3 Hostname\n     *\n     * @example\n     * ```ts\n     * const hostname = await client.web3.hostnames.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(identifier, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/web3/hostnames/${identifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Web3 Hostname Details\n     *\n     * @example\n     * ```ts\n     * const hostname = await client.web3.hostnames.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/web3/hostnames/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class HostnamesSinglePage extends SinglePage {\n}\nHostnames.HostnamesSinglePage = HostnamesSinglePage;\nHostnames.IPFSUniversalPaths = IPFSUniversalPaths;\n//# sourceMappingURL=hostnames.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as HostnamesAPI from \"./hostnames/hostnames.mjs\";\nimport { Hostnames, HostnamesSinglePage, } from \"./hostnames/hostnames.mjs\";\nexport class Web3 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.hostnames = new HostnamesAPI.Hostnames(this._client);\n    }\n}\nWeb3.Hostnames = Hostnames;\nWeb3.HostnamesSinglePage = HostnamesSinglePage;\n//# sourceMappingURL=web3.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class AccountSettings extends APIResource {\n    /**\n     * Creates Worker account settings for an account.\n     *\n     * @example\n     * ```ts\n     * const accountSetting =\n     *   await client.workers.accountSettings.update({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/account-settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches Worker account settings for an account.\n     *\n     * @example\n     * ```ts\n     * const accountSetting =\n     *   await client.workers.accountSettings.get({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/account-settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=account-settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Domains extends APIResource {\n    /**\n     * Attaches a Worker to a zone and hostname.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.workers.domains.update({\n     *   account_id: '9a7806061c88ada191ed06f989cc3dac',\n     *   environment: 'production',\n     *   hostname: 'foo.example.com',\n     *   service: 'foo',\n     *   zone_id: '593c9c94de529bbbfaac7c53ced0447d',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/domains`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all Worker Domains for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const domain of client.workers.domains.list({\n     *   account_id: '9a7806061c88ada191ed06f989cc3dac',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/domains`, DomainsSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Detaches a Worker from a zone and hostname.\n     *\n     * @example\n     * ```ts\n     * await client.workers.domains.delete(\n     *   'dbe10b4bc17c295377eabd600e1787fd',\n     *   { account_id: '9a7806061c88ada191ed06f989cc3dac' },\n     * );\n     * ```\n     */\n    delete(domainId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/domains/${domainId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Gets a Worker domain.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.workers.domains.get(\n     *   'dbe10b4bc17c295377eabd600e1787fd',\n     *   { account_id: '9a7806061c88ada191ed06f989cc3dac' },\n     * );\n     * ```\n     */\n    get(domainId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/domains/${domainId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DomainsSinglePage extends SinglePage {\n}\nDomains.DomainsSinglePage = DomainsSinglePage;\n//# sourceMappingURL=domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Routes extends APIResource {\n    /**\n     * Creates a route that maps a URL pattern to a Worker.\n     *\n     * @example\n     * ```ts\n     * const route = await client.workers.routes.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   pattern: 'example.com/*',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/workers/routes`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates the URL pattern or Worker associated with a route.\n     *\n     * @example\n     * ```ts\n     * const route = await client.workers.routes.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     pattern: 'example.com/*',\n     *   },\n     * );\n     * ```\n     */\n    update(routeId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/workers/routes/${routeId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns routes for a zone.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const routeListResponse of client.workers.routes.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/workers/routes`, RouteListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes a route.\n     *\n     * @example\n     * ```ts\n     * const route = await client.workers.routes.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(routeId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/workers/routes/${routeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns information about a route, including URL pattern and Worker.\n     *\n     * @example\n     * ```ts\n     * const route = await client.workers.routes.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(routeId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/workers/routes/${routeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RouteListResponsesSinglePage extends SinglePage {\n}\nRoutes.RouteListResponsesSinglePage = RouteListResponsesSinglePage;\n//# sourceMappingURL=routes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Subdomains extends APIResource {\n    /**\n     * Creates a Workers subdomain for an account.\n     *\n     * @example\n     * ```ts\n     * const subdomain = await client.workers.subdomains.update({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   subdomain: 'my-subdomain',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/subdomain`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a Workers subdomain for an account.\n     *\n     * @example\n     * ```ts\n     * const subdomain = await client.workers.subdomains.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/subdomain`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=subdomains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class Upload extends APIResource {\n    /**\n     * Upload assets ahead of creating a Worker version. To learn more about the direct\n     * uploads of assets, see\n     * https://developers.cloudflare.com/workers/static-assets/direct-upload/.\n     *\n     * @example\n     * ```ts\n     * const upload = await client.workers.assets.upload.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   base64: true,\n     *   body: { foo: 'string' },\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, base64, body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/assets/upload`, Core.multipartFormRequestOptions({ query: { base64 }, body: body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=upload.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as UploadAPI from \"./upload.mjs\";\nimport { Upload } from \"./upload.mjs\";\nexport class Assets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.upload = new UploadAPI.Upload(this._client);\n    }\n}\nAssets.Upload = Upload;\n//# sourceMappingURL=assets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Versions extends APIResource {\n    /**\n     * Create a new version.\n     *\n     * @example\n     * ```ts\n     * const version =\n     *   await client.workers.beta.workers.versions.create(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(workerId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/workers/${workerId}/versions`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all versions for a Worker.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const version of client.workers.beta.workers.versions.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(workerId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/workers/${workerId}/versions`, VersionsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a version.\n     *\n     * @example\n     * ```ts\n     * const version =\n     *   await client.workers.beta.workers.versions.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(workerId, versionId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/workers/${workerId}/versions/${versionId}`, options);\n    }\n    /**\n     * Get details about a specific version.\n     *\n     * @example\n     * ```ts\n     * const version =\n     *   await client.workers.beta.workers.versions.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(workerId, versionId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/workers/workers/${workerId}/versions/${versionId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VersionsV4PagePaginationArray extends V4PagePaginationArray {\n}\nVersions.VersionsV4PagePaginationArray = VersionsV4PagePaginationArray;\n//# sourceMappingURL=versions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as VersionsAPI from \"./versions.mjs\";\nimport { Versions, VersionsV4PagePaginationArray, } from \"./versions.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Workers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.versions = new VersionsAPI.Versions(this._client);\n    }\n    /**\n     * Create a new Worker.\n     *\n     * @example\n     * ```ts\n     * const worker = await client.workers.beta.workers.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'my-worker',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/workers`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing Worker.\n     *\n     * @example\n     * ```ts\n     * const worker = await client.workers.beta.workers.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'my-worker',\n     *   },\n     * );\n     * ```\n     */\n    update(workerId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/workers/${workerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all Workers for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const worker of client.workers.beta.workers.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/workers`, WorkersV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete a Worker and all its associated resources (versions, deployments, etc.).\n     *\n     * @example\n     * ```ts\n     * const worker = await client.workers.beta.workers.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(workerId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/workers/${workerId}`, options);\n    }\n    /**\n     * Get details about a specific Worker.\n     *\n     * @example\n     * ```ts\n     * const worker = await client.workers.beta.workers.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(workerId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/workers/${workerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WorkersV4PagePaginationArray extends V4PagePaginationArray {\n}\nWorkers.WorkersV4PagePaginationArray = WorkersV4PagePaginationArray;\nWorkers.Versions = Versions;\nWorkers.VersionsV4PagePaginationArray = VersionsV4PagePaginationArray;\n//# sourceMappingURL=workers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as WorkersAPI from \"./workers/workers.mjs\";\nimport { Workers, WorkersV4PagePaginationArray, } from \"./workers/workers.mjs\";\nexport class Beta extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.workers = new WorkersAPI.Workers(this._client);\n    }\n}\nBeta.Workers = Workers;\nBeta.WorkersV4PagePaginationArray = WorkersV4PagePaginationArray;\n//# sourceMappingURL=beta.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Telemetry extends APIResource {\n    /**\n     * List all the keys in your telemetry events.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const telemetryKeysResponse of client.workers.observability.telemetry.keys(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    keys(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/observability/telemetry/keys`, TelemetryKeysResponsesSinglePage, { body, method: 'post', ...options });\n    }\n    /**\n     * Runs a temporary or saved query\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.workers.observability.telemetry.query({\n     *     account_id: 'account_id',\n     *     queryId: 'queryId',\n     *     timeframe: { from: 0, to: 0 },\n     *   });\n     * ```\n     */\n    query(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/observability/telemetry/query`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List unique values found in your events\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const telemetryValuesResponse of client.workers.observability.telemetry.values(\n     *   {\n     *     account_id: 'account_id',\n     *     datasets: ['string'],\n     *     key: 'key',\n     *     timeframe: { from: 0, to: 0 },\n     *     type: 'string',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    values(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/observability/telemetry/values`, TelemetryValuesResponsesSinglePage, { body, method: 'post', ...options });\n    }\n}\nexport class TelemetryKeysResponsesSinglePage extends SinglePage {\n}\nexport class TelemetryValuesResponsesSinglePage extends SinglePage {\n}\nTelemetry.TelemetryKeysResponsesSinglePage = TelemetryKeysResponsesSinglePage;\nTelemetry.TelemetryValuesResponsesSinglePage = TelemetryValuesResponsesSinglePage;\n//# sourceMappingURL=telemetry.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TelemetryAPI from \"./telemetry.mjs\";\nimport { Telemetry, TelemetryKeysResponsesSinglePage, TelemetryValuesResponsesSinglePage, } from \"./telemetry.mjs\";\nexport class Observability extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.telemetry = new TelemetryAPI.Telemetry(this._client);\n    }\n}\nObservability.Telemetry = Telemetry;\nObservability.TelemetryKeysResponsesSinglePage = TelemetryKeysResponsesSinglePage;\nObservability.TelemetryValuesResponsesSinglePage = TelemetryValuesResponsesSinglePage;\n//# sourceMappingURL=observability.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class Content extends APIResource {\n    /**\n     * Put script content without touching config or metadata.\n     *\n     * @example\n     * ```ts\n     * const script = await client.workers.scripts.content.update(\n     *   'this-is_my_script-01',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     metadata: {},\n     *   },\n     * );\n     * ```\n     */\n    update(scriptName, params, options) {\n        const { account_id, 'CF-WORKER-BODY-PART': cfWorkerBodyPart, 'CF-WORKER-MAIN-MODULE-PART': cfWorkerMainModulePart, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/scripts/${scriptName}/content`, Core.multipartFormRequestOptions({\n            body,\n            ...options,\n            headers: {\n                ...(cfWorkerBodyPart != null ? { 'CF-WORKER-BODY-PART': cfWorkerBodyPart } : undefined),\n                ...(cfWorkerMainModulePart != null ?\n                    { 'CF-WORKER-MAIN-MODULE-PART': cfWorkerMainModulePart }\n                    : undefined),\n                ...options?.headers,\n            },\n        }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch script content only.\n     *\n     * @example\n     * ```ts\n     * const content = await client.workers.scripts.content.get(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     *\n     * const data = await content.blob();\n     * console.log(data);\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/content/v2`, {\n            ...options,\n            headers: { Accept: 'string', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=content.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Deployments extends APIResource {\n    /**\n     * Deployments configure how\n     * [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions)\n     * are deployed to traffic. A deployment can consist of one or two versions of a\n     * Worker.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.workers.scripts.deployments.create(\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       strategy: 'percentage',\n     *       versions: [\n     *         {\n     *           percentage: 100,\n     *           version_id:\n     *             '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *         },\n     *       ],\n     *     },\n     *   );\n     * ```\n     */\n    create(scriptName, params, options) {\n        const { account_id, force, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/scripts/${scriptName}/deployments`, {\n            query: { force },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List of Worker Deployments. The first deployment in the list is the latest\n     * deployment actively serving traffic.\n     *\n     * @example\n     * ```ts\n     * const deployments =\n     *   await client.workers.scripts.deployments.list(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/deployments`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a Worker Deployment. The latest deployment, which is actively serving\n     * traffic, cannot be deleted. All other deployments can be deleted.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.workers.scripts.deployments.delete(\n     *     'this-is_my_script-01',\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(scriptName, deploymentId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}/deployments/${deploymentId}`, options);\n    }\n    /**\n     * Get information about a Worker Deployment.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.workers.scripts.deployments.get(\n     *     'this-is_my_script-01',\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(scriptName, deploymentId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/deployments/${deploymentId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=deployments.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Schedules extends APIResource {\n    /**\n     * Updates Cron Triggers for a Worker.\n     *\n     * @example\n     * ```ts\n     * const schedule =\n     *   await client.workers.scripts.schedules.update(\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       body: [{ cron: '* /30 * * * *' }],\n     *     },\n     *   );\n     * ```\n     */\n    update(scriptName, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/scripts/${scriptName}/schedules`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches Cron Triggers for a Worker.\n     *\n     * @example\n     * ```ts\n     * const schedule = await client.workers.scripts.schedules.get(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/schedules`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=schedules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class ScriptAndVersionSettings extends APIResource {\n    /**\n     * Patch metadata or config, such as bindings or usage model.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.workers.scripts.scriptAndVersionSettings.edit(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/workers/scripts/${scriptName}/settings`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get metadata and config, such as bindings or usage model.\n     *\n     * @example\n     * ```ts\n     * const scriptAndVersionSetting =\n     *   await client.workers.scripts.scriptAndVersionSettings.get(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=script-and-version-settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Secrets extends APIResource {\n    /**\n     * Add a secret to a script.\n     *\n     * @example\n     * ```ts\n     * const secret = await client.workers.scripts.secrets.update(\n     *   'this-is_my_script-01',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'myBinding',\n     *     text: 'My secret.',\n     *     type: 'secret_text',\n     *   },\n     * );\n     * ```\n     */\n    update(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/scripts/${scriptName}/secrets`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List secrets bound to a script.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const secretListResponse of client.workers.scripts.secrets.list(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/scripts/${scriptName}/secrets`, SecretListResponsesSinglePage, options);\n    }\n    /**\n     * Remove a secret from a script.\n     *\n     * @example\n     * ```ts\n     * const secret = await client.workers.scripts.secrets.delete(\n     *   'this-is_my_script-01',\n     *   'mySecret',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(scriptName, secretName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}/secrets/${secretName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a given secret binding (value omitted) on a script.\n     *\n     * @example\n     * ```ts\n     * const secret = await client.workers.scripts.secrets.get(\n     *   'this-is_my_script-01',\n     *   'mySecret',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(scriptName, secretName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/secrets/${secretName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SecretListResponsesSinglePage extends SinglePage {\n}\nSecrets.SecretListResponsesSinglePage = SecretListResponsesSinglePage;\n//# sourceMappingURL=secrets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Patch script-level settings when using\n     * [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions).\n     * Including but not limited to Logpush and Tail Consumers.\n     *\n     * @example\n     * ```ts\n     * const scriptSetting =\n     *   await client.workers.scripts.settings.edit(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/workers/scripts/${scriptName}/script-settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get script-level settings when using\n     * [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions).\n     * Includes Logpush and Tail Consumers.\n     *\n     * @example\n     * ```ts\n     * const scriptSetting =\n     *   await client.workers.scripts.settings.get(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/script-settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Subdomain extends APIResource {\n    /**\n     * Enable or disable the Worker on the workers.dev subdomain.\n     *\n     * @example\n     * ```ts\n     * const subdomain =\n     *   await client.workers.scripts.subdomain.create(\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       enabled: true,\n     *     },\n     *   );\n     * ```\n     */\n    create(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/scripts/${scriptName}/subdomain`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disable all workers.dev subdomains for a Worker.\n     *\n     * @example\n     * ```ts\n     * const subdomain =\n     *   await client.workers.scripts.subdomain.delete(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}/subdomain`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get if the Worker is available on the workers.dev subdomain.\n     *\n     * @example\n     * ```ts\n     * const subdomain =\n     *   await client.workers.scripts.subdomain.get(\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/subdomain`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=subdomain.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Tail extends APIResource {\n    /**\n     * Starts a tail that receives logs and exception from a Worker.\n     *\n     * @example\n     * ```ts\n     * const tail = await client.workers.scripts.tail.create(\n     *   'this-is_my_script-01',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {},\n     *   },\n     * );\n     * ```\n     */\n    create(scriptName, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/scripts/${scriptName}/tails`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a tail from a Worker.\n     *\n     * @example\n     * ```ts\n     * const tail = await client.workers.scripts.tail.delete(\n     *   'this-is_my_script-01',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(scriptName, id, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}/tails/${id}`, options);\n    }\n    /**\n     * Get list of tails currently deployed on a Worker.\n     *\n     * @example\n     * ```ts\n     * const tail = await client.workers.scripts.tail.get(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/tails`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=tail.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nimport { V4PagePagination } from \"../../../pagination.mjs\";\nexport class Versions extends APIResource {\n    /**\n     * Upload a Worker Version without deploying to Cloudflare's network. You can find\n     * more about the multipart metadata on our docs:\n     * https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.\n     *\n     * @example\n     * ```ts\n     * const version =\n     *   await client.workers.scripts.versions.create(\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       metadata: { main_module: 'worker.js' },\n     *     },\n     *   );\n     * ```\n     */\n    create(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/scripts/${scriptName}/versions`, Core.multipartFormRequestOptions({ body, ...options, __multipartSyntax: 'json' }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List of Worker Versions. The first version in the list is the latest version.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const versionListResponse of client.workers.scripts.versions.list(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(scriptName, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/scripts/${scriptName}/versions`, VersionListResponsesV4PagePagination, { query, ...options });\n    }\n    /**\n     * Get Version Detail\n     *\n     * @example\n     * ```ts\n     * const version = await client.workers.scripts.versions.get(\n     *   'this-is_my_script-01',\n     *   'bcf48806-b317-4351-9ee7-36e7d557d4de',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(scriptName, versionId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}/versions/${versionId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VersionListResponsesV4PagePagination extends V4PagePagination {\n}\nVersions.VersionListResponsesV4PagePagination = VersionListResponsesV4PagePagination;\n//# sourceMappingURL=versions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Upload extends APIResource {\n    /**\n     * Start uploading a collection of assets for use in a Worker version. To learn\n     * more about the direct uploads of assets, see\n     * https://developers.cloudflare.com/workers/static-assets/direct-upload/.\n     *\n     * @example\n     * ```ts\n     * const upload =\n     *   await client.workers.scripts.assets.upload.create(\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       manifest: { foo: { hash: 'hash', size: 0 } },\n     *     },\n     *   );\n     * ```\n     */\n    create(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/scripts/${scriptName}/assets-upload-session`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=upload.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as UploadAPI from \"./upload.mjs\";\nimport { Upload } from \"./upload.mjs\";\nexport class Assets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.upload = new UploadAPI.Upload(this._client);\n    }\n}\nAssets.Upload = Upload;\n//# sourceMappingURL=assets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nimport * as ContentAPI from \"./content.mjs\";\nimport { Content } from \"./content.mjs\";\nimport * as DeploymentsAPI from \"./deployments.mjs\";\nimport { Deployments, } from \"./deployments.mjs\";\nimport * as SchedulesAPI from \"./schedules.mjs\";\nimport { Schedules, } from \"./schedules.mjs\";\nimport * as ScriptAndVersionSettingsAPI from \"./script-and-version-settings.mjs\";\nimport { ScriptAndVersionSettings, } from \"./script-and-version-settings.mjs\";\nimport * as SecretsAPI from \"./secrets.mjs\";\nimport { SecretListResponsesSinglePage, Secrets, } from \"./secrets.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings } from \"./settings.mjs\";\nimport * as SubdomainAPI from \"./subdomain.mjs\";\nimport { Subdomain, } from \"./subdomain.mjs\";\nimport * as TailAPI from \"./tail.mjs\";\nimport { Tail, } from \"./tail.mjs\";\nimport * as VersionsAPI from \"./versions.mjs\";\nimport { VersionListResponsesV4PagePagination, Versions, } from \"./versions.mjs\";\nimport * as AssetsAPI from \"./assets/assets.mjs\";\nimport { Assets as AssetsAPIAssets } from \"./assets/assets.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Scripts extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.assets = new AssetsAPI.Assets(this._client);\n        this.subdomain = new SubdomainAPI.Subdomain(this._client);\n        this.schedules = new SchedulesAPI.Schedules(this._client);\n        this.tail = new TailAPI.Tail(this._client);\n        this.content = new ContentAPI.Content(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.deployments = new DeploymentsAPI.Deployments(this._client);\n        this.versions = new VersionsAPI.Versions(this._client);\n        this.secrets = new SecretsAPI.Secrets(this._client);\n        this.scriptAndVersionSettings = new ScriptAndVersionSettingsAPI.ScriptAndVersionSettings(this._client);\n    }\n    /**\n     * Upload a worker module. You can find more about the multipart metadata on our\n     * docs:\n     * https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.\n     *\n     * @example\n     * ```ts\n     * const script = await client.workers.scripts.update(\n     *   'this-is_my_script-01',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     metadata: {},\n     *   },\n     * );\n     * ```\n     */\n    update(scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/scripts/${scriptName}`, Core.maybeMultipartFormRequestOptions({\n            body,\n            ...options,\n            __multipartSyntax: 'json',\n            headers: { 'Content-Type': 'application/javascript', ...options?.headers },\n        }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a list of uploaded workers.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const script of client.workers.scripts.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/scripts`, ScriptsSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete your worker. This call has no response body on a successful delete.\n     *\n     * @example\n     * ```ts\n     * const script = await client.workers.scripts.delete(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(scriptName, params, options) {\n        const { account_id, force } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}`, {\n            query: { force },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch raw script content for your worker. Note this is the original script\n     * content, not JSON encoded.\n     *\n     * @example\n     * ```ts\n     * const script = await client.workers.scripts.get(\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}`, {\n            ...options,\n            headers: { Accept: 'application/javascript', ...options?.headers },\n        });\n    }\n}\nexport class ScriptsSinglePage extends SinglePage {\n}\nScripts.ScriptsSinglePage = ScriptsSinglePage;\nScripts.Assets = AssetsAPIAssets;\nScripts.Subdomain = Subdomain;\nScripts.Schedules = Schedules;\nScripts.Tail = Tail;\nScripts.Content = Content;\nScripts.Settings = Settings;\nScripts.Deployments = Deployments;\nScripts.Versions = Versions;\nScripts.VersionListResponsesV4PagePagination = VersionListResponsesV4PagePagination;\nScripts.Secrets = Secrets;\nScripts.SecretListResponsesSinglePage = SecretListResponsesSinglePage;\nScripts.ScriptAndVersionSettings = ScriptAndVersionSettings;\n//# sourceMappingURL=scripts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AccountSettingsAPI from \"./account-settings.mjs\";\nimport { AccountSettings, } from \"./account-settings.mjs\";\nimport * as DomainsAPI from \"./domains.mjs\";\nimport { Domains, DomainsSinglePage, } from \"./domains.mjs\";\nimport * as RoutesAPI from \"./routes.mjs\";\nimport { RouteListResponsesSinglePage, Routes, } from \"./routes.mjs\";\nimport * as SubdomainsAPI from \"./subdomains.mjs\";\nimport { Subdomains, } from \"./subdomains.mjs\";\nimport * as AssetsAPI from \"./assets/assets.mjs\";\nimport { Assets } from \"./assets/assets.mjs\";\nimport * as BetaAPI from \"./beta/beta.mjs\";\nimport { Beta } from \"./beta/beta.mjs\";\nimport * as ObservabilityAPI from \"./observability/observability.mjs\";\nimport { Observability } from \"./observability/observability.mjs\";\nimport * as ScriptsAPI from \"./scripts/scripts.mjs\";\nimport { Scripts, ScriptsSinglePage, } from \"./scripts/scripts.mjs\";\nexport class Workers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.beta = new BetaAPI.Beta(this._client);\n        this.routes = new RoutesAPI.Routes(this._client);\n        this.assets = new AssetsAPI.Assets(this._client);\n        this.scripts = new ScriptsAPI.Scripts(this._client);\n        this.accountSettings = new AccountSettingsAPI.AccountSettings(this._client);\n        this.domains = new DomainsAPI.Domains(this._client);\n        this.subdomains = new SubdomainsAPI.Subdomains(this._client);\n        this.observability = new ObservabilityAPI.Observability(this._client);\n    }\n}\nWorkers.Beta = Beta;\nWorkers.Routes = Routes;\nWorkers.RouteListResponsesSinglePage = RouteListResponsesSinglePage;\nWorkers.Assets = Assets;\nWorkers.Scripts = Scripts;\nWorkers.ScriptsSinglePage = ScriptsSinglePage;\nWorkers.AccountSettings = AccountSettings;\nWorkers.Domains = Domains;\nWorkers.DomainsSinglePage = DomainsSinglePage;\nWorkers.Subdomains = Subdomains;\nWorkers.Observability = Observability;\n//# sourceMappingURL=workers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { CursorPaginationAfter } from \"../../../pagination.mjs\";\nexport class Keys extends APIResource {\n    /**\n     * Lists a namespace's keys.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const key of client.kv.namespaces.keys.list(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(namespaceId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/keys`, KeysCursorPaginationAfter, { query, ...options });\n    }\n    /**\n     * Remove multiple KV pairs from the namespace. Body should be an array of up to\n     * 10,000 keys to be removed.\n     *\n     * @deprecated Please use kv.namespaces.bulk_delete instead\n     */\n    bulkDelete(namespaceId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/bulk/delete`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve up to 100 KV pairs from the namespace. Keys must contain text-based\n     * values. JSON values can optionally be parsed instead of being returned as a\n     * string value. Metadata can be included if `withMetadata` is true.\n     *\n     * @deprecated Please use kv.namespaces.bulk_get instead\n     */\n    bulkGet(namespaceId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/bulk/get`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Write multiple keys and values at once. Body should be an array of up to 10,000\n     * key-value pairs to be stored, along with optional expiration information.\n     * Existing values and expirations will be overwritten. If neither `expiration` nor\n     * `expiration_ttl` is specified, the key-value pair will never expire. If both are\n     * set, `expiration_ttl` is used and `expiration` is ignored. The entire request\n     * size must be 100 megabytes or less.\n     *\n     * @deprecated Please use kv.namespaces.bulk_update instead\n     */\n    bulkUpdate(namespaceId, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/bulk`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class KeysCursorPaginationAfter extends CursorPaginationAfter {\n}\nKeys.KeysCursorPaginationAfter = KeysCursorPaginationAfter;\n//# sourceMappingURL=keys.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Metadata extends APIResource {\n    /**\n     * Returns the metadata associated with the given key in the given namespace. Use\n     * URL-encoding to use special characters (for example, `:`, `!`, `%`) in the key\n     * name.\n     *\n     * @example\n     * ```ts\n     * const metadata = await client.kv.namespaces.metadata.get(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   'My-Key',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(namespaceId, keyName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/metadata/${keyName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=metadata.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class Values extends APIResource {\n    /**\n     * Write a value identified by a key. Use URL-encoding to use special characters\n     * (for example, `:`, `!`, `%`) in the key name. Body should be the value to be\n     * stored. If JSON metadata to be associated with the key/value pair is needed, use\n     * `multipart/form-data` content type for your PUT request (see dropdown below in\n     * `REQUEST BODY SCHEMA`). Existing values, expirations, and metadata will be\n     * overwritten. If neither `expiration` nor `expiration_ttl` is specified, the\n     * key-value pair will never expire. If both are set, `expiration_ttl` is used and\n     * `expiration` is ignored.\n     *\n     * @example\n     * ```ts\n     * const value = await client.kv.namespaces.values.update(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   'My-Key',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     value: 'Some Value',\n     *   },\n     * );\n     * ```\n     */\n    update(namespaceId, keyName, params, options) {\n        const { account_id, expiration, expiration_ttl, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/values/${keyName}`, Core.multipartFormRequestOptions({\n            query: { expiration, expiration_ttl },\n            body,\n            __multipartSyntax: 'json',\n            ...options,\n        }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Remove a KV pair from the namespace. Use URL-encoding to use special characters\n     * (for example, `:`, `!`, `%`) in the key name.\n     *\n     * @example\n     * ```ts\n     * const value = await client.kv.namespaces.values.delete(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   'My-Key',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(namespaceId, keyName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/values/${keyName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the value associated with the given key in the given namespace. Use\n     * URL-encoding to use special characters (for example, `:`, `!`, `%`) in the key\n     * name. If the KV-pair is set to expire at some point, the expiration time as\n     * measured in seconds since the UNIX epoch will be returned in the `expiration`\n     * response header.\n     *\n     * @example\n     * ```ts\n     * const value = await client.kv.namespaces.values.get(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   'My-Key',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     *\n     * const content = await value.blob();\n     * console.log(content);\n     * ```\n     */\n    get(namespaceId, keyName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/values/${keyName}`, {\n            ...options,\n            headers: { Accept: 'application/octet-stream', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=values.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as KeysAPI from \"./keys.mjs\";\nimport { Keys, KeysCursorPaginationAfter, } from \"./keys.mjs\";\nimport * as MetadataAPI from \"./metadata.mjs\";\nimport { Metadata } from \"./metadata.mjs\";\nimport * as ValuesAPI from \"./values.mjs\";\nimport { Values as ValuesAPIValues, } from \"./values.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Namespaces extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.keys = new KeysAPI.Keys(this._client);\n        this.metadata = new MetadataAPI.Metadata(this._client);\n        this.values = new ValuesAPI.Values(this._client);\n    }\n    /**\n     * Creates a namespace under the given title. A `400` is returned if the account\n     * already owns a namespace with this title. A namespace must be explicitly deleted\n     * to be replaced.\n     *\n     * @example\n     * ```ts\n     * const namespace = await client.kv.namespaces.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   title: 'My Own Namespace',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/storage/kv/namespaces`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modifies a namespace's title.\n     *\n     * @example\n     * ```ts\n     * const namespace = await client.kv.namespaces.update(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     title: 'My Own Namespace',\n     *   },\n     * );\n     * ```\n     */\n    update(namespaceId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the namespaces owned by an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const namespace of client.kv.namespaces.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/storage/kv/namespaces`, NamespacesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes the namespace corresponding to the given ID.\n     *\n     * @example\n     * ```ts\n     * const namespace = await client.kv.namespaces.delete(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(namespaceId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Remove multiple KV pairs from the namespace. Body should be an array of up to\n     * 10,000 keys to be removed.\n     *\n     * @example\n     * ```ts\n     * const response = await client.kv.namespaces.bulkDelete(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: ['My-Key'],\n     *   },\n     * );\n     * ```\n     */\n    bulkDelete(namespaceId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/bulk/delete`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve up to 100 KV pairs from the namespace. Keys must contain text-based\n     * values. JSON values can optionally be parsed instead of being returned as a\n     * string value. Metadata can be included if `withMetadata` is true.\n     *\n     * @example\n     * ```ts\n     * const response = await client.kv.namespaces.bulkGet(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     keys: ['My-Key'],\n     *   },\n     * );\n     * ```\n     */\n    bulkGet(namespaceId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/bulk/get`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Write multiple keys and values at once. Body should be an array of up to 10,000\n     * key-value pairs to be stored, along with optional expiration information.\n     * Existing values and expirations will be overwritten. If neither `expiration` nor\n     * `expiration_ttl` is specified, the key-value pair will never expire. If both are\n     * set, `expiration_ttl` is used and `expiration` is ignored. The entire request\n     * size must be 100 megabytes or less.\n     *\n     * @example\n     * ```ts\n     * const response = await client.kv.namespaces.bulkUpdate(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ key: 'My-Key', value: 'Some string' }],\n     *   },\n     * );\n     * ```\n     */\n    bulkUpdate(namespaceId, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}/bulk`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get the namespace corresponding to the given ID.\n     *\n     * @example\n     * ```ts\n     * const namespace = await client.kv.namespaces.get(\n     *   '0f2ac74b498b48028cb68387c421e279',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(namespaceId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/storage/kv/namespaces/${namespaceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class NamespacesV4PagePaginationArray extends V4PagePaginationArray {\n}\nNamespaces.NamespacesV4PagePaginationArray = NamespacesV4PagePaginationArray;\nNamespaces.Keys = Keys;\nNamespaces.KeysCursorPaginationAfter = KeysCursorPaginationAfter;\nNamespaces.Metadata = Metadata;\nNamespaces.Values = ValuesAPIValues;\n//# sourceMappingURL=namespaces.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as NamespacesAPI from \"./namespaces/namespaces.mjs\";\nimport { Namespaces, NamespacesV4PagePaginationArray, } from \"./namespaces/namespaces.mjs\";\nexport class KV extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.namespaces = new NamespacesAPI.Namespaces(this._client);\n    }\n}\nKV.Namespaces = Namespaces;\nKV.NamespacesV4PagePaginationArray = NamespacesV4PagePaginationArray;\n//# sourceMappingURL=kv.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { CursorPaginationAfter } from \"../../../pagination.mjs\";\nexport class Objects extends APIResource {\n    /**\n     * Returns the Durable Objects in a given namespace.\n     */\n    list(id, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/durable_objects/namespaces/${id}/objects`, DurableObjectsCursorPaginationAfter, { query, ...options });\n    }\n}\nexport class DurableObjectsCursorPaginationAfter extends CursorPaginationAfter {\n}\nObjects.DurableObjectsCursorPaginationAfter = DurableObjectsCursorPaginationAfter;\n//# sourceMappingURL=objects.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ObjectsAPI from \"./objects.mjs\";\nimport { DurableObjectsCursorPaginationAfter, Objects } from \"./objects.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Namespaces extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.objects = new ObjectsAPI.Objects(this._client);\n    }\n    /**\n     * Returns the Durable Object namespaces owned by an account.\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/durable_objects/namespaces`, NamespacesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class NamespacesV4PagePaginationArray extends V4PagePaginationArray {\n}\nNamespaces.NamespacesV4PagePaginationArray = NamespacesV4PagePaginationArray;\nNamespaces.Objects = Objects;\nNamespaces.DurableObjectsCursorPaginationAfter = DurableObjectsCursorPaginationAfter;\n//# sourceMappingURL=namespaces.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as NamespacesAPI from \"./namespaces/namespaces.mjs\";\nimport { Namespaces, NamespacesV4PagePaginationArray, } from \"./namespaces/namespaces.mjs\";\nexport class DurableObjects extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.namespaces = new NamespacesAPI.Namespaces(this._client);\n    }\n}\nDurableObjects.Namespaces = Namespaces;\nDurableObjects.NamespacesV4PagePaginationArray = NamespacesV4PagePaginationArray;\n//# sourceMappingURL=durable-objects.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Consumers extends APIResource {\n    /**\n     * Creates a new consumer for a Queue\n     *\n     * @example\n     * ```ts\n     * const consumer = await client.queues.consumers.create(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    create(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues/${queueId}/consumers`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates the consumer for a queue, or creates one if it does not exist.\n     *\n     * @example\n     * ```ts\n     * const consumer = await client.queues.consumers.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(queueId, consumerId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/queues/${queueId}/consumers/${consumerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the consumers for a Queue\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const consumer of client.queues.consumers.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(queueId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/queues/${queueId}/consumers`, ConsumersSinglePage, options);\n    }\n    /**\n     * Deletes the consumer for a queue.\n     *\n     * @example\n     * ```ts\n     * const consumer = await client.queues.consumers.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(queueId, consumerId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/queues/${queueId}/consumers/${consumerId}`, options);\n    }\n    /**\n     * Fetches the consumer for a queue by consumer id\n     *\n     * @example\n     * ```ts\n     * const consumer = await client.queues.consumers.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(queueId, consumerId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/queues/${queueId}/consumers/${consumerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ConsumersSinglePage extends SinglePage {\n}\nConsumers.ConsumersSinglePage = ConsumersSinglePage;\n//# sourceMappingURL=consumers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Messages extends APIResource {\n    /**\n     * Acknowledge + Retry messages from a Queue\n     *\n     * @example\n     * ```ts\n     * const response = await client.queues.messages.ack(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    ack(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues/${queueId}/messages/ack`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Push a batch of message to a Queue\n     *\n     * @example\n     * ```ts\n     * const response = await client.queues.messages.bulkPush(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    bulkPush(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues/${queueId}/messages/batch`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Pull a batch of messages from a Queue\n     *\n     * @example\n     * ```ts\n     * const response = await client.queues.messages.pull(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    pull(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues/${queueId}/messages/pull`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Push a message to a Queue\n     *\n     * @example\n     * ```ts\n     * const response = await client.queues.messages.push(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    push(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues/${queueId}/messages`, { body, ...options });\n    }\n}\n//# sourceMappingURL=messages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Purge extends APIResource {\n    /**\n     * Deletes all messages from the Queue.\n     *\n     * @example\n     * ```ts\n     * const queue = await client.queues.purge.start(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    start(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues/${queueId}/purge`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get details about a Queue's purge status.\n     *\n     * @example\n     * ```ts\n     * const response = await client.queues.purge.status(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    status(queueId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/queues/${queueId}/purge`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=purge.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Subscriptions extends APIResource {\n    /**\n     * Create a new event subscription for a queue\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.queues.subscriptions.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/event_subscriptions/subscriptions`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing event subscription\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.queues.subscriptions.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(subscriptionId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/event_subscriptions/subscriptions/${subscriptionId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a paginated list of event subscriptions with optional sorting and filtering\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const subscriptionListResponse of client.queues.subscriptions.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/event_subscriptions/subscriptions`, SubscriptionListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete an existing event subscription\n     *\n     * @example\n     * ```ts\n     * const subscription =\n     *   await client.queues.subscriptions.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(subscriptionId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/event_subscriptions/subscriptions/${subscriptionId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SubscriptionListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nSubscriptions.SubscriptionListResponsesV4PagePaginationArray = SubscriptionListResponsesV4PagePaginationArray;\n//# sourceMappingURL=subscriptions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConsumersAPI from \"./consumers.mjs\";\nimport { Consumers, ConsumersSinglePage, } from \"./consumers.mjs\";\nimport * as MessagesAPI from \"./messages.mjs\";\nimport { Messages, } from \"./messages.mjs\";\nimport * as PurgeAPI from \"./purge.mjs\";\nimport { Purge } from \"./purge.mjs\";\nimport * as SubscriptionsAPI from \"./subscriptions.mjs\";\nimport { SubscriptionListResponsesV4PagePaginationArray, Subscriptions, } from \"./subscriptions.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Queues extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.messages = new MessagesAPI.Messages(this._client);\n        this.purge = new PurgeAPI.Purge(this._client);\n        this.consumers = new ConsumersAPI.Consumers(this._client);\n        this.subscriptions = new SubscriptionsAPI.Subscriptions(this._client);\n    }\n    /**\n     * Create a new queue\n     *\n     * @example\n     * ```ts\n     * const queue = await client.queues.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   queue_name: 'example-queue',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/queues`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a Queue. Note that this endpoint does not support partial updates. If\n     * successful, the Queue's configuration is overwritten with the supplied\n     * configuration.\n     *\n     * @example\n     * ```ts\n     * const queue = await client.queues.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/queues/${queueId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the queues owned by an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const queue of client.queues.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/queues`, QueuesSinglePage, options);\n    }\n    /**\n     * Deletes a queue\n     *\n     * @example\n     * ```ts\n     * const queue = await client.queues.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(queueId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/queues/${queueId}`, options);\n    }\n    /**\n     * Updates a Queue.\n     *\n     * @example\n     * ```ts\n     * const queue = await client.queues.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(queueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/queues/${queueId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get details about a specific queue.\n     *\n     * @example\n     * ```ts\n     * const queue = await client.queues.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(queueId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/queues/${queueId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class QueuesSinglePage extends SinglePage {\n}\nQueues.QueuesSinglePage = QueuesSinglePage;\nQueues.Messages = Messages;\nQueues.Purge = Purge;\nQueues.Consumers = Consumers;\nQueues.ConsumersSinglePage = ConsumersSinglePage;\nQueues.Subscriptions = Subscriptions;\nQueues.SubscriptionListResponsesV4PagePaginationArray = SubscriptionListResponsesV4PagePaginationArray;\n//# sourceMappingURL=queues.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Configurations extends APIResource {\n    /**\n     * Set configuration properties\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.apiGateway.configurations.update({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     auth_id_characteristics: [\n     *       { name: 'authorization', type: 'header' },\n     *     ],\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/api_gateway/configuration`, { body, ...options });\n    }\n    /**\n     * Retrieve information about specific configuration properties\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.apiGateway.configurations.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/configuration`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=configurations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Schemas extends APIResource {\n    /**\n     * Retrieve operations and features as OpenAPI schemas\n     *\n     * @example\n     * ```ts\n     * const schemas = await client.apiGateway.schemas.list({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/schemas`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=schemas.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { DiscoveryOperationsV4PagePaginationArray } from \"./discovery.mjs\";\nexport class Operations extends APIResource {\n    /**\n     * Retrieve the most up to date view of discovered operations\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const discoveryOperation of client.apiGateway.discovery.operations.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/discovery/operations`, DiscoveryOperationsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Update the `state` on one or more discovered operations\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.apiGateway.discovery.operations.bulkEdit({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {\n     *       '3818d821-5901-4147-a474-f5f5aec1d54e': {},\n     *       'b17c8043-99a0-4202-b7d9-8f7cdbee02cd': {},\n     *     },\n     *   });\n     * ```\n     */\n    bulkEdit(params, options) {\n        const { zone_id, body } = params;\n        return this._client.patch(`/zones/${zone_id}/api_gateway/discovery/operations`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update the `state` on a discovered operation\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.apiGateway.discovery.operations.edit(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(operationId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/api_gateway/discovery/operations/${operationId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport { DiscoveryOperationsV4PagePaginationArray };\n//# sourceMappingURL=operations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as OperationsAPI from \"./operations.mjs\";\nimport { Operations, } from \"./operations.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Discovery extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.operations = new OperationsAPI.Operations(this._client);\n    }\n    /**\n     * Retrieve the most up to date view of discovered operations, rendered as OpenAPI\n     * schemas\n     *\n     * @example\n     * ```ts\n     * const discovery = await client.apiGateway.discovery.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/discovery`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DiscoveryOperationsV4PagePaginationArray extends V4PagePaginationArray {\n}\nDiscovery.Operations = Operations;\n//# sourceMappingURL=discovery.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Fallthrough extends APIResource {\n    /**\n     * Generate fallthrough WAF expression template from a set of API hosts\n     *\n     * @example\n     * ```ts\n     * const fallthrough =\n     *   await client.apiGateway.expressionTemplate.fallthrough.create(\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       hosts: ['{zone}.domain1.tld', 'domain2.tld'],\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/api_gateway/expression-template/fallthrough`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=fallthrough.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as FallthroughAPI from \"./fallthrough.mjs\";\nimport { Fallthrough } from \"./fallthrough.mjs\";\nexport class ExpressionTemplate extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.fallthrough = new FallthroughAPI.Fallthrough(this._client);\n    }\n}\nExpressionTemplate.Fallthrough = Fallthrough;\n//# sourceMappingURL=expression-template.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class SchemaValidation extends APIResource {\n    /**\n     * Updates operation-level schema validation settings on the zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    update(operationId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/api_gateway/operations/${operationId}/schema_validation`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Updates multiple operation-level schema validation settings on the zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    edit(params, options) {\n        const { zone_id, settings_multiple_request } = params;\n        return this._client.patch(`/zones/${zone_id}/api_gateway/operations/schema_validation`, {\n            body: settings_multiple_request,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves operation-level schema validation settings on the zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    get(operationId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/operations/${operationId}/schema_validation`, options);\n    }\n}\n//# sourceMappingURL=schema-validation.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SchemaValidationAPI from \"./schema-validation.mjs\";\nimport { SchemaValidation, } from \"./schema-validation.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Operations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.schemaValidation = new SchemaValidationAPI.SchemaValidation(this._client);\n    }\n    /**\n     * Add one operation to a zone. Endpoints can contain path variables. Host, method,\n     * endpoint will be normalized to a canoncial form when creating an operation and\n     * must be unique on the zone. Inserting an operation that matches an existing one\n     * will return the record of the already existing operation and update its\n     * last_updated date.\n     *\n     * @example\n     * ```ts\n     * const operation = await client.apiGateway.operations.create(\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     endpoint: '/api/v1/users/{var1}',\n     *     host: 'www.example.com',\n     *     method: 'GET',\n     *   },\n     * );\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/api_gateway/operations/item`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve information about all operations on a zone\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const operationListResponse of client.apiGateway.operations.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/operations`, OperationListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete an operation\n     *\n     * @example\n     * ```ts\n     * const operation = await client.apiGateway.operations.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(operationId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/api_gateway/operations/${operationId}`, options);\n    }\n    /**\n     * Add one or more operations to a zone. Endpoints can contain path variables.\n     * Host, method, endpoint will be normalized to a canoncial form when creating an\n     * operation and must be unique on the zone. Inserting an operation that matches an\n     * existing one will return the record of the already existing operation and update\n     * its last_updated date.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const operationBulkCreateResponse of client.apiGateway.operations.bulkCreate(\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [\n     *       {\n     *         endpoint: '/api/v1/users/{var1}',\n     *         host: 'www.example.com',\n     *         method: 'GET',\n     *       },\n     *     ],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulkCreate(params, options) {\n        const { zone_id, body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/operations`, OperationBulkCreateResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n    /**\n     * Delete multiple operations\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.apiGateway.operations.bulkDelete({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    bulkDelete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/api_gateway/operations`, options);\n    }\n    /**\n     * Retrieve information about an operation\n     *\n     * @example\n     * ```ts\n     * const operation = await client.apiGateway.operations.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(operationId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/operations/${operationId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OperationListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class OperationBulkCreateResponsesSinglePage extends SinglePage {\n}\nOperations.OperationListResponsesV4PagePaginationArray = OperationListResponsesV4PagePaginationArray;\nOperations.OperationBulkCreateResponsesSinglePage = OperationBulkCreateResponsesSinglePage;\nOperations.SchemaValidation = SchemaValidation;\n//# sourceMappingURL=operations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class SchemaValidation extends APIResource {\n    /**\n     * Updates zone level schema validation settings on the zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/api_gateway/settings/schema_validation`, { body, ...options });\n    }\n    /**\n     * Updates zone level schema validation settings on the zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/api_gateway/settings/schema_validation`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Retrieves zone level schema validation settings currently set on the zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/settings/schema_validation`, options);\n    }\n}\n//# sourceMappingURL=schema-validation.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SchemaValidationAPI from \"./schema-validation.mjs\";\nimport { SchemaValidation, } from \"./schema-validation.mjs\";\nexport class Settings extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.schemaValidation = new SchemaValidationAPI.SchemaValidation(this._client);\n    }\n}\nSettings.SchemaValidation = SchemaValidation;\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Hosts extends APIResource {\n    /**\n     * Retrieve schema hosts in a zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/user_schemas/hosts`, HostListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class HostListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nHosts.HostListResponsesV4PagePaginationArray = HostListResponsesV4PagePaginationArray;\n//# sourceMappingURL=hosts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Operations extends APIResource {\n    /**\n     * Retrieves all operations from the schema. Operations that already exist in API\n     * Shield Endpoint Management will be returned as full operations.\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    list(schemaId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}/operations`, OperationListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class OperationListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nOperations.OperationListResponsesV4PagePaginationArray = OperationListResponsesV4PagePaginationArray;\n//# sourceMappingURL=operations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nimport * as HostsAPI from \"./hosts.mjs\";\nimport { HostListResponsesV4PagePaginationArray, Hosts } from \"./hosts.mjs\";\nimport * as OperationsAPI from \"./operations.mjs\";\nimport { OperationListResponsesV4PagePaginationArray, Operations, } from \"./operations.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class UserSchemas extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.operations = new OperationsAPI.Operations(this._client);\n        this.hosts = new HostsAPI.Hosts(this._client);\n    }\n    /**\n     * Upload a schema to a zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/api_gateway/user_schemas`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve information about all schemas on a zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/user_schemas`, PublicSchemasV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a schema\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    delete(schemaId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}`, options);\n    }\n    /**\n     * Enable validation for a schema\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    edit(schemaId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve information about a specific schema on a zone\n     *\n     * @deprecated Use [Schema Validation API](https://developers.cloudflare.com/api/resources/schema_validation/) instead.\n     */\n    get(schemaId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PublicSchemasV4PagePaginationArray extends V4PagePaginationArray {\n}\nUserSchemas.PublicSchemasV4PagePaginationArray = PublicSchemasV4PagePaginationArray;\nUserSchemas.Operations = Operations;\nUserSchemas.OperationListResponsesV4PagePaginationArray = OperationListResponsesV4PagePaginationArray;\nUserSchemas.Hosts = Hosts;\nUserSchemas.HostListResponsesV4PagePaginationArray = HostListResponsesV4PagePaginationArray;\n//# sourceMappingURL=user-schemas.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConfigurationsAPI from \"./configurations.mjs\";\nimport { Configurations, } from \"./configurations.mjs\";\nimport * as SchemasAPI from \"./schemas.mjs\";\nimport { Schemas } from \"./schemas.mjs\";\nimport * as DiscoveryAPI from \"./discovery/discovery.mjs\";\nimport { Discovery, } from \"./discovery/discovery.mjs\";\nimport * as ExpressionTemplateAPI from \"./expression-template/expression-template.mjs\";\nimport { ExpressionTemplate } from \"./expression-template/expression-template.mjs\";\nimport * as OperationsAPI from \"./operations/operations.mjs\";\nimport { OperationBulkCreateResponsesSinglePage, OperationListResponsesV4PagePaginationArray, Operations, } from \"./operations/operations.mjs\";\nimport * as SettingsAPI from \"./settings/settings.mjs\";\nimport * as UserSchemasAPI from \"./user-schemas/user-schemas.mjs\";\nimport { PublicSchemasV4PagePaginationArray, UserSchemas, } from \"./user-schemas/user-schemas.mjs\";\nexport class APIGateway extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.configurations = new ConfigurationsAPI.Configurations(this._client);\n        this.discovery = new DiscoveryAPI.Discovery(this._client);\n        this.operations = new OperationsAPI.Operations(this._client);\n        this.schemas = new SchemasAPI.Schemas(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.userSchemas = new UserSchemasAPI.UserSchemas(this._client);\n        this.expressionTemplate = new ExpressionTemplateAPI.ExpressionTemplate(this._client);\n    }\n}\nAPIGateway.Configurations = Configurations;\nAPIGateway.Discovery = Discovery;\nAPIGateway.Operations = Operations;\nAPIGateway.OperationListResponsesV4PagePaginationArray = OperationListResponsesV4PagePaginationArray;\nAPIGateway.OperationBulkCreateResponsesSinglePage = OperationBulkCreateResponsesSinglePage;\nAPIGateway.Schemas = Schemas;\nAPIGateway.UserSchemas = UserSchemas;\nAPIGateway.PublicSchemasV4PagePaginationArray = PublicSchemasV4PagePaginationArray;\nAPIGateway.ExpressionTemplate = ExpressionTemplate;\n//# sourceMappingURL=api-gateway.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class ManagedTransforms extends APIResource {\n    /**\n     * Fetches a list of all Managed Transforms.\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/managed_headers`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disables all Managed Transforms.\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/managed_headers`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Updates the status of one or more Managed Transforms.\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/managed_headers`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=managed-transforms.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Connections extends APIResource {\n    /**\n     * Lists all connections detected by Page Shield.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const connection of client.pageShield.connections.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/page_shield/connections`, ConnectionsSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Fetches a connection detected by Page Shield by connection ID.\n     *\n     * @example\n     * ```ts\n     * const connection = await client.pageShield.connections.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(connectionId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/page_shield/connections/${connectionId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ConnectionsSinglePage extends SinglePage {\n}\nConnections.ConnectionsSinglePage = ConnectionsSinglePage;\n//# sourceMappingURL=connections.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Cookies extends APIResource {\n    /**\n     * Lists all cookies collected by Page Shield.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const cookieListResponse of client.pageShield.cookies.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/page_shield/cookies`, CookieListResponsesSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Fetches a cookie collected by Page Shield by cookie ID.\n     *\n     * @example\n     * ```ts\n     * const cookie = await client.pageShield.cookies.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(cookieId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/page_shield/cookies/${cookieId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CookieListResponsesSinglePage extends SinglePage {\n}\nCookies.CookieListResponsesSinglePage = CookieListResponsesSinglePage;\n//# sourceMappingURL=cookies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Policies extends APIResource {\n    /**\n     * Create a Page Shield policy.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.pageShield.policies.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   action: 'allow',\n     *   description: 'Checkout page CSP policy',\n     *   enabled: true,\n     *   expression:\n     *     'ends_with(http.request.uri.path, \"/checkout\")',\n     *   value: \"script-src 'none';\",\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/page_shield/policies`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Page Shield policy by ID.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.pageShield.policies.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(policyId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/page_shield/policies/${policyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all Page Shield policies.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const policyListResponse of client.pageShield.policies.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/page_shield/policies`, PolicyListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Page Shield policy by ID.\n     *\n     * @example\n     * ```ts\n     * await client.pageShield.policies.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(policyId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/page_shield/policies/${policyId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Fetches a Page Shield policy by ID.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.pageShield.policies.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(policyId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/page_shield/policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PolicyListResponsesSinglePage extends SinglePage {\n}\nPolicies.PolicyListResponsesSinglePage = PolicyListResponsesSinglePage;\n//# sourceMappingURL=policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Scripts extends APIResource {\n    /**\n     * Lists all scripts detected by Page Shield.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const script of client.pageShield.scripts.list({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/page_shield/scripts`, ScriptsSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Fetches a script detected by Page Shield by script ID.\n     *\n     * @example\n     * ```ts\n     * const script = await client.pageShield.scripts.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(scriptId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/page_shield/scripts/${scriptId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ScriptsSinglePage extends SinglePage {\n}\nScripts.ScriptsSinglePage = ScriptsSinglePage;\n//# sourceMappingURL=scripts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConnectionsAPI from \"./connections.mjs\";\nimport { Connections, ConnectionsSinglePage, } from \"./connections.mjs\";\nimport * as CookiesAPI from \"./cookies.mjs\";\nimport { CookieListResponsesSinglePage, Cookies, } from \"./cookies.mjs\";\nimport * as PoliciesAPI from \"./policies.mjs\";\nimport { Policies, PolicyListResponsesSinglePage, } from \"./policies.mjs\";\nimport * as ScriptsAPI from \"./scripts.mjs\";\nimport { Scripts, ScriptsSinglePage, } from \"./scripts.mjs\";\nexport class PageShield extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.policies = new PoliciesAPI.Policies(this._client);\n        this.connections = new ConnectionsAPI.Connections(this._client);\n        this.scripts = new ScriptsAPI.Scripts(this._client);\n        this.cookies = new CookiesAPI.Cookies(this._client);\n    }\n    /**\n     * Updates Page Shield settings.\n     *\n     * @example\n     * ```ts\n     * const pageShield = await client.pageShield.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/page_shield`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the Page Shield settings.\n     *\n     * @example\n     * ```ts\n     * const setting = await client.pageShield.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/page_shield`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nPageShield.Policies = Policies;\nPageShield.PolicyListResponsesSinglePage = PolicyListResponsesSinglePage;\nPageShield.Connections = Connections;\nPageShield.ConnectionsSinglePage = ConnectionsSinglePage;\nPageShield.Scripts = Scripts;\nPageShield.ScriptsSinglePage = ScriptsSinglePage;\nPageShield.Cookies = Cookies;\nPageShield.CookieListResponsesSinglePage = CookieListResponsesSinglePage;\n//# sourceMappingURL=page-shield.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Adds a new rule to an account or zone ruleset. The rule will be added to the end\n     * of the existing list of rules in the ruleset by default.\n     *\n     * @example\n     * ```ts\n     * const rule = await client.rulesets.rules.create(\n     *   '2f2feab2026849078ba485f918791bdc',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    create(rulesetId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}/rules`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    delete(rulesetId, ruleId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(rulesetId, ruleId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing rule in an account or zone ruleset.\n     *\n     * @example\n     * ```ts\n     * const response = await client.rulesets.rules.edit(\n     *   '2f2feab2026849078ba485f918791bdc',\n     *   '3a03d665bac047339bb530ecb439a90d',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    edit(rulesetId, ruleId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.patch(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Versions extends APIResource {\n    list(rulesetId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list(rulesetId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}/versions`, VersionListResponsesSinglePage, options);\n    }\n    delete(rulesetId, rulesetVersion, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(rulesetId, rulesetVersion, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}/versions/${rulesetVersion}`, { ...options, headers: { Accept: '*/*', ...options?.headers } });\n    }\n    get(rulesetId, rulesetVersion, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(rulesetId, rulesetVersion, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}/versions/${rulesetVersion}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VersionListResponsesSinglePage extends SinglePage {\n}\nVersions.VersionListResponsesSinglePage = VersionListResponsesSinglePage;\n//# sourceMappingURL=versions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Versions extends APIResource {\n    list(rulesetPhase, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list(rulesetPhase, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/rulesets/phases/${rulesetPhase}/entrypoint/versions`, VersionListResponsesSinglePage, options);\n    }\n    get(rulesetPhase, rulesetVersion, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(rulesetPhase, rulesetVersion, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/rulesets/phases/${rulesetPhase}/entrypoint/versions/${rulesetVersion}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VersionListResponsesSinglePage extends SinglePage {\n}\nVersions.VersionListResponsesSinglePage = VersionListResponsesSinglePage;\n//# sourceMappingURL=versions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as VersionsAPI from \"./versions.mjs\";\nimport { VersionListResponsesSinglePage, Versions, } from \"./versions.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Phases extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.versions = new VersionsAPI.Versions(this._client);\n    }\n    /**\n     * Updates an account or zone entry point ruleset, creating a new version.\n     *\n     * @example\n     * ```ts\n     * const phase = await client.rulesets.phases.update(\n     *   'http_request_firewall_custom',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    update(rulesetPhase, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/rulesets/phases/${rulesetPhase}/entrypoint`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    get(rulesetPhase, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(rulesetPhase, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/rulesets/phases/${rulesetPhase}/entrypoint`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nPhases.Versions = Versions;\nPhases.VersionListResponsesSinglePage = VersionListResponsesSinglePage;\n//# sourceMappingURL=phases.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { Rules, } from \"./rules.mjs\";\nimport * as VersionsAPI from \"./versions.mjs\";\nimport { VersionListResponsesSinglePage, Versions, } from \"./versions.mjs\";\nimport * as PhasesAPI from \"./phases/phases.mjs\";\nimport { Phases, } from \"./phases/phases.mjs\";\nimport { CloudflareError } from \"../../error.mjs\";\nimport { CursorPagination } from \"../../pagination.mjs\";\nexport class Rulesets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.phases = new PhasesAPI.Phases(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n        this.versions = new VersionsAPI.Versions(this._client);\n    }\n    /**\n     * Creates a ruleset.\n     *\n     * @example\n     * ```ts\n     * const ruleset = await client.rulesets.create({\n     *   kind: 'root',\n     *   name: 'My ruleset',\n     *   phase: 'http_request_firewall_custom',\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/rulesets`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an account or zone ruleset, creating a new version.\n     *\n     * @example\n     * ```ts\n     * const ruleset = await client.rulesets.update(\n     *   '2f2feab2026849078ba485f918791bdc',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    update(rulesetId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/rulesets`, RulesetListResponsesCursorPagination, { query, ...options });\n    }\n    delete(rulesetId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(rulesetId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    get(rulesetId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(rulesetId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/rulesets/${rulesetId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RulesetListResponsesCursorPagination extends CursorPagination {\n}\nRulesets.RulesetListResponsesCursorPagination = RulesetListResponsesCursorPagination;\nRulesets.Phases = Phases;\nRulesets.Rules = Rules;\nRulesets.Versions = Versions;\nRulesets.VersionListResponsesSinglePage = VersionListResponsesSinglePage;\n//# sourceMappingURL=rulesets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class URLNormalization extends APIResource {\n    /**\n     * Updates the URL Normalization settings.\n     *\n     * @example\n     * ```ts\n     * const urlNormalization =\n     *   await client.urlNormalization.update({\n     *     zone_id: '9f1839b6152d298aca64c4e906b6d074',\n     *     scope: 'incoming',\n     *     type: 'cloudflare',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/url_normalization`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes the URL Normalization settings.\n     *\n     * @example\n     * ```ts\n     * await client.urlNormalization.delete({\n     *   zone_id: '9f1839b6152d298aca64c4e906b6d074',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/url_normalization`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Fetches the current URL Normalization settings.\n     *\n     * @example\n     * ```ts\n     * const urlNormalization = await client.urlNormalization.get({\n     *   zone_id: '9f1839b6152d298aca64c4e906b6d074',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/url_normalization`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=url-normalization.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Apps extends APIResource {\n    /**\n     * Creates a new Spectrum application from a configuration using a name for the\n     * origin.\n     *\n     * @example\n     * ```ts\n     * const app = await client.spectrum.apps.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   dns: {},\n     *   protocol: 'tcp/22',\n     *   traffic_type: 'direct',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/spectrum/apps`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a previously existing application's configuration that uses a name for\n     * the origin.\n     *\n     * @example\n     * ```ts\n     * const app = await client.spectrum.apps.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     dns: {},\n     *     protocol: 'tcp/22',\n     *     traffic_type: 'direct',\n     *   },\n     * );\n     * ```\n     */\n    update(appId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/spectrum/apps/${appId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves a list of currently existing Spectrum applications inside a zone.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/spectrum/apps`, AppListResponsesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes a previously existing application.\n     */\n    delete(appId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/spectrum/apps/${appId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets the application configuration of a specific application inside a zone.\n     */\n    get(appId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/spectrum/apps/${appId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AppListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nApps.AppListResponsesV4PagePaginationArray = AppListResponsesV4PagePaginationArray;\n//# sourceMappingURL=apps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Currents extends APIResource {\n    /**\n     * Retrieves analytics aggregated from the last minute of usage on Spectrum\n     * applications underneath a given zone.\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/spectrum/analytics/aggregate/current`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=currents.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CurrentsAPI from \"./currents.mjs\";\nimport { Currents } from \"./currents.mjs\";\nexport class Aggregates extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.currents = new CurrentsAPI.Currents(this._client);\n    }\n}\nAggregates.Currents = Currents;\n//# sourceMappingURL=aggregates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Bytimes extends APIResource {\n    /**\n     * Retrieves a list of aggregate metrics grouped by time interval.\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/spectrum/analytics/events/bytime`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bytimes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Summaries extends APIResource {\n    /**\n     * Retrieves a list of summarised aggregate metrics over a given time period.\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/spectrum/analytics/events/summary`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summaries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as BytimesAPI from \"./bytimes.mjs\";\nimport { Bytimes } from \"./bytimes.mjs\";\nimport * as SummariesAPI from \"./summaries.mjs\";\nimport { Summaries } from \"./summaries.mjs\";\nexport class Events extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.bytimes = new BytimesAPI.Bytimes(this._client);\n        this.summaries = new SummariesAPI.Summaries(this._client);\n    }\n}\nEvents.Bytimes = Bytimes;\nEvents.Summaries = Summaries;\n//# sourceMappingURL=events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AggregatesAPI from \"./aggregates/aggregates.mjs\";\nimport { Aggregates } from \"./aggregates/aggregates.mjs\";\nimport * as EventsAPI from \"./events/events.mjs\";\nimport { Events } from \"./events/events.mjs\";\nexport class Analytics extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.aggregates = new AggregatesAPI.Aggregates(this._client);\n        this.events = new EventsAPI.Events(this._client);\n    }\n}\nAnalytics.Aggregates = Aggregates;\nAnalytics.Events = Events;\n//# sourceMappingURL=analytics.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AppsAPI from \"./apps.mjs\";\nimport { AppListResponsesV4PagePaginationArray, Apps, } from \"./apps.mjs\";\nimport * as AnalyticsAPI from \"./analytics/analytics.mjs\";\nimport { Analytics } from \"./analytics/analytics.mjs\";\nexport class Spectrum extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.analytics = new AnalyticsAPI.Analytics(this._client);\n        this.apps = new AppsAPI.Apps(this._client);\n    }\n}\nSpectrum.Analytics = Analytics;\nSpectrum.Apps = Apps;\nSpectrum.AppListResponsesV4PagePaginationArray = AppListResponsesV4PagePaginationArray;\n//# sourceMappingURL=spectrum.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nexport class LOADocuments extends APIResource {\n    /**\n     * Submit LOA document (pdf format) under the account.\n     *\n     * @example\n     * ```ts\n     * const loaDocument =\n     *   await client.addressing.loaDocuments.create({\n     *     account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *     loa_document: '@document.pdf',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/addressing/loa_documents`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Download specified LOA document under the account.\n     *\n     * @example\n     * ```ts\n     * const loaDocument =\n     *   await client.addressing.loaDocuments.get(\n     *     'd933b1530bc56c9953cf8ce166da8004',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     *\n     * const content = await loaDocument.blob();\n     * console.log(content);\n     * ```\n     */\n    get(loaDocumentId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/addressing/loa_documents/${loaDocumentId}/download`, {\n            ...options,\n            headers: { Accept: 'application/pdf', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=loa-documents.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Services extends APIResource {\n    /**\n     * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a\n     * service running on the Cloudflare network to enable a Cloudflare product on the\n     * IP addresses. This endpoint can be used as a reference of available services on\n     * the Cloudflare network, and their service IDs.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const serviceListResponse of client.addressing.services.list(\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/services`, ServiceListResponsesSinglePage, options);\n    }\n}\nexport class ServiceListResponsesSinglePage extends SinglePage {\n}\nServices.ServiceListResponsesSinglePage = ServiceListResponsesSinglePage;\n//# sourceMappingURL=services.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Accounts extends APIResource {\n    /**\n     * Add an account as a member of a particular address map.\n     *\n     * @example\n     * ```ts\n     * const account =\n     *   await client.addressing.addressMaps.accounts.update(\n     *     '055817b111884e0227e1be16a0be6ee0',\n     *     {\n     *       account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(addressMapId, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/addressing/address_maps/${addressMapId}/accounts/${account_id}`, { body: body, ...options });\n    }\n    /**\n     * Remove an account as a member of a particular address map.\n     *\n     * @example\n     * ```ts\n     * const account =\n     *   await client.addressing.addressMaps.accounts.delete(\n     *     '055817b111884e0227e1be16a0be6ee0',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    delete(addressMapId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/address_maps/${addressMapId}/accounts/${account_id}`, options);\n    }\n}\n//# sourceMappingURL=accounts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class IPs extends APIResource {\n    /**\n     * Add an IP from a prefix owned by the account to a particular address map.\n     *\n     * @example\n     * ```ts\n     * const ip = await client.addressing.addressMaps.ips.update(\n     *   '055817b111884e0227e1be16a0be6ee0',\n     *   '192.0.2.1',\n     *   {\n     *     account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *     body: {},\n     *   },\n     * );\n     * ```\n     */\n    update(addressMapId, ipAddress, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/addressing/address_maps/${addressMapId}/ips/${ipAddress}`, { body: body, ...options });\n    }\n    /**\n     * Remove an IP from a particular address map.\n     *\n     * @example\n     * ```ts\n     * const ip = await client.addressing.addressMaps.ips.delete(\n     *   '055817b111884e0227e1be16a0be6ee0',\n     *   '192.0.2.1',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * );\n     * ```\n     */\n    delete(addressMapId, ipAddress, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/address_maps/${addressMapId}/ips/${ipAddress}`, options);\n    }\n}\n//# sourceMappingURL=ips.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Zones extends APIResource {\n    /**\n     * Add a zone as a member of a particular address map.\n     *\n     * @example\n     * ```ts\n     * const zone =\n     *   await client.addressing.addressMaps.zones.update(\n     *     '055817b111884e0227e1be16a0be6ee0',\n     *     {\n     *       zone_id: '8ac8489932db6327334c9b6d58544cfe',\n     *       account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(addressMapId, params, options) {\n        const { zone_id, account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/addressing/address_maps/${addressMapId}/zones/${zone_id}`, { body: body, ...options });\n    }\n    /**\n     * Remove a zone as a member of a particular address map.\n     *\n     * @example\n     * ```ts\n     * const zone =\n     *   await client.addressing.addressMaps.zones.delete(\n     *     '055817b111884e0227e1be16a0be6ee0',\n     *     {\n     *       zone_id: '8ac8489932db6327334c9b6d58544cfe',\n     *       account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *     },\n     *   );\n     * ```\n     */\n    delete(addressMapId, params, options) {\n        const { zone_id, account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/address_maps/${addressMapId}/zones/${zone_id}`, options);\n    }\n}\n//# sourceMappingURL=zones.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AccountsAPI from \"./accounts.mjs\";\nimport { Accounts, } from \"./accounts.mjs\";\nimport * as AddressMapsIPsAPI from \"./ips.mjs\";\nimport { IPs } from \"./ips.mjs\";\nimport * as ZonesAPI from \"./zones.mjs\";\nimport { Zones } from \"./zones.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class AddressMaps extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.accounts = new AccountsAPI.Accounts(this._client);\n        this.ips = new AddressMapsIPsAPI.IPs(this._client);\n        this.zones = new ZonesAPI.Zones(this._client);\n    }\n    /**\n     * Create a new address map under the account.\n     *\n     * @example\n     * ```ts\n     * const addressMap =\n     *   await client.addressing.addressMaps.create({\n     *     account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/addressing/address_maps`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all address maps owned by the account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const addressMap of client.addressing.addressMaps.list(\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/address_maps`, AddressMapsSinglePage, options);\n    }\n    /**\n     * Delete a particular address map owned by the account. An Address Map must be\n     * disabled before it can be deleted.\n     *\n     * @example\n     * ```ts\n     * const addressMap =\n     *   await client.addressing.addressMaps.delete(\n     *     '055817b111884e0227e1be16a0be6ee0',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    delete(addressMapId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/address_maps/${addressMapId}`, options);\n    }\n    /**\n     * Modify properties of an address map owned by the account.\n     *\n     * @example\n     * ```ts\n     * const addressMap = await client.addressing.addressMaps.edit(\n     *   '055817b111884e0227e1be16a0be6ee0',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * );\n     * ```\n     */\n    edit(addressMapId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/addressing/address_maps/${addressMapId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show a particular address map owned by the account.\n     *\n     * @example\n     * ```ts\n     * const addressMap = await client.addressing.addressMaps.get(\n     *   '055817b111884e0227e1be16a0be6ee0',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * );\n     * ```\n     */\n    get(addressMapId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/addressing/address_maps/${addressMapId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AddressMapsSinglePage extends SinglePage {\n}\nAddressMaps.AddressMapsSinglePage = AddressMapsSinglePage;\nAddressMaps.Accounts = Accounts;\nAddressMaps.IPs = IPs;\nAddressMaps.Zones = Zones;\n//# sourceMappingURL=address-maps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class AdvertisementStatus extends APIResource {\n    /**\n     * Advertise or withdraw the BGP route for a prefix.\n     *\n     * **Deprecated:** Prefer the BGP Prefixes endpoints, which additionally allow for\n     * advertising and withdrawing subnets of an IP prefix.\n     *\n     * @deprecated\n     */\n    edit(prefixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bgp/status`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * View the current advertisement state for a prefix.\n     *\n     * **Deprecated:** Prefer the BGP Prefixes endpoints, which additionally allow for\n     * advertising and withdrawing subnets of an IP prefix.\n     *\n     * @deprecated\n     */\n    get(prefixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bgp/status`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=advertisement-status.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class BGPPrefixes extends APIResource {\n    /**\n     * Create a BGP prefix, controlling the BGP advertisement status of a specific\n     * subnet. When created, BGP prefixes are initially withdrawn, and can be\n     * advertised with the Update BGP Prefix API.\n     *\n     * @example\n     * ```ts\n     * const bgpPrefix =\n     *   await client.addressing.prefixes.bgpPrefixes.create(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    create(prefixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bgp/prefixes`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to\n     * control which specific subnets are advertised to the Internet. It is possible to\n     * advertise subnets more specific than an IP Prefix by creating more specific BGP\n     * Prefixes.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const bgpPrefix of client.addressing.prefixes.bgpPrefixes.list(\n     *   '2af39739cc4e3b5910c918468bb89828',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(prefixId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bgp/prefixes`, BGPPrefixesSinglePage, options);\n    }\n    /**\n     * Update the properties of a BGP Prefix, such as the on demand advertisement\n     * status (advertised or withdrawn).\n     *\n     * @example\n     * ```ts\n     * const bgpPrefix =\n     *   await client.addressing.prefixes.bgpPrefixes.edit(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     '7009ba364c7a5760798ceb430e603b74',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    edit(prefixId, bgpPrefixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bgp/prefixes/${bgpPrefixId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve a single BGP Prefix according to its identifier\n     *\n     * @example\n     * ```ts\n     * const bgpPrefix =\n     *   await client.addressing.prefixes.bgpPrefixes.get(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     '7009ba364c7a5760798ceb430e603b74',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    get(prefixId, bgpPrefixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bgp/prefixes/${bgpPrefixId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class BGPPrefixesSinglePage extends SinglePage {\n}\nBGPPrefixes.BGPPrefixesSinglePage = BGPPrefixesSinglePage;\n//# sourceMappingURL=bgp-prefixes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Delegations extends APIResource {\n    /**\n     * Create a new account delegation for a given IP prefix.\n     *\n     * @example\n     * ```ts\n     * const delegations =\n     *   await client.addressing.prefixes.delegations.create(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     {\n     *       account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *       cidr: '192.0.2.0/24',\n     *       delegated_account_id:\n     *         'b1946ac92492d2347c6235b4d2611184',\n     *     },\n     *   );\n     * ```\n     */\n    create(prefixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/addressing/prefixes/${prefixId}/delegations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all delegations for a given account IP prefix.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const delegations of client.addressing.prefixes.delegations.list(\n     *   '2af39739cc4e3b5910c918468bb89828',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(prefixId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/prefixes/${prefixId}/delegations`, DelegationsSinglePage, options);\n    }\n    /**\n     * Delete an account delegation for a given IP prefix.\n     *\n     * @example\n     * ```ts\n     * const delegation =\n     *   await client.addressing.prefixes.delegations.delete(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     'd933b1530bc56c9953cf8ce166da8004',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    delete(prefixId, delegationId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/prefixes/${prefixId}/delegations/${delegationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DelegationsSinglePage extends SinglePage {\n}\nDelegations.DelegationsSinglePage = DelegationsSinglePage;\n//# sourceMappingURL=delegations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class ServiceBindings extends APIResource {\n    /**\n     * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a\n     * service running on Cloudflare's network. **Note:** This API may only be used on\n     * prefixes currently configured with a Magic Transit/Cloudflare CDN/Cloudflare\n     * Spectrum service binding, and only allows creating upgrade service bindings for\n     * the Cloudflare CDN or Cloudflare Spectrum.\n     *\n     * @example\n     * ```ts\n     * const serviceBinding =\n     *   await client.addressing.prefixes.serviceBindings.create(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    create(prefixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bindings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List the Cloudflare services this prefix is currently bound to. Traffic sent to\n     * an address within an IP prefix will be routed to the Cloudflare service of the\n     * most-specific Service Binding matching the address. **Example:** binding\n     * `192.0.2.0/24` to Cloudflare Magic Transit and `192.0.2.1/32` to the Cloudflare\n     * CDN would route traffic for `192.0.2.1` to the CDN, and traffic for all other\n     * IPs in the prefix to Cloudflare Magic Transit.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const serviceBinding of client.addressing.prefixes.serviceBindings.list(\n     *   '2af39739cc4e3b5910c918468bb89828',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(prefixId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bindings`, ServiceBindingsSinglePage, options);\n    }\n    /**\n     * Delete a Service Binding\n     *\n     * @example\n     * ```ts\n     * const serviceBinding =\n     *   await client.addressing.prefixes.serviceBindings.delete(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     '0429b49b6a5155297b78e75a44b09e14',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    delete(prefixId, bindingId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bindings/${bindingId}`, options);\n    }\n    /**\n     * Fetch a single Service Binding\n     *\n     * @example\n     * ```ts\n     * const serviceBinding =\n     *   await client.addressing.prefixes.serviceBindings.get(\n     *     '2af39739cc4e3b5910c918468bb89828',\n     *     '0429b49b6a5155297b78e75a44b09e14',\n     *     { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     *   );\n     * ```\n     */\n    get(prefixId, bindingId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/addressing/prefixes/${prefixId}/bindings/${bindingId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ServiceBindingsSinglePage extends SinglePage {\n}\nServiceBindings.ServiceBindingsSinglePage = ServiceBindingsSinglePage;\n//# sourceMappingURL=service-bindings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AdvertisementStatusAPI from \"./advertisement-status.mjs\";\nimport { AdvertisementStatus, } from \"./advertisement-status.mjs\";\nimport * as BGPPrefixesAPI from \"./bgp-prefixes.mjs\";\nimport { BGPPrefixes, BGPPrefixesSinglePage, } from \"./bgp-prefixes.mjs\";\nimport * as DelegationsAPI from \"./delegations.mjs\";\nimport { DelegationsSinglePage, } from \"./delegations.mjs\";\nimport * as ServiceBindingsAPI from \"./service-bindings.mjs\";\nimport { ServiceBindings, ServiceBindingsSinglePage, } from \"./service-bindings.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Prefixes extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.serviceBindings = new ServiceBindingsAPI.ServiceBindings(this._client);\n        this.bgpPrefixes = new BGPPrefixesAPI.BGPPrefixes(this._client);\n        this.advertisementStatus = new AdvertisementStatusAPI.AdvertisementStatus(this._client);\n        this.delegations = new DelegationsAPI.Delegations(this._client);\n    }\n    /**\n     * Add a new prefix under the account.\n     *\n     * @example\n     * ```ts\n     * const prefix = await client.addressing.prefixes.create({\n     *   account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *   asn: 209242,\n     *   cidr: '192.0.2.0/24',\n     *   loa_document_id: 'd933b1530bc56c9953cf8ce166da8004',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/addressing/prefixes`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all prefixes owned by the account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const prefix of client.addressing.prefixes.list({\n     *   account_id: '258def64c72dae45f3e4c8516e2111f2',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/prefixes`, PrefixesSinglePage, options);\n    }\n    /**\n     * Delete an unapproved prefix owned by the account.\n     *\n     * @example\n     * ```ts\n     * const prefix = await client.addressing.prefixes.delete(\n     *   '2af39739cc4e3b5910c918468bb89828',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * );\n     * ```\n     */\n    delete(prefixId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/addressing/prefixes/${prefixId}`, options);\n    }\n    /**\n     * Modify the description for a prefix owned by the account.\n     *\n     * @example\n     * ```ts\n     * const prefix = await client.addressing.prefixes.edit(\n     *   '2af39739cc4e3b5910c918468bb89828',\n     *   {\n     *     account_id: '258def64c72dae45f3e4c8516e2111f2',\n     *     description: 'Internal test prefix',\n     *   },\n     * );\n     * ```\n     */\n    edit(prefixId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/addressing/prefixes/${prefixId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List a particular prefix owned by the account.\n     *\n     * @example\n     * ```ts\n     * const prefix = await client.addressing.prefixes.get(\n     *   '2af39739cc4e3b5910c918468bb89828',\n     *   { account_id: '258def64c72dae45f3e4c8516e2111f2' },\n     * );\n     * ```\n     */\n    get(prefixId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/addressing/prefixes/${prefixId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PrefixesSinglePage extends SinglePage {\n}\nPrefixes.PrefixesSinglePage = PrefixesSinglePage;\nPrefixes.ServiceBindings = ServiceBindings;\nPrefixes.ServiceBindingsSinglePage = ServiceBindingsSinglePage;\nPrefixes.BGPPrefixes = BGPPrefixes;\nPrefixes.BGPPrefixesSinglePage = BGPPrefixesSinglePage;\nPrefixes.AdvertisementStatus = AdvertisementStatus;\nPrefixes.DelegationsSinglePage = DelegationsSinglePage;\n//# sourceMappingURL=prefixes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Regions extends APIResource {\n    /**\n     * List all Regional Services regions available for use by this account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const regionListResponse of client.addressing.regionalHostnames.regions.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/addressing/regional_hostnames/regions`, RegionListResponsesSinglePage, options);\n    }\n}\nexport class RegionListResponsesSinglePage extends SinglePage {\n}\nRegions.RegionListResponsesSinglePage = RegionListResponsesSinglePage;\n//# sourceMappingURL=regions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as RegionsAPI from \"./regions.mjs\";\nimport { RegionListResponsesSinglePage, Regions } from \"./regions.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class RegionalHostnames extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.regions = new RegionsAPI.Regions(this._client);\n    }\n    /**\n     * Create a new Regional Hostname entry. Cloudflare will only use data centers that\n     * are physically located within the chosen region to decrypt and service HTTPS\n     * traffic. Learn more about\n     * [Regional Services](https://developers.cloudflare.com/data-localization/regional-services/get-started/).\n     *\n     * @example\n     * ```ts\n     * const regionalHostname =\n     *   await client.addressing.regionalHostnames.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     hostname: 'foo.example.com',\n     *     region_key: 'ca',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/addressing/regional_hostnames`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all Regional Hostnames within a zone.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const regionalHostnameListResponse of client.addressing.regionalHostnames.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/addressing/regional_hostnames`, RegionalHostnameListResponsesSinglePage, options);\n    }\n    /**\n     * Delete the region configuration for a specific Regional Hostname.\n     *\n     * @example\n     * ```ts\n     * const regionalHostname =\n     *   await client.addressing.regionalHostnames.delete(\n     *     'foo.example.com',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(hostname, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/addressing/regional_hostnames/${hostname}`, options);\n    }\n    /**\n     * Update the configuration for a specific Regional Hostname. Only the region_key\n     * of a hostname is mutable.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.addressing.regionalHostnames.edit(\n     *     'foo.example.com',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       region_key: 'ca',\n     *     },\n     *   );\n     * ```\n     */\n    edit(hostname, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/addressing/regional_hostnames/${hostname}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch the configuration for a specific Regional Hostname, within a zone.\n     *\n     * @example\n     * ```ts\n     * const regionalHostname =\n     *   await client.addressing.regionalHostnames.get(\n     *     'foo.example.com',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(hostname, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/addressing/regional_hostnames/${hostname}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RegionalHostnameListResponsesSinglePage extends SinglePage {\n}\nRegionalHostnames.RegionalHostnameListResponsesSinglePage = RegionalHostnameListResponsesSinglePage;\nRegionalHostnames.Regions = Regions;\nRegionalHostnames.RegionListResponsesSinglePage = RegionListResponsesSinglePage;\n//# sourceMappingURL=regional-hostnames.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as LOADocumentsAPI from \"./loa-documents.mjs\";\nimport { LOADocuments, } from \"./loa-documents.mjs\";\nimport * as ServicesAPI from \"./services.mjs\";\nimport { ServiceListResponsesSinglePage, Services } from \"./services.mjs\";\nimport * as AddressMapsAPI from \"./address-maps/address-maps.mjs\";\nimport { AddressMaps, AddressMapsSinglePage, } from \"./address-maps/address-maps.mjs\";\nimport * as PrefixesAPI from \"./prefixes/prefixes.mjs\";\nimport { Prefixes, PrefixesSinglePage, } from \"./prefixes/prefixes.mjs\";\nimport * as RegionalHostnamesAPI from \"./regional-hostnames/regional-hostnames.mjs\";\nimport { RegionalHostnameListResponsesSinglePage, RegionalHostnames, } from \"./regional-hostnames/regional-hostnames.mjs\";\nexport class Addressing extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.regionalHostnames = new RegionalHostnamesAPI.RegionalHostnames(this._client);\n        this.services = new ServicesAPI.Services(this._client);\n        this.addressMaps = new AddressMapsAPI.AddressMaps(this._client);\n        this.loaDocuments = new LOADocumentsAPI.LOADocuments(this._client);\n        this.prefixes = new PrefixesAPI.Prefixes(this._client);\n    }\n}\nAddressing.RegionalHostnames = RegionalHostnames;\nAddressing.RegionalHostnameListResponsesSinglePage = RegionalHostnameListResponsesSinglePage;\nAddressing.Services = Services;\nAddressing.ServiceListResponsesSinglePage = ServiceListResponsesSinglePage;\nAddressing.AddressMaps = AddressMaps;\nAddressing.AddressMapsSinglePage = AddressMapsSinglePage;\nAddressing.LOADocuments = LOADocuments;\nAddressing.Prefixes = Prefixes;\nAddressing.PrefixesSinglePage = PrefixesSinglePage;\n//# sourceMappingURL=addressing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { AuditLogsV4PagePaginationArray } from \"./shared.mjs\";\nexport class AuditLogs extends APIResource {\n    /**\n     * Gets a list of audit logs for an account. Can be filtered by who made the\n     * change, on which zone, and the timeframe of the change.\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/audit_logs`, AuditLogsV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n}\nexport { AuditLogsV4PagePaginationArray };\n//# sourceMappingURL=audit-logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Profiles extends APIResource {\n    /**\n     * Gets the current billing profile for the account.\n     *\n     * @deprecated\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/billing/profile`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=profiles.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ProfilesAPI from \"./profiles.mjs\";\nimport { Profiles } from \"./profiles.mjs\";\nexport class Billing extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.profiles = new ProfilesAPI.Profiles(this._client);\n    }\n}\nBilling.Profiles = Profiles;\n//# sourceMappingURL=billing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class LogoMatches extends APIResource {\n    /**\n     * Return matches as CSV for logo queries based on ID\n     */\n    download(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/brand-protection/logo-matches/download`, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Return matches for logo queries based on ID\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/brand-protection/logo-matches`, { query, ...options });\n    }\n}\n//# sourceMappingURL=logo-matches.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Logos extends APIResource {\n    /**\n     * Return new saved logo queries created from image files\n     */\n    create(params, options) {\n        const { account_id, match_type, tag, threshold, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/brand-protection/logos`, {\n            query: { match_type, tag, threshold },\n            body,\n            ...options,\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded', ...options?.headers },\n        });\n    }\n    /**\n     * Return a success message after deleting saved logo queries by ID\n     */\n    delete(logoId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/brand-protection/logos/${logoId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n}\n//# sourceMappingURL=logos.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Matches extends APIResource {\n    /**\n     * Return matches as CSV for string queries based on ID\n     */\n    download(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/brand-protection/matches/download`, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Return matches for string queries based on ID\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/brand-protection/matches`, { query, ...options });\n    }\n}\n//# sourceMappingURL=matches.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Queries extends APIResource {\n    /**\n     * Return a success message after creating new saved string queries\n     */\n    create(params, options) {\n        const { account_id, id, query_scan, query_tag, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/brand-protection/queries`, {\n            query: { id, scan: query_scan, tag: query_tag },\n            body,\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Return a success message after deleting saved string queries by ID\n     */\n    delete(params, options) {\n        const { account_id, id, scan, tag } = params;\n        return this._client.delete(`/accounts/${account_id}/brand-protection/queries`, {\n            query: { id, scan, tag },\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Return a success message after creating new saved string queries in bulk\n     */\n    bulk(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/brand-protection/queries/bulk`, {\n            body,\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n}\n//# sourceMappingURL=queries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as LogoMatchesAPI from \"./logo-matches.mjs\";\nimport { LogoMatches, } from \"./logo-matches.mjs\";\nimport * as LogosAPI from \"./logos.mjs\";\nimport { Logos } from \"./logos.mjs\";\nimport * as MatchesAPI from \"./matches.mjs\";\nimport { Matches, } from \"./matches.mjs\";\nimport * as QueriesAPI from \"./queries.mjs\";\nimport { Queries } from \"./queries.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class BrandProtection extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.queries = new QueriesAPI.Queries(this._client);\n        this.matches = new MatchesAPI.Matches(this._client);\n        this.logos = new LogosAPI.Logos(this._client);\n        this.logoMatches = new LogoMatchesAPI.LogoMatches(this._client);\n    }\n    /**\n     * Return new URL submissions\n     */\n    submit(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/brand-protection/submit`, options);\n    }\n    /**\n     * Return submitted URLs based on ID\n     */\n    urlInfo(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/brand-protection/url-info`, BrandProtectionURLInfoResponsesSinglePage, options);\n    }\n}\nexport class BrandProtectionURLInfoResponsesSinglePage extends SinglePage {\n}\nBrandProtection.BrandProtectionURLInfoResponsesSinglePage = BrandProtectionURLInfoResponsesSinglePage;\nBrandProtection.Queries = Queries;\nBrandProtection.Matches = Matches;\nBrandProtection.Logos = Logos;\nBrandProtection.LogoMatches = LogoMatches;\n//# sourceMappingURL=brand-protection.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class EndpointHealthchecks extends APIResource {\n    /**\n     * Create Endpoint Health Check.\n     *\n     * @example\n     * ```ts\n     * const endpointHealthcheck =\n     *   await client.diagnostics.endpointHealthchecks.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     check_type: 'icmp',\n     *     endpoint: '203.0.113.1',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/diagnostics/endpoint-healthchecks`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Endpoint Health Check.\n     *\n     * @example\n     * ```ts\n     * const endpointHealthcheck =\n     *   await client.diagnostics.endpointHealthchecks.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       check_type: 'icmp',\n     *       endpoint: '203.0.113.1',\n     *     },\n     *   );\n     * ```\n     */\n    update(id, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/diagnostics/endpoint-healthchecks/${id}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Endpoint Health Checks.\n     *\n     * @example\n     * ```ts\n     * const endpointHealthchecks =\n     *   await client.diagnostics.endpointHealthchecks.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/diagnostics/endpoint-healthchecks`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete Endpoint Health Check.\n     *\n     * @example\n     * ```ts\n     * const endpointHealthcheck =\n     *   await client.diagnostics.endpointHealthchecks.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(id, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/diagnostics/endpoint-healthchecks/${id}`, options);\n    }\n    /**\n     * Get a single Endpoint Health Check.\n     *\n     * @example\n     * ```ts\n     * const endpointHealthcheck =\n     *   await client.diagnostics.endpointHealthchecks.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/diagnostics/endpoint-healthchecks/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=endpoint-healthchecks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Traceroutes extends APIResource {\n    /**\n     * Run traceroutes from Cloudflare colos.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const traceroute of client.diagnostics.traceroutes.create(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     targets: ['203.0.113.1', 'cloudflare.com'],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/diagnostics/traceroute`, TraceroutesSinglePage, {\n            body,\n            method: 'post',\n            ...options,\n        });\n    }\n}\nexport class TraceroutesSinglePage extends SinglePage {\n}\nTraceroutes.TraceroutesSinglePage = TraceroutesSinglePage;\n//# sourceMappingURL=traceroutes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as EndpointHealthchecksAPI from \"./endpoint-healthchecks.mjs\";\nimport { EndpointHealthchecks, } from \"./endpoint-healthchecks.mjs\";\nimport * as TraceroutesAPI from \"./traceroutes.mjs\";\nimport { Traceroutes, TraceroutesSinglePage } from \"./traceroutes.mjs\";\nexport class Diagnostics extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.traceroutes = new TraceroutesAPI.Traceroutes(this._client);\n        this.endpointHealthchecks = new EndpointHealthchecksAPI.EndpointHealthchecks(this._client);\n    }\n}\nDiagnostics.Traceroutes = Traceroutes;\nDiagnostics.TraceroutesSinglePage = TraceroutesSinglePage;\nDiagnostics.EndpointHealthchecks = EndpointHealthchecks;\n//# sourceMappingURL=diagnostics.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Blobs extends APIResource {\n    /**\n     * Fetch base image. For most images this will be the originally uploaded file. For\n     * larger images it can be a near-lossless version of the original.\n     *\n     * @example\n     * ```ts\n     * const blob = await client.images.v1.blobs.get('image_id', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     *\n     * const content = await blob.blob();\n     * console.log(content);\n     * ```\n     */\n    get(imageId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/images/v1/${imageId}/blob`, {\n            ...options,\n            headers: { Accept: 'image/*', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=blobs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Keys extends APIResource {\n    /**\n     * Create a new signing key with specified name. Returns all keys available.\n     *\n     * @example\n     * ```ts\n     * const key = await client.images.v1.keys.update('someKey', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    update(signingKeyName, params, options) {\n        const { account_id } = params;\n        return this._client.put(`/accounts/${account_id}/images/v1/keys/${signingKeyName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists your signing keys. These can be found on your Cloudflare Images dashboard.\n     *\n     * @example\n     * ```ts\n     * const keys = await client.images.v1.keys.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/images/v1/keys`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete signing key with specified name. Returns all keys available. When last\n     * key is removed, a new default signing key will be generated.\n     *\n     * @example\n     * ```ts\n     * const key = await client.images.v1.keys.delete('someKey', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(signingKeyName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/images/v1/keys/${signingKeyName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=keys.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Stats extends APIResource {\n    /**\n     * Fetch usage statistics details for Cloudflare Images.\n     *\n     * @example\n     * ```ts\n     * const stat = await client.images.v1.stats.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/images/v1/stats`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=stats.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Variants extends APIResource {\n    /**\n     * Specify variants that allow you to resize images for different use cases.\n     *\n     * @example\n     * ```ts\n     * const variant = await client.images.v1.variants.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   id: 'hero',\n     *   options: {\n     *     fit: 'scale-down',\n     *     height: 768,\n     *     metadata: 'none',\n     *     width: 1366,\n     *   },\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/images/v1/variants`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists existing variants.\n     *\n     * @example\n     * ```ts\n     * const variant = await client.images.v1.variants.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/images/v1/variants`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deleting a variant purges the cache for all images associated with the variant.\n     *\n     * @example\n     * ```ts\n     * const variant = await client.images.v1.variants.delete(\n     *   'hero',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(variantId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/images/v1/variants/${variantId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updating a variant purges the cache for all images associated with the variant.\n     *\n     * @example\n     * ```ts\n     * const response = await client.images.v1.variants.edit(\n     *   'hero',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     options: {\n     *       fit: 'scale-down',\n     *       height: 768,\n     *       metadata: 'none',\n     *       width: 1366,\n     *     },\n     *   },\n     * );\n     * ```\n     */\n    edit(variantId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/images/v1/variants/${variantId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch details for a single variant.\n     *\n     * @example\n     * ```ts\n     * const variant = await client.images.v1.variants.get(\n     *   'hero',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(variantId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/images/v1/variants/${variantId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=variants.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nimport * as BlobsAPI from \"./blobs.mjs\";\nimport { Blobs } from \"./blobs.mjs\";\nimport * as KeysAPI from \"./keys.mjs\";\nimport { Keys, } from \"./keys.mjs\";\nimport * as StatsAPI from \"./stats.mjs\";\nimport { Stats } from \"./stats.mjs\";\nimport * as VariantsAPI from \"./variants.mjs\";\nimport { Variants, } from \"./variants.mjs\";\nimport { V4PagePagination } from \"../../../pagination.mjs\";\nexport class V1 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.keys = new KeysAPI.Keys(this._client);\n        this.stats = new StatsAPI.Stats(this._client);\n        this.variants = new VariantsAPI.Variants(this._client);\n        this.blobs = new BlobsAPI.Blobs(this._client);\n    }\n    /**\n     * Upload an image with up to 10 Megabytes using a single HTTP POST\n     * (multipart/form-data) request. An image can be uploaded by sending an image file\n     * or passing an accessible to an API url.\n     *\n     * @example\n     * ```ts\n     * const image = await client.images.v1.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/images/v1`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List up to 100 images with one request. Use the optional parameters below to get\n     * a specific range of images.\n     *\n     * @deprecated\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/images/v1`, V1ListResponsesV4PagePagination, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete an image on Cloudflare Images. On success, all copies of the image are\n     * deleted and purged from cache.\n     *\n     * @example\n     * ```ts\n     * const v1 = await client.images.v1.delete('image_id', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(imageId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/images/v1/${imageId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update image access control. On access control change, all copies of the image\n     * are purged from cache.\n     *\n     * @example\n     * ```ts\n     * const image = await client.images.v1.edit('image_id', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    edit(imageId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/images/v1/${imageId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch details for a single image.\n     *\n     * @example\n     * ```ts\n     * const image = await client.images.v1.get('image_id', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(imageId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/images/v1/${imageId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class V1ListResponsesV4PagePagination extends V4PagePagination {\n}\nV1.V1ListResponsesV4PagePagination = V1ListResponsesV4PagePagination;\nV1.Keys = Keys;\nV1.Stats = Stats;\nV1.Variants = Variants;\nV1.Blobs = Blobs;\n//# sourceMappingURL=v1.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class DirectUploads extends APIResource {\n    /**\n     * Direct uploads allow users to upload images without API keys. A common use case\n     * are web apps, client-side applications, or mobile devices where users upload\n     * content directly to Cloudflare Images. This method creates a draft record for a\n     * future image. It returns an upload URL and an image identifier. To verify if the\n     * image itself has been uploaded, send an image details request\n     * (accounts/:account_identifier/images/v1/:identifier), and check that the\n     * `draft: true` property is not present.\n     *\n     * @example\n     * ```ts\n     * const directUpload =\n     *   await client.images.v2.directUploads.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/images/v2/direct_upload`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=direct-uploads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DirectUploadsAPI from \"./direct-uploads.mjs\";\nimport { DirectUploads } from \"./direct-uploads.mjs\";\nexport class V2 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.directUploads = new DirectUploadsAPI.DirectUploads(this._client);\n    }\n    /**\n     * List up to 10000 images with one request. Use the optional parameters below to\n     * get a specific range of images. Endpoint returns continuation_token if more\n     * images are present.\n     *\n     * @example\n     * ```ts\n     * const v2s = await client.images.v2.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/images/v2`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nV2.DirectUploads = DirectUploads;\n//# sourceMappingURL=v2.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as V1API from \"./v1/v1.mjs\";\nimport { V1, V1ListResponsesV4PagePagination, } from \"./v1/v1.mjs\";\nimport * as V2API from \"./v2/v2.mjs\";\nimport { V2 } from \"./v2/v2.mjs\";\nexport class Images extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.v1 = new V1API.V1(this._client);\n        this.v2 = new V2API.V2(this._client);\n    }\n}\nImages.V1 = V1;\nImages.V1ListResponsesV4PagePagination = V1ListResponsesV4PagePagination;\nImages.V2 = V2;\n//# sourceMappingURL=images.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePagination } from \"../../pagination.mjs\";\nexport class DNS extends APIResource {\n    /**\n     * Gets a list of all the domains that have resolved to a specific IP address.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const dns of client.intel.dns.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/intel/dns`, DNSV4PagePagination, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class DNSV4PagePagination extends V4PagePagination {\n}\nDNS.DNSV4PagePagination = DNSV4PagePagination;\n//# sourceMappingURL=dns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class DomainHistoryResource extends APIResource {\n    /**\n     * Gets historical security threat and content categories currently and previously\n     * assigned to a domain.\n     *\n     * @example\n     * ```ts\n     * const domainHistories =\n     *   await client.intel.domainHistory.get({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/domain-history`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=domain-history.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class IPLists extends APIResource {\n    /**\n     * Get IP Lists.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const ipList of client.intel.ipLists.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/intel/ip-list`, IPListsSinglePage, options);\n    }\n}\nexport class IPListsSinglePage extends SinglePage {\n}\nIPLists.IPListsSinglePage = IPListsSinglePage;\n//# sourceMappingURL=ip-lists.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class IPs extends APIResource {\n    /**\n     * Gets the geolocation, ASN, infrastructure type of the ASN, and any security\n     * threat categories of an IP address. **Must provide ip query parameters.** For\n     * example, `/intel/ip?ipv4=1.1.1.1` or `/intel/ip?ipv6=2001:db8::1`.\n     *\n     * @example\n     * ```ts\n     * const ips = await client.intel.ips.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/ip`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ips.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Miscategorizations extends APIResource {\n    /**\n     * Allows you to submit requests to change a domain’s category.\n     *\n     * @example\n     * ```ts\n     * const miscategorization =\n     *   await client.intel.miscategorizations.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/intel/miscategorization`, { body, ...options });\n    }\n}\n//# sourceMappingURL=miscategorizations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Sinkholes extends APIResource {\n    /**\n     * List sinkholes owned by this account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const sinkhole of client.intel.sinkholes.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/intel/sinkholes`, SinkholesSinglePage, options);\n    }\n}\nexport class SinkholesSinglePage extends SinglePage {\n}\nSinkholes.SinkholesSinglePage = SinkholesSinglePage;\n//# sourceMappingURL=sinkholes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Whois extends APIResource {\n    /**\n     * Get WHOIS Record\n     *\n     * @example\n     * ```ts\n     * const whois = await client.intel.whois.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/whois`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=whois.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Subnets extends APIResource {\n    /**\n     * Get ASN Subnets.\n     *\n     * @example\n     * ```ts\n     * const subnet = await client.intel.asn.subnets.get(0, {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(asn, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/intel/asn/${asn}/subnets`, options);\n    }\n}\n//# sourceMappingURL=subnets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SubnetsAPI from \"./subnets.mjs\";\nimport { Subnets } from \"./subnets.mjs\";\nexport class ASN extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.subnets = new SubnetsAPI.Subnets(this._client);\n    }\n    /**\n     * Gets an overview of the Autonomous System Number (ASN) and a list of subnets for\n     * it.\n     *\n     * @example\n     * ```ts\n     * const asn = await client.intel.asn.get(0, {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(asn, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/intel/asn/${asn}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nASN.Subnets = Subnets;\n//# sourceMappingURL=asn.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class IssueTypes extends APIResource {\n    /**\n     * Get Security Center Issues Types\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const issueTypeGetResponse of client.intel.attackSurfaceReport.issueTypes.get(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/intel/attack-surface-report/issue-types`, IssueTypeGetResponsesSinglePage, options);\n    }\n}\nexport class IssueTypeGetResponsesSinglePage extends SinglePage {\n}\nIssueTypes.IssueTypeGetResponsesSinglePage = IssueTypeGetResponsesSinglePage;\n//# sourceMappingURL=issue-types.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePagination } from \"../../../pagination.mjs\";\nexport class Issues extends APIResource {\n    /**\n     * Get Security Center Issues\n     *\n     * @deprecated\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/intel/attack-surface-report/issues`, IssueListResponsesV4PagePagination, { query, ...options });\n    }\n    /**\n     * Get Security Center Issue Counts by Class\n     *\n     * @deprecated\n     */\n    class(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/attack-surface-report/issues/class`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Archive Security Center Insight\n     *\n     * @deprecated\n     */\n    dismiss(issueId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/intel/attack-surface-report/${issueId}/dismiss`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Get Security Center Issue Counts by Severity\n     *\n     * @deprecated\n     */\n    severity(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/attack-surface-report/issues/severity`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Security Center Issue Counts by Type\n     *\n     * @deprecated\n     */\n    type(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/attack-surface-report/issues/type`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class IssueListResponsesV4PagePagination extends V4PagePagination {\n}\nIssues.IssueListResponsesV4PagePagination = IssueListResponsesV4PagePagination;\n//# sourceMappingURL=issues.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as IssueTypesAPI from \"./issue-types.mjs\";\nimport { IssueTypeGetResponsesSinglePage, IssueTypes, } from \"./issue-types.mjs\";\nimport * as IssuesAPI from \"./issues.mjs\";\nimport { IssueListResponsesV4PagePagination, Issues, } from \"./issues.mjs\";\nexport class AttackSurfaceReport extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.issueTypes = new IssueTypesAPI.IssueTypes(this._client);\n        this.issues = new IssuesAPI.Issues(this._client);\n    }\n}\nAttackSurfaceReport.IssueTypes = IssueTypes;\nAttackSurfaceReport.IssueTypeGetResponsesSinglePage = IssueTypeGetResponsesSinglePage;\nAttackSurfaceReport.Issues = Issues;\nAttackSurfaceReport.IssueListResponsesV4PagePagination = IssueListResponsesV4PagePagination;\n//# sourceMappingURL=attack-surface-report.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Bulks extends APIResource {\n    /**\n     * Same as summary.\n     *\n     * @example\n     * ```ts\n     * const bulks = await client.intel.domains.bulks.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/domain/bulk`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bulks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as BulksAPI from \"./bulks.mjs\";\nimport { Bulks } from \"./bulks.mjs\";\nexport class Domains extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.bulks = new BulksAPI.Bulks(this._client);\n    }\n    /**\n     * Gets security details and statistics about a domain.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.intel.domains.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/intel/domain`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nDomains.Bulks = Bulks;\n//# sourceMappingURL=domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Downloads extends APIResource {\n    /**\n     * Download indicator feed data\n     *\n     * @example\n     * ```ts\n     * const download =\n     *   await client.intel.indicatorFeeds.downloads.get(12, {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(feedId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/intel/indicator_feeds/${feedId}/download`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=downloads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Permissions extends APIResource {\n    /**\n     * Grant permission to indicator feed\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.intel.indicatorFeeds.permissions.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/intel/indicator-feeds/permissions/add`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List indicator feed permissions\n     *\n     * @example\n     * ```ts\n     * const permissions =\n     *   await client.intel.indicatorFeeds.permissions.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/intel/indicator-feeds/permissions/view`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Revoke permission to indicator feed\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.intel.indicatorFeeds.permissions.delete({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/intel/indicator-feeds/permissions/remove`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=permissions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class Snapshots extends APIResource {\n    /**\n     * Update indicator feed data\n     *\n     * @example\n     * ```ts\n     * const snapshot =\n     *   await client.intel.indicatorFeeds.snapshots.update(12, {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    update(feedId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/intel/indicator-feeds/${feedId}/snapshot`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=snapshots.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DownloadsAPI from \"./downloads.mjs\";\nimport { Downloads } from \"./downloads.mjs\";\nimport * as PermissionsAPI from \"./permissions.mjs\";\nimport { Permissions, } from \"./permissions.mjs\";\nimport * as SnapshotsAPI from \"./snapshots.mjs\";\nimport { Snapshots } from \"./snapshots.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class IndicatorFeeds extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.snapshots = new SnapshotsAPI.Snapshots(this._client);\n        this.permissions = new PermissionsAPI.Permissions(this._client);\n        this.downloads = new DownloadsAPI.Downloads(this._client);\n    }\n    /**\n     * Create new indicator feed\n     *\n     * @example\n     * ```ts\n     * const indicatorFeed =\n     *   await client.intel.indicatorFeeds.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/intel/indicator-feeds`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update indicator feed metadata\n     *\n     * @example\n     * ```ts\n     * const indicatorFeed =\n     *   await client.intel.indicatorFeeds.update(12, {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    update(feedId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/intel/indicator-feeds/${feedId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get indicator feeds owned by this account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const indicatorFeedListResponse of client.intel.indicatorFeeds.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/intel/indicator-feeds`, IndicatorFeedListResponsesSinglePage, options);\n    }\n    /**\n     * Get indicator feed data\n     *\n     * @example\n     * ```ts\n     * const response = await client.intel.indicatorFeeds.data(\n     *   12,\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    data(feedId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/intel/indicator-feeds/${feedId}/data`, {\n            ...options,\n            headers: { Accept: 'text/csv', ...options?.headers },\n        });\n    }\n    /**\n     * Get indicator feed metadata\n     *\n     * @example\n     * ```ts\n     * const indicatorFeed = await client.intel.indicatorFeeds.get(\n     *   12,\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(feedId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/intel/indicator-feeds/${feedId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class IndicatorFeedListResponsesSinglePage extends SinglePage {\n}\nIndicatorFeeds.IndicatorFeedListResponsesSinglePage = IndicatorFeedListResponsesSinglePage;\nIndicatorFeeds.Snapshots = Snapshots;\nIndicatorFeeds.Permissions = Permissions;\nIndicatorFeeds.Downloads = Downloads;\n//# sourceMappingURL=indicator-feeds.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DNSAPI from \"./dns.mjs\";\nimport { DNSV4PagePagination } from \"./dns.mjs\";\nimport * as DomainHistoryAPI from \"./domain-history.mjs\";\nimport { DomainHistoryResource, } from \"./domain-history.mjs\";\nimport * as IPListsAPI from \"./ip-lists.mjs\";\nimport { IPLists, IPListsSinglePage } from \"./ip-lists.mjs\";\nimport * as IPsAPI from \"./ips.mjs\";\nimport { IPs } from \"./ips.mjs\";\nimport * as MiscategorizationsAPI from \"./miscategorizations.mjs\";\nimport { Miscategorizations, } from \"./miscategorizations.mjs\";\nimport * as SinkholesAPI from \"./sinkholes.mjs\";\nimport { Sinkholes, SinkholesSinglePage } from \"./sinkholes.mjs\";\nimport * as WhoisAPI from \"./whois.mjs\";\nimport * as ASNAPI from \"./asn/asn.mjs\";\nimport { ASN } from \"./asn/asn.mjs\";\nimport * as AttackSurfaceReportAPI from \"./attack-surface-report/attack-surface-report.mjs\";\nimport { AttackSurfaceReport } from \"./attack-surface-report/attack-surface-report.mjs\";\nimport * as DomainsAPI from \"./domains/domains.mjs\";\nimport { Domains } from \"./domains/domains.mjs\";\nimport * as IndicatorFeedsAPI from \"./indicator-feeds/indicator-feeds.mjs\";\nimport { IndicatorFeedListResponsesSinglePage, IndicatorFeeds, } from \"./indicator-feeds/indicator-feeds.mjs\";\nexport class Intel extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.asn = new ASNAPI.ASN(this._client);\n        this.dns = new DNSAPI.DNS(this._client);\n        this.domains = new DomainsAPI.Domains(this._client);\n        this.domainHistory = new DomainHistoryAPI.DomainHistoryResource(this._client);\n        this.ips = new IPsAPI.IPs(this._client);\n        this.ipLists = new IPListsAPI.IPLists(this._client);\n        this.miscategorizations = new MiscategorizationsAPI.Miscategorizations(this._client);\n        this.whois = new WhoisAPI.Whois(this._client);\n        this.indicatorFeeds = new IndicatorFeedsAPI.IndicatorFeeds(this._client);\n        this.sinkholes = new SinkholesAPI.Sinkholes(this._client);\n        this.attackSurfaceReport = new AttackSurfaceReportAPI.AttackSurfaceReport(this._client);\n    }\n}\nIntel.ASN = ASN;\nIntel.DNSV4PagePagination = DNSV4PagePagination;\nIntel.Domains = Domains;\nIntel.DomainHistoryResource = DomainHistoryResource;\nIntel.IPs = IPs;\nIntel.IPLists = IPLists;\nIntel.IPListsSinglePage = IPListsSinglePage;\nIntel.Miscategorizations = Miscategorizations;\nIntel.IndicatorFeeds = IndicatorFeeds;\nIntel.IndicatorFeedListResponsesSinglePage = IndicatorFeedListResponsesSinglePage;\nIntel.Sinkholes = Sinkholes;\nIntel.SinkholesSinglePage = SinkholesSinglePage;\nIntel.AttackSurfaceReport = AttackSurfaceReport;\n//# sourceMappingURL=intel.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Apps extends APIResource {\n    /**\n     * Creates a new App for an account\n     *\n     * @example\n     * ```ts\n     * const app = await client.magicTransit.apps.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'Cloudflare Dashboard',\n     *   type: 'Development',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/apps`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an Account App\n     *\n     * @example\n     * ```ts\n     * const app = await client.magicTransit.apps.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(accountAppId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/apps/${accountAppId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Apps associated with an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const appListResponse of client.magicTransit.apps.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/apps`, AppListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes specific Account App.\n     *\n     * @example\n     * ```ts\n     * const app = await client.magicTransit.apps.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(accountAppId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/apps/${accountAppId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an Account App\n     *\n     * @example\n     * ```ts\n     * const response = await client.magicTransit.apps.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(accountAppId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/apps/${accountAppId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AppListResponsesSinglePage extends SinglePage {\n}\nApps.AppListResponsesSinglePage = AppListResponsesSinglePage;\n//# sourceMappingURL=apps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class CfInterconnects extends APIResource {\n    /**\n     * Updates a specific interconnect associated with an account. Use\n     * `?validate_only=true` as an optional query parameter to only run validation\n     * without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const cfInterconnect =\n     *   await client.magicTransit.cfInterconnects.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(cfInterconnectId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/cf_interconnects/${cfInterconnectId}`, {\n            body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists interconnects associated with an account.\n     *\n     * @example\n     * ```ts\n     * const cfInterconnects =\n     *   await client.magicTransit.cfInterconnects.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cf_interconnects`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates multiple interconnects associated with an account. Use\n     * `?validate_only=true` as an optional query parameter to only run validation\n     * without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.magicTransit.cfInterconnects.bulkUpdate({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {},\n     *   });\n     * ```\n     */\n    bulkUpdate(params, options) {\n        const { account_id, body, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.put(`/accounts/${account_id}/magic/cf_interconnects`, {\n            body: body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists details for a specific interconnect.\n     *\n     * @example\n     * ```ts\n     * const cfInterconnect =\n     *   await client.magicTransit.cfInterconnects.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(cfInterconnectId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cf_interconnects/${cfInterconnectId}`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=cf-interconnects.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class GRETunnels extends APIResource {\n    /**\n     * Creates a new GRE tunnel. Use `?validate_only=true` as an optional query\n     * parameter to only run validation without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const greTunnel =\n     *   await client.magicTransit.greTunnels.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     cloudflare_gre_endpoint: '203.0.113.1',\n     *     customer_gre_endpoint: '203.0.113.1',\n     *     interface_address: '192.0.2.0/31',\n     *     name: 'GRE_1',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/gre_tunnels`, {\n            body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a specific GRE tunnel. Use `?validate_only=true` as an optional query\n     * parameter to only run validation without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const greTunnel =\n     *   await client.magicTransit.greTunnels.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       cloudflare_gre_endpoint: '203.0.113.1',\n     *       customer_gre_endpoint: '203.0.113.1',\n     *       interface_address: '192.0.2.0/31',\n     *       name: 'GRE_1',\n     *     },\n     *   );\n     * ```\n     */\n    update(greTunnelId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/gre_tunnels/${greTunnelId}`, {\n            body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists GRE tunnels associated with an account.\n     *\n     * @example\n     * ```ts\n     * const greTunnels =\n     *   await client.magicTransit.greTunnels.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/gre_tunnels`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disables and removes a specific static GRE tunnel. Use `?validate_only=true` as\n     * an optional query parameter to only run validation without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const greTunnel =\n     *   await client.magicTransit.greTunnels.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(greTunnelId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/gre_tunnels/${greTunnelId}`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates multiple GRE tunnels. Use `?validate_only=true` as an optional query\n     * parameter to only run validation without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.magicTransit.greTunnels.bulkUpdate({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {},\n     *   });\n     * ```\n     */\n    bulkUpdate(params, options) {\n        const { account_id, body, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.put(`/accounts/${account_id}/magic/gre_tunnels`, {\n            body: body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists informtion for a specific GRE tunnel.\n     *\n     * @example\n     * ```ts\n     * const greTunnel = await client.magicTransit.greTunnels.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(greTunnelId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/gre_tunnels/${greTunnelId}`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=gre-tunnels.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class IPSECTunnels extends APIResource {\n    /**\n     * Creates a new IPsec tunnel associated with an account. Use `?validate_only=true`\n     * as an optional query parameter to only run validation without persisting\n     * changes.\n     *\n     * @example\n     * ```ts\n     * const ipsecTunnel =\n     *   await client.magicTransit.ipsecTunnels.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     cloudflare_endpoint: '203.0.113.1',\n     *     interface_address: '192.0.2.0/31',\n     *     name: 'IPsec_1',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/ipsec_tunnels`, {\n            body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a specific IPsec tunnel associated with an account. Use\n     * `?validate_only=true` as an optional query parameter to only run validation\n     * without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const ipsecTunnel =\n     *   await client.magicTransit.ipsecTunnels.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       cloudflare_endpoint: '203.0.113.1',\n     *       interface_address: '192.0.2.0/31',\n     *       name: 'IPsec_1',\n     *     },\n     *   );\n     * ```\n     */\n    update(ipsecTunnelId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/ipsec_tunnels/${ipsecTunnelId}`, {\n            body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists IPsec tunnels associated with an account.\n     *\n     * @example\n     * ```ts\n     * const ipsecTunnels =\n     *   await client.magicTransit.ipsecTunnels.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/ipsec_tunnels`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disables and removes a specific static IPsec Tunnel associated with an account.\n     * Use `?validate_only=true` as an optional query parameter to only run validation\n     * without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const ipsecTunnel =\n     *   await client.magicTransit.ipsecTunnels.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(ipsecTunnelId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/ipsec_tunnels/${ipsecTunnelId}`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update multiple IPsec tunnels associated with an account. Use\n     * `?validate_only=true` as an optional query parameter to only run validation\n     * without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.magicTransit.ipsecTunnels.bulkUpdate({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {},\n     *   });\n     * ```\n     */\n    bulkUpdate(params, options) {\n        const { account_id, body, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.put(`/accounts/${account_id}/magic/ipsec_tunnels`, {\n            body: body,\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists details for a specific IPsec tunnel.\n     *\n     * @example\n     * ```ts\n     * const ipsecTunnel =\n     *   await client.magicTransit.ipsecTunnels.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(ipsecTunnelId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/ipsec_tunnels/${ipsecTunnelId}`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Generates a Pre Shared Key for a specific IPsec tunnel used in the IKE session.\n     * Use `?validate_only=true` as an optional query parameter to only run validation\n     * without persisting changes. After a PSK is generated, the PSK is immediately\n     * persisted to Cloudflare's edge and cannot be retrieved later. Note the PSK in a\n     * safe place.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.magicTransit.ipsecTunnels.pskGenerate(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    pskGenerate(ipsecTunnelId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/ipsec_tunnels/${ipsecTunnelId}/psk_generate`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ipsec-tunnels.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Routes extends APIResource {\n    /**\n     * Creates a new Magic static route. Use `?validate_only=true` as an optional query\n     * parameter to run validation only without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const route = await client.magicTransit.routes.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   nexthop: '203.0.113.1',\n     *   prefix: '192.0.2.0/24',\n     *   priority: 0,\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/routes`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a specific Magic static route. Use `?validate_only=true` as an optional\n     * query parameter to run validation only without persisting changes.\n     *\n     * @example\n     * ```ts\n     * const route = await client.magicTransit.routes.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     nexthop: '203.0.113.1',\n     *     prefix: '192.0.2.0/24',\n     *     priority: 0,\n     *   },\n     * );\n     * ```\n     */\n    update(routeId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/routes/${routeId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all Magic static routes.\n     *\n     * @example\n     * ```ts\n     * const routes = await client.magicTransit.routes.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/routes`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disable and remove a specific Magic static route.\n     *\n     * @example\n     * ```ts\n     * const route = await client.magicTransit.routes.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(routeId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/routes/${routeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update multiple Magic static routes. Use `?validate_only=true` as an optional\n     * query parameter to run validation only without persisting changes. Only fields\n     * for a route that need to be changed need be provided.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.magicTransit.routes.bulkUpdate({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     routes: [\n     *       {\n     *         id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *         nexthop: '203.0.113.1',\n     *         prefix: '192.0.2.0/24',\n     *         priority: 0,\n     *       },\n     *     ],\n     *   });\n     * ```\n     */\n    bulkUpdate(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/routes`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete multiple Magic static routes.\n     *\n     * @example\n     * ```ts\n     * const response = await client.magicTransit.routes.empty({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    empty(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/routes`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a specific Magic static route.\n     *\n     * @example\n     * ```ts\n     * const route = await client.magicTransit.routes.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(routeId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/routes/${routeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=routes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Latest extends APIResource {\n    /**\n     * Get latest Events\n     *\n     * @example\n     * ```ts\n     * const latests =\n     *   await client.magicTransit.connectors.events.latest.list(\n     *     'connector_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(connectorId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}/telemetry/events/latest`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=latest.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as LatestAPI from \"./latest.mjs\";\nimport { Latest } from \"./latest.mjs\";\nexport class Events extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.latest = new LatestAPI.Latest(this._client);\n    }\n    /**\n     * List Events\n     *\n     * @example\n     * ```ts\n     * const events =\n     *   await client.magicTransit.connectors.events.list(\n     *     'connector_id',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       from: 0,\n     *       to: 0,\n     *     },\n     *   );\n     * ```\n     */\n    list(connectorId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}/telemetry/events`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Event\n     *\n     * @example\n     * ```ts\n     * const event =\n     *   await client.magicTransit.connectors.events.get(\n     *     'connector_id',\n     *     0,\n     *     0,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(connectorId, eventT, eventN, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}/telemetry/events/${eventT}.${eventN}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nEvents.Latest = Latest;\n//# sourceMappingURL=events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Latest extends APIResource {\n    /**\n     * Get latest Snapshots\n     *\n     * @example\n     * ```ts\n     * const latests =\n     *   await client.magicTransit.connectors.snapshots.latest.list(\n     *     'connector_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(connectorId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}/telemetry/snapshots/latest`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=latest.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as LatestAPI from \"./latest.mjs\";\nimport { Latest } from \"./latest.mjs\";\nexport class Snapshots extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.latest = new LatestAPI.Latest(this._client);\n    }\n    /**\n     * List Snapshots\n     *\n     * @example\n     * ```ts\n     * const snapshots =\n     *   await client.magicTransit.connectors.snapshots.list(\n     *     'connector_id',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       from: 0,\n     *       to: 0,\n     *     },\n     *   );\n     * ```\n     */\n    list(connectorId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}/telemetry/snapshots`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Snapshot\n     *\n     * @example\n     * ```ts\n     * const snapshot =\n     *   await client.magicTransit.connectors.snapshots.get(\n     *     'connector_id',\n     *     0,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(connectorId, snapshotT, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}/telemetry/snapshots/${snapshotT}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nSnapshots.Latest = Latest;\n//# sourceMappingURL=snapshots.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as EventsAPI from \"./events/events.mjs\";\nimport { Events, } from \"./events/events.mjs\";\nimport * as SnapshotsAPI from \"./snapshots/snapshots.mjs\";\nimport { Snapshots, } from \"./snapshots/snapshots.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Connectors extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.events = new EventsAPI.Events(this._client);\n        this.snapshots = new SnapshotsAPI.Snapshots(this._client);\n    }\n    /**\n     * Add a connector to your account\n     *\n     * @example\n     * ```ts\n     * const connector =\n     *   await client.magicTransit.connectors.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     device: {},\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/connectors`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Replace Connector\n     *\n     * @example\n     * ```ts\n     * const connector =\n     *   await client.magicTransit.connectors.update(\n     *     'connector_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(connectorId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/connectors/${connectorId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Connectors\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const connectorListResponse of client.magicTransit.connectors.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/connectors`, ConnectorListResponsesSinglePage, options);\n    }\n    /**\n     * Remove a connector from your account\n     *\n     * @example\n     * ```ts\n     * const connector =\n     *   await client.magicTransit.connectors.delete(\n     *     'connector_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(connectorId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/connectors/${connectorId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit Connector to update specific properties\n     *\n     * @example\n     * ```ts\n     * const response = await client.magicTransit.connectors.edit(\n     *   'connector_id',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(connectorId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/connectors/${connectorId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch Connector\n     *\n     * @example\n     * ```ts\n     * const connector = await client.magicTransit.connectors.get(\n     *   'connector_id',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(connectorId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/connectors/${connectorId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ConnectorListResponsesSinglePage extends SinglePage {\n}\nConnectors.ConnectorListResponsesSinglePage = ConnectorListResponsesSinglePage;\nConnectors.Events = Events;\nConnectors.Snapshots = Snapshots;\n//# sourceMappingURL=connectors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Download extends APIResource {\n    /**\n     * Download PCAP information into a file. Response is a binary PCAP file.\n     *\n     * @example\n     * ```ts\n     * const download =\n     *   await client.magicTransit.pcaps.download.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     *\n     * const content = await download.blob();\n     * console.log(content);\n     * ```\n     */\n    get(pcapId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pcaps/${pcapId}/download`, {\n            ...options,\n            headers: { Accept: 'application/vnd.tcpdump.pcap', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=download.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class OwnershipResource extends APIResource {\n    /**\n     * Adds an AWS or GCP bucket to use with full packet captures.\n     *\n     * @example\n     * ```ts\n     * const ownership =\n     *   await client.magicTransit.pcaps.ownership.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     destination_conf: 's3://pcaps-bucket?region=us-east-1',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pcaps/ownership`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes buckets added to the packet captures API.\n     *\n     * @example\n     * ```ts\n     * await client.magicTransit.pcaps.ownership.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(ownershipId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/pcaps/ownership/${ownershipId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * List all buckets configured for use with PCAPs API.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const ownership of client.magicTransit.pcaps.ownership.get(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/pcaps/ownership`, OwnershipsSinglePage, options);\n    }\n    /**\n     * Validates buckets added to the packet captures API.\n     *\n     * @example\n     * ```ts\n     * const ownership =\n     *   await client.magicTransit.pcaps.ownership.validate({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     destination_conf: 's3://pcaps-bucket?region=us-east-1',\n     *     ownership_challenge:\n     *       'ownership-challenge-9883874ecac311ec8475433579a6bf5f.txt',\n     *   });\n     * ```\n     */\n    validate(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pcaps/ownership/validate`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OwnershipsSinglePage extends SinglePage {\n}\nOwnershipResource.OwnershipsSinglePage = OwnershipsSinglePage;\n//# sourceMappingURL=ownership.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DownloadAPI from \"./download.mjs\";\nimport { Download } from \"./download.mjs\";\nimport * as OwnershipAPI from \"./ownership.mjs\";\nimport { OwnershipResource, OwnershipsSinglePage, } from \"./ownership.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class PCAPs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.ownership = new OwnershipAPI.OwnershipResource(this._client);\n        this.download = new DownloadAPI.Download(this._client);\n    }\n    /**\n     * Create new PCAP request for account.\n     *\n     * @example\n     * ```ts\n     * const pcap = await client.magicTransit.pcaps.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   packet_limit: 10000,\n     *   system: 'magic-transit',\n     *   time_limit: 300,\n     *   type: 'simple',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pcaps`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all packet capture requests for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const pcapListResponse of client.magicTransit.pcaps.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/pcaps`, PCAPListResponsesSinglePage, options);\n    }\n    /**\n     * Get information for a PCAP request by id.\n     *\n     * @example\n     * ```ts\n     * const pcap = await client.magicTransit.pcaps.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(pcapId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pcaps/${pcapId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Stop full PCAP\n     *\n     * @example\n     * ```ts\n     * await client.magicTransit.pcaps.stop(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    stop(pcapId, params, options) {\n        const { account_id } = params;\n        return this._client.put(`/accounts/${account_id}/pcaps/${pcapId}/stop`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n}\nexport class PCAPListResponsesSinglePage extends SinglePage {\n}\nPCAPs.PCAPListResponsesSinglePage = PCAPListResponsesSinglePage;\nPCAPs.OwnershipResource = OwnershipResource;\nPCAPs.OwnershipsSinglePage = OwnershipsSinglePage;\nPCAPs.Download = Download;\n//# sourceMappingURL=pcaps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class ACLs extends APIResource {\n    /**\n     * Creates a new Site ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.magicTransit.sites.acls.create(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     lan_1: { lan_id: 'lan_id' },\n     *     lan_2: { lan_id: 'lan_id' },\n     *     name: 'PIN Pad - Cash Register',\n     *   },\n     * );\n     * ```\n     */\n    create(siteId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/sites/${siteId}/acls`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a specific Site ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.magicTransit.sites.acls.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(siteId, aclId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/sites/${siteId}/acls/${aclId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Site ACLs associated with an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const acl of client.magicTransit.sites.acls.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(siteId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/sites/${siteId}/acls`, ACLsSinglePage, options);\n    }\n    /**\n     * Remove a specific Site ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.magicTransit.sites.acls.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(siteId, aclId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/sites/${siteId}/acls/${aclId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patch a specific Site ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.magicTransit.sites.acls.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(siteId, aclId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/sites/${siteId}/acls/${aclId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a specific Site ACL.\n     *\n     * @example\n     * ```ts\n     * const acl = await client.magicTransit.sites.acls.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(siteId, aclId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/sites/${siteId}/acls/${aclId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ACLsSinglePage extends SinglePage {\n}\nACLs.ACLsSinglePage = ACLsSinglePage;\n//# sourceMappingURL=acls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class LANs extends APIResource {\n    /**\n     * Creates a new Site LAN. If the site is in high availability mode,\n     * static_addressing is required along with secondary and virtual address.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const lan of client.magicTransit.sites.lans.create(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     physport: 1,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(siteId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/sites/${siteId}/lans`, LANsSinglePage, {\n            body,\n            method: 'post',\n            ...options,\n        });\n    }\n    /**\n     * Update a specific Site LAN.\n     *\n     * @example\n     * ```ts\n     * const lan = await client.magicTransit.sites.lans.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(siteId, lanId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/sites/${siteId}/lans/${lanId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Site LANs associated with an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const lan of client.magicTransit.sites.lans.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(siteId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/sites/${siteId}/lans`, LANsSinglePage, options);\n    }\n    /**\n     * Remove a specific Site LAN.\n     *\n     * @example\n     * ```ts\n     * const lan = await client.magicTransit.sites.lans.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(siteId, lanId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/sites/${siteId}/lans/${lanId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patch a specific Site LAN.\n     *\n     * @example\n     * ```ts\n     * const lan = await client.magicTransit.sites.lans.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(siteId, lanId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/sites/${siteId}/lans/${lanId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a specific Site LAN.\n     *\n     * @example\n     * ```ts\n     * const lan = await client.magicTransit.sites.lans.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(siteId, lanId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/sites/${siteId}/lans/${lanId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class LANsSinglePage extends SinglePage {\n}\nLANs.LANsSinglePage = LANsSinglePage;\n//# sourceMappingURL=lans.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class WANs extends APIResource {\n    /**\n     * Creates a new Site WAN.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const wan of client.magicTransit.sites.wans.create(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     physport: 1,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(siteId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/sites/${siteId}/wans`, WANsSinglePage, {\n            body,\n            method: 'post',\n            ...options,\n        });\n    }\n    /**\n     * Update a specific Site WAN.\n     *\n     * @example\n     * ```ts\n     * const wan = await client.magicTransit.sites.wans.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(siteId, wanId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/sites/${siteId}/wans/${wanId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Site WANs associated with an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const wan of client.magicTransit.sites.wans.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(siteId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/sites/${siteId}/wans`, WANsSinglePage, options);\n    }\n    /**\n     * Remove a specific Site WAN.\n     *\n     * @example\n     * ```ts\n     * const wan = await client.magicTransit.sites.wans.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(siteId, wanId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/sites/${siteId}/wans/${wanId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patch a specific Site WAN.\n     *\n     * @example\n     * ```ts\n     * const wan = await client.magicTransit.sites.wans.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(siteId, wanId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/sites/${siteId}/wans/${wanId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a specific Site WAN.\n     *\n     * @example\n     * ```ts\n     * const wan = await client.magicTransit.sites.wans.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(siteId, wanId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/sites/${siteId}/wans/${wanId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WANsSinglePage extends SinglePage {\n}\nWANs.WANsSinglePage = WANsSinglePage;\n//# sourceMappingURL=wans.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ACLsAPI from \"./acls.mjs\";\nimport { ACLs, ACLsSinglePage, } from \"./acls.mjs\";\nimport * as LANsAPI from \"./lans.mjs\";\nimport { LANs, LANsSinglePage, } from \"./lans.mjs\";\nimport * as WANsAPI from \"./wans.mjs\";\nimport { WANs, WANsSinglePage, } from \"./wans.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Sites extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.acls = new ACLsAPI.ACLs(this._client);\n        this.lans = new LANsAPI.LANs(this._client);\n        this.wans = new WANsAPI.WANs(this._client);\n    }\n    /**\n     * Creates a new Site\n     *\n     * @example\n     * ```ts\n     * const site = await client.magicTransit.sites.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'site_1',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/sites`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a specific Site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.magicTransit.sites.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(siteId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/sites/${siteId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Sites associated with an account. Use connectorid query param to return\n     * sites where connectorid matches either site.ConnectorID or\n     * site.SecondaryConnectorID.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const site of client.magicTransit.sites.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/sites`, SitesSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Remove a specific Site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.magicTransit.sites.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(siteId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/sites/${siteId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patch a specific Site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.magicTransit.sites.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(siteId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/sites/${siteId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a specific Site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.magicTransit.sites.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(siteId, params, options) {\n        const { account_id, 'x-magic-new-hc-target': xMagicNewHcTarget } = params;\n        return this._client.get(`/accounts/${account_id}/magic/sites/${siteId}`, {\n            ...options,\n            headers: {\n                ...(xMagicNewHcTarget?.toString() != null ?\n                    { 'x-magic-new-hc-target': xMagicNewHcTarget?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SitesSinglePage extends SinglePage {\n}\nSites.SitesSinglePage = SitesSinglePage;\nSites.ACLs = ACLs;\nSites.ACLsSinglePage = ACLsSinglePage;\nSites.LANs = LANs;\nSites.LANsSinglePage = LANsSinglePage;\nSites.WANs = WANs;\nSites.WANsSinglePage = WANsSinglePage;\n//# sourceMappingURL=sites.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AppsAPI from \"./apps.mjs\";\nimport { AppListResponsesSinglePage, Apps, } from \"./apps.mjs\";\nimport * as CfInterconnectsAPI from \"./cf-interconnects.mjs\";\nimport { CfInterconnects, } from \"./cf-interconnects.mjs\";\nimport * as GRETunnelsAPI from \"./gre-tunnels.mjs\";\nimport { GRETunnels, } from \"./gre-tunnels.mjs\";\nimport * as IPSECTunnelsAPI from \"./ipsec-tunnels.mjs\";\nimport { IPSECTunnels, } from \"./ipsec-tunnels.mjs\";\nimport * as RoutesAPI from \"./routes.mjs\";\nimport { Routes, } from \"./routes.mjs\";\nimport * as ConnectorsAPI from \"./connectors/connectors.mjs\";\nimport { ConnectorListResponsesSinglePage, Connectors, } from \"./connectors/connectors.mjs\";\nimport * as PCAPsAPI from \"./pcaps/pcaps.mjs\";\nimport { PCAPListResponsesSinglePage, PCAPs, } from \"./pcaps/pcaps.mjs\";\nimport * as SitesAPI from \"./sites/sites.mjs\";\nimport { Sites, SitesSinglePage, } from \"./sites/sites.mjs\";\nexport class MagicTransit extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.apps = new AppsAPI.Apps(this._client);\n        this.cfInterconnects = new CfInterconnectsAPI.CfInterconnects(this._client);\n        this.greTunnels = new GRETunnelsAPI.GRETunnels(this._client);\n        this.ipsecTunnels = new IPSECTunnelsAPI.IPSECTunnels(this._client);\n        this.routes = new RoutesAPI.Routes(this._client);\n        this.sites = new SitesAPI.Sites(this._client);\n        this.connectors = new ConnectorsAPI.Connectors(this._client);\n        this.pcaps = new PCAPsAPI.PCAPs(this._client);\n    }\n}\nMagicTransit.Apps = Apps;\nMagicTransit.AppListResponsesSinglePage = AppListResponsesSinglePage;\nMagicTransit.CfInterconnects = CfInterconnects;\nMagicTransit.GRETunnels = GRETunnels;\nMagicTransit.IPSECTunnels = IPSECTunnels;\nMagicTransit.Routes = Routes;\nMagicTransit.Sites = Sites;\nMagicTransit.SitesSinglePage = SitesSinglePage;\nMagicTransit.Connectors = Connectors;\nMagicTransit.ConnectorListResponsesSinglePage = ConnectorListResponsesSinglePage;\nMagicTransit.PCAPs = PCAPs;\nMagicTransit.PCAPListResponsesSinglePage = PCAPListResponsesSinglePage;\n//# sourceMappingURL=magic-transit.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Full extends APIResource {\n    /**\n     * Lists default sampling, router IPs, warp devices, and rules for account.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.magicNetworkMonitoring.configs.full.get({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/mnm/config/full`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=full.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as FullAPI from \"./full.mjs\";\nimport { Full } from \"./full.mjs\";\nexport class Configs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.full = new FullAPI.Full(this._client);\n    }\n    /**\n     * Create a new network monitoring configuration.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.magicNetworkMonitoring.configs.create({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *     default_sampling: 1,\n     *     name: \"cloudflare user's account\",\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/mnm/config`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing network monitoring configuration, requires the entire\n     * configuration to be updated at once.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.magicNetworkMonitoring.configs.update({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *     default_sampling: 1,\n     *     name: \"cloudflare user's account\",\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/mnm/config`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete an existing network monitoring configuration.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.magicNetworkMonitoring.configs.delete({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/mnm/config`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update fields in an existing network monitoring configuration.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.magicNetworkMonitoring.configs.edit({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/mnm/config`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists default sampling, router IPs and warp devices for account.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.magicNetworkMonitoring.configs.get({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/mnm/config`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nConfigs.Full = Full;\n//# sourceMappingURL=configs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Advertisements extends APIResource {\n    /**\n     * Update advertisement for rule.\n     *\n     * @example\n     * ```ts\n     * const advertisement =\n     *   await client.magicNetworkMonitoring.rules.advertisements.edit(\n     *     '2890e6fa406311ed9b5a23f70f6fb8cf',\n     *     {\n     *       account_id: '6f91088a406011ed95aed352566e8d4c',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    edit(ruleId, params, options) {\n        const { account_id, body } = params;\n        return this._client.patch(`/accounts/${account_id}/mnm/rules/${ruleId}/advertisement`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=advertisements.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AdvertisementsAPI from \"./advertisements.mjs\";\nimport { Advertisements } from \"./advertisements.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Rules extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.advertisements = new AdvertisementsAPI.Advertisements(this._client);\n    }\n    /**\n     * Create network monitoring rules for account. Currently only supports creating a\n     * single rule per API request.\n     *\n     * @example\n     * ```ts\n     * const magicNetworkMonitoringRule =\n     *   await client.magicNetworkMonitoring.rules.create({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *     duration: '1m',\n     *     name: 'my_rule_1',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/mnm/rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update network monitoring rules for account.\n     *\n     * @example\n     * ```ts\n     * const magicNetworkMonitoringRule =\n     *   await client.magicNetworkMonitoring.rules.update({\n     *     account_id: '6f91088a406011ed95aed352566e8d4c',\n     *     duration: '1m',\n     *     name: 'my_rule_1',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/mnm/rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists network monitoring rules for account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const magicNetworkMonitoringRule of client.magicNetworkMonitoring.rules.list(\n     *   { account_id: '6f91088a406011ed95aed352566e8d4c' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/mnm/rules`, MagicNetworkMonitoringRulesSinglePage, options);\n    }\n    /**\n     * Delete a network monitoring rule for account.\n     *\n     * @example\n     * ```ts\n     * const magicNetworkMonitoringRule =\n     *   await client.magicNetworkMonitoring.rules.delete(\n     *     '2890e6fa406311ed9b5a23f70f6fb8cf',\n     *     { account_id: '6f91088a406011ed95aed352566e8d4c' },\n     *   );\n     * ```\n     */\n    delete(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/mnm/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a network monitoring rule for account.\n     *\n     * @example\n     * ```ts\n     * const magicNetworkMonitoringRule =\n     *   await client.magicNetworkMonitoring.rules.edit(\n     *     '2890e6fa406311ed9b5a23f70f6fb8cf',\n     *     { account_id: '6f91088a406011ed95aed352566e8d4c' },\n     *   );\n     * ```\n     */\n    edit(ruleId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/mnm/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List a single network monitoring rule for account.\n     *\n     * @example\n     * ```ts\n     * const magicNetworkMonitoringRule =\n     *   await client.magicNetworkMonitoring.rules.get(\n     *     '2890e6fa406311ed9b5a23f70f6fb8cf',\n     *     { account_id: '6f91088a406011ed95aed352566e8d4c' },\n     *   );\n     * ```\n     */\n    get(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/mnm/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class MagicNetworkMonitoringRulesSinglePage extends SinglePage {\n}\nRules.MagicNetworkMonitoringRulesSinglePage = MagicNetworkMonitoringRulesSinglePage;\nRules.Advertisements = Advertisements;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Tokens extends APIResource {\n    /**\n     * Generate authentication token for VPC flow logs export.\n     *\n     * @example\n     * ```ts\n     * const token =\n     *   await client.magicNetworkMonitoring.vpcFlows.tokens.create(\n     *     { account_id: '6f91088a406011ed95aed352566e8d4c' },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/mnm/vpc-flows/token`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=tokens.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TokensAPI from \"./tokens.mjs\";\nimport { Tokens } from \"./tokens.mjs\";\nexport class VPCFlows extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.tokens = new TokensAPI.Tokens(this._client);\n    }\n}\nVPCFlows.Tokens = Tokens;\n//# sourceMappingURL=vpc-flows.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConfigsAPI from \"./configs/configs.mjs\";\nimport { Configs, } from \"./configs/configs.mjs\";\nimport * as RulesAPI from \"./rules/rules.mjs\";\nimport { MagicNetworkMonitoringRulesSinglePage, Rules, } from \"./rules/rules.mjs\";\nimport * as VPCFlowsAPI from \"./vpc-flows/vpc-flows.mjs\";\nimport { VPCFlows } from \"./vpc-flows/vpc-flows.mjs\";\nexport class MagicNetworkMonitoring extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.vpcFlows = new VPCFlowsAPI.VPCFlows(this._client);\n        this.configs = new ConfigsAPI.Configs(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n    }\n}\nMagicNetworkMonitoring.VPCFlows = VPCFlows;\nMagicNetworkMonitoring.Configs = Configs;\nMagicNetworkMonitoring.Rules = Rules;\nMagicNetworkMonitoring.MagicNetworkMonitoringRulesSinglePage = MagicNetworkMonitoringRulesSinglePage;\n//# sourceMappingURL=magic-network-monitoring.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class CloudIntegrations extends APIResource {\n    /**\n     * Create a new Cloud Integration (Closed Beta).\n     */\n    create(params, options) {\n        const { account_id, forwarded, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/providers`, {\n            body,\n            ...options,\n            headers: { ...(forwarded != null ? { forwarded: forwarded } : undefined), ...options?.headers },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Cloud Integration (Closed Beta).\n     */\n    update(providerId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/cloud/providers/${providerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Cloud Integrations (Closed Beta).\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/cloud/providers`, CloudIntegrationListResponsesSinglePage, { query, ...options });\n    }\n    /**\n     * Delete a Cloud Integration (Closed Beta).\n     */\n    delete(providerId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/cloud/providers/${providerId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Run discovery for a Cloud Integration (Closed Beta).\n     */\n    discover(providerId, params, options) {\n        const { account_id, v2 } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/providers/${providerId}/discover`, {\n            query: { v2 },\n            ...options,\n        });\n    }\n    /**\n     * Run discovery for all Cloud Integrations in an account (Closed Beta).\n     */\n    discoverAll(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/providers/discover`, options);\n    }\n    /**\n     * Update a Cloud Integration (Closed Beta).\n     */\n    edit(providerId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/cloud/providers/${providerId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Read a Cloud Integration (Closed Beta).\n     */\n    get(providerId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/providers/${providerId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get initial configuration to complete Cloud Integration setup (Closed Beta).\n     */\n    initialSetup(providerId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/providers/${providerId}/initial_setup`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CloudIntegrationListResponsesSinglePage extends SinglePage {\n}\nCloudIntegrations.CloudIntegrationListResponsesSinglePage = CloudIntegrationListResponsesSinglePage;\n//# sourceMappingURL=cloud-integrations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Resources extends APIResource {\n    /**\n     * List resources in the Resource Catalog (Closed Beta).\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/cloud/resources`, ResourceListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Export resources in the Resource Catalog as a JSON file (Closed Beta).\n     */\n    export(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/resources/export`, {\n            query,\n            ...options,\n            headers: { Accept: 'application/octet-stream', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n    /**\n     * Read an resource from the Resource Catalog (Closed Beta).\n     */\n    get(resourceId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/resources/${resourceId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Preview Rego query result against the latest resource catalog (Closed Beta).\n     */\n    policyPreview(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/resources/policy-preview`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ResourceListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nResources.ResourceListResponsesV4PagePaginationArray = ResourceListResponsesV4PagePaginationArray;\n//# sourceMappingURL=resources.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class PrebuiltPolicies extends APIResource {\n    /**\n     * List prebuilt catalog sync policies (Closed Beta).\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/cloud/catalog-syncs/prebuilt-policies`, PrebuiltPolicyListResponsesSinglePage, { query, ...options });\n    }\n}\nexport class PrebuiltPolicyListResponsesSinglePage extends SinglePage {\n}\nPrebuiltPolicies.PrebuiltPolicyListResponsesSinglePage = PrebuiltPolicyListResponsesSinglePage;\n//# sourceMappingURL=prebuilt-policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as PrebuiltPoliciesAPI from \"./prebuilt-policies.mjs\";\nimport { PrebuiltPolicies, PrebuiltPolicyListResponsesSinglePage, } from \"./prebuilt-policies.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class CatalogSyncs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.prebuiltPolicies = new PrebuiltPoliciesAPI.PrebuiltPolicies(this._client);\n    }\n    /**\n     * Create a new Catalog Sync (Closed Beta).\n     */\n    create(params, options) {\n        const { account_id, forwarded, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/catalog-syncs`, {\n            body,\n            ...options,\n            headers: { ...(forwarded != null ? { forwarded: forwarded } : undefined), ...options?.headers },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Catalog Sync (Closed Beta).\n     */\n    update(syncId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/cloud/catalog-syncs/${syncId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Catalog Syncs (Closed Beta).\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/cloud/catalog-syncs`, CatalogSyncListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Catalog Sync (Closed Beta).\n     */\n    delete(syncId, params, options) {\n        const { account_id, delete_destination } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/cloud/catalog-syncs/${syncId}`, {\n            query: { delete_destination },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Catalog Sync (Closed Beta).\n     */\n    edit(syncId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/cloud/catalog-syncs/${syncId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Read a Catalog Sync (Closed Beta).\n     */\n    get(syncId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/catalog-syncs/${syncId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Refresh a Catalog Sync's destination by running the sync policy against latest\n     * resource catalog (Closed Beta).\n     */\n    refresh(syncId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/catalog-syncs/${syncId}/refresh`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CatalogSyncListResponsesSinglePage extends SinglePage {\n}\nCatalogSyncs.CatalogSyncListResponsesSinglePage = CatalogSyncListResponsesSinglePage;\nCatalogSyncs.PrebuiltPolicies = PrebuiltPolicies;\nCatalogSyncs.PrebuiltPolicyListResponsesSinglePage = PrebuiltPolicyListResponsesSinglePage;\n//# sourceMappingURL=catalog-syncs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class AddressSpaces extends APIResource {\n    /**\n     * Update the Magic WAN Address Space (Closed Beta).\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/cloud/onramps/magic_wan_address_space`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Read the Magic WAN Address Space (Closed Beta).\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/onramps/magic_wan_address_space`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update the Magic WAN Address Space (Closed Beta).\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/cloud/onramps/magic_wan_address_space`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=address-spaces.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AddressSpacesAPI from \"./address-spaces.mjs\";\nimport { AddressSpaces, } from \"./address-spaces.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class OnRamps extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.addressSpaces = new AddressSpacesAPI.AddressSpaces(this._client);\n    }\n    /**\n     * Create a new On-ramp (Closed Beta).\n     */\n    create(params, options) {\n        const { account_id, forwarded, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/onramps`, {\n            body,\n            ...options,\n            headers: { ...(forwarded != null ? { forwarded: forwarded } : undefined), ...options?.headers },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an On-ramp (Closed Beta).\n     */\n    update(onrampId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List On-ramps (Closed Beta).\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/magic/cloud/onramps`, OnRampListResponsesSinglePage, { query, ...options });\n    }\n    /**\n     * Delete an On-ramp (Closed Beta).\n     */\n    delete(onrampId, params, options) {\n        const { account_id, destroy, force } = params;\n        return this._client.delete(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}`, {\n            query: { destroy, force },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Apply an On-ramp (Closed Beta).\n     */\n    apply(onrampId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}/apply`, options);\n    }\n    /**\n     * Update an On-ramp (Closed Beta).\n     */\n    edit(onrampId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Export an On-ramp to terraform ready file(s) (Closed Beta).\n     */\n    export(onrampId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}/export`, {\n            ...options,\n            headers: { Accept: 'application/zip', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n    /**\n     * Read an On-ramp (Closed Beta).\n     */\n    get(onrampId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Plan an On-ramp (Closed Beta).\n     */\n    plan(onrampId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/magic/cloud/onramps/${onrampId}/plan`, options);\n    }\n}\nexport class OnRampListResponsesSinglePage extends SinglePage {\n}\nOnRamps.OnRampListResponsesSinglePage = OnRampListResponsesSinglePage;\nOnRamps.AddressSpaces = AddressSpaces;\n//# sourceMappingURL=on-ramps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as CloudIntegrationsAPI from \"./cloud-integrations.mjs\";\nimport { CloudIntegrationListResponsesSinglePage, CloudIntegrations, } from \"./cloud-integrations.mjs\";\nimport * as ResourcesAPI from \"./resources.mjs\";\nimport { ResourceListResponsesV4PagePaginationArray, Resources, } from \"./resources.mjs\";\nimport * as CatalogSyncsAPI from \"./catalog-syncs/catalog-syncs.mjs\";\nimport { CatalogSyncListResponsesSinglePage, CatalogSyncs, } from \"./catalog-syncs/catalog-syncs.mjs\";\nimport * as OnRampsAPI from \"./on-ramps/on-ramps.mjs\";\nimport { OnRampListResponsesSinglePage, OnRamps, } from \"./on-ramps/on-ramps.mjs\";\nexport class MagicCloudNetworking extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.catalogSyncs = new CatalogSyncsAPI.CatalogSyncs(this._client);\n        this.onRamps = new OnRampsAPI.OnRamps(this._client);\n        this.cloudIntegrations = new CloudIntegrationsAPI.CloudIntegrations(this._client);\n        this.resources = new ResourcesAPI.Resources(this._client);\n    }\n}\nMagicCloudNetworking.CatalogSyncs = CatalogSyncs;\nMagicCloudNetworking.CatalogSyncListResponsesSinglePage = CatalogSyncListResponsesSinglePage;\nMagicCloudNetworking.OnRamps = OnRamps;\nMagicCloudNetworking.OnRampListResponsesSinglePage = OnRampListResponsesSinglePage;\nMagicCloudNetworking.CloudIntegrations = CloudIntegrations;\nMagicCloudNetworking.CloudIntegrationListResponsesSinglePage = CloudIntegrationListResponsesSinglePage;\nMagicCloudNetworking.Resources = Resources;\nMagicCloudNetworking.ResourceListResponsesV4PagePaginationArray = ResourceListResponsesV4PagePaginationArray;\n//# sourceMappingURL=magic-cloud-networking.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class CNIs extends APIResource {\n    /**\n     * Create a new CNI object\n     *\n     * @example\n     * ```ts\n     * const cni = await client.networkInterconnects.cnis.create({\n     *   account_id: 'account_id',\n     *   account: 'account',\n     *   interconnect: 'interconnect',\n     *   magic: {\n     *     conduit_name: 'conduit_name',\n     *     description: 'description',\n     *     mtu: 0,\n     *   },\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cni/cnis`, { body, ...options });\n    }\n    /**\n     * Modify stored information about a CNI object\n     *\n     * @example\n     * ```ts\n     * const cni = await client.networkInterconnects.cnis.update(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   {\n     *     account_id: 'account_id',\n     *     id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     account: 'account',\n     *     cust_ip: '192.168.3.4/31',\n     *     interconnect: 'interconnect',\n     *     magic: {\n     *       conduit_name: 'conduit_name',\n     *       description: 'description',\n     *       mtu: 0,\n     *     },\n     *     p2p_ip: '192.168.3.4/31',\n     *   },\n     * );\n     * ```\n     */\n    update(cni, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cni/cnis/${cni}`, { body, ...options });\n    }\n    /**\n     * List existing CNI objects\n     *\n     * @example\n     * ```ts\n     * const cnis = await client.networkInterconnects.cnis.list({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/cni/cnis`, { query, ...options });\n    }\n    /**\n     * Delete a specified CNI object\n     *\n     * @example\n     * ```ts\n     * await client.networkInterconnects.cnis.delete(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    delete(cni, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cni/cnis/${cni}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Get information about a CNI object\n     *\n     * @example\n     * ```ts\n     * const cni = await client.networkInterconnects.cnis.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(cni, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cni/cnis/${cni}`, options);\n    }\n}\n//# sourceMappingURL=cnis.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Interconnects extends APIResource {\n    /**\n     * Create a new interconnect\n     *\n     * @example\n     * ```ts\n     * const interconnect =\n     *   await client.networkInterconnects.interconnects.create({\n     *     account_id: 'account_id',\n     *     account: 'account',\n     *     slot_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     type: 'type',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cni/interconnects`, { body, ...options });\n    }\n    /**\n     * List existing interconnects\n     *\n     * @example\n     * ```ts\n     * const interconnects =\n     *   await client.networkInterconnects.interconnects.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/cni/interconnects`, { query, ...options });\n    }\n    /**\n     * Delete an interconnect object\n     *\n     * @example\n     * ```ts\n     * await client.networkInterconnects.interconnects.delete(\n     *   'icon',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    delete(icon, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cni/interconnects/${icon}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Get information about an interconnect object\n     *\n     * @example\n     * ```ts\n     * const interconnect =\n     *   await client.networkInterconnects.interconnects.get(\n     *     'icon',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(icon, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cni/interconnects/${icon}`, options);\n    }\n    /**\n     * Generate the Letter of Authorization (LOA) for a given interconnect\n     *\n     * @example\n     * ```ts\n     * await client.networkInterconnects.interconnects.loa(\n     *   'icon',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    loa(icon, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cni/interconnects/${icon}/loa`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Get the current status of an interconnect object\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.networkInterconnects.interconnects.status(\n     *     'icon',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    status(icon, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cni/interconnects/${icon}/status`, options);\n    }\n}\n//# sourceMappingURL=interconnects.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Update the current settings for the active account\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.networkInterconnects.settings.update({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cni/settings`, { body, ...options });\n    }\n    /**\n     * Get the current settings for the active account\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.networkInterconnects.settings.get({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cni/settings`, options);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Slots extends APIResource {\n    /**\n     * Retrieve a list of all slots matching the specified parameters\n     *\n     * @example\n     * ```ts\n     * const slots = await client.networkInterconnects.slots.list({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/cni/slots`, { query, ...options });\n    }\n    /**\n     * Get information about the specified slot\n     *\n     * @example\n     * ```ts\n     * const slot = await client.networkInterconnects.slots.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(slot, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cni/slots/${slot}`, options);\n    }\n}\n//# sourceMappingURL=slots.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as CNIsAPI from \"./cnis.mjs\";\nimport { CNIs, } from \"./cnis.mjs\";\nimport * as InterconnectsAPI from \"./interconnects.mjs\";\nimport { Interconnects, } from \"./interconnects.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as SlotsAPI from \"./slots.mjs\";\nimport { Slots } from \"./slots.mjs\";\nexport class NetworkInterconnects extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.cnis = new CNIsAPI.CNIs(this._client);\n        this.interconnects = new InterconnectsAPI.Interconnects(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.slots = new SlotsAPI.Slots(this._client);\n    }\n}\nNetworkInterconnects.CNIs = CNIs;\nNetworkInterconnects.Interconnects = Interconnects;\nNetworkInterconnects.Settings = Settings;\nNetworkInterconnects.Slots = Slots;\n//# sourceMappingURL=network-interconnects.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Associations extends APIResource {\n    /**\n     * Lists all active associations between the certificate and Cloudflare services.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const certificateAsssociation of client.mtlsCertificates.associations.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(mtlsCertificateId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/mtls_certificates/${mtlsCertificateId}/associations`, CertificateAsssociationsSinglePage, options);\n    }\n}\nexport class CertificateAsssociationsSinglePage extends SinglePage {\n}\nAssociations.CertificateAsssociationsSinglePage = CertificateAsssociationsSinglePage;\n//# sourceMappingURL=associations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AssociationsAPI from \"./associations.mjs\";\nimport { Associations, CertificateAsssociationsSinglePage, } from \"./associations.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class MTLSCertificates extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.associations = new AssociationsAPI.Associations(this._client);\n    }\n    /**\n     * Upload a certificate that you want to use with mTLS-enabled Cloudflare services.\n     *\n     * @example\n     * ```ts\n     * const mtlsCertificate =\n     *   await client.mtlsCertificates.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     ca: true,\n     *     certificates:\n     *       '-----BEGIN CERTIFICATE-----\\nMIIDmDCCAoCgAwIBAgIUKTOAZNjcXVZRj4oQt0SHsl1c1vMwDQYJKoZIhvcNAQELBQAwUTELMAkGA1UEBhMCVVMxFjAUBgNVBAgMDVNhbiBGcmFuY2lzY28xEzARBgNVBAcMCkNhbGlmb3JuaWExFTATBgNVBAoMDEV4YW1wbGUgSW5jLjAgFw0yMjExMjIxNjU5NDdaGA8yMTIyMTAyOTE2NTk0N1owUTELMAkGA1UEBhMCVVMxFjAUBgNVBAgMDVNhbiBGcmFuY2lzY28xEzARBgNVBAcMCkNhbGlmb3JuaWExFTATBgNVBAoMDEV4YW1wbGUgSW5jLjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMRcORwgJFTdcG/2GKI+cFYiOBNDKjCZUXEOvXWY42BkH9wxiMT869CO+enA1w5pIrXow6kCM1sQspHHaVmJUlotEMJxyoLFfA/8Kt1EKFyobOjuZs2SwyVyJ2sStvQuUQEosULZCNGZEqoH5g6zhMPxaxm7ZLrrsDZ9maNGVqo7EWLWHrZ57Q/5MtTrbxQL+eXjUmJ9K3kS+3uEwMdqR6Z3BluU1ivanpPc1CN2GNhdO0/hSY4YkGEnuLsqJyDd3cIiB1MxuCBJ4ZaqOd2viV1WcP3oU3dxVPm4MWyfYIldMWB14FahScxLhWdRnM9YZ/i9IFcLypXsuz7DjrJPtPUCAwEAAaNmMGQwHQYDVR0OBBYEFP5JzLUawNF+c3AXsYTEWHh7z2czMB8GA1UdIwQYMBaAFP5JzLUawNF+c3AXsYTEWHh7z2czMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgEBMA0GCSqGSIb3DQEBCwUAA4IBAQBc+Be7NDhpE09y7hLPZGRPl1cSKBw4RI0XIv6rlbSTFs5EebpTGjhx/whNxwEZhB9HZ7111Oa1YlT8xkI9DshB78mjAHCKBAJ76moK8tkG0aqdYpJ4ZcJTVBB7l98Rvgc7zfTii7WemTy72deBbSeiEtXavm4EF0mWjHhQ5Nxpnp00Bqn5g1x8CyTDypgmugnep+xG+iFzNmTdsz7WI9T/7kDMXqB7M/FPWBORyS98OJqNDswCLF8bIZYwUBEe+bRHFomoShMzaC3tvim7WCb16noDkSTMlfKO4pnvKhpcVdSgwcruATV7y+W+Lvmz2OT/Gui4JhqeoTewsxndhDDE\\n-----END CERTIFICATE-----',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/mtls_certificates`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all mTLS certificates.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const mtlsCertificate of client.mtlsCertificates.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/mtls_certificates`, MTLSCertificatesSinglePage, options);\n    }\n    /**\n     * Deletes the mTLS certificate unless the certificate is in use by one or more\n     * Cloudflare services.\n     *\n     * @example\n     * ```ts\n     * const mtlsCertificate =\n     *   await client.mtlsCertificates.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(mtlsCertificateId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/mtls_certificates/${mtlsCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single mTLS certificate.\n     *\n     * @example\n     * ```ts\n     * const mtlsCertificate = await client.mtlsCertificates.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(mtlsCertificateId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/mtls_certificates/${mtlsCertificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class MTLSCertificatesSinglePage extends SinglePage {\n}\nMTLSCertificates.MTLSCertificatesSinglePage = MTLSCertificatesSinglePage;\nMTLSCertificates.Associations = Associations;\nMTLSCertificates.CertificateAsssociationsSinglePage = CertificateAsssociationsSinglePage;\n//# sourceMappingURL=mtls-certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Domains extends APIResource {\n    /**\n     * Add a new domain for the Pages project.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.pages.projects.domains.create(\n     *   'this-is-my-project-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    create(projectName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pages/projects/${projectName}/domains`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a list of all domains associated with a Pages project.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const domainListResponse of client.pages.projects.domains.list(\n     *   'this-is-my-project-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(projectName, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/pages/projects/${projectName}/domains`, DomainListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Pages project's domain.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.pages.projects.domains.delete(\n     *   'this-is-my-project-01',\n     *   'this-is-my-domain-01.com',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(projectName, domainName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/pages/projects/${projectName}/domains/${domainName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retry the validation status of a single domain.\n     *\n     * @example\n     * ```ts\n     * const response = await client.pages.projects.domains.edit(\n     *   'this-is-my-project-01',\n     *   'this-is-my-domain-01.com',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {},\n     *   },\n     * );\n     * ```\n     */\n    edit(projectName, domainName, params, options) {\n        const { account_id, body } = params;\n        return this._client.patch(`/accounts/${account_id}/pages/projects/${projectName}/domains/${domainName}`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single domain.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.pages.projects.domains.get(\n     *   'this-is-my-project-01',\n     *   'this-is-my-domain-01.com',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(projectName, domainName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pages/projects/${projectName}/domains/${domainName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DomainListResponsesSinglePage extends SinglePage {\n}\nDomains.DomainListResponsesSinglePage = DomainListResponsesSinglePage;\n//# sourceMappingURL=domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nexport class Logs extends APIResource {\n    /**\n     * Fetch deployment logs for a project.\n     *\n     * @example\n     * ```ts\n     * const log =\n     *   await client.pages.projects.deployments.history.logs.get(\n     *     'this-is-my-project-01',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(projectName, deploymentId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pages/projects/${projectName}/deployments/${deploymentId}/history/logs`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as LogsAPI from \"./logs.mjs\";\nimport { Logs } from \"./logs.mjs\";\nexport class History extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.logs = new LogsAPI.Logs(this._client);\n    }\n}\nHistory.Logs = Logs;\n//# sourceMappingURL=history.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as Core from \"../../../../core.mjs\";\nimport { DeploymentsSinglePage } from \"../projects.mjs\";\nimport * as HistoryAPI from \"./history/history.mjs\";\nimport { History } from \"./history/history.mjs\";\nexport class Deployments extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.history = new HistoryAPI.History(this._client);\n    }\n    /**\n     * Start a new deployment from production. The repository and account must have\n     * already been authorized on the Cloudflare Pages dashboard.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.pages.projects.deployments.create(\n     *     'this-is-my-project-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(projectName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pages/projects/${projectName}/deployments`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a list of project deployments.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deployment of client.pages.projects.deployments.list(\n     *   'this-is-my-project-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(projectName, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/pages/projects/${projectName}/deployments`, DeploymentsSinglePage, { query, ...options });\n    }\n    /**\n     * Delete a deployment.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.pages.projects.deployments.delete(\n     *     'this-is-my-project-01',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(projectName, deploymentId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/pages/projects/${projectName}/deployments/${deploymentId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch information about a deployment.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.pages.projects.deployments.get(\n     *     'this-is-my-project-01',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(projectName, deploymentId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pages/projects/${projectName}/deployments/${deploymentId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retry a previous deployment.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.pages.projects.deployments.retry(\n     *     'this-is-my-project-01',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    retry(projectName, deploymentId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/pages/projects/${projectName}/deployments/${deploymentId}/retry`, { body: body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Rollback the production deployment to a previous deployment. You can only\n     * rollback to succesful builds on production.\n     *\n     * @example\n     * ```ts\n     * const deployment =\n     *   await client.pages.projects.deployments.rollback(\n     *     'this-is-my-project-01',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    rollback(projectName, deploymentId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/pages/projects/${projectName}/deployments/${deploymentId}/rollback`, { body: body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nDeployments.History = History;\nexport { DeploymentsSinglePage };\n//# sourceMappingURL=deployments.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DomainsAPI from \"./domains.mjs\";\nimport { DomainListResponsesSinglePage, Domains, } from \"./domains.mjs\";\nimport * as DeploymentsAPI from \"./deployments/deployments.mjs\";\nimport { Deployments, } from \"./deployments/deployments.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Projects extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.deployments = new DeploymentsAPI.Deployments(this._client);\n        this.domains = new DomainsAPI.Domains(this._client);\n    }\n    /**\n     * Create a new project.\n     *\n     * @example\n     * ```ts\n     * const project = await client.pages.projects.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pages/projects`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a list of all user projects.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deployment of client.pages.projects.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/pages/projects`, DeploymentsSinglePage, options);\n    }\n    /**\n     * Delete a project by name.\n     *\n     * @example\n     * ```ts\n     * const project = await client.pages.projects.delete(\n     *   'this-is-my-project-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(projectName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/pages/projects/${projectName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Set new attributes for an existing project. Modify environment variables. To\n     * delete an environment variable, set the key to null.\n     *\n     * @example\n     * ```ts\n     * const project = await client.pages.projects.edit(\n     *   'this-is-my-project-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(projectName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/pages/projects/${projectName}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a project by name.\n     *\n     * @example\n     * ```ts\n     * const project = await client.pages.projects.get(\n     *   'this-is-my-project-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(projectName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pages/projects/${projectName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Purge all cached build artifacts for a Pages project\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.pages.projects.purgeBuildCache(\n     *     'this-is-my-project-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    purgeBuildCache(projectName, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/pages/projects/${projectName}/purge_build_cache`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DeploymentsSinglePage extends SinglePage {\n}\nProjects.DeploymentsSinglePage = DeploymentsSinglePage;\nProjects.Deployments = Deployments;\nProjects.Domains = Domains;\nProjects.DomainListResponsesSinglePage = DomainListResponsesSinglePage;\n//# sourceMappingURL=projects.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ProjectsAPI from \"./projects/projects.mjs\";\nimport { DeploymentsSinglePage, Projects, } from \"./projects/projects.mjs\";\nexport class Pages extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.projects = new ProjectsAPI.Projects(this._client);\n    }\n}\nPages.Projects = Projects;\nPages.DeploymentsSinglePage = DeploymentsSinglePage;\n//# sourceMappingURL=pages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Domains extends APIResource {\n    /**\n     * Update individual domain.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.registrar.domains.update(\n     *   'cloudflare.com',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(domainName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/registrar/domains/${domainName}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List domains handled by Registrar.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const domain of client.registrar.domains.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/registrar/domains`, DomainsSinglePage, options);\n    }\n    /**\n     * Show individual domain.\n     *\n     * @example\n     * ```ts\n     * const domain = await client.registrar.domains.get(\n     *   'cloudflare.com',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(domainName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/registrar/domains/${domainName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DomainsSinglePage extends SinglePage {\n}\nDomains.DomainsSinglePage = DomainsSinglePage;\n//# sourceMappingURL=domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DomainsAPI from \"./domains.mjs\";\nimport { Domains, DomainsSinglePage, } from \"./domains.mjs\";\nexport class Registrar extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.domains = new DomainsAPI.Domains(this._client);\n    }\n}\nRegistrar.Domains = Domains;\nRegistrar.DomainsSinglePage = DomainsSinglePage;\n//# sourceMappingURL=registrar.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Traces extends APIResource {\n    /**\n     * Request Trace\n     *\n     * @example\n     * ```ts\n     * const trace = await client.requestTracers.traces.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   method: 'PUT',\n     *   url: 'https://some.zone/some_path',\n     *   body: { base64: 'c29tZV9yZXF1ZXN0X2JvZHk=' },\n     *   context: {\n     *     geoloc: { city: 'London' },\n     *     skip_challenge: true,\n     *   },\n     *   cookies: {\n     *     cookie_name_1: 'cookie_value_1',\n     *     cookie_name_2: 'cookie_value_2',\n     *   },\n     *   headers: {\n     *     header_name_1: 'header_value_1',\n     *     header_name_2: 'header_value_2',\n     *   },\n     *   protocol: 'HTTP/1.1',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/request-tracer/trace`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=traces.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as TracesAPI from \"./traces.mjs\";\nimport { Traces } from \"./traces.mjs\";\nexport class RequestTracers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.traces = new TracesAPI.Traces(this._client);\n    }\n}\nRequestTracers.Traces = Traces;\n//# sourceMappingURL=request-tracers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class BulkOperations extends APIResource {\n    /**\n     * Gets the current status of an asynchronous operation on a list.\n     *\n     * The `status` property can have one of the following values: `pending`,\n     * `running`, `completed`, or `failed`. If the status is `failed`, the `error`\n     * property will contain a message describing the error.\n     *\n     * @example\n     * ```ts\n     * const bulkOperation =\n     *   await client.rules.lists.bulkOperations.get(\n     *     '4da8780eeb215e6cb7f48dd981c4ea02',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(operationId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/rules/lists/bulk_operations/${operationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bulk-operations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { CursorPaginationAfter } from \"../../../pagination.mjs\";\nexport class Items extends APIResource {\n    /**\n     * Appends new items to the list.\n     *\n     * This operation is asynchronous. To get current the operation status, invoke the\n     * `Get bulk operation status` endpoint with the returned `operation_id`.\n     *\n     * @example\n     * ```ts\n     * const item = await client.rules.lists.items.create(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ ip: '10.0.0.1' }],\n     *   },\n     * );\n     * ```\n     */\n    create(listId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/rules/lists/${listId}/items`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Removes all existing items from the list and adds the provided items to the\n     * list.\n     *\n     * This operation is asynchronous. To get current the operation status, invoke the\n     * `Get bulk operation status` endpoint with the returned `operation_id`.\n     *\n     * @example\n     * ```ts\n     * const item = await client.rules.lists.items.update(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ ip: '10.0.0.1' }],\n     *   },\n     * );\n     * ```\n     */\n    update(listId, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/rules/lists/${listId}/items`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches all the items in the list.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const itemListResponse of client.rules.lists.items.list(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(listId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/rules/lists/${listId}/items`, ItemListResponsesCursorPaginationAfter, { query, ...options });\n    }\n    /**\n     * Removes one or more items from a list.\n     *\n     * This operation is asynchronous. To get current the operation status, invoke the\n     * `Get bulk operation status` endpoint with the returned `operation_id`.\n     *\n     * @example\n     * ```ts\n     * const item = await client.rules.lists.items.delete(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(listId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.delete(`/accounts/${account_id}/rules/lists/${listId}/items`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a list item in the list.\n     *\n     * @example\n     * ```ts\n     * const item = await client.rules.lists.items.get(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   '34b12448945f11eaa1b71c4d701ab86e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(listId, itemId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/rules/lists/${listId}/items/${itemId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ItemListResponsesCursorPaginationAfter extends CursorPaginationAfter {\n}\nItems.ItemListResponsesCursorPaginationAfter = ItemListResponsesCursorPaginationAfter;\n//# sourceMappingURL=items.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as BulkOperationsAPI from \"./bulk-operations.mjs\";\nimport { BulkOperations } from \"./bulk-operations.mjs\";\nimport * as ItemsAPI from \"./items.mjs\";\nimport { ItemListResponsesCursorPaginationAfter, Items, } from \"./items.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Lists extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.bulkOperations = new BulkOperationsAPI.BulkOperations(this._client);\n        this.items = new ItemsAPI.Items(this._client);\n    }\n    /**\n     * Creates a new list of the specified kind.\n     *\n     * @example\n     * ```ts\n     * const list = await client.rules.lists.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   kind: 'ip',\n     *   name: 'list1',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/rules/lists`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates the description of a list.\n     *\n     * @example\n     * ```ts\n     * const list = await client.rules.lists.update(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(listId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/rules/lists/${listId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches all lists in the account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const listsList of client.rules.lists.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/rules/lists`, ListsListsSinglePage, options);\n    }\n    /**\n     * Deletes a specific list and all its items.\n     *\n     * @example\n     * ```ts\n     * const list = await client.rules.lists.delete(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(listId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/rules/lists/${listId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the details of a list.\n     *\n     * @example\n     * ```ts\n     * const list = await client.rules.lists.get(\n     *   '2c0fc9fa937b11eaa1b71c4d701ab86e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(listId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/rules/lists/${listId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ListsListsSinglePage extends SinglePage {\n}\nLists.ListsListsSinglePage = ListsListsSinglePage;\nLists.BulkOperations = BulkOperations;\nLists.Items = Items;\nLists.ItemListResponsesCursorPaginationAfter = ItemListResponsesCursorPaginationAfter;\n//# sourceMappingURL=lists.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ListsAPI from \"./lists/lists.mjs\";\nimport { Lists, ListsListsSinglePage, } from \"./lists/lists.mjs\";\nexport class Rules extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.lists = new ListsAPI.Lists(this._client);\n    }\n}\nRules.Lists = Lists;\nRules.ListsListsSinglePage = ListsListsSinglePage;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class AudioTracks extends APIResource {\n    /**\n     * Deletes additional audio tracks on a video. Deleting a default audio track is\n     * not allowed. You must assign another audio track as default prior to deletion.\n     *\n     * @example\n     * ```ts\n     * const audioTrack = await client.stream.audioTracks.delete(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(identifier, audioIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/${identifier}/audio/${audioIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Adds an additional audio track to a video using the provided audio track URL.\n     *\n     * @example\n     * ```ts\n     * const audio = await client.stream.audioTracks.copy(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     label: 'director commentary',\n     *   },\n     * );\n     * ```\n     */\n    copy(identifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/${identifier}/audio/copy`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edits additional audio tracks on a video. Editing the default status of an audio\n     * track to `true` will mark all other audio tracks on the video default status to\n     * `false`.\n     *\n     * @example\n     * ```ts\n     * const audio = await client.stream.audioTracks.edit(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(identifier, audioIdentifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/stream/${identifier}/audio/${audioIdentifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists additional audio tracks on a video. Note this API will not return\n     * information for audio attached to the video upload.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const audio of client.stream.audioTracks.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/stream/${identifier}/audio`, AudioSinglePage, options);\n    }\n}\nexport class AudioSinglePage extends SinglePage {\n}\nAudioTracks.AudioSinglePage = AudioSinglePage;\n//# sourceMappingURL=audio-tracks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class ClipResource extends APIResource {\n    /**\n     * Clips a video based on the specified start and end times provided in seconds.\n     *\n     * @example\n     * ```ts\n     * const clip = await client.stream.clip.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   clippedFromVideoUID: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   endTimeSeconds: 0,\n     *   startTimeSeconds: 0,\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/clip`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=clip.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Copy extends APIResource {\n    /**\n     * Uploads a video to Stream from a provided URL.\n     *\n     * @example\n     * ```ts\n     * const video = await client.stream.copy.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   url: 'https://example.com/myvideo.mp4',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, 'Upload-Creator': uploadCreator, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/copy`, {\n            body,\n            ...options,\n            headers: {\n                ...(uploadCreator != null ? { 'Upload-Creator': uploadCreator } : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=copy.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class DirectUpload extends APIResource {\n    /**\n     * Creates a direct upload that allows video uploads without an API key.\n     *\n     * @example\n     * ```ts\n     * const directUpload =\n     *   await client.stream.directUpload.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     maxDurationSeconds: 1,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, 'Upload-Creator': uploadCreator, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/direct_upload`, {\n            body,\n            ...options,\n            headers: {\n                ...(uploadCreator != null ? { 'Upload-Creator': uploadCreator } : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=direct-upload.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Downloads extends APIResource {\n    /**\n     * Creates a download for a video when a video is ready to view.\n     *\n     * @example\n     * ```ts\n     * const download = await client.stream.downloads.create(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: {},\n     *   },\n     * );\n     * ```\n     */\n    create(identifier, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/${identifier}/downloads`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete the downloads for a video.\n     *\n     * @example\n     * ```ts\n     * const download = await client.stream.downloads.delete(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/${identifier}/downloads`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists the downloads created for a video.\n     *\n     * @example\n     * ```ts\n     * const download = await client.stream.downloads.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/${identifier}/downloads`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=downloads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Embed extends APIResource {\n    /**\n     * Fetches an HTML code snippet to embed a video in a web page delivered through\n     * Cloudflare. On success, returns an HTML fragment for use on web pages to display\n     * a video. On failure, returns a JSON response body.\n     *\n     * @example\n     * ```ts\n     * const embed = await client.stream.embed.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/${identifier}/embed`, options);\n    }\n}\n//# sourceMappingURL=embed.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Keys extends APIResource {\n    /**\n     * Creates an RSA private key in PEM and JWK formats. Key files are only displayed\n     * once after creation. Keys are created, used, and deleted independently of\n     * videos, and every key can sign any video.\n     *\n     * @example\n     * ```ts\n     * const keys = await client.stream.keys.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   body: {},\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/keys`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes signing keys and revokes all signed URLs generated with the key.\n     *\n     * @example\n     * ```ts\n     * const key = await client.stream.keys.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/keys/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists the video ID and creation date and time when a signing key was created.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const keyGetResponse of client.stream.keys.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/stream/keys`, KeyGetResponsesSinglePage, options);\n    }\n}\nexport class KeyGetResponsesSinglePage extends SinglePage {\n}\nKeys.KeyGetResponsesSinglePage = KeyGetResponsesSinglePage;\n//# sourceMappingURL=keys.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Token extends APIResource {\n    /**\n     * Creates a signed URL token for a video. If a body is not provided in the\n     * request, a token is created with default values.\n     *\n     * @example\n     * ```ts\n     * const token = await client.stream.token.create(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    create(identifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/${identifier}/token`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=token.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Videos extends APIResource {\n    /**\n     * Returns information about an account's storage use.\n     *\n     * @example\n     * ```ts\n     * const response = await client.stream.videos.storageUsage({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    storageUsage(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/stream/storage-usage`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=videos.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Watermarks extends APIResource {\n    /**\n     * Creates watermark profiles using a single `HTTP POST multipart/form-data`\n     * request.\n     *\n     * @example\n     * ```ts\n     * const watermark = await client.stream.watermarks.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   file: '@/Users/rchen/Downloads/watermark.png',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/watermarks`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all watermark profiles for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const watermark of client.stream.watermarks.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/stream/watermarks`, WatermarksSinglePage, options);\n    }\n    /**\n     * Deletes a watermark profile.\n     *\n     * @example\n     * ```ts\n     * const watermark = await client.stream.watermarks.delete(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/watermarks/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves details for a single watermark profile.\n     *\n     * @example\n     * ```ts\n     * const watermark = await client.stream.watermarks.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/watermarks/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WatermarksSinglePage extends SinglePage {\n}\nWatermarks.WatermarksSinglePage = WatermarksSinglePage;\n//# sourceMappingURL=watermarks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Webhooks extends APIResource {\n    /**\n     * Creates a webhook notification.\n     *\n     * @example\n     * ```ts\n     * const webhook = await client.stream.webhooks.update({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   notificationUrl: 'https://example.com',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/stream/webhook`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a webhook.\n     *\n     * @example\n     * ```ts\n     * const webhook = await client.stream.webhooks.delete({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/webhook`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves a list of webhooks.\n     *\n     * @example\n     * ```ts\n     * const webhook = await client.stream.webhooks.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/webhook`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=webhooks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Vtt extends APIResource {\n    /**\n     * Return WebVTT captions for a provided language.\n     *\n     * @example\n     * ```ts\n     * const vtt = await client.stream.captions.language.vtt.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   'tr',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, language, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/${identifier}/captions/${language}/vtt`, {\n            ...options,\n            headers: { Accept: 'text/vtt', ...options?.headers },\n        });\n    }\n}\n//# sourceMappingURL=vtt.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as Core from \"../../../../core.mjs\";\nimport * as VttAPI from \"./vtt.mjs\";\nimport { Vtt } from \"./vtt.mjs\";\nexport class Language extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.vtt = new VttAPI.Vtt(this._client);\n    }\n    /**\n     * Generate captions or subtitles for provided language via AI.\n     *\n     * @example\n     * ```ts\n     * const caption =\n     *   await client.stream.captions.language.create(\n     *     'ea95132c15732412d22c1476fa83f27a',\n     *     'tr',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(identifier, language, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/stream/${identifier}/captions/${language}/generate`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Uploads the caption or subtitle file to the endpoint for a specific BCP47\n     * language. One caption or subtitle file per language is allowed.\n     *\n     * @example\n     * ```ts\n     * const caption =\n     *   await client.stream.captions.language.update(\n     *     'ea95132c15732412d22c1476fa83f27a',\n     *     'tr',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       file: '@/Users/kyle/Desktop/tr.vtt',\n     *     },\n     *   );\n     * ```\n     */\n    update(identifier, language, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/stream/${identifier}/captions/${language}`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Removes the captions or subtitles from a video.\n     *\n     * @example\n     * ```ts\n     * const language =\n     *   await client.stream.captions.language.delete(\n     *     'ea95132c15732412d22c1476fa83f27a',\n     *     'tr',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(identifier, language, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/${identifier}/captions/${language}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists the captions or subtitles for provided language.\n     *\n     * @example\n     * ```ts\n     * const caption = await client.stream.captions.language.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   'tr',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, language, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/${identifier}/captions/${language}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nLanguage.Vtt = Vtt;\n//# sourceMappingURL=language.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as LanguageAPI from \"./language/language.mjs\";\nimport { Language, } from \"./language/language.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Captions extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.language = new LanguageAPI.Language(this._client);\n    }\n    /**\n     * Lists the available captions or subtitles for a specific video.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const caption of client.stream.captions.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/stream/${identifier}/captions`, CaptionsSinglePage, options);\n    }\n}\nexport class CaptionsSinglePage extends SinglePage {\n}\nCaptions.CaptionsSinglePage = CaptionsSinglePage;\nCaptions.Language = Language;\n//# sourceMappingURL=captions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Outputs extends APIResource {\n    /**\n     * Creates a new output that can be used to simulcast or restream live video to\n     * other RTMP or SRT destinations. Outputs are always linked to a specific live\n     * input — one live input can have many outputs.\n     *\n     * @example\n     * ```ts\n     * const output =\n     *   await client.stream.liveInputs.outputs.create(\n     *     '66be4bf738797e01e1fca35a7bdecdcd',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       streamKey: 'uzya-f19y-g2g9-a2ee-51j2',\n     *       url: 'rtmp://a.rtmp.youtube.com/live2',\n     *     },\n     *   );\n     * ```\n     */\n    create(liveInputIdentifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}/outputs`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates the state of an output.\n     *\n     * @example\n     * ```ts\n     * const output =\n     *   await client.stream.liveInputs.outputs.update(\n     *     '66be4bf738797e01e1fca35a7bdecdcd',\n     *     'baea4d9c515887b80289d5c33cf01145',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       enabled: true,\n     *     },\n     *   );\n     * ```\n     */\n    update(liveInputIdentifier, outputIdentifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}/outputs/${outputIdentifier}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves all outputs associated with a specified live input.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const output of client.stream.liveInputs.outputs.list(\n     *   '66be4bf738797e01e1fca35a7bdecdcd',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(liveInputIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}/outputs`, OutputsSinglePage, options);\n    }\n    /**\n     * Deletes an output and removes it from the associated live input.\n     *\n     * @example\n     * ```ts\n     * await client.stream.liveInputs.outputs.delete(\n     *   '66be4bf738797e01e1fca35a7bdecdcd',\n     *   'baea4d9c515887b80289d5c33cf01145',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(liveInputIdentifier, outputIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}/outputs/${outputIdentifier}`, { ...options, headers: { Accept: '*/*', ...options?.headers } });\n    }\n}\nexport class OutputsSinglePage extends SinglePage {\n}\nOutputs.OutputsSinglePage = OutputsSinglePage;\n//# sourceMappingURL=outputs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as OutputsAPI from \"./outputs.mjs\";\nimport { Outputs, OutputsSinglePage, } from \"./outputs.mjs\";\nexport class LiveInputs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.outputs = new OutputsAPI.Outputs(this._client);\n    }\n    /**\n     * Creates a live input, and returns credentials that you or your users can use to\n     * stream live video to Cloudflare Stream.\n     *\n     * @example\n     * ```ts\n     * const liveInput = await client.stream.liveInputs.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/live_inputs`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a specified live input.\n     *\n     * @example\n     * ```ts\n     * const liveInput = await client.stream.liveInputs.update(\n     *   '66be4bf738797e01e1fca35a7bdecdcd',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(liveInputIdentifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists the live inputs created for an account. To get the credentials needed to\n     * stream to a specific live input, request a single live input.\n     *\n     * @example\n     * ```ts\n     * const liveInputs = await client.stream.liveInputs.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/stream/live_inputs`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Prevents a live input from being streamed to and makes the live input\n     * inaccessible to any future API calls.\n     *\n     * @example\n     * ```ts\n     * await client.stream.liveInputs.delete(\n     *   '66be4bf738797e01e1fca35a7bdecdcd',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(liveInputIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Retrieves details of an existing live input.\n     *\n     * @example\n     * ```ts\n     * const liveInput = await client.stream.liveInputs.get(\n     *   '66be4bf738797e01e1fca35a7bdecdcd',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(liveInputIdentifier, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/live_inputs/${liveInputIdentifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nLiveInputs.Outputs = Outputs;\nLiveInputs.OutputsSinglePage = OutputsSinglePage;\n//# sourceMappingURL=live-inputs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AudioTracksAPI from \"./audio-tracks.mjs\";\nimport { AudioSinglePage, AudioTracks, } from \"./audio-tracks.mjs\";\nimport * as ClipAPI from \"./clip.mjs\";\nimport { ClipResource } from \"./clip.mjs\";\nimport * as CopyAPI from \"./copy.mjs\";\nimport { Copy } from \"./copy.mjs\";\nimport * as DirectUploadAPI from \"./direct-upload.mjs\";\nimport { DirectUpload } from \"./direct-upload.mjs\";\nimport * as DownloadsAPI from \"./downloads.mjs\";\nimport { Downloads, } from \"./downloads.mjs\";\nimport * as EmbedAPI from \"./embed.mjs\";\nimport { Embed } from \"./embed.mjs\";\nimport * as KeysAPI from \"./keys.mjs\";\nimport { KeyGetResponsesSinglePage, } from \"./keys.mjs\";\nimport * as TokenAPI from \"./token.mjs\";\nimport { Token } from \"./token.mjs\";\nimport * as VideosAPI from \"./videos.mjs\";\nimport { Videos } from \"./videos.mjs\";\nimport * as WatermarksAPI from \"./watermarks.mjs\";\nimport { Watermarks, WatermarksSinglePage, } from \"./watermarks.mjs\";\nimport * as WebhooksAPI from \"./webhooks.mjs\";\nimport { Webhooks, } from \"./webhooks.mjs\";\nimport * as CaptionsAPI from \"./captions/captions.mjs\";\nimport { Captions, CaptionsSinglePage } from \"./captions/captions.mjs\";\nimport * as LiveInputsAPI from \"./live-inputs/live-inputs.mjs\";\nimport { LiveInputs, } from \"./live-inputs/live-inputs.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Stream extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.audioTracks = new AudioTracksAPI.AudioTracks(this._client);\n        this.videos = new VideosAPI.Videos(this._client);\n        this.clip = new ClipAPI.ClipResource(this._client);\n        this.copy = new CopyAPI.Copy(this._client);\n        this.directUpload = new DirectUploadAPI.DirectUpload(this._client);\n        this.keys = new KeysAPI.Keys(this._client);\n        this.liveInputs = new LiveInputsAPI.LiveInputs(this._client);\n        this.watermarks = new WatermarksAPI.Watermarks(this._client);\n        this.webhooks = new WebhooksAPI.Webhooks(this._client);\n        this.captions = new CaptionsAPI.Captions(this._client);\n        this.downloads = new DownloadsAPI.Downloads(this._client);\n        this.embed = new EmbedAPI.Embed(this._client);\n        this.token = new TokenAPI.Token(this._client);\n    }\n    /**\n     * Initiates a video upload using the TUS protocol. On success, the server responds\n     * with a status code 201 (created) and includes a `location` header to indicate\n     * where the content should be uploaded. Refer to https://tus.io for protocol\n     * details.\n     *\n     * @example\n     * ```ts\n     * await client.stream.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   body: {},\n     *   'Tus-Resumable': '1.0.0',\n     *   'Upload-Length': 0,\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, body, 'Tus-Resumable': tusResumable, 'Upload-Length': uploadLength, direct_user, 'Upload-Creator': uploadCreator, 'Upload-Metadata': uploadMetadata, } = params;\n        return this._client.post(`/accounts/${account_id}/stream`, {\n            query: { direct_user },\n            body: body,\n            ...options,\n            headers: {\n                Accept: '*/*',\n                'Tus-Resumable': tusResumable.toString(),\n                'Upload-Length': uploadLength.toString(),\n                ...(uploadCreator != null ? { 'Upload-Creator': uploadCreator } : undefined),\n                ...(uploadMetadata != null ? { 'Upload-Metadata': uploadMetadata } : undefined),\n                ...options?.headers,\n            },\n        });\n    }\n    /**\n     * Lists up to 1000 videos from a single request. For a specific range, refer to\n     * the optional parameters.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const video of client.stream.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/stream`, VideosSinglePage, { query, ...options });\n    }\n    /**\n     * Deletes a video and its copies from Cloudflare Stream.\n     *\n     * @example\n     * ```ts\n     * await client.stream.delete(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/stream/${identifier}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Edit details for a single video.\n     *\n     * @example\n     * ```ts\n     * const video = await client.stream.edit(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(identifier, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/stream/${identifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches details for a single video.\n     *\n     * @example\n     * ```ts\n     * const video = await client.stream.get(\n     *   'ea95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(identifier, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/stream/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VideosSinglePage extends SinglePage {\n}\nStream.VideosSinglePage = VideosSinglePage;\nStream.AudioTracks = AudioTracks;\nStream.AudioSinglePage = AudioSinglePage;\nStream.Videos = Videos;\nStream.ClipResource = ClipResource;\nStream.Copy = Copy;\nStream.DirectUpload = DirectUpload;\nStream.KeyGetResponsesSinglePage = KeyGetResponsesSinglePage;\nStream.LiveInputs = LiveInputs;\nStream.Watermarks = Watermarks;\nStream.WatermarksSinglePage = WatermarksSinglePage;\nStream.Webhooks = Webhooks;\nStream.Captions = Captions;\nStream.CaptionsSinglePage = CaptionsSinglePage;\nStream.Downloads = Downloads;\nStream.Embed = Embed;\nStream.Token = Token;\n//# sourceMappingURL=stream.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class AvailableAlerts extends APIResource {\n    /**\n     * Gets a list of all alert types for which an account is eligible.\n     *\n     * @example\n     * ```ts\n     * const availableAlerts =\n     *   await client.alerting.availableAlerts.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/alerting/v3/available_alerts`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=available-alerts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class HistoryResource extends APIResource {\n    /**\n     * Gets a list of history records for notifications sent to an account. The records\n     * are displayed for last `x` number of days based on the zone plan (free = 30, pro\n     * = 30, biz = 30, ent = 90).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const history of client.alerting.history.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/alerting/v3/history`, HistoriesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class HistoriesV4PagePaginationArray extends V4PagePaginationArray {\n}\nHistoryResource.HistoriesV4PagePaginationArray = HistoriesV4PagePaginationArray;\n//# sourceMappingURL=history.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Policies extends APIResource {\n    /**\n     * Creates a new Notification policy.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.alerting.policies.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   alert_type: 'universal_ssl_event_type',\n     *   enabled: true,\n     *   mechanisms: {},\n     *   name: 'SSL Notification Event Policy',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/alerting/v3/policies`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Notification policy.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.alerting.policies.update(\n     *   '0da2b59e-f118-439d-8097-bdfb215203c9',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(policyId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/alerting/v3/policies/${policyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a list of all Notification policies.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const policy of client.alerting.policies.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/alerting/v3/policies`, PoliciesSinglePage, options);\n    }\n    /**\n     * Delete a Notification policy.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.alerting.policies.delete(\n     *   '0da2b59e-f118-439d-8097-bdfb215203c9',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/alerting/v3/policies/${policyId}`, options);\n    }\n    /**\n     * Get details for a single policy.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.alerting.policies.get(\n     *   '0da2b59e-f118-439d-8097-bdfb215203c9',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/alerting/v3/policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PoliciesSinglePage extends SinglePage {\n}\nPolicies.PoliciesSinglePage = PoliciesSinglePage;\n//# sourceMappingURL=policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Eligible extends APIResource {\n    /**\n     * Get a list of all delivery mechanism types for which an account is eligible.\n     *\n     * @example\n     * ```ts\n     * const eligible =\n     *   await client.alerting.destinations.eligible.get({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/alerting/v3/destinations/eligible`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=eligible.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class PagerdutyResource extends APIResource {\n    /**\n     * Creates a new token for integrating with PagerDuty.\n     *\n     * @example\n     * ```ts\n     * const pagerduty =\n     *   await client.alerting.destinations.pagerduty.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/alerting/v3/destinations/pagerduty/connect`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes all the PagerDuty Services connected to the account.\n     *\n     * @example\n     * ```ts\n     * const pagerduty =\n     *   await client.alerting.destinations.pagerduty.delete({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/alerting/v3/destinations/pagerduty`, options);\n    }\n    /**\n     * Get a list of all configured PagerDuty services.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const pagerduty of client.alerting.destinations.pagerduty.get(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/alerting/v3/destinations/pagerduty`, PagerdutiesSinglePage, options);\n    }\n    /**\n     * Links PagerDuty with the account using the integration token.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.alerting.destinations.pagerduty.link(\n     *     '8c71e667571b4f61b94d9e4b12158038',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    link(tokenId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/alerting/v3/destinations/pagerduty/connect/${tokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PagerdutiesSinglePage extends SinglePage {\n}\nPagerdutyResource.PagerdutiesSinglePage = PagerdutiesSinglePage;\n//# sourceMappingURL=pagerduty.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Webhooks extends APIResource {\n    /**\n     * Creates a new webhook destination.\n     *\n     * @example\n     * ```ts\n     * const webhook =\n     *   await client.alerting.destinations.webhooks.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'Slack Webhook',\n     *     url: 'https://hooks.slack.com/services/Ds3fdBFbV/456464Gdd',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/alerting/v3/destinations/webhooks`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a webhook destination.\n     *\n     * @example\n     * ```ts\n     * const webhook =\n     *   await client.alerting.destinations.webhooks.update(\n     *     'b115d5ec-15c6-41ee-8b76-92c449b5227b',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       name: 'Slack Webhook',\n     *       url: 'https://hooks.slack.com/services/Ds3fdBFbV/456464Gdd',\n     *     },\n     *   );\n     * ```\n     */\n    update(webhookId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/alerting/v3/destinations/webhooks/${webhookId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets a list of all configured webhook destinations.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const webhooks of client.alerting.destinations.webhooks.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/alerting/v3/destinations/webhooks`, WebhooksSinglePage, options);\n    }\n    /**\n     * Delete a configured webhook destination.\n     *\n     * @example\n     * ```ts\n     * const webhook =\n     *   await client.alerting.destinations.webhooks.delete(\n     *     'b115d5ec-15c6-41ee-8b76-92c449b5227b',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(webhookId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/alerting/v3/destinations/webhooks/${webhookId}`, options);\n    }\n    /**\n     * Get details for a single webhooks destination.\n     *\n     * @example\n     * ```ts\n     * const webhooks =\n     *   await client.alerting.destinations.webhooks.get(\n     *     'b115d5ec-15c6-41ee-8b76-92c449b5227b',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(webhookId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/alerting/v3/destinations/webhooks/${webhookId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WebhooksSinglePage extends SinglePage {\n}\nWebhooks.WebhooksSinglePage = WebhooksSinglePage;\n//# sourceMappingURL=webhooks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as EligibleAPI from \"./eligible.mjs\";\nimport { Eligible } from \"./eligible.mjs\";\nimport * as PagerdutyAPI from \"./pagerduty.mjs\";\nimport { PagerdutiesSinglePage, PagerdutyResource, } from \"./pagerduty.mjs\";\nimport * as WebhooksAPI from \"./webhooks.mjs\";\nimport { WebhooksSinglePage, } from \"./webhooks.mjs\";\nexport class Destinations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.eligible = new EligibleAPI.Eligible(this._client);\n        this.pagerduty = new PagerdutyAPI.PagerdutyResource(this._client);\n        this.webhooks = new WebhooksAPI.Webhooks(this._client);\n    }\n}\nDestinations.Eligible = Eligible;\nDestinations.PagerdutyResource = PagerdutyResource;\nDestinations.PagerdutiesSinglePage = PagerdutiesSinglePage;\nDestinations.WebhooksSinglePage = WebhooksSinglePage;\n//# sourceMappingURL=destinations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AvailableAlertsAPI from \"./available-alerts.mjs\";\nimport { AvailableAlerts } from \"./available-alerts.mjs\";\nimport * as HistoryAPI from \"./history.mjs\";\nimport { HistoriesV4PagePaginationArray, HistoryResource } from \"./history.mjs\";\nimport * as PoliciesAPI from \"./policies.mjs\";\nimport { Policies, PoliciesSinglePage, } from \"./policies.mjs\";\nimport * as DestinationsAPI from \"./destinations/destinations.mjs\";\nimport { Destinations } from \"./destinations/destinations.mjs\";\nexport class Alerting extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.availableAlerts = new AvailableAlertsAPI.AvailableAlerts(this._client);\n        this.destinations = new DestinationsAPI.Destinations(this._client);\n        this.history = new HistoryAPI.HistoryResource(this._client);\n        this.policies = new PoliciesAPI.Policies(this._client);\n    }\n}\nAlerting.AvailableAlerts = AvailableAlerts;\nAlerting.Destinations = Destinations;\nAlerting.HistoryResource = HistoryResource;\nAlerting.HistoriesV4PagePaginationArray = HistoriesV4PagePaginationArray;\nAlerting.Policies = Policies;\nAlerting.PoliciesSinglePage = PoliciesSinglePage;\n//# sourceMappingURL=alerting.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Database extends APIResource {\n    /**\n     * Returns the created D1 database.\n     *\n     * @example\n     * ```ts\n     * const d1 = await client.d1.database.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'my-database',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/d1/database`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates the specified D1 database.\n     *\n     * @example\n     * ```ts\n     * const d1 = await client.d1.database.update(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     read_replication: { mode: 'auto' },\n     *   },\n     * );\n     * ```\n     */\n    update(databaseId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/d1/database/${databaseId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a list of D1 databases.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const databaseListResponse of client.d1.database.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/d1/database`, DatabaseListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes the specified D1 database.\n     *\n     * @example\n     * ```ts\n     * const database = await client.d1.database.delete(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(databaseId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/d1/database/${databaseId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates partially the specified D1 database.\n     *\n     * @example\n     * ```ts\n     * const d1 = await client.d1.database.edit(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(databaseId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/d1/database/${databaseId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a URL where the SQL contents of your D1 can be downloaded. Note: this\n     * process may take some time for larger DBs, during which your D1 will be\n     * unavailable to serve queries. To avoid blocking your DB unnecessarily, an\n     * in-progress export must be continually polled or will automatically cancel.\n     *\n     * @example\n     * ```ts\n     * const response = await client.d1.database.export(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     output_format: 'polling',\n     *   },\n     * );\n     * ```\n     */\n    export(databaseId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/d1/database/${databaseId}/export`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the specified D1 database.\n     *\n     * @example\n     * ```ts\n     * const d1 = await client.d1.database.get(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(databaseId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/d1/database/${databaseId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Generates a temporary URL for uploading an SQL file to, then instructing the D1\n     * to import it and polling it for status updates. Imports block the D1 for their\n     * duration.\n     *\n     * @example\n     * ```ts\n     * const response = await client.d1.database.import(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     action: 'init',\n     *     etag: 'etag',\n     *   },\n     * );\n     * ```\n     */\n    import(databaseId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/d1/database/${databaseId}/import`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the query result as an object.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const queryResult of client.d1.database.query(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     sql: 'SELECT * FROM myTable WHERE field = ? OR field = ?;',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    query(databaseId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/d1/database/${databaseId}/query`, QueryResultsSinglePage, { body, method: 'post', ...options });\n    }\n    /**\n     * Returns the query result rows as arrays rather than objects. This is a\n     * performance-optimized version of the /query endpoint.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const databaseRawResponse of client.d1.database.raw(\n     *   'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     sql: 'SELECT * FROM myTable WHERE field = ? OR field = ?;',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    raw(databaseId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/d1/database/${databaseId}/raw`, DatabaseRawResponsesSinglePage, { body, method: 'post', ...options });\n    }\n}\nexport class DatabaseListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class QueryResultsSinglePage extends SinglePage {\n}\nexport class DatabaseRawResponsesSinglePage extends SinglePage {\n}\nDatabase.DatabaseListResponsesV4PagePaginationArray = DatabaseListResponsesV4PagePaginationArray;\nDatabase.QueryResultsSinglePage = QueryResultsSinglePage;\nDatabase.DatabaseRawResponsesSinglePage = DatabaseRawResponsesSinglePage;\n//# sourceMappingURL=database.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DatabaseAPI from \"./database.mjs\";\nimport { Database, DatabaseListResponsesV4PagePaginationArray, DatabaseRawResponsesSinglePage, QueryResultsSinglePage, } from \"./database.mjs\";\nexport class D1Resource extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.database = new DatabaseAPI.Database(this._client);\n    }\n}\nD1Resource.Database = Database;\nD1Resource.DatabaseListResponsesV4PagePaginationArray = DatabaseListResponsesV4PagePaginationArray;\nD1Resource.QueryResultsSinglePage = QueryResultsSinglePage;\nD1Resource.DatabaseRawResponsesSinglePage = DatabaseRawResponsesSinglePage;\n//# sourceMappingURL=d1.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class TemporaryCredentials extends APIResource {\n    /**\n     * Creates temporary access credentials on a bucket that can be optionally scoped\n     * to prefixes or objects.\n     *\n     * @example\n     * ```ts\n     * const temporaryCredential =\n     *   await client.r2.temporaryCredentials.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     bucket: 'example-bucket',\n     *     parentAccessKeyId: 'example-access-key-id',\n     *     permission: 'object-read-write',\n     *     ttlSeconds: 3600,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/r2/temp-access-credentials`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=temporary-credentials.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class CORS extends APIResource {\n    /**\n     * Set the CORS policy for a bucket.\n     *\n     * @example\n     * ```ts\n     * const cors = await client.r2.buckets.cors.update(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(bucketName, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/r2/buckets/${bucketName}/cors`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete the CORS policy for a bucket.\n     *\n     * @example\n     * ```ts\n     * const cors = await client.r2.buckets.cors.delete(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.delete(`/accounts/${account_id}/r2/buckets/${bucketName}/cors`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get the CORS policy for a bucket.\n     *\n     * @example\n     * ```ts\n     * const cors = await client.r2.buckets.cors.get(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/cors`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=cors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class EventNotifications extends APIResource {\n    /**\n     * Create event notification rule.\n     *\n     * @example\n     * ```ts\n     * const eventNotification =\n     *   await client.r2.buckets.eventNotifications.update(\n     *     'example-bucket',\n     *     'queue_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(bucketName, queueId, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/event_notifications/r2/${bucketName}/configuration/queues/${queueId}`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all event notification rules for a bucket.\n     *\n     * @example\n     * ```ts\n     * const eventNotifications =\n     *   await client.r2.buckets.eventNotifications.list(\n     *     'example-bucket',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/event_notifications/r2/${bucketName}/configuration`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete an event notification rule. **If no body is provided, all rules for\n     * specified queue will be deleted**.\n     *\n     * @example\n     * ```ts\n     * const eventNotification =\n     *   await client.r2.buckets.eventNotifications.delete(\n     *     'example-bucket',\n     *     'queue_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(bucketName, queueId, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.delete(`/accounts/${account_id}/event_notifications/r2/${bucketName}/configuration/queues/${queueId}`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a single event notification rule.\n     *\n     * @example\n     * ```ts\n     * const eventNotification =\n     *   await client.r2.buckets.eventNotifications.get(\n     *     'example-bucket',\n     *     'queue_id',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(bucketName, queueId, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/event_notifications/r2/${bucketName}/configuration/queues/${queueId}`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=event-notifications.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Lifecycle extends APIResource {\n    /**\n     * Set the object lifecycle rules for a bucket.\n     *\n     * @example\n     * ```ts\n     * const lifecycle = await client.r2.buckets.lifecycle.update(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(bucketName, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/r2/buckets/${bucketName}/lifecycle`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get object lifecycle rules for a bucket.\n     *\n     * @example\n     * ```ts\n     * const lifecycle = await client.r2.buckets.lifecycle.get(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/lifecycle`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=lifecycle.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Locks extends APIResource {\n    /**\n     * Set lock rules for a bucket.\n     *\n     * @example\n     * ```ts\n     * const lock = await client.r2.buckets.locks.update(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(bucketName, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/r2/buckets/${bucketName}/lock`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get lock rules for a bucket.\n     *\n     * @example\n     * ```ts\n     * const lock = await client.r2.buckets.locks.get(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/lock`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=locks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Metrics extends APIResource {\n    /**\n     * Get Storage/Object Count Metrics across all buckets in your account. Note that\n     * Account-Level Metrics may not immediately reflect the latest data.\n     *\n     * @example\n     * ```ts\n     * const metrics = await client.r2.buckets.metrics.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/r2/metrics`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=metrics.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class SippyResource extends APIResource {\n    /**\n     * Sets configuration for Sippy for an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const sippy = await client.r2.buckets.sippy.update(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(bucketName, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/r2/buckets/${bucketName}/sippy`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Disables Sippy on this bucket.\n     *\n     * @example\n     * ```ts\n     * const sippy = await client.r2.buckets.sippy.delete(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.delete(`/accounts/${account_id}/r2/buckets/${bucketName}/sippy`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets configuration for Sippy for an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const sippy = await client.r2.buckets.sippy.get(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/sippy`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=sippy.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Custom extends APIResource {\n    /**\n     * Register a new custom domain for an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.r2.buckets.domains.custom.create(\n     *     'example-bucket',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       domain: 'prefix.example-domain.com',\n     *       enabled: true,\n     *       zoneId: '36ca64a6d92827b8a6b90be344bb1bfd',\n     *     },\n     *   );\n     * ```\n     */\n    create(bucketName, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/custom`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit the configuration for a custom domain on an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.r2.buckets.domains.custom.update(\n     *     'example-bucket',\n     *     'example-domain/custom-domain.com',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(bucketName, domain, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/custom/${domain}`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets a list of all custom domains registered with an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const customs = await client.r2.buckets.domains.custom.list(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    list(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/custom`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Remove custom domain registration from an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.r2.buckets.domains.custom.delete(\n     *     'example-bucket',\n     *     'example-domain/custom-domain.com',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(bucketName, domain, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.delete(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/custom/${domain}`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get the configuration for a custom domain on an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const custom = await client.r2.buckets.domains.custom.get(\n     *   'example-bucket',\n     *   'example-domain/custom-domain.com',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(bucketName, domain, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/custom/${domain}`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=custom.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Managed extends APIResource {\n    /**\n     * Updates state of public access over the bucket's R2-managed (r2.dev) domain.\n     *\n     * @example\n     * ```ts\n     * const managed =\n     *   await client.r2.buckets.domains.managed.update(\n     *     'example-bucket',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       enabled: true,\n     *     },\n     *   );\n     * ```\n     */\n    update(bucketName, params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/managed`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets state of public access over the bucket's R2-managed (r2.dev) domain.\n     *\n     * @example\n     * ```ts\n     * const manageds =\n     *   await client.r2.buckets.domains.managed.list(\n     *     'example-bucket',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}/domains/managed`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=managed.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CustomAPI from \"./custom.mjs\";\nimport { Custom, } from \"./custom.mjs\";\nimport * as ManagedAPI from \"./managed.mjs\";\nimport { Managed, } from \"./managed.mjs\";\nexport class Domains extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.custom = new CustomAPI.Custom(this._client);\n        this.managed = new ManagedAPI.Managed(this._client);\n    }\n}\nDomains.Custom = Custom;\nDomains.Managed = Managed;\n//# sourceMappingURL=domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as CORSAPI from \"./cors.mjs\";\nimport { CORS, } from \"./cors.mjs\";\nimport * as EventNotificationsAPI from \"./event-notifications.mjs\";\nimport { EventNotifications, } from \"./event-notifications.mjs\";\nimport * as LifecycleAPI from \"./lifecycle.mjs\";\nimport { Lifecycle, } from \"./lifecycle.mjs\";\nimport * as LocksAPI from \"./locks.mjs\";\nimport { Locks } from \"./locks.mjs\";\nimport * as MetricsAPI from \"./metrics.mjs\";\nimport { Metrics } from \"./metrics.mjs\";\nimport * as SippyAPI from \"./sippy.mjs\";\nimport { SippyResource, } from \"./sippy.mjs\";\nimport * as DomainsAPI from \"./domains/domains.mjs\";\nimport { Domains } from \"./domains/domains.mjs\";\nexport class Buckets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.lifecycle = new LifecycleAPI.Lifecycle(this._client);\n        this.cors = new CORSAPI.CORS(this._client);\n        this.domains = new DomainsAPI.Domains(this._client);\n        this.eventNotifications = new EventNotificationsAPI.EventNotifications(this._client);\n        this.locks = new LocksAPI.Locks(this._client);\n        this.metrics = new MetricsAPI.Metrics(this._client);\n        this.sippy = new SippyAPI.SippyResource(this._client);\n    }\n    /**\n     * Creates a new R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const bucket = await client.r2.buckets.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'example-bucket',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, jurisdiction, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/r2/buckets`, {\n            body,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all R2 buckets on your account.\n     *\n     * @example\n     * ```ts\n     * const buckets = await client.r2.buckets.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, jurisdiction, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets`, {\n            query,\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const bucket = await client.r2.buckets.delete(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.delete(`/accounts/${account_id}/r2/buckets/${bucketName}`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates properties of an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const bucket = await client.r2.buckets.edit(\n     *   'example-bucket',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     storage_class: 'Standard',\n     *   },\n     * );\n     * ```\n     */\n    edit(bucketName, params, options) {\n        const { account_id, storage_class, jurisdiction } = params;\n        return this._client.patch(`/accounts/${account_id}/r2/buckets/${bucketName}`, {\n            ...options,\n            headers: {\n                'cf-r2-storage-class': storage_class.toString(),\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets properties of an existing R2 bucket.\n     *\n     * @example\n     * ```ts\n     * const bucket = await client.r2.buckets.get(\n     *   'example-bucket',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(bucketName, params, options) {\n        const { account_id, jurisdiction } = params;\n        return this._client.get(`/accounts/${account_id}/r2/buckets/${bucketName}`, {\n            ...options,\n            headers: {\n                ...(jurisdiction?.toString() != null ?\n                    { 'cf-r2-jurisdiction': jurisdiction?.toString() }\n                    : undefined),\n                ...options?.headers,\n            },\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nBuckets.Lifecycle = Lifecycle;\nBuckets.CORS = CORS;\nBuckets.Domains = Domains;\nBuckets.EventNotifications = EventNotifications;\nBuckets.Locks = Locks;\nBuckets.Metrics = Metrics;\nBuckets.SippyResource = SippyResource;\n//# sourceMappingURL=buckets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class ConnectivityPrecheck extends APIResource {\n    /**\n     * Check whether tokens are valid against the source bucket\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.r2.superSlurper.connectivityPrecheck.source({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    source(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/slurper/source/connectivity-precheck`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Check whether tokens are valid against the target bucket\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.r2.superSlurper.connectivityPrecheck.target({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    target(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/slurper/target/connectivity-precheck`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=connectivity-precheck.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Logs extends APIResource {\n    /**\n     * Get job logs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const logListResponse of client.r2.superSlurper.jobs.logs.list(\n     *   'job_id',\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(jobId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/slurper/jobs/${jobId}/logs`, LogListResponsesSinglePage, { query, ...options });\n    }\n}\nexport class LogListResponsesSinglePage extends SinglePage {\n}\nLogs.LogListResponsesSinglePage = LogListResponsesSinglePage;\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as LogsAPI from \"./logs.mjs\";\nimport { LogListResponsesSinglePage, Logs } from \"./logs.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Jobs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.logs = new LogsAPI.Logs(this._client);\n    }\n    /**\n     * Create a job\n     *\n     * @example\n     * ```ts\n     * const job = await client.r2.superSlurper.jobs.create({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/slurper/jobs`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List jobs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const jobListResponse of client.r2.superSlurper.jobs.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/slurper/jobs`, JobListResponsesSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Abort a job\n     *\n     * @example\n     * ```ts\n     * const response = await client.r2.superSlurper.jobs.abort(\n     *   'job_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    abort(jobId, params, options) {\n        const { account_id } = params;\n        return this._client.put(`/accounts/${account_id}/slurper/jobs/${jobId}/abort`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Abort all jobs\n     *\n     * @example\n     * ```ts\n     * const response = await client.r2.superSlurper.jobs.abortAll(\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    abortAll(params, options) {\n        const { account_id } = params;\n        return this._client.put(`/accounts/${account_id}/slurper/jobs/abortAll`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get job details\n     *\n     * @example\n     * ```ts\n     * const job = await client.r2.superSlurper.jobs.get(\n     *   'job_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(jobId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/slurper/jobs/${jobId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Pause a job\n     *\n     * @example\n     * ```ts\n     * const response = await client.r2.superSlurper.jobs.pause(\n     *   'job_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    pause(jobId, params, options) {\n        const { account_id } = params;\n        return this._client.put(`/accounts/${account_id}/slurper/jobs/${jobId}/pause`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get job progress\n     *\n     * @example\n     * ```ts\n     * const response = await client.r2.superSlurper.jobs.progress(\n     *   'job_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    progress(jobId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/slurper/jobs/${jobId}/progress`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Resume a job\n     *\n     * @example\n     * ```ts\n     * const response = await client.r2.superSlurper.jobs.resume(\n     *   'job_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    resume(jobId, params, options) {\n        const { account_id } = params;\n        return this._client.put(`/accounts/${account_id}/slurper/jobs/${jobId}/resume`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class JobListResponsesSinglePage extends SinglePage {\n}\nJobs.JobListResponsesSinglePage = JobListResponsesSinglePage;\nJobs.Logs = Logs;\nJobs.LogListResponsesSinglePage = LogListResponsesSinglePage;\n//# sourceMappingURL=jobs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ConnectivityPrecheckAPI from \"./connectivity-precheck.mjs\";\nimport { ConnectivityPrecheck, } from \"./connectivity-precheck.mjs\";\nimport * as JobsAPI from \"./jobs/jobs.mjs\";\nimport { JobListResponsesSinglePage, Jobs, } from \"./jobs/jobs.mjs\";\nexport class SuperSlurper extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.jobs = new JobsAPI.Jobs(this._client);\n        this.connectivityPrecheck = new ConnectivityPrecheckAPI.ConnectivityPrecheck(this._client);\n    }\n}\nSuperSlurper.Jobs = Jobs;\nSuperSlurper.JobListResponsesSinglePage = JobListResponsesSinglePage;\nSuperSlurper.ConnectivityPrecheck = ConnectivityPrecheck;\n//# sourceMappingURL=super-slurper.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as TemporaryCredentialsAPI from \"./temporary-credentials.mjs\";\nimport { TemporaryCredentials, } from \"./temporary-credentials.mjs\";\nimport * as BucketsAPI from \"./buckets/buckets.mjs\";\nimport { Buckets, } from \"./buckets/buckets.mjs\";\nimport * as SuperSlurperAPI from \"./super-slurper/super-slurper.mjs\";\nimport { SuperSlurper } from \"./super-slurper/super-slurper.mjs\";\nexport class R2 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.buckets = new BucketsAPI.Buckets(this._client);\n        this.temporaryCredentials = new TemporaryCredentialsAPI.TemporaryCredentials(this._client);\n        this.superSlurper = new SuperSlurperAPI.SuperSlurper(this._client);\n    }\n}\nR2.Buckets = Buckets;\nR2.TemporaryCredentials = TemporaryCredentials;\nR2.SuperSlurper = SuperSlurper;\n//# sourceMappingURL=r2.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nexport class AssetUpload extends APIResource {\n    /**\n     * Start uploading a collection of assets for use in a Worker version. To learn\n     * more about the direct uploads of assets, see\n     * https://developers.cloudflare.com/workers/static-assets/direct-upload/.\n     *\n     * @example\n     * ```ts\n     * const assetUpload =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.assetUpload.create(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       manifest: { foo: { hash: 'hash', size: 0 } },\n     *     },\n     *   );\n     * ```\n     */\n    create(dispatchNamespace, scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/assets-upload-session`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=asset-upload.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../../pagination.mjs\";\nexport class Bindings extends APIResource {\n    /**\n     * Fetch script bindings from a script uploaded to a Workers for Platforms\n     * namespace.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const bindingGetResponse of client.workersForPlatforms.dispatch.namespaces.scripts.bindings.get(\n     *   'my-dispatch-namespace',\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(dispatchNamespace, scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/bindings`, BindingGetResponsesSinglePage, options);\n    }\n}\nexport class BindingGetResponsesSinglePage extends SinglePage {\n}\nBindings.BindingGetResponsesSinglePage = BindingGetResponsesSinglePage;\n//# sourceMappingURL=bindings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as Core from \"../../../../../core.mjs\";\nexport class Content extends APIResource {\n    /**\n     * Put script content for a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const script =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.content.update(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       metadata: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(dispatchNamespace, scriptName, params, options) {\n        const { account_id, 'CF-WORKER-BODY-PART': cfWorkerBodyPart, 'CF-WORKER-MAIN-MODULE-PART': cfWorkerMainModulePart, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/content`, Core.multipartFormRequestOptions({\n            body,\n            ...options,\n            headers: {\n                ...(cfWorkerBodyPart != null ? { 'CF-WORKER-BODY-PART': cfWorkerBodyPart } : undefined),\n                ...(cfWorkerMainModulePart != null ?\n                    { 'CF-WORKER-MAIN-MODULE-PART': cfWorkerMainModulePart }\n                    : undefined),\n                ...options?.headers,\n            },\n        }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch script content from a script uploaded to a Workers for Platforms\n     * namespace.\n     *\n     * @example\n     * ```ts\n     * const content =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.content.get(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     *\n     * const data = await content.blob();\n     * console.log(data);\n     * ```\n     */\n    get(dispatchNamespace, scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/content`, { ...options, headers: { Accept: 'string', ...options?.headers }, __binaryResponse: true });\n    }\n}\n//# sourceMappingURL=content.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../../pagination.mjs\";\nexport class Secrets extends APIResource {\n    /**\n     * Add a secret to a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const secret =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.secrets.update(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       name: 'myBinding',\n     *       text: 'My secret.',\n     *       type: 'secret_text',\n     *     },\n     *   );\n     * ```\n     */\n    update(dispatchNamespace, scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/secrets`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List secrets bound to a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const secretListResponse of client.workersForPlatforms.dispatch.namespaces.scripts.secrets.list(\n     *   'my-dispatch-namespace',\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(dispatchNamespace, scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/secrets`, SecretListResponsesSinglePage, options);\n    }\n    /**\n     * Remove a secret from a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const secret =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.secrets.delete(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     'mySecret',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(dispatchNamespace, scriptName, secretName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/secrets/${secretName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a given secret binding (value omitted) on a script uploaded to a Workers for\n     * Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const secret =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.secrets.get(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     'mySecret',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(dispatchNamespace, scriptName, secretName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/secrets/${secretName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SecretListResponsesSinglePage extends SinglePage {\n}\nSecrets.SecretListResponsesSinglePage = SecretListResponsesSinglePage;\n//# sourceMappingURL=secrets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as Core from \"../../../../../core.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Patch script metadata, such as bindings.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.settings.edit(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(dispatchNamespace, scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/settings`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get script settings from a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.settings.get(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(dispatchNamespace, scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../../pagination.mjs\";\nexport class Tags extends APIResource {\n    /**\n     * Put script tags for a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tagUpdateResponse of client.workersForPlatforms.dispatch.namespaces.scripts.tags.update(\n     *   'my-dispatch-namespace',\n     *   'this-is_my_script-01',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: ['my-tag'],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(dispatchNamespace, scriptName, params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/tags`, TagUpdateResponsesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * Fetch tags from a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tagListResponse of client.workersForPlatforms.dispatch.namespaces.scripts.tags.list(\n     *   'my-dispatch-namespace',\n     *   'this-is_my_script-01',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(dispatchNamespace, scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/tags`, TagListResponsesSinglePage, options);\n    }\n    /**\n     * Delete script tag for a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const tag =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.tags.delete(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     'my-tag',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(dispatchNamespace, scriptName, tag, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}/tags/${tag}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TagUpdateResponsesSinglePage extends SinglePage {\n}\nexport class TagListResponsesSinglePage extends SinglePage {\n}\nTags.TagUpdateResponsesSinglePage = TagUpdateResponsesSinglePage;\nTags.TagListResponsesSinglePage = TagListResponsesSinglePage;\n//# sourceMappingURL=tags.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as Core from \"../../../../../core.mjs\";\nimport * as AssetUploadAPI from \"./asset-upload.mjs\";\nimport { AssetUpload } from \"./asset-upload.mjs\";\nimport * as BindingsAPI from \"./bindings.mjs\";\nimport { BindingGetResponsesSinglePage, Bindings } from \"./bindings.mjs\";\nimport * as ContentAPI from \"./content.mjs\";\nimport { Content } from \"./content.mjs\";\nimport * as SecretsAPI from \"./secrets.mjs\";\nimport { SecretListResponsesSinglePage, Secrets, } from \"./secrets.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as TagsAPI from \"./tags.mjs\";\nimport { TagListResponsesSinglePage, TagUpdateResponsesSinglePage, Tags, } from \"./tags.mjs\";\nexport class Scripts extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.assetUpload = new AssetUploadAPI.AssetUpload(this._client);\n        this.content = new ContentAPI.Content(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.bindings = new BindingsAPI.Bindings(this._client);\n        this.secrets = new SecretsAPI.Secrets(this._client);\n        this.tags = new TagsAPI.Tags(this._client);\n    }\n    /**\n     * Upload a worker module to a Workers for Platforms namespace. You can find more\n     * about the multipart metadata on our docs:\n     * https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.\n     *\n     * @example\n     * ```ts\n     * const script =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.update(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       metadata: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(dispatchNamespace, scriptName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}`, Core.maybeMultipartFormRequestOptions({\n            body,\n            ...options,\n            __multipartSyntax: 'json',\n            headers: { 'Content-Type': 'application/javascript', ...options?.headers },\n        }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a worker from a Workers for Platforms namespace. This call has no\n     * response body on a successful delete.\n     *\n     * @example\n     * ```ts\n     * const script =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.delete(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(dispatchNamespace, scriptName, params, options) {\n        const { account_id, force } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}`, { query: { force }, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch information about a script uploaded to a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const script =\n     *   await client.workersForPlatforms.dispatch.namespaces.scripts.get(\n     *     'my-dispatch-namespace',\n     *     'this-is_my_script-01',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(dispatchNamespace, scriptName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}/scripts/${scriptName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nScripts.AssetUpload = AssetUpload;\nScripts.Content = Content;\nScripts.Settings = Settings;\nScripts.Bindings = Bindings;\nScripts.BindingGetResponsesSinglePage = BindingGetResponsesSinglePage;\nScripts.Secrets = Secrets;\nScripts.SecretListResponsesSinglePage = SecretListResponsesSinglePage;\nScripts.Tags = Tags;\nScripts.TagUpdateResponsesSinglePage = TagUpdateResponsesSinglePage;\nScripts.TagListResponsesSinglePage = TagListResponsesSinglePage;\n//# sourceMappingURL=scripts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ScriptsAPI from \"./scripts/scripts.mjs\";\nimport { Scripts, } from \"./scripts/scripts.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Namespaces extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.scripts = new ScriptsAPI.Scripts(this._client);\n    }\n    /**\n     * Create a new Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const namespace =\n     *   await client.workersForPlatforms.dispatch.namespaces.create(\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workers/dispatch/namespaces`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a list of Workers for Platforms namespaces.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const namespaceListResponse of client.workersForPlatforms.dispatch.namespaces.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workers/dispatch/namespaces`, NamespaceListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const namespace =\n     *   await client.workersForPlatforms.dispatch.namespaces.delete(\n     *     'my-dispatch-namespace',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(dispatchNamespace, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a Workers for Platforms namespace.\n     *\n     * @example\n     * ```ts\n     * const namespace =\n     *   await client.workersForPlatforms.dispatch.namespaces.get(\n     *     'my-dispatch-namespace',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(dispatchNamespace, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workers/dispatch/namespaces/${dispatchNamespace}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class NamespaceListResponsesSinglePage extends SinglePage {\n}\nNamespaces.NamespaceListResponsesSinglePage = NamespaceListResponsesSinglePage;\nNamespaces.Scripts = Scripts;\n//# sourceMappingURL=namespaces.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as NamespacesAPI from \"./namespaces/namespaces.mjs\";\nimport { NamespaceListResponsesSinglePage, Namespaces, } from \"./namespaces/namespaces.mjs\";\nexport class Dispatch extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.namespaces = new NamespacesAPI.Namespaces(this._client);\n    }\n}\nDispatch.Namespaces = Namespaces;\nDispatch.NamespaceListResponsesSinglePage = NamespaceListResponsesSinglePage;\n//# sourceMappingURL=dispatch.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DispatchAPI from \"./dispatch/dispatch.mjs\";\nimport { Dispatch } from \"./dispatch/dispatch.mjs\";\nexport class WorkersForPlatforms extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.dispatch = new DispatchAPI.Dispatch(this._client);\n    }\n}\nWorkersForPlatforms.Dispatch = Dispatch;\n//# sourceMappingURL=workers-for-platforms.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class ConnectivitySettings extends APIResource {\n    /**\n     * Updates the Zero Trust Connectivity Settings for the given account.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.connectivitySettings.edit({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/zerotrust/connectivity_settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets the Zero Trust Connectivity Settings for the given account.\n     *\n     * @example\n     * ```ts\n     * const connectivitySetting =\n     *   await client.zeroTrust.connectivitySettings.get({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/zerotrust/connectivity_settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=connectivity-settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Seats extends APIResource {\n    /**\n     * Removes a user from a Zero Trust seat when both `access_seat` and `gateway_seat`\n     * are set to false.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const seat of client.zeroTrust.seats.edit({\n     *   account_id: '699d98642c564d2e855e9661899b7252',\n     *   body: [\n     *     {\n     *       access_seat: false,\n     *       gateway_seat: false,\n     *       seat_uid: 'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     },\n     *   ],\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/seats`, SeatsSinglePage, {\n            body: body,\n            method: 'patch',\n            ...options,\n        });\n    }\n}\nexport class SeatsSinglePage extends SinglePage {\n}\nSeats.SeatsSinglePage = SeatsSinglePage;\n//# sourceMappingURL=seats.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Bookmarks extends APIResource {\n    /**\n     * Create a new Bookmark application.\n     *\n     * @deprecated\n     */\n    create(bookmarkId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/access/bookmarks/${bookmarkId}`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured Bookmark application.\n     *\n     * @deprecated\n     */\n    update(bookmarkId, params, options) {\n        const { account_id, body } = params;\n        return this._client.put(`/accounts/${account_id}/access/bookmarks/${bookmarkId}`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Bookmark applications.\n     *\n     * @deprecated\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/bookmarks`, BookmarksSinglePage, options);\n    }\n    /**\n     * Deletes a Bookmark application.\n     *\n     * @deprecated\n     */\n    delete(bookmarkId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/access/bookmarks/${bookmarkId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Bookmark application.\n     *\n     * @deprecated\n     */\n    get(bookmarkId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/bookmarks/${bookmarkId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class BookmarksSinglePage extends SinglePage {\n}\nBookmarks.BookmarksSinglePage = BookmarksSinglePage;\n//# sourceMappingURL=bookmarks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class CustomPages extends APIResource {\n    /**\n     * Create a custom page\n     *\n     * @example\n     * ```ts\n     * const customPageWithoutHTML =\n     *   await client.zeroTrust.access.customPages.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     custom_html:\n     *       '<html><body><h1>Access Denied</h1></body></html>',\n     *     name: 'name',\n     *     type: 'identity_denied',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/access/custom_pages`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a custom page\n     *\n     * @example\n     * ```ts\n     * const customPageWithoutHTML =\n     *   await client.zeroTrust.access.customPages.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       custom_html:\n     *         '<html><body><h1>Access Denied</h1></body></html>',\n     *       name: 'name',\n     *       type: 'identity_denied',\n     *     },\n     *   );\n     * ```\n     */\n    update(customPageId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/access/custom_pages/${customPageId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List custom pages\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customPageWithoutHTML of client.zeroTrust.access.customPages.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/custom_pages`, CustomPageWithoutHTMLsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a custom page\n     *\n     * @example\n     * ```ts\n     * const customPage =\n     *   await client.zeroTrust.access.customPages.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(customPageId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/access/custom_pages/${customPageId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a custom page and also returns its HTML.\n     *\n     * @example\n     * ```ts\n     * const customPage =\n     *   await client.zeroTrust.access.customPages.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(customPageId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/custom_pages/${customPageId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CustomPageWithoutHTMLsV4PagePaginationArray extends V4PagePaginationArray {\n}\nCustomPages.CustomPageWithoutHTMLsV4PagePaginationArray = CustomPageWithoutHTMLsV4PagePaginationArray;\n//# sourceMappingURL=custom-pages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class GatewayCA extends APIResource {\n    /**\n     * Adds a new SSH Certificate Authority (CA).\n     *\n     * @example\n     * ```ts\n     * const gatewayCA =\n     *   await client.zeroTrust.access.gatewayCA.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/access/gateway_ca`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists SSH Certificate Authorities (CA).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const gatewayCAListResponse of client.zeroTrust.access.gatewayCA.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/gateway_ca`, GatewayCAListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes an SSH Certificate Authority.\n     *\n     * @example\n     * ```ts\n     * const gatewayCA =\n     *   await client.zeroTrust.access.gatewayCA.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(certificateId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/access/gateway_ca/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class GatewayCAListResponsesSinglePage extends SinglePage {\n}\nGatewayCA.GatewayCAListResponsesSinglePage = GatewayCAListResponsesSinglePage;\n//# sourceMappingURL=gateway-ca.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Groups extends APIResource {\n    /**\n     * Creates a new Access group.\n     *\n     * @example\n     * ```ts\n     * const group = await client.zeroTrust.access.groups.create({\n     *   include: [\n     *     {\n     *       group: { id: 'aa0a4aab-672b-4bdb-bc33-a59f1130a11f' },\n     *     },\n     *   ],\n     *   name: 'Allow devs',\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/groups`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured Access group.\n     *\n     * @example\n     * ```ts\n     * const group = await client.zeroTrust.access.groups.update(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   {\n     *     include: [\n     *       {\n     *         group: {\n     *           id: 'aa0a4aab-672b-4bdb-bc33-a59f1130a11f',\n     *         },\n     *       },\n     *     ],\n     *     name: 'Allow devs',\n     *     account_id: 'account_id',\n     *   },\n     * );\n     * ```\n     */\n    update(groupId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/groups/${groupId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/groups`, GroupListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    delete(groupId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(groupId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/groups/${groupId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(groupId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(groupId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/groups/${groupId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class GroupListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class ZeroTrustGroupsV4PagePaginationArray extends V4PagePaginationArray {\n}\nGroups.GroupListResponsesV4PagePaginationArray = GroupListResponsesV4PagePaginationArray;\n//# sourceMappingURL=groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Keys extends APIResource {\n    /**\n     * Updates the Access key rotation settings for an account.\n     *\n     * @example\n     * ```ts\n     * const key = await client.zeroTrust.access.keys.update({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   key_rotation_interval_days: 30,\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/access/keys`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets the Access key rotation settings for an account.\n     *\n     * @example\n     * ```ts\n     * const key = await client.zeroTrust.access.keys.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/keys`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Perfoms a key rotation for an account.\n     *\n     * @example\n     * ```ts\n     * const response = await client.zeroTrust.access.keys.rotate({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    rotate(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/access/keys/rotate`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=keys.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Policies extends APIResource {\n    /**\n     * Creates a new Access reusable policy.\n     *\n     * @example\n     * ```ts\n     * const policy =\n     *   await client.zeroTrust.access.policies.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     decision: 'allow',\n     *     include: [\n     *       {\n     *         group: {\n     *           id: 'aa0a4aab-672b-4bdb-bc33-a59f1130a11f',\n     *         },\n     *       },\n     *     ],\n     *     name: 'Allow devs',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/access/policies`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a Access reusable policy.\n     *\n     * @example\n     * ```ts\n     * const policy =\n     *   await client.zeroTrust.access.policies.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       decision: 'allow',\n     *       include: [\n     *         {\n     *           group: {\n     *             id: 'aa0a4aab-672b-4bdb-bc33-a59f1130a11f',\n     *           },\n     *         },\n     *       ],\n     *       name: 'Allow devs',\n     *     },\n     *   );\n     * ```\n     */\n    update(policyId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/access/policies/${policyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists Access reusable policies.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const policyListResponse of client.zeroTrust.access.policies.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/policies`, PolicyListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes an Access reusable policy.\n     *\n     * @example\n     * ```ts\n     * const policy =\n     *   await client.zeroTrust.access.policies.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/access/policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Access reusable policy.\n     *\n     * @example\n     * ```ts\n     * const policy = await client.zeroTrust.access.policies.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PolicyListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nPolicies.PolicyListResponsesV4PagePaginationArray = PolicyListResponsesV4PagePaginationArray;\n//# sourceMappingURL=policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class ServiceTokens extends APIResource {\n    /**\n     * Generates a new service token. **Note:** This is the only time you can get the\n     * Client Secret. If you lose the Client Secret, you will have to rotate the Client\n     * Secret or create a new service token.\n     *\n     * @example\n     * ```ts\n     * const serviceToken =\n     *   await client.zeroTrust.access.serviceTokens.create({\n     *     name: 'CI/CD token',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/service_tokens`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured service token.\n     *\n     * @example\n     * ```ts\n     * const serviceToken =\n     *   await client.zeroTrust.access.serviceTokens.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    update(serviceTokenId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/service_tokens/${serviceTokenId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/service_tokens`, ServiceTokensV4PagePaginationArray, { query, ...options });\n    }\n    delete(serviceTokenId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(serviceTokenId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/service_tokens/${serviceTokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(serviceTokenId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(serviceTokenId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/service_tokens/${serviceTokenId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Refreshes the expiration of a service token.\n     *\n     * @example\n     * ```ts\n     * const serviceToken =\n     *   await client.zeroTrust.access.serviceTokens.refresh(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    refresh(serviceTokenId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/access/service_tokens/${serviceTokenId}/refresh`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Generates a new Client Secret for a service token and revokes the old one.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.access.serviceTokens.rotate(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    rotate(serviceTokenId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/access/service_tokens/${serviceTokenId}/rotate`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ServiceTokensV4PagePaginationArray extends V4PagePaginationArray {\n}\nServiceTokens.ServiceTokensV4PagePaginationArray = ServiceTokensV4PagePaginationArray;\n//# sourceMappingURL=service-tokens.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Tags extends APIResource {\n    /**\n     * Create a tag\n     *\n     * @example\n     * ```ts\n     * const tag = await client.zeroTrust.access.tags.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/access/tags`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a tag\n     *\n     * @example\n     * ```ts\n     * const tag = await client.zeroTrust.access.tags.update(\n     *   'engineers',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'engineers',\n     *   },\n     * );\n     * ```\n     */\n    update(tagName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/access/tags/${tagName}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List tags\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tag of client.zeroTrust.access.tags.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/tags`, TagsV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete a tag\n     *\n     * @example\n     * ```ts\n     * const tag = await client.zeroTrust.access.tags.delete(\n     *   'engineers',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(tagName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/access/tags/${tagName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a tag\n     *\n     * @example\n     * ```ts\n     * const tag = await client.zeroTrust.access.tags.get(\n     *   'engineers',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(tagName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/tags/${tagName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TagsV4PagePaginationArray extends V4PagePaginationArray {\n}\nTags.TagsV4PagePaginationArray = TagsV4PagePaginationArray;\n//# sourceMappingURL=tags.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class CAs extends APIResource {\n    create(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.create(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/ca`, options)._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/apps/ca`, CAsV4PagePaginationArray, { query, ...options });\n    }\n    delete(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/ca`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/ca`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CAsV4PagePaginationArray extends V4PagePaginationArray {\n}\nCAs.CAsV4PagePaginationArray = CAsV4PagePaginationArray;\n//# sourceMappingURL=cas.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Policies extends APIResource {\n    /**\n     * Creates a policy applying exclusive to a single application that defines the\n     * users or groups who can reach it. We recommend creating a reusable policy\n     * instead and subsequently referencing its ID in the application's 'policies'\n     * array.\n     *\n     * @example\n     * ```ts\n     * const policy =\n     *   await client.zeroTrust.access.applications.policies.create(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    create(appId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/policies`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an Access policy specific to an application. To update a reusable\n     * policy, use the /account or zones/{account or zone_id}/policies/{uid} endpoint.\n     *\n     * @example\n     * ```ts\n     * const policy =\n     *   await client.zeroTrust.access.applications.policies.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    update(appId, policyId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/policies/${policyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list(appId, {}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/policies`, PolicyListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    delete(appId, policyId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(appId, policyId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(appId, policyId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(appId, policyId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/policies/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PolicyListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nPolicies.PolicyListResponsesV4PagePaginationArray = PolicyListResponsesV4PagePaginationArray;\n//# sourceMappingURL=policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Updates Access application settings.\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.zeroTrust.access.applications.settings.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    update(appId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates Access application settings.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.access.applications.settings.edit(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    edit(appId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.patch(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nexport class UserPolicyChecks extends APIResource {\n    list(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/user_policy_checks`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=user-policy-checks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../../pagination.mjs\";\nexport class Users extends APIResource {\n    /**\n     * Fetches a single page of user results from an Access policy test.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const userListResponse of client.zeroTrust.access.applications.policyTests.users.list(\n     *   'f1a8b3c9d4e5f6789a0b1c2d3e4f5678a9b0c1d2e3f4a5b67890c1d2e3f4b5a6',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(policyTestId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/policy-tests/${policyTestId}/users`, UserListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class UserListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nUsers.UserListResponsesV4PagePaginationArray = UserListResponsesV4PagePaginationArray;\n//# sourceMappingURL=users.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as UsersAPI from \"./users.mjs\";\nimport { UserListResponsesV4PagePaginationArray, Users } from \"./users.mjs\";\nexport class PolicyTests extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.users = new UsersAPI.Users(this._client);\n    }\n    /**\n     * Starts an Access policy test.\n     *\n     * @example\n     * ```ts\n     * const policyTest =\n     *   await client.zeroTrust.access.applications.policyTests.create(\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/access/policy-tests`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the current status of a given Access policy test.\n     *\n     * @example\n     * ```ts\n     * const policyTest =\n     *   await client.zeroTrust.access.applications.policyTests.get(\n     *     'f1a8b3c9d4e5f6789a0b1c2d3e4f5678a9b0c1d2e3f4a5b67890c1d2e3f4b5a6',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(policyTestId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/policy-tests/${policyTestId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nPolicyTests.Users = Users;\nPolicyTests.UserListResponsesV4PagePaginationArray = UserListResponsesV4PagePaginationArray;\n//# sourceMappingURL=policy-tests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as CAsAPI from \"./cas.mjs\";\nimport { CAs, CAsV4PagePaginationArray, } from \"./cas.mjs\";\nimport * as ApplicationsPoliciesAPI from \"./policies.mjs\";\nimport { Policies, PolicyListResponsesV4PagePaginationArray, } from \"./policies.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as UserPolicyChecksAPI from \"./user-policy-checks.mjs\";\nimport { UserPolicyChecks, } from \"./user-policy-checks.mjs\";\nimport * as PolicyTestsAPI from \"./policy-tests/policy-tests.mjs\";\nimport { PolicyTests, } from \"./policy-tests/policy-tests.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Applications extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.cas = new CAsAPI.CAs(this._client);\n        this.userPolicyChecks = new UserPolicyChecksAPI.UserPolicyChecks(this._client);\n        this.policies = new ApplicationsPoliciesAPI.Policies(this._client);\n        this.policyTests = new PolicyTestsAPI.PolicyTests(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n    /**\n     * Adds a new application to Access.\n     *\n     * @example\n     * ```ts\n     * const application =\n     *   await client.zeroTrust.access.applications.create({\n     *     domain: 'test.example.com/admin',\n     *     type: 'self_hosted',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/apps`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an Access application.\n     *\n     * @example\n     * ```ts\n     * const application =\n     *   await client.zeroTrust.access.applications.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       domain: 'test.example.com/admin',\n     *       type: 'self_hosted',\n     *       account_id: 'account_id',\n     *     },\n     *   );\n     * ```\n     */\n    update(appId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/apps`, ApplicationListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    delete(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    revokeTokens(appId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.revokeTokens(appId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/apps/${appId}/revoke_tokens`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ApplicationListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nApplications.ApplicationListResponsesV4PagePaginationArray = ApplicationListResponsesV4PagePaginationArray;\nApplications.CAs = CAs;\nApplications.CAsV4PagePaginationArray = CAsV4PagePaginationArray;\nApplications.UserPolicyChecks = UserPolicyChecks;\nApplications.Policies = Policies;\nApplications.PolicyListResponsesV4PagePaginationArray = PolicyListResponsesV4PagePaginationArray;\nApplications.PolicyTests = PolicyTests;\nApplications.Settings = Settings;\n//# sourceMappingURL=applications.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Updates an mTLS certificate's hostname settings.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const certificateSettings of client.zeroTrust.access.certificates.settings.update(\n     *   {\n     *     settings: [\n     *       {\n     *         china_network: false,\n     *         client_certificate_forwarding: true,\n     *         hostname: 'admin.example.com',\n     *       },\n     *     ],\n     *     account_id: 'account_id',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/certificates/settings`, CertificateSettingsSinglePage, { body, method: 'put', ...options });\n    }\n    get(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get({}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/certificates/settings`, CertificateSettingsSinglePage, options);\n    }\n}\nexport class CertificateSettingsSinglePage extends SinglePage {\n}\nSettings.CertificateSettingsSinglePage = CertificateSettingsSinglePage;\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { CertificateSettingsSinglePage, Settings, } from \"./settings.mjs\";\nimport { CloudflareError } from \"../../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Certificates extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n    /**\n     * Adds a new mTLS root certificate to Access.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.zeroTrust.access.certificates.create({\n     *     certificate:\n     *       '-----BEGIN CERTIFICATE-----\\nMIIGAjCCA+qgAwIBAgIJAI7kymlF7CWT...N4RI7KKB7nikiuUf8vhULKy5IX10\\nDrUtmu/B\\n-----END CERTIFICATE-----',\n     *     name: 'Allow devs',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/certificates`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured mTLS certificate.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.zeroTrust.access.certificates.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       associated_hostnames: ['admin.example.com'],\n     *       account_id: 'account_id',\n     *     },\n     *   );\n     * ```\n     */\n    update(certificateId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/certificates/${certificateId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/certificates`, CertificatesV4PagePaginationArray, { query, ...options });\n    }\n    delete(certificateId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(certificateId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(certificateId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(certificateId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CertificatesV4PagePaginationArray extends V4PagePaginationArray {\n}\nCertificates.CertificatesV4PagePaginationArray = CertificatesV4PagePaginationArray;\nCertificates.Settings = Settings;\nCertificates.CertificateSettingsSinglePage = CertificateSettingsSinglePage;\n//# sourceMappingURL=certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Targets extends APIResource {\n    /**\n     * Create new target\n     *\n     * @example\n     * ```ts\n     * const target =\n     *   await client.zeroTrust.access.infrastructure.targets.create(\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       hostname: 'infra-access-target',\n     *       ip: {},\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/infrastructure/targets`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update target\n     *\n     * @example\n     * ```ts\n     * const target =\n     *   await client.zeroTrust.access.infrastructure.targets.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       hostname: 'infra-access-target',\n     *       ip: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(targetId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/infrastructure/targets/${targetId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists and sorts an account’s targets. Filters are optional and are ANDed\n     * together.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const targetListResponse of client.zeroTrust.access.infrastructure.targets.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/infrastructure/targets`, TargetListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete target\n     *\n     * @example\n     * ```ts\n     * await client.zeroTrust.access.infrastructure.targets.delete(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(targetId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/infrastructure/targets/${targetId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Removes one or more targets.\n     *\n     * @deprecated\n     */\n    bulkDelete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/infrastructure/targets/batch`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Removes one or more targets.\n     *\n     * @example\n     * ```ts\n     * await client.zeroTrust.access.infrastructure.targets.bulkDeleteV2(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     target_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],\n     *   },\n     * );\n     * ```\n     */\n    bulkDeleteV2(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/infrastructure/targets/batch_delete`, {\n            body,\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Adds one or more targets.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const targetBulkUpdateResponse of client.zeroTrust.access.infrastructure.targets.bulkUpdate(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ hostname: 'infra-access-target', ip: {} }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulkUpdate(params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/infrastructure/targets/batch`, TargetBulkUpdateResponsesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * Get target\n     *\n     * @example\n     * ```ts\n     * const target =\n     *   await client.zeroTrust.access.infrastructure.targets.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(targetId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/infrastructure/targets/${targetId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TargetListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class TargetBulkUpdateResponsesSinglePage extends SinglePage {\n}\nTargets.TargetListResponsesV4PagePaginationArray = TargetListResponsesV4PagePaginationArray;\nTargets.TargetBulkUpdateResponsesSinglePage = TargetBulkUpdateResponsesSinglePage;\n//# sourceMappingURL=targets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as TargetsAPI from \"./targets.mjs\";\nimport { TargetBulkUpdateResponsesSinglePage, TargetListResponsesV4PagePaginationArray, Targets, } from \"./targets.mjs\";\nexport class Infrastructure extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.targets = new TargetsAPI.Targets(this._client);\n    }\n}\nInfrastructure.Targets = Targets;\nInfrastructure.TargetListResponsesV4PagePaginationArray = TargetListResponsesV4PagePaginationArray;\nInfrastructure.TargetBulkUpdateResponsesSinglePage = TargetBulkUpdateResponsesSinglePage;\n//# sourceMappingURL=infrastructure.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class AccessRequests extends APIResource {\n    /**\n     * Gets a list of Access authentication audit logs for an account.\n     *\n     * @example\n     * ```ts\n     * const accessRequests =\n     *   await client.zeroTrust.access.logs.accessRequests.list({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/access/logs/access_requests`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=access-requests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../../pagination.mjs\";\nexport class Updates extends APIResource {\n    /**\n     * Lists Access SCIM update logs that maintain a record of updates made to User and\n     * Group resources synced to Cloudflare via the System for Cross-domain Identity\n     * Management (SCIM).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const updateListResponse of client.zeroTrust.access.logs.scim.updates.list(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     idp_id: [\n     *       'df7e2w5f-02b7-4d9d-af26-8d1988fca630',\n     *       '0194ae2c-efcf-7cfb-8884-055f1a161fa5',\n     *     ],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/logs/scim/updates`, UpdateListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class UpdateListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nUpdates.UpdateListResponsesV4PagePaginationArray = UpdateListResponsesV4PagePaginationArray;\n//# sourceMappingURL=updates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as UpdatesAPI from \"./updates.mjs\";\nimport { UpdateListResponsesV4PagePaginationArray, Updates, } from \"./updates.mjs\";\nexport class SCIM extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.updates = new UpdatesAPI.Updates(this._client);\n    }\n}\nSCIM.Updates = Updates;\nSCIM.UpdateListResponsesV4PagePaginationArray = UpdateListResponsesV4PagePaginationArray;\n//# sourceMappingURL=scim.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as AccessRequestsAPI from \"./access-requests.mjs\";\nimport { AccessRequests } from \"./access-requests.mjs\";\nimport * as SCIMAPI from \"./scim/scim.mjs\";\nimport { SCIM } from \"./scim/scim.mjs\";\nexport class Logs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.accessRequests = new AccessRequestsAPI.AccessRequests(this._client);\n        this.scim = new SCIMAPI.SCIM(this._client);\n    }\n}\nLogs.AccessRequests = AccessRequests;\nLogs.SCIM = SCIM;\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class ActiveSessions extends APIResource {\n    /**\n     * Get active sessions for a single user.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const activeSessionListResponse of client.zeroTrust.access.users.activeSessions.list(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(userId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/users/${userId}/active_sessions`, ActiveSessionListResponsesSinglePage, options);\n    }\n    /**\n     * Get an active session for a single user.\n     *\n     * @example\n     * ```ts\n     * const activeSession =\n     *   await client.zeroTrust.access.users.activeSessions.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     'X1aXj1lFVcqqyoXF',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(userId, nonce, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/users/${userId}/active_sessions/${nonce}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ActiveSessionListResponsesSinglePage extends SinglePage {\n}\nActiveSessions.ActiveSessionListResponsesSinglePage = ActiveSessionListResponsesSinglePage;\n//# sourceMappingURL=active-sessions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class FailedLogins extends APIResource {\n    /**\n     * Get all failed login attempts for a single user.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const failedLoginListResponse of client.zeroTrust.access.users.failedLogins.list(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(userId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/users/${userId}/failed_logins`, FailedLoginListResponsesSinglePage, options);\n    }\n}\nexport class FailedLoginListResponsesSinglePage extends SinglePage {\n}\nFailedLogins.FailedLoginListResponsesSinglePage = FailedLoginListResponsesSinglePage;\n//# sourceMappingURL=failed-logins.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class LastSeenIdentity extends APIResource {\n    /**\n     * Get last seen identity for a single user.\n     *\n     * @example\n     * ```ts\n     * const identity =\n     *   await client.zeroTrust.access.users.lastSeenIdentity.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(userId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/users/${userId}/last_seen_identity`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=last-seen-identity.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ActiveSessionsAPI from \"./active-sessions.mjs\";\nimport { ActiveSessionListResponsesSinglePage, ActiveSessions, } from \"./active-sessions.mjs\";\nimport * as FailedLoginsAPI from \"./failed-logins.mjs\";\nimport { FailedLoginListResponsesSinglePage, FailedLogins, } from \"./failed-logins.mjs\";\nimport * as LastSeenIdentityAPI from \"./last-seen-identity.mjs\";\nimport { LastSeenIdentity } from \"./last-seen-identity.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Users extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.activeSessions = new ActiveSessionsAPI.ActiveSessions(this._client);\n        this.lastSeenIdentity = new LastSeenIdentityAPI.LastSeenIdentity(this._client);\n        this.failedLogins = new FailedLoginsAPI.FailedLogins(this._client);\n    }\n    /**\n     * Gets a list of users for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const userListResponse of client.zeroTrust.access.users.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/users`, UserListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class UserListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class AccessUsersV4PagePaginationArray extends V4PagePaginationArray {\n}\nUsers.UserListResponsesV4PagePaginationArray = UserListResponsesV4PagePaginationArray;\nUsers.ActiveSessions = ActiveSessions;\nUsers.ActiveSessionListResponsesSinglePage = ActiveSessionListResponsesSinglePage;\nUsers.LastSeenIdentity = LastSeenIdentity;\nUsers.FailedLogins = FailedLogins;\nUsers.FailedLoginListResponsesSinglePage = FailedLoginListResponsesSinglePage;\n//# sourceMappingURL=users.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as BookmarksAPI from \"./bookmarks.mjs\";\nimport { Bookmarks, BookmarksSinglePage, } from \"./bookmarks.mjs\";\nimport * as CustomPagesAPI from \"./custom-pages.mjs\";\nimport { CustomPageWithoutHTMLsV4PagePaginationArray, CustomPages, } from \"./custom-pages.mjs\";\nimport * as GatewayCAAPI from \"./gateway-ca.mjs\";\nimport { GatewayCA, GatewayCAListResponsesSinglePage, } from \"./gateway-ca.mjs\";\nimport * as GroupsAPI from \"./groups.mjs\";\nimport { GroupListResponsesV4PagePaginationArray, Groups, } from \"./groups.mjs\";\nimport * as KeysAPI from \"./keys.mjs\";\nimport { Keys, } from \"./keys.mjs\";\nimport * as PoliciesAPI from \"./policies.mjs\";\nimport { Policies, PolicyListResponsesV4PagePaginationArray, } from \"./policies.mjs\";\nimport * as ServiceTokensAPI from \"./service-tokens.mjs\";\nimport { ServiceTokens, ServiceTokensV4PagePaginationArray, } from \"./service-tokens.mjs\";\nimport * as TagsAPI from \"./tags.mjs\";\nimport { Tags, TagsV4PagePaginationArray, } from \"./tags.mjs\";\nimport * as ApplicationsAPI from \"./applications/applications.mjs\";\nimport { ApplicationListResponsesV4PagePaginationArray, Applications, } from \"./applications/applications.mjs\";\nimport * as CertificatesAPI from \"./certificates/certificates.mjs\";\nimport { Certificates, CertificatesV4PagePaginationArray, } from \"./certificates/certificates.mjs\";\nimport * as InfrastructureAPI from \"./infrastructure/infrastructure.mjs\";\nimport { Infrastructure } from \"./infrastructure/infrastructure.mjs\";\nimport * as LogsAPI from \"./logs/logs.mjs\";\nimport { Logs } from \"./logs/logs.mjs\";\nimport * as UsersAPI from \"./users/users.mjs\";\nimport { UserListResponsesV4PagePaginationArray, Users, } from \"./users/users.mjs\";\nexport class Access extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.gatewayCA = new GatewayCAAPI.GatewayCA(this._client);\n        this.infrastructure = new InfrastructureAPI.Infrastructure(this._client);\n        this.applications = new ApplicationsAPI.Applications(this._client);\n        this.certificates = new CertificatesAPI.Certificates(this._client);\n        this.groups = new GroupsAPI.Groups(this._client);\n        this.serviceTokens = new ServiceTokensAPI.ServiceTokens(this._client);\n        this.bookmarks = new BookmarksAPI.Bookmarks(this._client);\n        this.keys = new KeysAPI.Keys(this._client);\n        this.logs = new LogsAPI.Logs(this._client);\n        this.users = new UsersAPI.Users(this._client);\n        this.customPages = new CustomPagesAPI.CustomPages(this._client);\n        this.tags = new TagsAPI.Tags(this._client);\n        this.policies = new PoliciesAPI.Policies(this._client);\n    }\n}\nAccess.GatewayCA = GatewayCA;\nAccess.GatewayCAListResponsesSinglePage = GatewayCAListResponsesSinglePage;\nAccess.Infrastructure = Infrastructure;\nAccess.Applications = Applications;\nAccess.ApplicationListResponsesV4PagePaginationArray = ApplicationListResponsesV4PagePaginationArray;\nAccess.Certificates = Certificates;\nAccess.CertificatesV4PagePaginationArray = CertificatesV4PagePaginationArray;\nAccess.Groups = Groups;\nAccess.GroupListResponsesV4PagePaginationArray = GroupListResponsesV4PagePaginationArray;\nAccess.ServiceTokens = ServiceTokens;\nAccess.ServiceTokensV4PagePaginationArray = ServiceTokensV4PagePaginationArray;\nAccess.Bookmarks = Bookmarks;\nAccess.BookmarksSinglePage = BookmarksSinglePage;\nAccess.Keys = Keys;\nAccess.Logs = Logs;\nAccess.Users = Users;\nAccess.UserListResponsesV4PagePaginationArray = UserListResponsesV4PagePaginationArray;\nAccess.CustomPages = CustomPages;\nAccess.CustomPageWithoutHTMLsV4PagePaginationArray = CustomPageWithoutHTMLsV4PagePaginationArray;\nAccess.Tags = Tags;\nAccess.TagsV4PagePaginationArray = TagsV4PagePaginationArray;\nAccess.Policies = Policies;\nAccess.PolicyListResponsesV4PagePaginationArray = PolicyListResponsesV4PagePaginationArray;\n//# sourceMappingURL=access.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { CursorPagination } from \"../../../pagination.mjs\";\nexport class Devices extends APIResource {\n    /**\n     * Lists WARP devices.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deviceListResponse of client.zeroTrust.devices.devices.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/physical-devices`, DeviceListResponsesCursorPagination, { query, ...options });\n    }\n    /**\n     * Deletes a WARP device.\n     *\n     * @example\n     * ```ts\n     * const device =\n     *   await client.zeroTrust.devices.devices.delete(\n     *     'device_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(deviceId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/devices/physical-devices/${deviceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single WARP device.\n     *\n     * @example\n     * ```ts\n     * const device = await client.zeroTrust.devices.devices.get(\n     *   'device_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(deviceId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/physical-devices/${deviceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Revokes all WARP registrations associated with the specified device.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.devices.devices.revoke(\n     *     'device_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    revoke(deviceId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/devices/physical-devices/${deviceId}/revoke`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DeviceListResponsesCursorPagination extends CursorPagination {\n}\nDevices.DeviceListResponsesCursorPagination = DeviceListResponsesCursorPagination;\n//# sourceMappingURL=devices_.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class DEXTests extends APIResource {\n    /**\n     * Create a DEX test.\n     *\n     * @example\n     * ```ts\n     * const dexTest =\n     *   await client.zeroTrust.devices.dexTests.create({\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     data: {},\n     *     enabled: true,\n     *     interval: '30m',\n     *     name: 'HTTP dash health check',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dex/devices/dex_tests`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a DEX test.\n     *\n     * @example\n     * ```ts\n     * const dexTest =\n     *   await client.zeroTrust.devices.dexTests.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       data: {},\n     *       enabled: true,\n     *       interval: '30m',\n     *       name: 'HTTP dash health check',\n     *     },\n     *   );\n     * ```\n     */\n    update(dexTestId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dex/devices/dex_tests/${dexTestId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch all DEX tests\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const dexTestListResponse of client.zeroTrust.devices.dexTests.list(\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dex/devices/dex_tests`, DEXTestListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Device DEX test. Returns the remaining device dex tests for the\n     * account.\n     *\n     * @example\n     * ```ts\n     * const dexTest =\n     *   await client.zeroTrust.devices.dexTests.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     *   );\n     * ```\n     */\n    delete(dexTestId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dex/devices/dex_tests/${dexTestId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a single DEX test.\n     *\n     * @example\n     * ```ts\n     * const dexTest = await client.zeroTrust.devices.dexTests.get(\n     *   '372e67954025e0ba6aaa6d586b9e0b59',\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    get(dexTestId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dex/devices/dex_tests/${dexTestId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DEXTestListResponsesSinglePage extends SinglePage {\n}\nDEXTests.DEXTestListResponsesSinglePage = DEXTestListResponsesSinglePage;\n//# sourceMappingURL=dex-tests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class FleetStatus extends APIResource {\n    /**\n     * Get the live status of a latest device given device_id from the device_state\n     * table\n     *\n     * @example\n     * ```ts\n     * const fleetStatus =\n     *   await client.zeroTrust.devices.fleetStatus.get(\n     *     'cb49c27f-7f97-49c5-b6f3-f7c01ead0fd7',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       since_minutes: 10,\n     *     },\n     *   );\n     * ```\n     */\n    get(deviceId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/devices/${deviceId}/fleet-status/live`, {\n            query,\n            ...options,\n        });\n    }\n}\n//# sourceMappingURL=fleet-status.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Networks extends APIResource {\n    /**\n     * Creates a new device managed network.\n     *\n     * @example\n     * ```ts\n     * const deviceNetwork =\n     *   await client.zeroTrust.devices.networks.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     config: { tls_sockaddr: 'foo.bar:1234' },\n     *     name: 'managed-network-1',\n     *     type: 'tls',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/networks`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured device managed network.\n     *\n     * @example\n     * ```ts\n     * const deviceNetwork =\n     *   await client.zeroTrust.devices.networks.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    update(networkId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/devices/networks/${networkId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a list of managed networks for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deviceNetwork of client.zeroTrust.devices.networks.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/networks`, DeviceNetworksSinglePage, options);\n    }\n    /**\n     * Deletes a device managed network and fetches a list of the remaining device\n     * managed networks for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deviceNetwork of client.zeroTrust.devices.networks.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    delete(networkId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/networks/${networkId}`, DeviceNetworksSinglePage, { method: 'delete', ...options });\n    }\n    /**\n     * Fetches details for a single managed network.\n     *\n     * @example\n     * ```ts\n     * const deviceNetwork =\n     *   await client.zeroTrust.devices.networks.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(networkId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/networks/${networkId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DeviceNetworksSinglePage extends SinglePage {\n}\nNetworks.DeviceNetworksSinglePage = DeviceNetworksSinglePage;\n//# sourceMappingURL=networks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class OverrideCodes extends APIResource {\n    /**\n     * Fetches a one-time use admin override code for a device. This relies on the\n     * **Admin Override** setting being enabled in your device configuration. Not\n     * supported when\n     * [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/)\n     * is enabled for the account. **Deprecated:** please use GET\n     * /accounts/{account_id}/devices/registrations/{registration_id}/override_codes\n     * instead.\n     *\n     * @deprecated\n     */\n    list(deviceId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/${deviceId}/override_codes`, OverrideCodeListResponsesSinglePage, options);\n    }\n    /**\n     * Fetches one-time use admin override codes for a registration. This relies on the\n     * **Admin Override** setting being enabled in your device configuration.\n     *\n     * @example\n     * ```ts\n     * const overrideCode =\n     *   await client.zeroTrust.devices.overrideCodes.get(\n     *     'registration_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(registrationId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/registrations/${registrationId}/override_codes`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OverrideCodeListResponsesSinglePage extends SinglePage {\n}\nOverrideCodes.OverrideCodeListResponsesSinglePage = OverrideCodeListResponsesSinglePage;\n//# sourceMappingURL=override-codes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { CursorPagination } from \"../../../pagination.mjs\";\nexport class Registrations extends APIResource {\n    /**\n     * Lists WARP registrations.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const registrationListResponse of client.zeroTrust.devices.registrations.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/registrations`, RegistrationListResponsesCursorPagination, { query, ...options });\n    }\n    /**\n     * Deletes a WARP registration.\n     *\n     * @example\n     * ```ts\n     * const registration =\n     *   await client.zeroTrust.devices.registrations.delete(\n     *     'registration_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(registrationId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/devices/registrations/${registrationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a list of WARP registrations.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.devices.registrations.bulkDelete({\n     *     account_id: 'account_id',\n     *     id: ['string'],\n     *   });\n     * ```\n     */\n    bulkDelete(params, options) {\n        const { account_id, id } = params;\n        return this._client.delete(`/accounts/${account_id}/devices/registrations`, {\n            query: { id },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single WARP registration.\n     *\n     * @example\n     * ```ts\n     * const registration =\n     *   await client.zeroTrust.devices.registrations.get(\n     *     'registration_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(registrationId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/registrations/${registrationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Revokes a list of WARP registrations.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.devices.registrations.revoke({\n     *     account_id: 'account_id',\n     *     id: ['string'],\n     *   });\n     * ```\n     */\n    revoke(params, options) {\n        const { account_id, id } = params;\n        return this._client.post(`/accounts/${account_id}/devices/registrations/revoke`, {\n            query: { id },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Unrevokes a list of WARP registrations.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.devices.registrations.unrevoke({\n     *     account_id: 'account_id',\n     *     id: ['string'],\n     *   });\n     * ```\n     */\n    unrevoke(params, options) {\n        const { account_id, id } = params;\n        return this._client.post(`/accounts/${account_id}/devices/registrations/unrevoke`, {\n            query: { id },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RegistrationListResponsesCursorPagination extends CursorPagination {\n}\nRegistrations.RegistrationListResponsesCursorPagination = RegistrationListResponsesCursorPagination;\n//# sourceMappingURL=registrations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Revoke extends APIResource {\n    /**\n     * Revokes a list of devices. Not supported when\n     * [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/)\n     * is enabled.\n     *\n     * **Deprecated**: please use POST\n     * /accounts/{account_id}/devices/registrations/revoke instead.\n     *\n     * @deprecated\n     */\n    create(params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/revoke`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=revoke.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Updates the current device settings for a Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const deviceSettings =\n     *   await client.zeroTrust.devices.settings.update({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/devices/settings`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Resets the current device settings for a Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const deviceSettings =\n     *   await client.zeroTrust.devices.settings.delete({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    delete(params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/devices/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patches the current device settings for a Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const deviceSettings =\n     *   await client.zeroTrust.devices.settings.edit({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/devices/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Describes the current device settings for a Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const deviceSettings =\n     *   await client.zeroTrust.devices.settings.get({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Unrevoke extends APIResource {\n    /**\n     * Unrevokes a list of devices. Not supported when\n     * [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/)\n     * is enabled.\n     *\n     * **Deprecated**: please use POST\n     * /accounts/{account_id}/devices/registrations/unrevoke instead.\n     *\n     * @deprecated\n     */\n    create(params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/unrevoke`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=unrevoke.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SplitTunnelExcludesSinglePage } from \"../policies.mjs\";\nexport class Excludes extends APIResource {\n    /**\n     * Sets the list of routes excluded from the WARP client's tunnel for a specific\n     * device settings profile.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelExclude of client.zeroTrust.devices.policies.custom.excludes.update(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     body: [{ address: '192.0.2.0/24' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(policyId, params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}/exclude`, SplitTunnelExcludesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * Fetches the list of routes excluded from the WARP client's tunnel for a specific\n     * device settings profile.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelExclude of client.zeroTrust.devices.policies.custom.excludes.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}/exclude`, SplitTunnelExcludesSinglePage, options);\n    }\n}\nexport { SplitTunnelExcludesSinglePage };\n//# sourceMappingURL=excludes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { FallbackDomainsSinglePage } from \"../policies.mjs\";\nexport class FallbackDomains extends APIResource {\n    /**\n     * Sets the list of domains to bypass Gateway DNS resolution. These domains will\n     * use the specified local DNS resolver instead. This will only apply to the\n     * specified device settings profile.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fallbackDomain of client.zeroTrust.devices.policies.custom.fallbackDomains.update(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     domains: [{ suffix: 'example.com' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(policyId, params, options) {\n        const { account_id, domains } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}/fallback_domains`, FallbackDomainsSinglePage, { body: domains, method: 'put', ...options });\n    }\n    /**\n     * Fetches the list of domains to bypass Gateway DNS resolution from a specified\n     * device settings profile. These domains will use the specified local DNS resolver\n     * instead.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fallbackDomain of client.zeroTrust.devices.policies.custom.fallbackDomains.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}/fallback_domains`, FallbackDomainsSinglePage, options);\n    }\n}\nexport { FallbackDomainsSinglePage };\n//# sourceMappingURL=fallback-domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SplitTunnelIncludesSinglePage } from \"../policies.mjs\";\nexport class Includes extends APIResource {\n    /**\n     * Sets the list of routes included in the WARP client's tunnel for a specific\n     * device settings profile.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelInclude of client.zeroTrust.devices.policies.custom.includes.update(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     body: [{ address: '192.0.2.0/24' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(policyId, params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}/include`, SplitTunnelIncludesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * Fetches the list of routes included in the WARP client's tunnel for a specific\n     * device settings profile.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelInclude of client.zeroTrust.devices.policies.custom.includes.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}/include`, SplitTunnelIncludesSinglePage, options);\n    }\n}\nexport { SplitTunnelIncludesSinglePage };\n//# sourceMappingURL=includes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SettingsPoliciesSinglePage } from \"../policies.mjs\";\nimport * as ExcludesAPI from \"./excludes.mjs\";\nimport { Excludes } from \"./excludes.mjs\";\nimport * as FallbackDomainsAPI from \"./fallback-domains.mjs\";\nimport { FallbackDomains } from \"./fallback-domains.mjs\";\nimport * as IncludesAPI from \"./includes.mjs\";\nimport { Includes } from \"./includes.mjs\";\nexport class Custom extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.excludes = new ExcludesAPI.Excludes(this._client);\n        this.includes = new IncludesAPI.Includes(this._client);\n        this.fallbackDomains = new FallbackDomainsAPI.FallbackDomains(this._client);\n    }\n    /**\n     * Creates a device settings profile to be applied to certain devices matching the\n     * criteria.\n     *\n     * @example\n     * ```ts\n     * const settingsPolicy =\n     *   await client.zeroTrust.devices.policies.custom.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     match: 'identity.email == \"test@cloudflare.com\"',\n     *     name: 'Allow Developers',\n     *     precedence: 100,\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/policy`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a list of the device settings profiles for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const settingsPolicy of client.zeroTrust.devices.policies.custom.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policies`, SettingsPoliciesSinglePage, options);\n    }\n    /**\n     * Deletes a device settings profile and fetches a list of the remaining profiles\n     * for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const settingsPolicy of client.zeroTrust.devices.policies.custom.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    delete(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/${policyId}`, SettingsPoliciesSinglePage, { method: 'delete', ...options });\n    }\n    /**\n     * Updates a configured device settings profile.\n     *\n     * @example\n     * ```ts\n     * const settingsPolicy =\n     *   await client.zeroTrust.devices.policies.custom.edit(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(policyId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/devices/policy/${policyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a device settings profile by ID.\n     *\n     * @example\n     * ```ts\n     * const settingsPolicy =\n     *   await client.zeroTrust.devices.policies.custom.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(policyId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/policy/${policyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nCustom.Excludes = Excludes;\nCustom.Includes = Includes;\nCustom.FallbackDomains = FallbackDomains;\nexport { SettingsPoliciesSinglePage };\n//# sourceMappingURL=custom.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nexport class Certificates extends APIResource {\n    /**\n     * Enable Zero Trust Clients to provision a certificate, containing a x509 subject,\n     * and referenced by Access device posture policies when the client visits MTLS\n     * protected domains. This facilitates device posture without a WARP session.\n     *\n     * @example\n     * ```ts\n     * const devicePolicyCertificates =\n     *   await client.zeroTrust.devices.policies.default.certificates.edit(\n     *     {\n     *       zone_id: '699d98642c564d2e855e9661899b7252',\n     *       enabled: true,\n     *     },\n     *   );\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/devices/policy/certificates`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches device certificate provisioning.\n     *\n     * @example\n     * ```ts\n     * const devicePolicyCertificates =\n     *   await client.zeroTrust.devices.policies.default.certificates.get(\n     *     { zone_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/devices/policy/certificates`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SplitTunnelExcludesSinglePage } from \"../policies.mjs\";\nexport class Excludes extends APIResource {\n    /**\n     * Sets the list of routes excluded from the WARP client's tunnel.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelExclude of client.zeroTrust.devices.policies.default.excludes.update(\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     body: [{ address: '192.0.2.0/24' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/exclude`, SplitTunnelExcludesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * Fetches the list of routes excluded from the WARP client's tunnel.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelExclude of client.zeroTrust.devices.policies.default.excludes.get(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/exclude`, SplitTunnelExcludesSinglePage, options);\n    }\n}\nexport { SplitTunnelExcludesSinglePage };\n//# sourceMappingURL=excludes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { FallbackDomainsSinglePage } from \"../policies.mjs\";\nexport class FallbackDomains extends APIResource {\n    /**\n     * Sets the list of domains to bypass Gateway DNS resolution. These domains will\n     * use the specified local DNS resolver instead.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fallbackDomain of client.zeroTrust.devices.policies.default.fallbackDomains.update(\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     domains: [{ suffix: 'example.com' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(params, options) {\n        const { account_id, domains } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/fallback_domains`, FallbackDomainsSinglePage, { body: domains, method: 'put', ...options });\n    }\n    /**\n     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will\n     * use the specified local DNS resolver instead.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fallbackDomain of client.zeroTrust.devices.policies.default.fallbackDomains.get(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/fallback_domains`, FallbackDomainsSinglePage, options);\n    }\n}\nexport { FallbackDomainsSinglePage };\n//# sourceMappingURL=fallback-domains.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { SplitTunnelIncludesSinglePage } from \"../policies.mjs\";\nexport class Includes extends APIResource {\n    /**\n     * Sets the list of routes included in the WARP client's tunnel.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelInclude of client.zeroTrust.devices.policies.default.includes.update(\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     body: [{ address: '192.0.2.0/24' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/include`, SplitTunnelIncludesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * Fetches the list of routes included in the WARP client's tunnel.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const splitTunnelInclude of client.zeroTrust.devices.policies.default.includes.get(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/include`, SplitTunnelIncludesSinglePage, options);\n    }\n}\nexport { SplitTunnelIncludesSinglePage };\n//# sourceMappingURL=includes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as CertificatesAPI from \"./certificates.mjs\";\nimport { Certificates } from \"./certificates.mjs\";\nimport * as ExcludesAPI from \"./excludes.mjs\";\nimport { Excludes } from \"./excludes.mjs\";\nimport * as FallbackDomainsAPI from \"./fallback-domains.mjs\";\nimport { FallbackDomains } from \"./fallback-domains.mjs\";\nimport * as IncludesAPI from \"./includes.mjs\";\nimport { Includes } from \"./includes.mjs\";\nexport class Default extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.excludes = new ExcludesAPI.Excludes(this._client);\n        this.includes = new IncludesAPI.Includes(this._client);\n        this.fallbackDomains = new FallbackDomainsAPI.FallbackDomains(this._client);\n        this.certificates = new CertificatesAPI.Certificates(this._client);\n    }\n    /**\n     * Updates the default device settings profile for an account.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.devices.policies.default.edit({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/devices/policy`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the default device settings profile for an account.\n     *\n     * @example\n     * ```ts\n     * const _default =\n     *   await client.zeroTrust.devices.policies.default.get({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/policy`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nDefault.Excludes = Excludes;\nDefault.Includes = Includes;\nDefault.FallbackDomains = FallbackDomains;\nDefault.Certificates = Certificates;\n//# sourceMappingURL=default.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CustomAPI from \"./custom/custom.mjs\";\nimport { Custom, } from \"./custom/custom.mjs\";\nimport * as DefaultAPI from \"./default/default.mjs\";\nimport { Default, } from \"./default/default.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Policies extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.default = new DefaultAPI.Default(this._client);\n        this.custom = new CustomAPI.Custom(this._client);\n    }\n}\nexport class SplitTunnelExcludesSinglePage extends SinglePage {\n}\nexport class SplitTunnelIncludesSinglePage extends SinglePage {\n}\nexport class FallbackDomainsSinglePage extends SinglePage {\n}\nexport class SettingsPoliciesSinglePage extends SinglePage {\n}\nPolicies.Default = Default;\nPolicies.Custom = Custom;\n//# sourceMappingURL=policies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Integrations extends APIResource {\n    /**\n     * Create a new device posture integration.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.devices.posture.integrations.create(\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       config: {\n     *         api_url: 'https://as123.awmdm.com/API',\n     *         auth_url:\n     *           'https://na.uemauth.vmwservices.com/connect/token',\n     *         client_id: 'example client id',\n     *         client_secret: 'example client secret',\n     *       },\n     *       interval: '10m',\n     *       name: 'My Workspace One Integration',\n     *       type: 'workspace_one',\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/posture/integration`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the list of device posture integrations for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const integration of client.zeroTrust.devices.posture.integrations.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/posture/integration`, IntegrationsSinglePage, options);\n    }\n    /**\n     * Delete a configured device posture integration.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.devices.posture.integrations.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(integrationId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/devices/posture/integration/${integrationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured device posture integration.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.devices.posture.integrations.edit(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(integrationId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/devices/posture/integration/${integrationId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches details for a single device posture integration.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.devices.posture.integrations.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(integrationId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/posture/integration/${integrationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class IntegrationsSinglePage extends SinglePage {\n}\nIntegrations.IntegrationsSinglePage = IntegrationsSinglePage;\n//# sourceMappingURL=integrations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as IntegrationsAPI from \"./integrations.mjs\";\nimport { Integrations, IntegrationsSinglePage, } from \"./integrations.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Posture extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.integrations = new IntegrationsAPI.Integrations(this._client);\n    }\n    /**\n     * Creates a new device posture rule.\n     *\n     * @example\n     * ```ts\n     * const devicePostureRule =\n     *   await client.zeroTrust.devices.posture.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     name: 'Admin Serial Numbers',\n     *     type: 'file',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/posture`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a device posture rule.\n     *\n     * @example\n     * ```ts\n     * const devicePostureRule =\n     *   await client.zeroTrust.devices.posture.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       name: 'Admin Serial Numbers',\n     *       type: 'file',\n     *     },\n     *   );\n     * ```\n     */\n    update(ruleId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/devices/posture/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches device posture rules for a Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const devicePostureRule of client.zeroTrust.devices.posture.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices/posture`, DevicePostureRulesSinglePage, options);\n    }\n    /**\n     * Deletes a device posture rule.\n     *\n     * @example\n     * ```ts\n     * const posture =\n     *   await client.zeroTrust.devices.posture.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/devices/posture/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single device posture rule.\n     *\n     * @example\n     * ```ts\n     * const devicePostureRule =\n     *   await client.zeroTrust.devices.posture.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/posture/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DevicePostureRulesSinglePage extends SinglePage {\n}\nPosture.DevicePostureRulesSinglePage = DevicePostureRulesSinglePage;\nPosture.Integrations = Integrations;\nPosture.IntegrationsSinglePage = IntegrationsSinglePage;\n//# sourceMappingURL=posture.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class GlobalWARPOverride extends APIResource {\n    /**\n     * Sets the Global WARP override state.\n     *\n     * @example\n     * ```ts\n     * const globalWARPOverride =\n     *   await client.zeroTrust.devices.resilience.globalWARPOverride.create(\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       disconnect: false,\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/devices/resilience/disconnect`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch the Global WARP override state.\n     *\n     * @example\n     * ```ts\n     * const globalWARPOverride =\n     *   await client.zeroTrust.devices.resilience.globalWARPOverride.get(\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/resilience/disconnect`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=global-warp-override.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as GlobalWARPOverrideAPI from \"./global-warp-override.mjs\";\nimport { GlobalWARPOverride, } from \"./global-warp-override.mjs\";\nexport class Resilience extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.globalWARPOverride = new GlobalWARPOverrideAPI.GlobalWARPOverride(this._client);\n    }\n}\nResilience.GlobalWARPOverride = GlobalWARPOverride;\n//# sourceMappingURL=resilience.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as DevicesDevicesAPI from \"./devices_.mjs\";\nimport { DeviceListResponsesCursorPagination, Devices as DevicesAPIDevices, } from \"./devices_.mjs\";\nimport * as DEXTestsAPI from \"./dex-tests.mjs\";\nimport { DEXTestListResponsesSinglePage, DEXTests, } from \"./dex-tests.mjs\";\nimport * as FleetStatusAPI from \"./fleet-status.mjs\";\nimport { FleetStatus } from \"./fleet-status.mjs\";\nimport * as NetworksAPI from \"./networks.mjs\";\nimport { DeviceNetworksSinglePage, Networks, } from \"./networks.mjs\";\nimport * as OverrideCodesAPI from \"./override-codes.mjs\";\nimport { OverrideCodeListResponsesSinglePage, OverrideCodes, } from \"./override-codes.mjs\";\nimport * as RegistrationsAPI from \"./registrations.mjs\";\nimport { RegistrationListResponsesCursorPagination, Registrations, } from \"./registrations.mjs\";\nimport * as RevokeAPI from \"./revoke.mjs\";\nimport { Revoke } from \"./revoke.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings, } from \"./settings.mjs\";\nimport * as UnrevokeAPI from \"./unrevoke.mjs\";\nimport { Unrevoke } from \"./unrevoke.mjs\";\nimport * as PoliciesAPI from \"./policies/policies.mjs\";\nimport { Policies, } from \"./policies/policies.mjs\";\nimport * as PostureAPI from \"./posture/posture.mjs\";\nimport { DevicePostureRulesSinglePage, Posture, } from \"./posture/posture.mjs\";\nimport * as ResilienceAPI from \"./resilience/resilience.mjs\";\nimport { Resilience } from \"./resilience/resilience.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Devices extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.devices = new DevicesDevicesAPI.Devices(this._client);\n        this.resilience = new ResilienceAPI.Resilience(this._client);\n        this.registrations = new RegistrationsAPI.Registrations(this._client);\n        this.dexTests = new DEXTestsAPI.DEXTests(this._client);\n        this.networks = new NetworksAPI.Networks(this._client);\n        this.fleetStatus = new FleetStatusAPI.FleetStatus(this._client);\n        this.policies = new PoliciesAPI.Policies(this._client);\n        this.posture = new PostureAPI.Posture(this._client);\n        this.revoke = new RevokeAPI.Revoke(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n        this.unrevoke = new UnrevokeAPI.Unrevoke(this._client);\n        this.overrideCodes = new OverrideCodesAPI.OverrideCodes(this._client);\n    }\n    /**\n     * List WARP devices. Not supported when\n     * [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/)\n     * is enabled for the account.\n     *\n     * **Deprecated**: please use one of the following endpoints instead:\n     *\n     * - GET /accounts/{account_id}/devices/physical-devices\n     * - GET /accounts/{account_id}/devices/registrations\n     *\n     * @deprecated\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/devices`, DevicesSinglePage, options);\n    }\n    /**\n     * Fetches a single WARP device. Not supported when\n     * [multi-user mode](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/deployment/mdm-deployment/windows-multiuser/)\n     * is enabled for the account.\n     *\n     * **Deprecated**: please use one of the following endpoints instead:\n     *\n     * - GET /accounts/{account_id}/devices/physical-devices/{device_id}\n     * - GET /accounts/{account_id}/devices/registrations/{registration_id}\n     *\n     * @deprecated\n     */\n    get(deviceId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/devices/${deviceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DevicesSinglePage extends SinglePage {\n}\nDevices.DevicesSinglePage = DevicesSinglePage;\nDevices.Devices = DevicesAPIDevices;\nDevices.DeviceListResponsesCursorPagination = DeviceListResponsesCursorPagination;\nDevices.Resilience = Resilience;\nDevices.Registrations = Registrations;\nDevices.RegistrationListResponsesCursorPagination = RegistrationListResponsesCursorPagination;\nDevices.DEXTests = DEXTests;\nDevices.DEXTestListResponsesSinglePage = DEXTestListResponsesSinglePage;\nDevices.Networks = Networks;\nDevices.DeviceNetworksSinglePage = DeviceNetworksSinglePage;\nDevices.FleetStatus = FleetStatus;\nDevices.Policies = Policies;\nDevices.Posture = Posture;\nDevices.DevicePostureRulesSinglePage = DevicePostureRulesSinglePage;\nDevices.Revoke = Revoke;\nDevices.Settings = Settings;\nDevices.Unrevoke = Unrevoke;\nDevices.OverrideCodes = OverrideCodes;\nDevices.OverrideCodeListResponsesSinglePage = OverrideCodeListResponsesSinglePage;\n//# sourceMappingURL=devices.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Colos extends APIResource {\n    /**\n     * List Cloudflare colos that account's devices were connected to during a time\n     * period, sorted by usage starting from the most used colo. Colos without traffic\n     * are also returned and sorted alphabetically.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const coloListResponse of client.zeroTrust.dex.colos.list(\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     from: '2023-08-20T20:45:00Z',\n     *     to: '2023-08-24T20:45:00Z',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dex/colos`, ColoListResponsesSinglePage, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class ColoListResponsesSinglePage extends SinglePage {\n}\nColos.ColoListResponsesSinglePage = ColoListResponsesSinglePage;\n//# sourceMappingURL=colos.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class TracerouteTests extends APIResource {\n    /**\n     * Get test details and aggregate performance metrics for an traceroute test for a\n     * given time period between 1 hour and 7 days.\n     *\n     * @example\n     * ```ts\n     * const traceroute =\n     *   await client.zeroTrust.dex.tracerouteTests.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       from: '1689520412000',\n     *       interval: 'minute',\n     *       to: '1689606812000',\n     *     },\n     *   );\n     * ```\n     */\n    get(testId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/traceroute-tests/${testId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a breakdown of metrics by hop for individual traceroute test runs\n     *\n     * @example\n     * ```ts\n     * const networkPathResponse =\n     *   await client.zeroTrust.dex.tracerouteTests.networkPath(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       deviceId: 'deviceId',\n     *       from: '1689520412000',\n     *       interval: 'minute',\n     *       to: '1689606812000',\n     *     },\n     *   );\n     * ```\n     */\n    networkPath(testId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/traceroute-tests/${testId}/network-path`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get percentiles for a traceroute test for a given time period between 1 hour and\n     * 7 days.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.dex.tracerouteTests.percentiles(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       from: '2023-09-20T17:00:00Z',\n     *       to: '2023-09-20T17:00:00Z',\n     *     },\n     *   );\n     * ```\n     */\n    percentiles(testId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/traceroute-tests/${testId}/percentiles`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=traceroute-tests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class WARPChangeEvents extends APIResource {\n    /**\n     * List WARP configuration and enablement toggle change events by device.\n     *\n     * @example\n     * ```ts\n     * const warpChangeEvents =\n     *   await client.zeroTrust.dex.warpChangeEvents.get({\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     from: '2023-09-20T17:00:00Z',\n     *     page: 1,\n     *     per_page: 1,\n     *     to: '2023-09-20T17:00:00Z',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/warp-change-events`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=warp-change-events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { V4PagePagination } from \"../../../../pagination.mjs\";\nexport class Devices extends APIResource {\n    /**\n     * List devices with WARP client support for remote captures which have been\n     * connected in the last 1 hour.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deviceListResponse of client.zeroTrust.dex.commands.devices.list(\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     page: 1,\n     *     per_page: 1,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dex/commands/devices`, DeviceListResponsesV4PagePagination, { query, ...options });\n    }\n}\nexport class DeviceListResponsesV4PagePagination extends V4PagePagination {\n}\nDevices.DeviceListResponsesV4PagePagination = DeviceListResponsesV4PagePagination;\n//# sourceMappingURL=devices.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Downloads extends APIResource {\n    /**\n     * Downloads artifacts for an executed command. Bulk downloads are not supported\n     *\n     * @example\n     * ```ts\n     * const download =\n     *   await client.zeroTrust.dex.commands.downloads.get(\n     *     '5758fefe-ae7e-4538-a39b-1fef6abcb909',\n     *     'filename',\n     *     { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     *   );\n     *\n     * const content = await download.blob();\n     * console.log(content);\n     * ```\n     */\n    get(commandId, filename, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dex/commands/${commandId}/downloads/${filename}`, {\n            ...options,\n            headers: { Accept: 'application/zip', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=downloads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Quota extends APIResource {\n    /**\n     * Retrieves the current quota usage and limits for device commands within a\n     * specific account, including the time when the quota will reset\n     *\n     * @example\n     * ```ts\n     * const quota = await client.zeroTrust.dex.commands.quota.get(\n     *   { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     * );\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dex/commands/quota`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=quota.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as DevicesAPI from \"./devices.mjs\";\nimport { DeviceListResponsesV4PagePagination, Devices, } from \"./devices.mjs\";\nimport * as DownloadsAPI from \"./downloads.mjs\";\nimport { Downloads } from \"./downloads.mjs\";\nimport * as QuotaAPI from \"./quota.mjs\";\nimport { Quota } from \"./quota.mjs\";\nimport { V4PagePagination } from \"../../../../pagination.mjs\";\nexport class Commands extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.devices = new DevicesAPI.Devices(this._client);\n        this.downloads = new DownloadsAPI.Downloads(this._client);\n        this.quota = new QuotaAPI.Quota(this._client);\n    }\n    /**\n     * Initiate commands for up to 10 devices per account\n     *\n     * @example\n     * ```ts\n     * const command = await client.zeroTrust.dex.commands.create({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     *   commands: [\n     *     {\n     *       command_type: 'pcap',\n     *       device_id: 'device_id',\n     *       user_email: 'user_email',\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dex/commands`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves a paginated list of commands issued to devices under the specified\n     * account, optionally filtered by time range, device, or other parameters\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const commandListResponse of client.zeroTrust.dex.commands.list(\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     page: 1,\n     *     per_page: 50,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dex/commands`, CommandListResponsesV4PagePagination, { query, ...options });\n    }\n}\nexport class CommandListResponsesV4PagePagination extends V4PagePagination {\n}\nCommands.CommandListResponsesV4PagePagination = CommandListResponsesV4PagePagination;\nCommands.Devices = Devices;\nCommands.DeviceListResponsesV4PagePagination = DeviceListResponsesV4PagePagination;\nCommands.Downloads = Downloads;\nCommands.Quota = Quota;\n//# sourceMappingURL=commands.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Devices extends APIResource {\n    /**\n     * List details for devices using WARP\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const deviceListResponse of client.zeroTrust.dex.fleetStatus.devices.list(\n     *   {\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     from: '2023-10-11T00:00:00Z',\n     *     page: 1,\n     *     per_page: 10,\n     *     to: '2023-10-11T00:00:00Z',\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dex/fleet-status/devices`, DeviceListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class DeviceListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nDevices.DeviceListResponsesV4PagePaginationArray = DeviceListResponsesV4PagePaginationArray;\n//# sourceMappingURL=devices.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as DevicesAPI from \"./devices.mjs\";\nimport { DeviceListResponsesV4PagePaginationArray, Devices, } from \"./devices.mjs\";\nexport class FleetStatus extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.devices = new DevicesAPI.Devices(this._client);\n    }\n    /**\n     * List details for live (up to 60 minutes) devices using WARP\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.dex.fleetStatus.live({\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *     since_minutes: 10,\n     *   });\n     * ```\n     */\n    live(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/fleet-status/live`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List details for devices using WARP, up to 7 days\n     *\n     * @example\n     * ```ts\n     * await client.zeroTrust.dex.fleetStatus.overTime({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     *   from: '2023-10-11T00:00:00Z',\n     *   to: '2023-10-11T00:00:00Z',\n     * });\n     * ```\n     */\n    overTime(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/fleet-status/over-time`, {\n            query,\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n}\nFleetStatus.Devices = Devices;\nFleetStatus.DeviceListResponsesV4PagePaginationArray = DeviceListResponsesV4PagePaginationArray;\n//# sourceMappingURL=fleet-status.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Percentiles extends APIResource {\n    /**\n     * Get percentiles for an http test for a given time period between 1 hour and 7\n     * days.\n     *\n     * @example\n     * ```ts\n     * const httpDetailsPercentiles =\n     *   await client.zeroTrust.dex.httpTests.percentiles.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       from: '2023-09-20T17:00:00Z',\n     *       to: '2023-09-20T17:00:00Z',\n     *     },\n     *   );\n     * ```\n     */\n    get(testId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/http-tests/${testId}/percentiles`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=percentiles.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as PercentilesAPI from \"./percentiles.mjs\";\nimport { Percentiles } from \"./percentiles.mjs\";\nexport class HTTPTests extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.percentiles = new PercentilesAPI.Percentiles(this._client);\n    }\n    /**\n     * Get test details and aggregate performance metrics for an http test for a given\n     * time period between 1 hour and 7 days.\n     *\n     * @example\n     * ```ts\n     * const httpDetails =\n     *   await client.zeroTrust.dex.httpTests.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '01a7362d577a6c3019a474fd6f485823',\n     *       from: '1689520412000',\n     *       interval: 'minute',\n     *       to: '1689606812000',\n     *     },\n     *   );\n     * ```\n     */\n    get(testId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/http-tests/${testId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nHTTPTests.Percentiles = Percentiles;\n//# sourceMappingURL=http-tests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class UniqueDevices extends APIResource {\n    /**\n     * Returns unique count of devices that have run synthetic application monitoring\n     * tests in the past 7 days.\n     *\n     * @example\n     * ```ts\n     * const uniqueDevices =\n     *   await client.zeroTrust.dex.tests.uniqueDevices.list({\n     *     account_id: '01a7362d577a6c3019a474fd6f485823',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/dex/tests/unique-devices`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=unique-devices.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as UniqueDevicesAPI from \"./unique-devices.mjs\";\nimport { V4PagePagination } from \"../../../../pagination.mjs\";\nexport class Tests extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.uniqueDevices = new UniqueDevicesAPI.UniqueDevices(this._client);\n    }\n    /**\n     * List DEX tests with overview metrics\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tests of client.zeroTrust.dex.tests.list({\n     *   account_id: '01a7362d577a6c3019a474fd6f485823',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dex/tests/overview`, TestsV4PagePagination, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class TestsV4PagePagination extends V4PagePagination {\n}\nTests.TestsV4PagePagination = TestsV4PagePagination;\n//# sourceMappingURL=tests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class NetworkPath extends APIResource {\n    /**\n     * Get a breakdown of hops and performance metrics for a specific traceroute test\n     * run\n     *\n     * @example\n     * ```ts\n     * const networkPath =\n     *   await client.zeroTrust.dex.tracerouteTestResults.networkPath.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '01a7362d577a6c3019a474fd6f485823' },\n     *   );\n     * ```\n     */\n    get(testResultId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dex/traceroute-test-results/${testResultId}/network-path`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=network-path.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as NetworkPathAPI from \"./network-path.mjs\";\nimport { NetworkPath } from \"./network-path.mjs\";\nexport class TracerouteTestResults extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.networkPath = new NetworkPathAPI.NetworkPath(this._client);\n    }\n}\nTracerouteTestResults.NetworkPath = NetworkPath;\n//# sourceMappingURL=traceroute-test-results.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ColosAPI from \"./colos.mjs\";\nimport { ColoListResponsesSinglePage, Colos } from \"./colos.mjs\";\nimport * as TracerouteTestsAPI from \"./traceroute-tests.mjs\";\nimport { TracerouteTests, } from \"./traceroute-tests.mjs\";\nimport * as WARPChangeEventsAPI from \"./warp-change-events.mjs\";\nimport { WARPChangeEvents } from \"./warp-change-events.mjs\";\nimport * as CommandsAPI from \"./commands/commands.mjs\";\nimport { CommandListResponsesV4PagePagination, Commands, } from \"./commands/commands.mjs\";\nimport * as FleetStatusAPI from \"./fleet-status/fleet-status.mjs\";\nimport { FleetStatus, } from \"./fleet-status/fleet-status.mjs\";\nimport * as HTTPTestsAPI from \"./http-tests/http-tests.mjs\";\nimport { HTTPTests } from \"./http-tests/http-tests.mjs\";\nimport * as TestsAPI from \"./tests/tests.mjs\";\nimport { TestsV4PagePagination } from \"./tests/tests.mjs\";\nimport * as TracerouteTestResultsAPI from \"./traceroute-test-results/traceroute-test-results.mjs\";\nimport { TracerouteTestResults } from \"./traceroute-test-results/traceroute-test-results.mjs\";\nexport class DEX extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.warpChangeEvents = new WARPChangeEventsAPI.WARPChangeEvents(this._client);\n        this.commands = new CommandsAPI.Commands(this._client);\n        this.colos = new ColosAPI.Colos(this._client);\n        this.fleetStatus = new FleetStatusAPI.FleetStatus(this._client);\n        this.httpTests = new HTTPTestsAPI.HTTPTests(this._client);\n        this.tests = new TestsAPI.Tests(this._client);\n        this.tracerouteTestResults = new TracerouteTestResultsAPI.TracerouteTestResults(this._client);\n        this.tracerouteTests = new TracerouteTestsAPI.TracerouteTests(this._client);\n    }\n}\nDEX.WARPChangeEvents = WARPChangeEvents;\nDEX.Commands = Commands;\nDEX.CommandListResponsesV4PagePagination = CommandListResponsesV4PagePagination;\nDEX.Colos = Colos;\nDEX.ColoListResponsesSinglePage = ColoListResponsesSinglePage;\nDEX.FleetStatus = FleetStatus;\nDEX.HTTPTests = HTTPTests;\nDEX.TestsV4PagePagination = TestsV4PagePagination;\nDEX.TracerouteTestResults = TracerouteTestResults;\nDEX.TracerouteTests = TracerouteTests;\n//# sourceMappingURL=dex.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Limits extends APIResource {\n    /**\n     * Fetch limits associated with DLP for account\n     *\n     * @example\n     * ```ts\n     * const limits = await client.zeroTrust.dlp.limits.list({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/limits`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=limits.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Patterns extends APIResource {\n    /**\n     * Validates whether this pattern is a valid regular expression. Rejects it if the\n     * regular expression is too complex or can match an unbounded-length string. The\n     * regex will be rejected if it uses `*` or `+`. Bound the maximum number of\n     * characters that can be matched using a range, e.g. `{1,100}`.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.dlp.patterns.validate({\n     *     account_id: 'account_id',\n     *     regex: 'regex',\n     *   });\n     * ```\n     */\n    validate(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/patterns/validate`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=patterns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class PayloadLogs extends APIResource {\n    /**\n     * Set payload log settings\n     *\n     * @example\n     * ```ts\n     * const payloadLog =\n     *   await client.zeroTrust.dlp.payloadLogs.update({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/payload_log`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get payload log settings\n     *\n     * @example\n     * ```ts\n     * const payloadLog =\n     *   await client.zeroTrust.dlp.payloadLogs.get({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/payload_log`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=payload-logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Upload extends APIResource {\n    /**\n     * Prepare to upload a new version of a dataset\n     *\n     * @example\n     * ```ts\n     * const newVersion =\n     *   await client.zeroTrust.dlp.datasets.upload.create(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    create(datasetId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/datasets/${datasetId}/upload`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * This is used for single-column EDMv1 and Custom Word Lists. The EDM format can\n     * only be created in the Cloudflare dashboard. For other clients, this operation\n     * can only be used for non-secret Custom Word Lists. The body must be a UTF-8\n     * encoded, newline (NL or CRNL) separated list of words to be matched.\n     *\n     * @example\n     * ```ts\n     * const dataset =\n     *   await client.zeroTrust.dlp.datasets.upload.edit(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     0,\n     *     fs.createReadStream('path/to/file'),\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    edit(datasetId, version, dataset, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/datasets/${datasetId}/upload/${version}`, {\n            body: dataset,\n            ...options,\n            headers: { 'Content-Type': 'application/octet-stream', ...options?.headers },\n            __binaryRequest: true,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=upload.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nexport class Entries extends APIResource {\n    /**\n     * This is used for multi-column EDMv2 datasets. The EDMv2 format can only be\n     * created in the Cloudflare dashboard.\n     *\n     * @example\n     * ```ts\n     * const entry =\n     *   await client.zeroTrust.dlp.datasets.versions.entries.create(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     0,\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     fs.createReadStream('path/to/file'),\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    create(datasetId, version, entryId, datasetVersionEntry, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/datasets/${datasetId}/versions/${version}/entries/${entryId}`, {\n            body: datasetVersionEntry,\n            ...options,\n            headers: { 'Content-Type': 'application/octet-stream', ...options?.headers },\n            __binaryRequest: true,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=entries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as EntriesAPI from \"./entries.mjs\";\nimport { Entries } from \"./entries.mjs\";\nimport { SinglePage } from \"../../../../../pagination.mjs\";\nexport class Versions extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.entries = new EntriesAPI.Entries(this._client);\n    }\n    /**\n     * This is used for multi-column EDMv2 datasets. The EDMv2 format can only be\n     * created in the Cloudflare dashboard. The columns in the response appear in the\n     * same order as in the request.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const versionCreateResponse of client.zeroTrust.dlp.datasets.versions.create(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   0,\n     *   {\n     *     account_id: 'account_id',\n     *     body: [\n     *       { entry_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e' },\n     *     ],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(datasetId, version, params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/datasets/${datasetId}/versions/${version}`, VersionCreateResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n}\nexport class VersionCreateResponsesSinglePage extends SinglePage {\n}\nVersions.VersionCreateResponsesSinglePage = VersionCreateResponsesSinglePage;\nVersions.Entries = Entries;\n//# sourceMappingURL=versions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as UploadAPI from \"./upload.mjs\";\nimport { Upload as UploadAPIUpload } from \"./upload.mjs\";\nimport * as VersionsAPI from \"./versions/versions.mjs\";\nimport { VersionCreateResponsesSinglePage, Versions, } from \"./versions/versions.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Datasets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.upload = new UploadAPI.Upload(this._client);\n        this.versions = new VersionsAPI.Versions(this._client);\n    }\n    /**\n     * Create a new dataset\n     *\n     * @example\n     * ```ts\n     * const datasetCreation =\n     *   await client.zeroTrust.dlp.datasets.create({\n     *     account_id: 'account_id',\n     *     name: 'name',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/datasets`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update details about a dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.zeroTrust.dlp.datasets.update(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    update(datasetId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/datasets/${datasetId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch all datasets\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const dataset of client.zeroTrust.dlp.datasets.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/datasets`, DatasetsSinglePage, options);\n    }\n    /**\n     * This deletes all versions of the dataset.\n     *\n     * @example\n     * ```ts\n     * await client.zeroTrust.dlp.datasets.delete(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    delete(datasetId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/datasets/${datasetId}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Fetch a specific dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.zeroTrust.dlp.datasets.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(datasetId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/datasets/${datasetId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DatasetsSinglePage extends SinglePage {\n}\nDatasets.DatasetsSinglePage = DatasetsSinglePage;\nDatasets.Upload = UploadAPIUpload;\nDatasets.Versions = Versions;\nDatasets.VersionCreateResponsesSinglePage = VersionCreateResponsesSinglePage;\n//# sourceMappingURL=datasets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class AccountMapping extends APIResource {\n    /**\n     * Create mapping\n     *\n     * @example\n     * ```ts\n     * const accountMapping =\n     *   await client.zeroTrust.dlp.email.accountMapping.create({\n     *     account_id: 'account_id',\n     *     auth_requirements: {\n     *       allowed_microsoft_organizations: ['string'],\n     *       type: 'Org',\n     *     },\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/email/account_mapping`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get mapping\n     *\n     * @example\n     * ```ts\n     * const accountMapping =\n     *   await client.zeroTrust.dlp.email.accountMapping.get({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/email/account_mapping`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=account-mapping.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Create email scanner rule\n     *\n     * @example\n     * ```ts\n     * const rule = await client.zeroTrust.dlp.email.rules.create({\n     *   account_id: 'account_id',\n     *   action: { action: 'Block' },\n     *   conditions: [\n     *     {\n     *       operator: 'InList',\n     *       selector: 'Recipients',\n     *       value: ['string'],\n     *     },\n     *   ],\n     *   enabled: true,\n     *   name: 'name',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/email/rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update email scanner rule\n     *\n     * @example\n     * ```ts\n     * const rule = await client.zeroTrust.dlp.email.rules.update(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   {\n     *     account_id: 'account_id',\n     *     action: { action: 'Block' },\n     *     conditions: [\n     *       {\n     *         operator: 'InList',\n     *         selector: 'Recipients',\n     *         value: ['string'],\n     *       },\n     *     ],\n     *     enabled: true,\n     *     name: 'name',\n     *   },\n     * );\n     * ```\n     */\n    update(ruleId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/email/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all email scanner rules for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const ruleListResponse of client.zeroTrust.dlp.email.rules.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/email/rules`, RuleListResponsesSinglePage, options);\n    }\n    /**\n     * Delete email scanner rule\n     *\n     * @example\n     * ```ts\n     * const rule = await client.zeroTrust.dlp.email.rules.delete(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    delete(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/email/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update email scanner rule priorities\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.dlp.email.rules.bulkEdit({\n     *     account_id: 'account_id',\n     *     new_priorities: { foo: 0 },\n     *   });\n     * ```\n     */\n    bulkEdit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/dlp/email/rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get an email scanner rule\n     *\n     * @example\n     * ```ts\n     * const rule = await client.zeroTrust.dlp.email.rules.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/email/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RuleListResponsesSinglePage extends SinglePage {\n}\nRules.RuleListResponsesSinglePage = RuleListResponsesSinglePage;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as AccountMappingAPI from \"./account-mapping.mjs\";\nimport { AccountMapping, } from \"./account-mapping.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { RuleListResponsesSinglePage, Rules, } from \"./rules.mjs\";\nexport class Email extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.accountMapping = new AccountMappingAPI.AccountMapping(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n    }\n}\nEmail.AccountMapping = AccountMapping;\nEmail.Rules = Rules;\nEmail.RuleListResponsesSinglePage = RuleListResponsesSinglePage;\n//# sourceMappingURL=email.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Custom extends APIResource {\n    /**\n     * Creates a DLP custom entry.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.zeroTrust.dlp.entries.custom.create({\n     *     account_id: 'account_id',\n     *     enabled: true,\n     *     name: 'name',\n     *     pattern: { regex: 'regex' },\n     *     profile_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/entries`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a DLP custom entry.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.zeroTrust.dlp.entries.custom.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     {\n     *       account_id: 'account_id',\n     *       enabled: true,\n     *       name: 'name',\n     *       pattern: { regex: 'regex' },\n     *     },\n     *   );\n     * ```\n     */\n    update(entryId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/entries/custom/${entryId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all DLP entries in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const customListResponse of client.zeroTrust.dlp.entries.custom.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/entries`, CustomListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes a DLP custom entry.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.zeroTrust.dlp.entries.custom.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/entries/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a DLP entry by ID.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.zeroTrust.dlp.entries.custom.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/entries/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CustomListResponsesSinglePage extends SinglePage {\n}\nCustom.CustomListResponsesSinglePage = CustomListResponsesSinglePage;\n//# sourceMappingURL=custom.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Integration extends APIResource {\n    /**\n     * Integration entries can't be created, this will update an existing integration\n     * entry This is needed for our generated terraform API\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.dlp.entries.integration.create({\n     *     account_id: 'account_id',\n     *     enabled: true,\n     *     entry_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/entries/integration`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a DLP entry.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.dlp.entries.integration.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id', enabled: true },\n     *   );\n     * ```\n     */\n    update(entryId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/entries/integration/${entryId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all DLP entries in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const integrationListResponse of client.zeroTrust.dlp.entries.integration.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/entries`, IntegrationListResponsesSinglePage, options);\n    }\n    /**\n     * This is a no-op as integration entires can't be deleted but is needed for our\n     * generated terraform API\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.dlp.entries.integration.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/entries/integration/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a DLP entry by ID.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.dlp.entries.integration.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/entries/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class IntegrationListResponsesSinglePage extends SinglePage {\n}\nIntegration.IntegrationListResponsesSinglePage = IntegrationListResponsesSinglePage;\n//# sourceMappingURL=integration.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Predefined extends APIResource {\n    /**\n     * Predefined entries can't be created, this will update an existing predefined\n     * entry This is needed for our generated terraform API\n     *\n     * @example\n     * ```ts\n     * const predefined =\n     *   await client.zeroTrust.dlp.entries.predefined.create({\n     *     account_id: 'account_id',\n     *     enabled: true,\n     *     entry_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/entries/predefined`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a DLP entry.\n     *\n     * @example\n     * ```ts\n     * const predefined =\n     *   await client.zeroTrust.dlp.entries.predefined.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id', enabled: true },\n     *   );\n     * ```\n     */\n    update(entryId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/entries/predefined/${entryId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all DLP entries in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const predefinedListResponse of client.zeroTrust.dlp.entries.predefined.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/entries`, PredefinedListResponsesSinglePage, options);\n    }\n    /**\n     * This is a no-op as predefined entires can't be deleted but is needed for our\n     * generated terraform API\n     *\n     * @example\n     * ```ts\n     * const predefined =\n     *   await client.zeroTrust.dlp.entries.predefined.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/entries/predefined/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a DLP entry by ID.\n     *\n     * @example\n     * ```ts\n     * const predefined =\n     *   await client.zeroTrust.dlp.entries.predefined.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/entries/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PredefinedListResponsesSinglePage extends SinglePage {\n}\nPredefined.PredefinedListResponsesSinglePage = PredefinedListResponsesSinglePage;\n//# sourceMappingURL=predefined.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CustomAPI from \"./custom.mjs\";\nimport { Custom, CustomListResponsesSinglePage, } from \"./custom.mjs\";\nimport * as IntegrationAPI from \"./integration.mjs\";\nimport { Integration, IntegrationListResponsesSinglePage, } from \"./integration.mjs\";\nimport * as PredefinedAPI from \"./predefined.mjs\";\nimport { Predefined, PredefinedListResponsesSinglePage, } from \"./predefined.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Entries extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.custom = new CustomAPI.Custom(this._client);\n        this.predefined = new PredefinedAPI.Predefined(this._client);\n        this.integration = new IntegrationAPI.Integration(this._client);\n    }\n    /**\n     * Creates a DLP custom entry.\n     *\n     * @example\n     * ```ts\n     * const entry = await client.zeroTrust.dlp.entries.create({\n     *   account_id: 'account_id',\n     *   enabled: true,\n     *   name: 'name',\n     *   pattern: { regex: 'regex' },\n     *   profile_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/entries`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a DLP entry.\n     *\n     * @example\n     * ```ts\n     * const entry = await client.zeroTrust.dlp.entries.update(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   {\n     *     account_id: 'account_id',\n     *     name: 'name',\n     *     pattern: { regex: 'regex' },\n     *     type: 'custom',\n     *   },\n     * );\n     * ```\n     */\n    update(entryId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/entries/${entryId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all DLP entries in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const entryListResponse of client.zeroTrust.dlp.entries.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/entries`, EntryListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes a DLP custom entry.\n     *\n     * @example\n     * ```ts\n     * const entry = await client.zeroTrust.dlp.entries.delete(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    delete(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/entries/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a DLP entry by ID.\n     *\n     * @example\n     * ```ts\n     * const entry = await client.zeroTrust.dlp.entries.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(entryId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/entries/${entryId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class EntryListResponsesSinglePage extends SinglePage {\n}\nEntries.EntryListResponsesSinglePage = EntryListResponsesSinglePage;\nEntries.Custom = Custom;\nEntries.CustomListResponsesSinglePage = CustomListResponsesSinglePage;\nEntries.Predefined = Predefined;\nEntries.PredefinedListResponsesSinglePage = PredefinedListResponsesSinglePage;\nEntries.Integration = Integration;\nEntries.IntegrationListResponsesSinglePage = IntegrationListResponsesSinglePage;\n//# sourceMappingURL=entries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Custom extends APIResource {\n    /**\n     * Creates a DLP custom profile.\n     *\n     * @example\n     * ```ts\n     * const profile =\n     *   await client.zeroTrust.dlp.profiles.custom.create({\n     *     account_id: 'account_id',\n     *     name: 'name',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/profiles/custom`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a DLP custom profile.\n     *\n     * @example\n     * ```ts\n     * const profile =\n     *   await client.zeroTrust.dlp.profiles.custom.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id', name: 'name' },\n     *   );\n     * ```\n     */\n    update(profileId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/profiles/custom/${profileId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a DLP custom profile.\n     *\n     * @example\n     * ```ts\n     * const custom =\n     *   await client.zeroTrust.dlp.profiles.custom.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(profileId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/profiles/custom/${profileId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a custom DLP profile by id.\n     *\n     * @example\n     * ```ts\n     * const profile =\n     *   await client.zeroTrust.dlp.profiles.custom.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(profileId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/profiles/custom/${profileId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=custom.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Predefined extends APIResource {\n    /**\n     * Creates a DLP predefined profile. Only supports enabling/disabling entries.\n     *\n     * @example\n     * ```ts\n     * const profile =\n     *   await client.zeroTrust.dlp.profiles.predefined.create({\n     *     account_id: 'account_id',\n     *     profile_id: '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/dlp/profiles/predefined`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a DLP predefined profile. Only supports enabling/disabling entries.\n     *\n     * @example\n     * ```ts\n     * const profile =\n     *   await client.zeroTrust.dlp.profiles.predefined.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    update(profileId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/dlp/profiles/predefined/${profileId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * This is a no-op as predefined profiles can't be deleted but is needed for our\n     * generated terraform API\n     *\n     * @example\n     * ```ts\n     * const predefined =\n     *   await client.zeroTrust.dlp.profiles.predefined.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(profileId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/dlp/profiles/predefined/${profileId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a predefined DLP profile by id.\n     *\n     * @example\n     * ```ts\n     * const profile =\n     *   await client.zeroTrust.dlp.profiles.predefined.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(profileId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/profiles/predefined/${profileId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=predefined.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CustomAPI from \"./custom.mjs\";\nimport { Custom, } from \"./custom.mjs\";\nimport * as PredefinedAPI from \"./predefined.mjs\";\nimport { Predefined, } from \"./predefined.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Profiles extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.custom = new CustomAPI.Custom(this._client);\n        this.predefined = new PredefinedAPI.Predefined(this._client);\n    }\n    /**\n     * Lists all DLP profiles in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const profile of client.zeroTrust.dlp.profiles.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/dlp/profiles`, ProfilesSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Fetches a DLP profile by ID.\n     *\n     * @example\n     * ```ts\n     * const profile = await client.zeroTrust.dlp.profiles.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(profileId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/dlp/profiles/${profileId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ProfilesSinglePage extends SinglePage {\n}\nProfiles.ProfilesSinglePage = ProfilesSinglePage;\nProfiles.Custom = Custom;\nProfiles.Predefined = Predefined;\n//# sourceMappingURL=profiles.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as LimitsAPI from \"./limits.mjs\";\nimport { Limits } from \"./limits.mjs\";\nimport * as PatternsAPI from \"./patterns.mjs\";\nimport { Patterns } from \"./patterns.mjs\";\nimport * as PayloadLogsAPI from \"./payload-logs.mjs\";\nimport { PayloadLogs, } from \"./payload-logs.mjs\";\nimport * as DatasetsAPI from \"./datasets/datasets.mjs\";\nimport { Datasets, DatasetsSinglePage, } from \"./datasets/datasets.mjs\";\nimport * as EmailAPI from \"./email/email.mjs\";\nimport { Email } from \"./email/email.mjs\";\nimport * as EntriesAPI from \"./entries/entries.mjs\";\nimport { Entries, EntryListResponsesSinglePage, } from \"./entries/entries.mjs\";\nimport * as ProfilesAPI from \"./profiles/profiles.mjs\";\nimport { Profiles, ProfilesSinglePage, } from \"./profiles/profiles.mjs\";\nexport class DLP extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.datasets = new DatasetsAPI.Datasets(this._client);\n        this.patterns = new PatternsAPI.Patterns(this._client);\n        this.payloadLogs = new PayloadLogsAPI.PayloadLogs(this._client);\n        this.email = new EmailAPI.Email(this._client);\n        this.profiles = new ProfilesAPI.Profiles(this._client);\n        this.limits = new LimitsAPI.Limits(this._client);\n        this.entries = new EntriesAPI.Entries(this._client);\n    }\n}\nDLP.Datasets = Datasets;\nDLP.DatasetsSinglePage = DatasetsSinglePage;\nDLP.Patterns = Patterns;\nDLP.PayloadLogs = PayloadLogs;\nDLP.Email = Email;\nDLP.Profiles = Profiles;\nDLP.ProfilesSinglePage = ProfilesSinglePage;\nDLP.Limits = Limits;\nDLP.Entries = Entries;\nDLP.EntryListResponsesSinglePage = EntryListResponsesSinglePage;\n//# sourceMappingURL=dlp.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class AppTypes extends APIResource {\n    /**\n     * Fetches all application and application type mappings.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const appType of client.zeroTrust.gateway.appTypes.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/app_types`, AppTypesSinglePage, options);\n    }\n}\nexport class AppTypesSinglePage extends SinglePage {\n}\nAppTypes.AppTypesSinglePage = AppTypesSinglePage;\n//# sourceMappingURL=app-types.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class AuditSSHSettings extends APIResource {\n    /**\n     * Updates Zero Trust Audit SSH and SSH with Access for Infrastructure settings for\n     * an account.\n     *\n     * @example\n     * ```ts\n     * const gatewaySettings =\n     *   await client.zeroTrust.gateway.auditSSHSettings.update({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     public_key:\n     *       '1pyl6I1tL7xfJuFYVzXlUW8uXXlpxegHXBzGCBKaSFA=',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/gateway/audit_ssh_settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets all Zero Trust Audit SSH and SSH with Access for Infrastructure settings\n     * for an account.\n     *\n     * @example\n     * ```ts\n     * const gatewaySettings =\n     *   await client.zeroTrust.gateway.auditSSHSettings.get({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/audit_ssh_settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Rotates the SSH account seed that is used for generating the host key identity\n     * when connecting through the Cloudflare SSH Proxy.\n     *\n     * @example\n     * ```ts\n     * const gatewaySettings =\n     *   await client.zeroTrust.gateway.auditSSHSettings.rotateSeed(\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    rotateSeed(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/audit_ssh_settings/rotate_seed`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=audit-ssh-settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Categories extends APIResource {\n    /**\n     * Fetches a list of all categories.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const category of client.zeroTrust.gateway.categories.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/categories`, CategoriesSinglePage, options);\n    }\n}\nexport class CategoriesSinglePage extends SinglePage {\n}\nCategories.CategoriesSinglePage = CategoriesSinglePage;\n//# sourceMappingURL=categories.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Certificates extends APIResource {\n    /**\n     * Creates a new Zero Trust certificate.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.zeroTrust.gateway.certificates.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/certificates`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches all Zero Trust certificates for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const certificateListResponse of client.zeroTrust.gateway.certificates.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/certificates`, CertificateListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes a gateway-managed Zero Trust certificate. A certificate must be\n     * deactivated from the edge (inactive) before it is deleted.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.zeroTrust.gateway.certificates.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(certificateId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/gateway/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Binds a single Zero Trust certificate to the edge.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.gateway.certificates.activate(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    activate(certificateId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/certificates/${certificateId}/activate`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Unbinds a single Zero Trust certificate from the edge.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.gateway.certificates.deactivate(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       body: {},\n     *     },\n     *   );\n     * ```\n     */\n    deactivate(certificateId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/certificates/${certificateId}/deactivate`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Zero Trust certificate.\n     *\n     * @example\n     * ```ts\n     * const certificate =\n     *   await client.zeroTrust.gateway.certificates.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(certificateId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/certificates/${certificateId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CertificateListResponsesSinglePage extends SinglePage {\n}\nCertificates.CertificateListResponsesSinglePage = CertificateListResponsesSinglePage;\n//# sourceMappingURL=certificates.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Locations extends APIResource {\n    /**\n     * Creates a new Zero Trust Gateway location.\n     *\n     * @example\n     * ```ts\n     * const location =\n     *   await client.zeroTrust.gateway.locations.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     name: 'Austin Office Location',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/locations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured Zero Trust Gateway location.\n     *\n     * @example\n     * ```ts\n     * const location =\n     *   await client.zeroTrust.gateway.locations.update(\n     *     'ed35569b41ce4d1facfe683550f54086',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       name: 'Austin Office Location',\n     *     },\n     *   );\n     * ```\n     */\n    update(locationId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/gateway/locations/${locationId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches Zero Trust Gateway locations for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const location of client.zeroTrust.gateway.locations.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/locations`, LocationsSinglePage, options);\n    }\n    /**\n     * Deletes a configured Zero Trust Gateway location.\n     *\n     * @example\n     * ```ts\n     * const location =\n     *   await client.zeroTrust.gateway.locations.delete(\n     *     'ed35569b41ce4d1facfe683550f54086',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(locationId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/gateway/locations/${locationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Zero Trust Gateway location.\n     *\n     * @example\n     * ```ts\n     * const location =\n     *   await client.zeroTrust.gateway.locations.get(\n     *     'ed35569b41ce4d1facfe683550f54086',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(locationId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/locations/${locationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class LocationsSinglePage extends SinglePage {\n}\nLocations.LocationsSinglePage = LocationsSinglePage;\n//# sourceMappingURL=locations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Logging extends APIResource {\n    /**\n     * Updates logging settings for the current Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const loggingSetting =\n     *   await client.zeroTrust.gateway.logging.update({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/gateway/logging`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the current logging settings for Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const loggingSetting =\n     *   await client.zeroTrust.gateway.logging.get({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/logging`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=logging.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class ProxyEndpoints extends APIResource {\n    /**\n     * Creates a new Zero Trust Gateway proxy endpoint.\n     *\n     * @example\n     * ```ts\n     * const proxyEndpoint =\n     *   await client.zeroTrust.gateway.proxyEndpoints.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     ips: ['192.0.2.1/32'],\n     *     name: 'Devops team',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/proxy_endpoints`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches all Zero Trust Gateway proxy endpoints for an account.\n     *\n     * @example\n     * ```ts\n     * const proxyEndpoint =\n     *   await client.zeroTrust.gateway.proxyEndpoints.list({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/proxy_endpoints`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a configured Zero Trust Gateway proxy endpoint.\n     *\n     * @example\n     * ```ts\n     * const proxyEndpoint =\n     *   await client.zeroTrust.gateway.proxyEndpoints.delete(\n     *     'ed35569b41ce4d1facfe683550f54086',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(proxyEndpointId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/gateway/proxy_endpoints/${proxyEndpointId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured Zero Trust Gateway proxy endpoint.\n     *\n     * @example\n     * ```ts\n     * const proxyEndpoint =\n     *   await client.zeroTrust.gateway.proxyEndpoints.edit(\n     *     'ed35569b41ce4d1facfe683550f54086',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(proxyEndpointId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/gateway/proxy_endpoints/${proxyEndpointId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Zero Trust Gateway proxy endpoint.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const proxyEndpoint of client.zeroTrust.gateway.proxyEndpoints.get(\n     *   'ed35569b41ce4d1facfe683550f54086',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(proxyEndpointId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/proxy_endpoints/${proxyEndpointId}`, ProxyEndpointsSinglePage, options);\n    }\n}\nexport class ProxyEndpointsSinglePage extends SinglePage {\n}\nProxyEndpoints.ProxyEndpointsSinglePage = ProxyEndpointsSinglePage;\n//# sourceMappingURL=proxy-endpoints.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Creates a new Zero Trust Gateway rule.\n     *\n     * @example\n     * ```ts\n     * const gatewayRule =\n     *   await client.zeroTrust.gateway.rules.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     action: 'allow',\n     *     name: 'block bad websites',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/rules`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured Zero Trust Gateway rule.\n     *\n     * @example\n     * ```ts\n     * const gatewayRule =\n     *   await client.zeroTrust.gateway.rules.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       action: 'allow',\n     *       name: 'block bad websites',\n     *     },\n     *   );\n     * ```\n     */\n    update(ruleId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/gateway/rules/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the Zero Trust Gateway rules for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const gatewayRule of client.zeroTrust.gateway.rules.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/rules`, GatewayRulesSinglePage, options);\n    }\n    /**\n     * Deletes a Zero Trust Gateway rule.\n     *\n     * @example\n     * ```ts\n     * const rule = await client.zeroTrust.gateway.rules.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    delete(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/gateway/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Zero Trust Gateway rule.\n     *\n     * @example\n     * ```ts\n     * const gatewayRule =\n     *   await client.zeroTrust.gateway.rules.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/rules/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Resets the expiration of a Zero Trust Gateway Rule if its duration has elapsed\n     * and it has a default duration.\n     *\n     * The Zero Trust Gateway Rule must have values for both `expiration.expires_at`\n     * and `expiration.duration`.\n     *\n     * @example\n     * ```ts\n     * const gatewayRule =\n     *   await client.zeroTrust.gateway.rules.resetExpiration(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    resetExpiration(ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/rules/${ruleId}/reset_expiration`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class GatewayRulesSinglePage extends SinglePage {\n}\nRules.GatewayRulesSinglePage = GatewayRulesSinglePage;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class CustomCertificate extends APIResource {\n    /**\n     * Fetches the current Zero Trust certificate configuration.\n     *\n     * @deprecated\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/configuration/custom_certificate`, options);\n    }\n}\n//# sourceMappingURL=custom-certificate.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CustomCertificateAPI from \"./custom-certificate.mjs\";\nimport { CustomCertificate } from \"./custom-certificate.mjs\";\nexport class Configurations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.customCertificate = new CustomCertificateAPI.CustomCertificate(this._client);\n    }\n    /**\n     * Updates the current Zero Trust account configuration.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.zeroTrust.gateway.configurations.update({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/gateway/configuration`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patches the current Zero Trust account configuration. This endpoint can update a\n     * single subcollection of settings such as `antivirus`, `tls_decrypt`,\n     * `activity_log`, `block_page`, `browser_isolation`, `fips`, `body_scanning`, or\n     * `certificate`, without updating the entire configuration object. Returns an\n     * error if any collection of settings is not properly configured.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.gateway.configurations.edit({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/gateway/configuration`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches the current Zero Trust account configuration.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.zeroTrust.gateway.configurations.get({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/configuration`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nConfigurations.CustomCertificate = CustomCertificate;\n//# sourceMappingURL=configurations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Items extends APIResource {\n    /**\n     * Fetches all items in a single Zero Trust list.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const itemListResponse of client.zeroTrust.gateway.lists.items.list(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(listId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/lists/${listId}/items`, ItemListResponsesSinglePage, options);\n    }\n}\nexport class ItemListResponsesSinglePage extends SinglePage {\n}\nItems.ItemListResponsesSinglePage = ItemListResponsesSinglePage;\n//# sourceMappingURL=items.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ItemsAPI from \"./items.mjs\";\nimport { ItemListResponsesSinglePage, Items } from \"./items.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Lists extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.items = new ItemsAPI.Items(this._client);\n    }\n    /**\n     * Creates a new Zero Trust list.\n     *\n     * @example\n     * ```ts\n     * const list = await client.zeroTrust.gateway.lists.create({\n     *   account_id: '699d98642c564d2e855e9661899b7252',\n     *   name: 'Admin Serial Numbers',\n     *   type: 'SERIAL',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/gateway/lists`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured Zero Trust list. Skips updating list items if not included\n     * in the payload.\n     *\n     * @example\n     * ```ts\n     * const gatewayList =\n     *   await client.zeroTrust.gateway.lists.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       name: 'Admin Serial Numbers',\n     *     },\n     *   );\n     * ```\n     */\n    update(listId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/gateway/lists/${listId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches all Zero Trust lists for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const gatewayList of client.zeroTrust.gateway.lists.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/gateway/lists`, GatewayListsSinglePage, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes a Zero Trust list.\n     *\n     * @example\n     * ```ts\n     * const list = await client.zeroTrust.gateway.lists.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    delete(listId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/gateway/lists/${listId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Appends or removes an item from a configured Zero Trust list.\n     *\n     * @example\n     * ```ts\n     * const gatewayList =\n     *   await client.zeroTrust.gateway.lists.edit(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(listId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/gateway/lists/${listId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Zero Trust list.\n     *\n     * @example\n     * ```ts\n     * const gatewayList =\n     *   await client.zeroTrust.gateway.lists.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(listId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway/lists/${listId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class GatewayListsSinglePage extends SinglePage {\n}\nLists.GatewayListsSinglePage = GatewayListsSinglePage;\nLists.Items = Items;\nLists.ItemListResponsesSinglePage = ItemListResponsesSinglePage;\n//# sourceMappingURL=lists.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AppTypesAPI from \"./app-types.mjs\";\nimport { AppTypes, AppTypesSinglePage } from \"./app-types.mjs\";\nimport * as AuditSSHSettingsAPI from \"./audit-ssh-settings.mjs\";\nimport { AuditSSHSettings, } from \"./audit-ssh-settings.mjs\";\nimport * as CategoriesAPI from \"./categories.mjs\";\nimport { Categories, CategoriesSinglePage } from \"./categories.mjs\";\nimport * as CertificatesAPI from \"./certificates.mjs\";\nimport { CertificateListResponsesSinglePage, Certificates, } from \"./certificates.mjs\";\nimport * as LocationsAPI from \"./locations.mjs\";\nimport { Locations, LocationsSinglePage, } from \"./locations.mjs\";\nimport * as LoggingAPI from \"./logging.mjs\";\nimport { Logging } from \"./logging.mjs\";\nimport * as ProxyEndpointsAPI from \"./proxy-endpoints.mjs\";\nimport { ProxyEndpoints, ProxyEndpointsSinglePage, } from \"./proxy-endpoints.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { GatewayRulesSinglePage, Rules, } from \"./rules.mjs\";\nimport * as ConfigurationsAPI from \"./configurations/configurations.mjs\";\nimport { Configurations, } from \"./configurations/configurations.mjs\";\nimport * as ListsAPI from \"./lists/lists.mjs\";\nimport { GatewayListsSinglePage, Lists, } from \"./lists/lists.mjs\";\nexport class Gateway extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.auditSSHSettings = new AuditSSHSettingsAPI.AuditSSHSettings(this._client);\n        this.categories = new CategoriesAPI.Categories(this._client);\n        this.appTypes = new AppTypesAPI.AppTypes(this._client);\n        this.configurations = new ConfigurationsAPI.Configurations(this._client);\n        this.lists = new ListsAPI.Lists(this._client);\n        this.locations = new LocationsAPI.Locations(this._client);\n        this.logging = new LoggingAPI.Logging(this._client);\n        this.proxyEndpoints = new ProxyEndpointsAPI.ProxyEndpoints(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n        this.certificates = new CertificatesAPI.Certificates(this._client);\n    }\n    /**\n     * Creates a Zero Trust account with an existing Cloudflare account.\n     *\n     * @example\n     * ```ts\n     * const gateway = await client.zeroTrust.gateway.create({\n     *   account_id: '699d98642c564d2e855e9661899b7252',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/gateway`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets information about the current Zero Trust account.\n     *\n     * @example\n     * ```ts\n     * const gateways = await client.zeroTrust.gateway.list({\n     *   account_id: '699d98642c564d2e855e9661899b7252',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/gateway`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nGateway.AuditSSHSettings = AuditSSHSettings;\nGateway.Categories = Categories;\nGateway.CategoriesSinglePage = CategoriesSinglePage;\nGateway.AppTypes = AppTypes;\nGateway.AppTypesSinglePage = AppTypesSinglePage;\nGateway.Configurations = Configurations;\nGateway.Lists = Lists;\nGateway.GatewayListsSinglePage = GatewayListsSinglePage;\nGateway.Locations = Locations;\nGateway.LocationsSinglePage = LocationsSinglePage;\nGateway.Logging = Logging;\nGateway.ProxyEndpoints = ProxyEndpoints;\nGateway.ProxyEndpointsSinglePage = ProxyEndpointsSinglePage;\nGateway.Rules = Rules;\nGateway.GatewayRulesSinglePage = GatewayRulesSinglePage;\nGateway.Certificates = Certificates;\nGateway.CertificateListResponsesSinglePage = CertificateListResponsesSinglePage;\n//# sourceMappingURL=gateway.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { ZeroTrustGroupsV4PagePaginationArray } from \"../../access/groups.mjs\";\nexport class Groups extends APIResource {\n    /**\n     * Lists SCIM Group resources synced to Cloudflare via the System for Cross-domain\n     * Identity Management (SCIM).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const zeroTrustGroup of client.zeroTrust.identityProviders.scim.groups.list(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(identityProviderId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/identity_providers/${identityProviderId}/scim/groups`, ZeroTrustGroupsV4PagePaginationArray, { query, ...options });\n    }\n}\nexport { ZeroTrustGroupsV4PagePaginationArray };\n//# sourceMappingURL=groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { AccessUsersV4PagePaginationArray } from \"../../access/users/users.mjs\";\nexport class Users extends APIResource {\n    /**\n     * Lists SCIM User resources synced to Cloudflare via the System for Cross-domain\n     * Identity Management (SCIM).\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const accessUser of client.zeroTrust.identityProviders.scim.users.list(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(identityProviderId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/access/identity_providers/${identityProviderId}/scim/users`, AccessUsersV4PagePaginationArray, { query, ...options });\n    }\n}\nexport { AccessUsersV4PagePaginationArray };\n//# sourceMappingURL=users.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as GroupsAPI from \"./groups.mjs\";\nimport { Groups } from \"./groups.mjs\";\nimport * as UsersAPI from \"./users.mjs\";\nimport { Users } from \"./users.mjs\";\nexport class SCIM extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.groups = new GroupsAPI.Groups(this._client);\n        this.users = new UsersAPI.Users(this._client);\n    }\n}\nSCIM.Groups = Groups;\nSCIM.Users = Users;\n//# sourceMappingURL=scim.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as SCIMAPI from \"./scim/scim.mjs\";\nimport { SCIM } from \"./scim/scim.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class IdentityProviders extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.scim = new SCIMAPI.SCIM(this._client);\n    }\n    /**\n     * Adds a new identity provider to Access.\n     *\n     * @example\n     * ```ts\n     * const identityProvider =\n     *   await client.zeroTrust.identityProviders.create({\n     *     config: {},\n     *     name: 'Widget Corps IDP',\n     *     type: 'onetimepin',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/identity_providers`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a configured identity provider.\n     *\n     * @example\n     * ```ts\n     * const identityProvider =\n     *   await client.zeroTrust.identityProviders.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       config: {},\n     *       name: 'Widget Corps IDP',\n     *       type: 'onetimepin',\n     *       account_id: 'account_id',\n     *     },\n     *   );\n     * ```\n     */\n    update(identityProviderId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/identity_providers/${identityProviderId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/access/identity_providers`, IdentityProviderListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    delete(identityProviderId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.delete(identityProviderId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.delete(`/${accountOrZone}/${accountOrZoneId}/access/identity_providers/${identityProviderId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    get(identityProviderId, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(identityProviderId, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/identity_providers/${identityProviderId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class IdentityProviderListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nIdentityProviders.IdentityProviderListResponsesV4PagePaginationArray =\n    IdentityProviderListResponsesV4PagePaginationArray;\nIdentityProviders.SCIM = SCIM;\n//# sourceMappingURL=identity-providers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class VirtualNetworks extends APIResource {\n    /**\n     * Adds a new virtual network to an account.\n     *\n     * @example\n     * ```ts\n     * const virtualNetwork =\n     *   await client.zeroTrust.networks.virtualNetworks.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     name: 'us-east-1-vpc',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/teamnet/virtual_networks`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists and filters virtual networks in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const virtualNetwork of client.zeroTrust.networks.virtualNetworks.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/teamnet/virtual_networks`, VirtualNetworksSinglePage, { query, ...options });\n    }\n    /**\n     * Deletes an existing virtual network.\n     *\n     * @example\n     * ```ts\n     * const virtualNetwork =\n     *   await client.zeroTrust.networks.virtualNetworks.delete(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(virtualNetworkId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/teamnet/virtual_networks/${virtualNetworkId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing virtual network.\n     *\n     * @example\n     * ```ts\n     * const virtualNetwork =\n     *   await client.zeroTrust.networks.virtualNetworks.edit(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(virtualNetworkId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/teamnet/virtual_networks/${virtualNetworkId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a virtual network.\n     *\n     * @example\n     * ```ts\n     * const virtualNetwork =\n     *   await client.zeroTrust.networks.virtualNetworks.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(virtualNetworkId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/teamnet/virtual_networks/${virtualNetworkId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VirtualNetworksSinglePage extends SinglePage {\n}\nVirtualNetworks.VirtualNetworksSinglePage = VirtualNetworksSinglePage;\n//# sourceMappingURL=virtual-networks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class IPs extends APIResource {\n    /**\n     * Fetches routes that contain the given IP address.\n     *\n     * @example\n     * ```ts\n     * const teamnet =\n     *   await client.zeroTrust.networks.routes.ips.get(\n     *     '10.1.0.137',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(ip, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/teamnet/routes/ip/${ip}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ips.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Networks extends APIResource {\n    /**\n     * Routes a private network through a Cloudflare Tunnel. The CIDR in\n     * `ip_network_encoded` must be written in URL-encoded format.\n     *\n     * @deprecated This endpoint and its related APIs are deprecated in favor of the equivalent Tunnel Route (without CIDR) APIs.\n     */\n    create(ipNetworkEncoded, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/teamnet/routes/network/${ipNetworkEncoded}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a private network route from an account. The CIDR in\n     * `ip_network_encoded` must be written in URL-encoded format. If no\n     * virtual_network_id is provided it will delete the route from the default vnet.\n     * If no tun_type is provided it will fetch the type from the tunnel_id or if that\n     * is missing it will assume Cloudflare Tunnel as default. If tunnel_id is provided\n     * it will delete the route from that tunnel, otherwise it will delete the route\n     * based on the vnet and tun_type.\n     *\n     * @deprecated This endpoint and its related APIs are deprecated in favor of the equivalent Tunnel Route (without CIDR) APIs.\n     */\n    delete(ipNetworkEncoded, params, options) {\n        const { account_id, tun_type, tunnel_id, virtual_network_id } = params;\n        return this._client.delete(`/accounts/${account_id}/teamnet/routes/network/${ipNetworkEncoded}`, {\n            query: { tun_type, tunnel_id, virtual_network_id },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing private network route in an account. The CIDR in\n     * `ip_network_encoded` must be written in URL-encoded format.\n     *\n     * @deprecated This endpoint and its related APIs are deprecated in favor of the equivalent Tunnel Route (without CIDR) APIs.\n     */\n    edit(ipNetworkEncoded, params, options) {\n        const { account_id } = params;\n        return this._client.patch(`/accounts/${account_id}/teamnet/routes/network/${ipNetworkEncoded}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=networks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as IPsAPI from \"./ips.mjs\";\nimport { IPs } from \"./ips.mjs\";\nimport * as NetworksAPI from \"./networks.mjs\";\nimport { Networks } from \"./networks.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Routes extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.ips = new IPsAPI.IPs(this._client);\n        this.networks = new NetworksAPI.Networks(this._client);\n    }\n    /**\n     * Routes a private network through a Cloudflare Tunnel.\n     *\n     * @example\n     * ```ts\n     * const route = await client.zeroTrust.networks.routes.create(\n     *   {\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     network: '172.16.0.0/16',\n     *     tunnel_id: 'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *   },\n     * );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/teamnet/routes`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists and filters private network routes in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const teamnet of client.zeroTrust.networks.routes.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/teamnet/routes`, TeamnetsV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes a private network route from an account.\n     *\n     * @example\n     * ```ts\n     * const route = await client.zeroTrust.networks.routes.delete(\n     *   'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    delete(routeId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/teamnet/routes/${routeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing private network route in an account. The fields that are\n     * meant to be updated should be provided in the body of the request.\n     *\n     * @example\n     * ```ts\n     * const route = await client.zeroTrust.networks.routes.edit(\n     *   'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    edit(routeId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/teamnet/routes/${routeId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a private network route in an account.\n     *\n     * @example\n     * ```ts\n     * const route = await client.zeroTrust.networks.routes.get(\n     *   'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * );\n     * ```\n     */\n    get(routeId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/teamnet/routes/${routeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TeamnetsV4PagePaginationArray extends V4PagePaginationArray {\n}\nRoutes.TeamnetsV4PagePaginationArray = TeamnetsV4PagePaginationArray;\nRoutes.IPs = IPs;\nRoutes.Networks = Networks;\n//# sourceMappingURL=routes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class CloudflareSource extends APIResource {\n    /**\n     * Updates the Cloudflare Source subnet of the given address family\n     *\n     * @example\n     * ```ts\n     * const cloudflareSource =\n     *   await client.zeroTrust.networks.subnets.cloudflareSource.update(\n     *     'v4',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    update(addressFamily, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/zerotrust/subnets/cloudflare_source/${addressFamily}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=cloudflare-source.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as CloudflareSourceAPI from \"./cloudflare-source.mjs\";\nimport { CloudflareSource, } from \"./cloudflare-source.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Subnets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.cloudflareSource = new CloudflareSourceAPI.CloudflareSource(this._client);\n    }\n    /**\n     * Lists and filters subnets in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const subnetListResponse of client.zeroTrust.networks.subnets.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/zerotrust/subnets`, SubnetListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class SubnetListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nSubnets.SubnetListResponsesV4PagePaginationArray = SubnetListResponsesV4PagePaginationArray;\nSubnets.CloudflareSource = CloudflareSource;\n//# sourceMappingURL=subnets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as VirtualNetworksAPI from \"./virtual-networks.mjs\";\nimport { VirtualNetworks, VirtualNetworksSinglePage, } from \"./virtual-networks.mjs\";\nimport * as RoutesAPI from \"./routes/routes.mjs\";\nimport { Routes, TeamnetsV4PagePaginationArray, } from \"./routes/routes.mjs\";\nimport * as SubnetsAPI from \"./subnets/subnets.mjs\";\nimport { SubnetListResponsesV4PagePaginationArray, Subnets, } from \"./subnets/subnets.mjs\";\nexport class Networks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.routes = new RoutesAPI.Routes(this._client);\n        this.virtualNetworks = new VirtualNetworksAPI.VirtualNetworks(this._client);\n        this.subnets = new SubnetsAPI.Subnets(this._client);\n    }\n}\nNetworks.Routes = Routes;\nNetworks.TeamnetsV4PagePaginationArray = TeamnetsV4PagePaginationArray;\nNetworks.VirtualNetworks = VirtualNetworks;\nNetworks.VirtualNetworksSinglePage = VirtualNetworksSinglePage;\nNetworks.Subnets = Subnets;\nNetworks.SubnetListResponsesV4PagePaginationArray = SubnetListResponsesV4PagePaginationArray;\n//# sourceMappingURL=networks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class DOH extends APIResource {\n    /**\n     * Updates the DoH settings for your Zero Trust organization.\n     *\n     * @example\n     * ```ts\n     * const doh = await client.zeroTrust.organizations.doh.update(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/access/organizations/doh`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the DoH settings for your Zero Trust organization.\n     *\n     * @example\n     * ```ts\n     * const doh = await client.zeroTrust.organizations.doh.get({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/access/organizations/doh`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=doh.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as DOHAPI from \"./doh.mjs\";\nimport { DOH } from \"./doh.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Organizations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.doh = new DOHAPI.DOH(this._client);\n    }\n    /**\n     * Sets up a Zero Trust organization for your account or zone.\n     *\n     * @example\n     * ```ts\n     * const organization =\n     *   await client.zeroTrust.organizations.create({\n     *     auth_domain: 'test.cloudflareaccess.com',\n     *     name: 'Widget Corps Internal Applications',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/organizations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates the configuration for your Zero Trust organization.\n     *\n     * @example\n     * ```ts\n     * const organization =\n     *   await client.zeroTrust.organizations.update({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/access/organizations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/access/organizations`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Revokes a user's access across all applications.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.organizations.revokeUsers({\n     *     email: 'test@example.com',\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    revokeUsers(params, options) {\n        const { account_id, zone_id, query_devices, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.post(`/${accountOrZone}/${accountOrZoneId}/access/organizations/revoke_user`, {\n            query: { devices: query_devices },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nOrganizations.DOH = DOH;\n//# sourceMappingURL=organizations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Behaviours extends APIResource {\n    /**\n     * Update configuration for risk behaviors\n     *\n     * @example\n     * ```ts\n     * const behaviour =\n     *   await client.zeroTrust.riskScoring.behaviours.update({\n     *     account_id: 'account_id',\n     *     behaviors: {\n     *       foo: { enabled: true, risk_level: 'low' },\n     *     },\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/zt_risk_scoring/behaviors`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get all behaviors and associated configuration\n     *\n     * @example\n     * ```ts\n     * const behaviour =\n     *   await client.zeroTrust.riskScoring.behaviours.get({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/zt_risk_scoring/behaviors`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=behaviours.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Summary extends APIResource {\n    /**\n     * Get risk score info for all users in the account\n     *\n     * @example\n     * ```ts\n     * const summary =\n     *   await client.zeroTrust.riskScoring.summary.get({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/zt_risk_scoring/summary`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class References extends APIResource {\n    /**\n     * Get risk score integration by reference id.\n     *\n     * @example\n     * ```ts\n     * const reference =\n     *   await client.zeroTrust.riskScoring.integrations.references.get(\n     *     'reference_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(referenceId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/zt_risk_scoring/integrations/reference_id/${referenceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=references.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ReferencesAPI from \"./references.mjs\";\nimport { References } from \"./references.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Integrations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.references = new ReferencesAPI.References(this._client);\n    }\n    /**\n     * Create new risk score integration.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.riskScoring.integrations.create({\n     *     account_id: 'account_id',\n     *     integration_type: 'Okta',\n     *     tenant_url: 'https://example.com',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/zt_risk_scoring/integrations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Overwrite the reference_id, tenant_url, and active values with the ones\n     * provided.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.riskScoring.integrations.update(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     {\n     *       account_id: 'account_id',\n     *       active: true,\n     *       tenant_url: 'https://example.com',\n     *     },\n     *   );\n     * ```\n     */\n    update(integrationId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/zt_risk_scoring/integrations/${integrationId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all risk score integrations for the account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const integrationListResponse of client.zeroTrust.riskScoring.integrations.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/zt_risk_scoring/integrations`, IntegrationListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a risk score integration.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.riskScoring.integrations.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(integrationId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/zt_risk_scoring/integrations/${integrationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get risk score integration by id.\n     *\n     * @example\n     * ```ts\n     * const integration =\n     *   await client.zeroTrust.riskScoring.integrations.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(integrationId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/zt_risk_scoring/integrations/${integrationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class IntegrationListResponsesSinglePage extends SinglePage {\n}\nIntegrations.IntegrationListResponsesSinglePage = IntegrationListResponsesSinglePage;\nIntegrations.References = References;\n//# sourceMappingURL=integrations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as BehavioursAPI from \"./behaviours.mjs\";\nimport { Behaviours, } from \"./behaviours.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary } from \"./summary.mjs\";\nimport * as IntegrationsAPI from \"./integrations/integrations.mjs\";\nimport { IntegrationListResponsesSinglePage, Integrations, } from \"./integrations/integrations.mjs\";\nexport class RiskScoring extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.behaviours = new BehavioursAPI.Behaviours(this._client);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.integrations = new IntegrationsAPI.Integrations(this._client);\n    }\n    /**\n     * Get risk event/score information for a specific user\n     *\n     * @example\n     * ```ts\n     * const riskScoring = await client.zeroTrust.riskScoring.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(userId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/zt_risk_scoring/${userId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Clear the risk score for a particular user\n     *\n     * @example\n     * ```ts\n     * const response = await client.zeroTrust.riskScoring.reset(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    reset(userId, params, options) {\n        const { account_id } = params;\n        return this._client.post(`/accounts/${account_id}/zt_risk_scoring/${userId}/reset`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nRiskScoring.Behaviours = Behaviours;\nRiskScoring.Summary = Summary;\nRiskScoring.Integrations = Integrations;\nRiskScoring.IntegrationListResponsesSinglePage = IntegrationListResponsesSinglePage;\n//# sourceMappingURL=risk-scoring.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Configurations extends APIResource {\n    /**\n     * Adds or updates the configuration for a remotely-managed tunnel.\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.zeroTrust.tunnels.cloudflared.configurations.update(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(tunnelId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/configurations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets the configuration for a remotely-managed tunnel\n     *\n     * @example\n     * ```ts\n     * const configuration =\n     *   await client.zeroTrust.tunnels.cloudflared.configurations.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/configurations`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=configurations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { SinglePage } from \"../../../../pagination.mjs\";\nexport class Connections extends APIResource {\n    /**\n     * Removes a connection (aka Cloudflare Tunnel Connector) from a Cloudflare Tunnel\n     * independently of its current state. If no connector id (client_id) is provided\n     * all connectors will be removed. We recommend running this command after rotating\n     * tokens.\n     *\n     * @example\n     * ```ts\n     * const connection =\n     *   await client.zeroTrust.tunnels.cloudflared.connections.delete(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(tunnelId, params, options) {\n        const { account_id, client_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/connections`, {\n            query: { client_id },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches connection details for a Cloudflare Tunnel.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const client of client.zeroTrust.tunnels.cloudflared.connections.get(\n     *   'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/connections`, ClientsSinglePage, options);\n    }\n}\nexport class ClientsSinglePage extends SinglePage {\n}\nConnections.ClientsSinglePage = ClientsSinglePage;\n//# sourceMappingURL=connections.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Connectors extends APIResource {\n    /**\n     * Fetches connector and connection details for a Cloudflare Tunnel.\n     *\n     * @example\n     * ```ts\n     * const client =\n     *   await client.zeroTrust.tunnels.cloudflared.connectors.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     '1bedc50d-42b3-473c-b108-ff3d10c0d925',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(tunnelId, connectorId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/connectors/${connectorId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=connectors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Management extends APIResource {\n    /**\n     * Gets a management token used to access the management resources (i.e. Streaming\n     * Logs) of a tunnel.\n     *\n     * @example\n     * ```ts\n     * const management =\n     *   await client.zeroTrust.tunnels.cloudflared.management.create(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '699d98642c564d2e855e9661899b7252',\n     *       resources: ['logs'],\n     *     },\n     *   );\n     * ```\n     */\n    create(tunnelId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/management`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=management.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Token extends APIResource {\n    /**\n     * Gets the token used to associate cloudflared with a specific tunnel.\n     *\n     * @example\n     * ```ts\n     * const token =\n     *   await client.zeroTrust.tunnels.cloudflared.token.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cfd_tunnel/${tunnelId}/token`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=token.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as ConfigurationsAPI from \"./configurations.mjs\";\nimport { Configurations, } from \"./configurations.mjs\";\nimport * as ConnectionsAPI from \"./connections.mjs\";\nimport { ClientsSinglePage, Connections, } from \"./connections.mjs\";\nimport * as ConnectorsAPI from \"./connectors.mjs\";\nimport { Connectors } from \"./connectors.mjs\";\nimport * as ManagementAPI from \"./management.mjs\";\nimport { Management } from \"./management.mjs\";\nimport * as TokenAPI from \"./token.mjs\";\nimport { Token } from \"./token.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class Cloudflared extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.configurations = new ConfigurationsAPI.Configurations(this._client);\n        this.connections = new ConnectionsAPI.Connections(this._client);\n        this.token = new TokenAPI.Token(this._client);\n        this.connectors = new ConnectorsAPI.Connectors(this._client);\n        this.management = new ManagementAPI.Management(this._client);\n    }\n    /**\n     * Creates a new Cloudflare Tunnel in an account.\n     *\n     * @example\n     * ```ts\n     * const cloudflared =\n     *   await client.zeroTrust.tunnels.cloudflared.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     name: 'blog',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cfd_tunnel`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists and filters Cloudflare Tunnels in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const cloudflaredListResponse of client.zeroTrust.tunnels.cloudflared.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cfd_tunnel`, CloudflaredListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a Cloudflare Tunnel from an account.\n     *\n     * @example\n     * ```ts\n     * const cloudflared =\n     *   await client.zeroTrust.tunnels.cloudflared.delete(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cfd_tunnel/${tunnelId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing Cloudflare Tunnel.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.tunnels.cloudflared.edit(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(tunnelId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/cfd_tunnel/${tunnelId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Cloudflare Tunnel.\n     *\n     * @example\n     * ```ts\n     * const cloudflared =\n     *   await client.zeroTrust.tunnels.cloudflared.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cfd_tunnel/${tunnelId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CloudflaredListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nCloudflared.CloudflaredListResponsesV4PagePaginationArray = CloudflaredListResponsesV4PagePaginationArray;\nCloudflared.Configurations = Configurations;\nCloudflared.Connections = Connections;\nCloudflared.ClientsSinglePage = ClientsSinglePage;\nCloudflared.Token = Token;\nCloudflared.Connectors = Connectors;\nCloudflared.Management = Management;\n//# sourceMappingURL=cloudflared.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Token extends APIResource {\n    /**\n     * Gets the token used to associate warp device with a specific Warp Connector\n     * tunnel.\n     *\n     * @example\n     * ```ts\n     * const token =\n     *   await client.zeroTrust.tunnels.warpConnector.token.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/warp_connector/${tunnelId}/token`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=token.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as TokenAPI from \"./token.mjs\";\nimport { Token } from \"./token.mjs\";\nimport { V4PagePaginationArray } from \"../../../../pagination.mjs\";\nexport class WARPConnector extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.token = new TokenAPI.Token(this._client);\n    }\n    /**\n     * Creates a new Warp Connector Tunnel in an account.\n     *\n     * @example\n     * ```ts\n     * const warpConnector =\n     *   await client.zeroTrust.tunnels.warpConnector.create({\n     *     account_id: '699d98642c564d2e855e9661899b7252',\n     *     name: 'blog',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/warp_connector`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists and filters Warp Connector Tunnels in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const warpConnectorListResponse of client.zeroTrust.tunnels.warpConnector.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/warp_connector`, WARPConnectorListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a Warp Connector Tunnel from an account.\n     *\n     * @example\n     * ```ts\n     * const warpConnector =\n     *   await client.zeroTrust.tunnels.warpConnector.delete(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    delete(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/warp_connector/${tunnelId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing Warp Connector Tunnel.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.zeroTrust.tunnels.warpConnector.edit(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    edit(tunnelId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/warp_connector/${tunnelId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a single Warp Connector Tunnel.\n     *\n     * @example\n     * ```ts\n     * const warpConnector =\n     *   await client.zeroTrust.tunnels.warpConnector.get(\n     *     'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '699d98642c564d2e855e9661899b7252' },\n     *   );\n     * ```\n     */\n    get(tunnelId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/warp_connector/${tunnelId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WARPConnectorListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nWARPConnector.WARPConnectorListResponsesV4PagePaginationArray =\n    WARPConnectorListResponsesV4PagePaginationArray;\nWARPConnector.Token = Token;\n//# sourceMappingURL=warp-connector.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as CloudflaredAPI from \"./cloudflared/cloudflared.mjs\";\nimport { Cloudflared, CloudflaredListResponsesV4PagePaginationArray, } from \"./cloudflared/cloudflared.mjs\";\nimport * as WARPConnectorAPI from \"./warp-connector/warp-connector.mjs\";\nimport { WARPConnector, WARPConnectorListResponsesV4PagePaginationArray, } from \"./warp-connector/warp-connector.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Tunnels extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.cloudflared = new CloudflaredAPI.Cloudflared(this._client);\n        this.warpConnector = new WARPConnectorAPI.WARPConnector(this._client);\n    }\n    /**\n     * Lists and filters all types of Tunnels in an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tunnelListResponse of client.zeroTrust.tunnels.list(\n     *   { account_id: '699d98642c564d2e855e9661899b7252' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/tunnels`, TunnelListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class TunnelListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nTunnels.TunnelListResponsesV4PagePaginationArray = TunnelListResponsesV4PagePaginationArray;\nTunnels.Cloudflared = Cloudflared;\nTunnels.CloudflaredListResponsesV4PagePaginationArray = CloudflaredListResponsesV4PagePaginationArray;\nTunnels.WARPConnector = WARPConnector;\nTunnels.WARPConnectorListResponsesV4PagePaginationArray = WARPConnectorListResponsesV4PagePaginationArray;\n//# sourceMappingURL=tunnels.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConnectivitySettingsAPI from \"./connectivity-settings.mjs\";\nimport { ConnectivitySettings, } from \"./connectivity-settings.mjs\";\nimport * as SeatsAPI from \"./seats.mjs\";\nimport { Seats, SeatsSinglePage } from \"./seats.mjs\";\nimport * as AccessAPI from \"./access/access.mjs\";\nimport { Access } from \"./access/access.mjs\";\nimport * as DevicesAPI from \"./devices/devices.mjs\";\nimport { Devices, DevicesSinglePage, } from \"./devices/devices.mjs\";\nimport * as DEXAPI from \"./dex/dex.mjs\";\nimport { DEX } from \"./dex/dex.mjs\";\nimport * as DLPAPI from \"./dlp/dlp.mjs\";\nimport { DLP } from \"./dlp/dlp.mjs\";\nimport * as GatewayAPI from \"./gateway/gateway.mjs\";\nimport { Gateway, } from \"./gateway/gateway.mjs\";\nimport * as IdentityProvidersAPI from \"./identity-providers/identity-providers.mjs\";\nimport { IdentityProviderListResponsesV4PagePaginationArray, IdentityProviders, } from \"./identity-providers/identity-providers.mjs\";\nimport * as NetworksAPI from \"./networks/networks.mjs\";\nimport { Networks } from \"./networks/networks.mjs\";\nimport * as OrganizationsAPI from \"./organizations/organizations.mjs\";\nimport { Organizations, } from \"./organizations/organizations.mjs\";\nimport * as RiskScoringAPI from \"./risk-scoring/risk-scoring.mjs\";\nimport { RiskScoring, } from \"./risk-scoring/risk-scoring.mjs\";\nimport * as TunnelsAPI from \"./tunnels/tunnels.mjs\";\nimport { TunnelListResponsesV4PagePaginationArray, Tunnels, } from \"./tunnels/tunnels.mjs\";\nexport class ZeroTrust extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.devices = new DevicesAPI.Devices(this._client);\n        this.identityProviders = new IdentityProvidersAPI.IdentityProviders(this._client);\n        this.organizations = new OrganizationsAPI.Organizations(this._client);\n        this.seats = new SeatsAPI.Seats(this._client);\n        this.access = new AccessAPI.Access(this._client);\n        this.dex = new DEXAPI.DEX(this._client);\n        this.tunnels = new TunnelsAPI.Tunnels(this._client);\n        this.connectivitySettings = new ConnectivitySettingsAPI.ConnectivitySettings(this._client);\n        this.dlp = new DLPAPI.DLP(this._client);\n        this.gateway = new GatewayAPI.Gateway(this._client);\n        this.networks = new NetworksAPI.Networks(this._client);\n        this.riskScoring = new RiskScoringAPI.RiskScoring(this._client);\n    }\n}\nZeroTrust.Devices = Devices;\nZeroTrust.DevicesSinglePage = DevicesSinglePage;\nZeroTrust.IdentityProviders = IdentityProviders;\nZeroTrust.IdentityProviderListResponsesV4PagePaginationArray =\n    IdentityProviderListResponsesV4PagePaginationArray;\nZeroTrust.Organizations = Organizations;\nZeroTrust.Seats = Seats;\nZeroTrust.SeatsSinglePage = SeatsSinglePage;\nZeroTrust.Access = Access;\nZeroTrust.DEX = DEX;\nZeroTrust.Tunnels = Tunnels;\nZeroTrust.TunnelListResponsesV4PagePaginationArray = TunnelListResponsesV4PagePaginationArray;\nZeroTrust.ConnectivitySettings = ConnectivitySettings;\nZeroTrust.DLP = DLP;\nZeroTrust.Gateway = Gateway;\nZeroTrust.Networks = Networks;\nZeroTrust.RiskScoring = RiskScoring;\n//# sourceMappingURL=zero-trust.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Widgets extends APIResource {\n    /**\n     * Lists challenge widgets.\n     *\n     * @example\n     * ```ts\n     * const widget = await client.turnstile.widgets.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   domains: [\n     *     '203.0.113.1',\n     *     'cloudflare.com',\n     *     'blog.example.com',\n     *   ],\n     *   mode: 'invisible',\n     *   name: 'blog.cloudflare.com login form',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, direction, order, page, per_page, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/challenges/widgets`, {\n            query: { direction, order, page, per_page },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update the configuration of a widget.\n     *\n     * @example\n     * ```ts\n     * const widget = await client.turnstile.widgets.update(\n     *   '0x4AAF00AAAABn0R22HWm-YUc',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     domains: [\n     *       '203.0.113.1',\n     *       'cloudflare.com',\n     *       'blog.example.com',\n     *     ],\n     *     mode: 'invisible',\n     *     name: 'blog.cloudflare.com login form',\n     *   },\n     * );\n     * ```\n     */\n    update(sitekey, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/challenges/widgets/${sitekey}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all turnstile widgets of an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const widgetListResponse of client.turnstile.widgets.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/challenges/widgets`, WidgetListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Destroy a Turnstile Widget.\n     *\n     * @example\n     * ```ts\n     * const widget = await client.turnstile.widgets.delete(\n     *   '0x4AAF00AAAABn0R22HWm-YUc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(sitekey, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/challenges/widgets/${sitekey}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Show a single challenge widget configuration.\n     *\n     * @example\n     * ```ts\n     * const widget = await client.turnstile.widgets.get(\n     *   '0x4AAF00AAAABn0R22HWm-YUc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(sitekey, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/challenges/widgets/${sitekey}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Generate a new secret key for this widget. If `invalidate_immediately` is set to\n     * `false`, the previous secret remains valid for 2 hours.\n     *\n     * Note that secrets cannot be rotated again during the grace period.\n     *\n     * @example\n     * ```ts\n     * const widget = await client.turnstile.widgets.rotateSecret(\n     *   '0x4AAF00AAAABn0R22HWm-YUc',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    rotateSecret(sitekey, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/challenges/widgets/${sitekey}/rotate_secret`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WidgetListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nWidgets.WidgetListResponsesV4PagePaginationArray = WidgetListResponsesV4PagePaginationArray;\n//# sourceMappingURL=widgets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as WidgetsAPI from \"./widgets.mjs\";\nimport { WidgetListResponsesV4PagePaginationArray, Widgets, } from \"./widgets.mjs\";\nexport class Turnstile extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.widgets = new WidgetsAPI.Widgets(this._client);\n    }\n}\nTurnstile.Widgets = Widgets;\nTurnstile.WidgetListResponsesV4PagePaginationArray = WidgetListResponsesV4PagePaginationArray;\n//# sourceMappingURL=turnstile.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { HyperdrivesSinglePage } from \"./hyperdrive.mjs\";\nexport class Configs extends APIResource {\n    /**\n     * Creates and returns a new Hyperdrive configuration.\n     *\n     * @example\n     * ```ts\n     * const hyperdrive = await client.hyperdrive.configs.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'example-hyperdrive',\n     *   origin: {\n     *     database: 'postgres',\n     *     host: 'database.example.com',\n     *     password: 'password',\n     *     port: 5432,\n     *     scheme: 'postgres',\n     *     user: 'postgres',\n     *   },\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/hyperdrive/configs`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates and returns the specified Hyperdrive configuration.\n     *\n     * @example\n     * ```ts\n     * const hyperdrive = await client.hyperdrive.configs.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'example-hyperdrive',\n     *     origin: {\n     *       database: 'postgres',\n     *       host: 'database.example.com',\n     *       password: 'password',\n     *       port: 5432,\n     *       scheme: 'postgres',\n     *       user: 'postgres',\n     *     },\n     *   },\n     * );\n     * ```\n     */\n    update(hyperdriveId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/hyperdrive/configs/${hyperdriveId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a list of Hyperdrives.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const hyperdrive of client.hyperdrive.configs.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/hyperdrive/configs`, HyperdrivesSinglePage, options);\n    }\n    /**\n     * Deletes the specified Hyperdrive.\n     *\n     * @example\n     * ```ts\n     * const config = await client.hyperdrive.configs.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(hyperdriveId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/hyperdrive/configs/${hyperdriveId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Patches and returns the specified Hyperdrive configuration. Custom caching\n     * settings are not kept if caching is disabled.\n     *\n     * @example\n     * ```ts\n     * const hyperdrive = await client.hyperdrive.configs.edit(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(hyperdriveId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/hyperdrive/configs/${hyperdriveId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the specified Hyperdrive configuration.\n     *\n     * @example\n     * ```ts\n     * const hyperdrive = await client.hyperdrive.configs.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(hyperdriveId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/hyperdrive/configs/${hyperdriveId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport { HyperdrivesSinglePage };\n//# sourceMappingURL=configs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConfigsAPI from \"./configs.mjs\";\nimport { Configs, } from \"./configs.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class HyperdriveResource extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.configs = new ConfigsAPI.Configs(this._client);\n    }\n}\nexport class HyperdrivesSinglePage extends SinglePage {\n}\nHyperdriveResource.Configs = Configs;\n//# sourceMappingURL=hyperdrive.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Creates a new rule in a Web Analytics ruleset.\n     *\n     * @example\n     * ```ts\n     * const rumRule = await client.rum.rules.create(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    create(rulesetId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/rum/v2/${rulesetId}/rule`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a rule in a Web Analytics ruleset.\n     *\n     * @example\n     * ```ts\n     * const rumRule = await client.rum.rules.update(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(rulesetId, ruleId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/rum/v2/${rulesetId}/rule/${ruleId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all the rules in a Web Analytics ruleset.\n     *\n     * @example\n     * ```ts\n     * const rules = await client.rum.rules.list(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    list(rulesetId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/rum/v2/${rulesetId}/rules`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes an existing rule from a Web Analytics ruleset.\n     *\n     * @example\n     * ```ts\n     * const rule = await client.rum.rules.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(rulesetId, ruleId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/rum/v2/${rulesetId}/rule/${ruleId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modifies one or more rules in a Web Analytics ruleset with a single request.\n     *\n     * @example\n     * ```ts\n     * const response = await client.rum.rules.bulkCreate(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    bulkCreate(rulesetId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/rum/v2/${rulesetId}/rules`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class SiteInfo extends APIResource {\n    /**\n     * Creates a new Web Analytics site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.rum.siteInfo.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/rum/site_info`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates an existing Web Analytics site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.rum.siteInfo.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(siteId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/rum/site_info/${siteId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all Web Analytics sites of an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const site of client.rum.siteInfo.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/rum/site_info/list`, SitesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes an existing Web Analytics site.\n     *\n     * @example\n     * ```ts\n     * const siteInfo = await client.rum.siteInfo.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(siteId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/rum/site_info/${siteId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves a Web Analytics site.\n     *\n     * @example\n     * ```ts\n     * const site = await client.rum.siteInfo.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(siteId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/rum/site_info/${siteId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SitesV4PagePaginationArray extends V4PagePaginationArray {\n}\nSiteInfo.SitesV4PagePaginationArray = SitesV4PagePaginationArray;\n//# sourceMappingURL=site-info.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { Rules, } from \"./rules.mjs\";\nimport * as SiteInfoAPI from \"./site-info.mjs\";\nimport { SiteInfo, SitesV4PagePaginationArray, } from \"./site-info.mjs\";\nexport class RUM extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.siteInfo = new SiteInfoAPI.SiteInfo(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n    }\n}\nRUM.SiteInfo = SiteInfo;\nRUM.SitesV4PagePaginationArray = SitesV4PagePaginationArray;\nRUM.Rules = Rules;\n//# sourceMappingURL=rum.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class MetadataIndex extends APIResource {\n    /**\n     * Enable metadata filtering based on metadata property. Limited to 10 properties.\n     *\n     * @example\n     * ```ts\n     * const metadataIndex =\n     *   await client.vectorize.indexes.metadataIndex.create(\n     *     'example-index',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       indexType: 'string',\n     *       propertyName: 'random_metadata_property',\n     *     },\n     *   );\n     * ```\n     */\n    create(indexName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/metadata_index/create`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Metadata Indexes for the specified Vectorize Index.\n     *\n     * @example\n     * ```ts\n     * const metadataIndices =\n     *   await client.vectorize.indexes.metadataIndex.list(\n     *     'example-index',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    list(indexName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/metadata_index/list`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Allow Vectorize to delete the specified metadata index.\n     *\n     * @example\n     * ```ts\n     * const metadataIndex =\n     *   await client.vectorize.indexes.metadataIndex.delete(\n     *     'example-index',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       propertyName: 'random_metadata_property',\n     *     },\n     *   );\n     * ```\n     */\n    delete(indexName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/metadata_index/delete`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=metadata-index.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as MetadataIndexAPI from \"./metadata-index.mjs\";\nimport { MetadataIndex, } from \"./metadata-index.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Indexes extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.metadataIndex = new MetadataIndexAPI.MetadataIndex(this._client);\n    }\n    /**\n     * Creates and returns a new Vectorize Index.\n     *\n     * @example\n     * ```ts\n     * const createIndex = await client.vectorize.indexes.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   config: { dimensions: 768, metric: 'cosine' },\n     *   name: 'example-index',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a list of Vectorize Indexes\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const createIndex of client.vectorize.indexes.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/vectorize/v2/indexes`, CreateIndicesSinglePage, options);\n    }\n    /**\n     * Deletes the specified Vectorize Index.\n     *\n     * @example\n     * ```ts\n     * const index = await client.vectorize.indexes.delete(\n     *   'example-index',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(indexName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a set of vectors from an index by their vector identifiers.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.deleteByIds(\n     *   'example-index',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    deleteByIds(indexName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/delete_by_ids`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns the specified Vectorize Index.\n     *\n     * @example\n     * ```ts\n     * const createIndex = await client.vectorize.indexes.get(\n     *   'example-index',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(indexName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a set of vectors from an index by their vector identifiers.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.getByIds(\n     *   'example-index',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    getByIds(indexName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/get_by_ids`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a vectorize index.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.info(\n     *   'example-index',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    info(indexName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/info`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Inserts vectors into the specified index and returns a mutation id corresponding\n     * to the vectors enqueued for insertion.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.insert(\n     *   'example-index',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: fs.createReadStream('path/to/file'),\n     *   },\n     * );\n     * ```\n     */\n    insert(indexName, params, options) {\n        const { account_id, body, 'unparsable-behavior': unparsableBehavior } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/insert`, {\n            query: { 'unparsable-behavior': unparsableBehavior },\n            body: body,\n            ...options,\n            headers: { 'Content-Type': 'application/x-ndjson', ...options?.headers },\n            __binaryRequest: true,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns a paginated list of vector identifiers from the specified index.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.listVectors(\n     *   'example-index',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    listVectors(indexName, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/list`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Finds vectors closest to a given vector in an index.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.query(\n     *   'example-index',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     vector: [0.5, 0.5, 0.5],\n     *   },\n     * );\n     * ```\n     */\n    query(indexName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/query`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Upserts vectors into the specified index, creating them if they do not exist and\n     * returns a mutation id corresponding to the vectors enqueued for upsertion.\n     *\n     * @example\n     * ```ts\n     * const response = await client.vectorize.indexes.upsert(\n     *   'example-index',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: fs.createReadStream('path/to/file'),\n     *   },\n     * );\n     * ```\n     */\n    upsert(indexName, params, options) {\n        const { account_id, body, 'unparsable-behavior': unparsableBehavior } = params;\n        return this._client.post(`/accounts/${account_id}/vectorize/v2/indexes/${indexName}/upsert`, {\n            query: { 'unparsable-behavior': unparsableBehavior },\n            body: body,\n            ...options,\n            headers: { 'Content-Type': 'application/x-ndjson', ...options?.headers },\n            __binaryRequest: true,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CreateIndicesSinglePage extends SinglePage {\n}\nIndexes.CreateIndicesSinglePage = CreateIndicesSinglePage;\nIndexes.MetadataIndex = MetadataIndex;\n//# sourceMappingURL=indexes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as IndexesAPI from \"./indexes/indexes.mjs\";\nimport { CreateIndicesSinglePage, Indexes, } from \"./indexes/indexes.mjs\";\nexport class Vectorize extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.indexes = new IndexesAPI.Indexes(this._client);\n    }\n}\nVectorize.Indexes = Indexes;\nVectorize.CreateIndicesSinglePage = CreateIndicesSinglePage;\n//# sourceMappingURL=vectorize.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Responses extends APIResource {\n    /**\n     * Returns the raw response of the network request. Find the `response_id` in the\n     * `data.requests.response.hash`.\n     *\n     * @example\n     * ```ts\n     * const response = await client.urlScanner.responses.get(\n     *   'response_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(responseId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/urlscanner/v2/responses/${responseId}`, {\n            ...options,\n            headers: { Accept: 'text/plain', ...options?.headers },\n        });\n    }\n}\n//# sourceMappingURL=responses.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Scans extends APIResource {\n    /**\n     * Submit a URL to scan. Check limits at\n     * https://developers.cloudflare.com/security-center/investigate/scan-limits/.\n     *\n     * @example\n     * ```ts\n     * const scan = await client.urlScanner.scans.create({\n     *   account_id: 'account_id',\n     *   url: 'https://www.example.com',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/urlscanner/v2/scan`, { body, ...options });\n    }\n    /**\n     * Use a subset of ElasticSearch Query syntax to filter scans. Some example\n     * queries:<br/> <br/>- 'path:\"/bundles/jquery.js\"': Searches for scans who\n     * requested resources with the given path.<br/>- 'page.asn:AS24940 AND hash:xxx':\n     * Websites hosted in AS24940 where a resource with the given hash was\n     * downloaded.<br/>- 'page.domain:microsoft\\* AND verdicts.malicious:true AND NOT\n     * page.domain:microsoft.com': malicious scans whose hostname starts with\n     * \"microsoft\".<br/>- 'apikey:me AND date:[2025-01 TO 2025-02]': my scans from 2025\n     * January to 2025 February.\n     *\n     * @example\n     * ```ts\n     * const scans = await client.urlScanner.scans.list({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/urlscanner/v2/search`, { query, ...options });\n    }\n    /**\n     * Submit URLs to scan. Check limits at\n     * https://developers.cloudflare.com/security-center/investigate/scan-limits/ and\n     * take into account scans submitted in bulk have lower priority and may take\n     * longer to finish.\n     *\n     * @example\n     * ```ts\n     * const response = await client.urlScanner.scans.bulkCreate({\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    bulkCreate(params, options) {\n        const { account_id, body } = params ?? {};\n        return this._client.post(`/accounts/${account_id}/urlscanner/v2/bulk`, { body: body, ...options });\n    }\n    /**\n     * Returns a plain text response, with the scan's DOM content as rendered by\n     * Chrome.\n     *\n     * @example\n     * ```ts\n     * const response = await client.urlScanner.scans.dom(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    dom(scanId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/urlscanner/v2/dom/${scanId}`, {\n            ...options,\n            headers: { Accept: 'text/plain', ...options?.headers },\n        });\n    }\n    /**\n     * Get URL scan by uuid\n     *\n     * @example\n     * ```ts\n     * const scan = await client.urlScanner.scans.get(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(scanId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/urlscanner/v2/result/${scanId}`, options);\n    }\n    /**\n     * Get a URL scan's HAR file. See HAR spec at\n     * http://www.softwareishard.com/blog/har-12-spec/.\n     *\n     * @example\n     * ```ts\n     * const response = await client.urlScanner.scans.har(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    har(scanId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/urlscanner/v2/har/${scanId}`, options);\n    }\n    /**\n     * Get scan's screenshot by resolution (desktop/mobile/tablet).\n     *\n     * @example\n     * ```ts\n     * const response = await client.urlScanner.scans.screenshot(\n     *   '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *   { account_id: 'account_id' },\n     * );\n     *\n     * const content = await response.blob();\n     * console.log(content);\n     * ```\n     */\n    screenshot(scanId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/urlscanner/v2/screenshots/${scanId}.png`, {\n            query,\n            ...options,\n            headers: { Accept: 'image/png', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=scans.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ResponsesAPI from \"./responses.mjs\";\nimport { Responses } from \"./responses.mjs\";\nimport * as ScansAPI from \"./scans.mjs\";\nimport { Scans, } from \"./scans.mjs\";\nexport class URLScanner extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.responses = new ResponsesAPI.Responses(this._client);\n        this.scans = new ScansAPI.Scans(this._client);\n    }\n}\nURLScanner.Responses = Responses;\nURLScanner.Scans = Scans;\n//# sourceMappingURL=url-scanner.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nexport class Datasets extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/datasets', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves an URL to download a single dataset.\n     *\n     * @example\n     * ```ts\n     * const response = await client.radar.datasets.download({\n     *   datasetId: 3,\n     * });\n     * ```\n     */\n    download(params, options) {\n        const { format, ...body } = params;\n        return this._client.post('/radar/datasets/download', {\n            query: { format },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves the CSV content of a given dataset by alias or ID. When getting the\n     * content by alias the latest dataset is returned, optionally filtered by the\n     * latest available at a given date.\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.radar.datasets.get(\n     *   'ranking_top_1000',\n     * );\n     * ```\n     */\n    get(alias, options) {\n        return this._client.get(`/radar/datasets/${alias}`, {\n            ...options,\n            headers: { Accept: 'text/csv', ...options?.headers },\n        });\n    }\n}\n//# sourceMappingURL=datasets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Search extends APIResource {\n    /**\n     * Searches for locations, autonomous systems, reports, bots, certificate logs,\n     * certificate authorities, industries and verticals\n     *\n     * @example\n     * ```ts\n     * const response = await client.radar.search.global({\n     *   query: 'United',\n     * });\n     * ```\n     */\n    global(query, options) {\n        return this._client.get('/radar/search/global', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=search.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { isRequestOptions } from \"../../core.mjs\";\nexport class TCPResetsTimeouts extends APIResource {\n    summary(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary({}, query);\n        }\n        return this._client.get('/radar/tcp_resets_timeouts/summary', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseriesGroups(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups({}, query);\n        }\n        return this._client.get('/radar/tcp_resets_timeouts/timeseries_groups', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=tcp-resets-timeouts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    summary(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary(dimension, {}, query);\n        }\n        return this._client.get(`/radar/ai/bots/summary/${dimension}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/ai/bots/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseriesGroups(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups(dimension, {}, query);\n        }\n        return this._client.get(`/radar/ai/bots/timeseries_groups/${dimension}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    userAgent(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.userAgent({}, query);\n        }\n        return this._client.get('/radar/ai/bots/timeseries_groups/user_agent', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class ToMarkdown extends APIResource {\n    /**\n     * Convert Files into Markdown\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const toMarkdownCreateResponse of client.radar.ai.toMarkdown.create(\n     *   fs.createReadStream('path/to/file'),\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(body, params, options) {\n        const { account_id } = params ?? {};\n        return this._client.getAPIList(`/accounts/${account_id}/ai/tomarkdown`, ToMarkdownCreateResponsesSinglePage, {\n            body: body,\n            method: 'post',\n            ...options,\n            headers: { 'Content-Type': 'application/octet-stream', ...options?.headers },\n            __binaryRequest: true,\n        });\n    }\n}\nexport class ToMarkdownCreateResponsesSinglePage extends SinglePage {\n}\nToMarkdown.ToMarkdownCreateResponsesSinglePage = ToMarkdownCreateResponsesSinglePage;\n//# sourceMappingURL=to-markdown.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Summary extends APIResource {\n    userAgent(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.userAgent({}, query);\n        }\n        return this._client.get('/radar/ai/bots/summary/user_agent', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary } from \"./summary.mjs\";\nexport class Bots extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n    }\n}\nBots.Summary = Summary;\n//# sourceMappingURL=bots.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Summary extends APIResource {\n    model(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.model({}, query);\n        }\n        return this._client.get('/radar/ai/inference/summary/model', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    task(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.task({}, query);\n        }\n        return this._client.get('/radar/ai/inference/summary/task', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../core.mjs\";\nexport class Summary extends APIResource {\n    model(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.model({}, query);\n        }\n        return this._client.get('/radar/ai/inference/timeseries_groups/model', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    task(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.task({}, query);\n        }\n        return this._client.get('/radar/ai/inference/timeseries_groups/task', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n    }\n}\nTimeseriesGroups.Summary = Summary;\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups/timeseries-groups.mjs\";\nimport { TimeseriesGroups } from \"./timeseries-groups/timeseries-groups.mjs\";\nexport class Inference extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n    }\n}\nInference.Summary = Summary;\nInference.TimeseriesGroups = TimeseriesGroups;\n//# sourceMappingURL=inference.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as ToMarkdownAPI from \"./to-markdown.mjs\";\nimport { ToMarkdown, ToMarkdownCreateResponsesSinglePage, } from \"./to-markdown.mjs\";\nimport * as BotsAPI from \"./bots/bots.mjs\";\nimport { Bots } from \"./bots/bots.mjs\";\nimport * as InferenceAPI from \"./inference/inference.mjs\";\nimport { Inference } from \"./inference/inference.mjs\";\nexport class AI extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.toMarkdown = new ToMarkdownAPI.ToMarkdown(this._client);\n        this.inference = new InferenceAPI.Inference(this._client);\n        this.bots = new BotsAPI.Bots(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n    }\n}\nAI.ToMarkdown = ToMarkdown;\nAI.ToMarkdownCreateResponsesSinglePage = ToMarkdownCreateResponsesSinglePage;\nAI.Inference = Inference;\nAI.Bots = Bots;\nAI.TimeseriesGroups = TimeseriesGroups;\n//# sourceMappingURL=ai.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Outages extends APIResource {\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/annotations/outages', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    locations(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.locations({}, query);\n        }\n        return this._client.get('/radar/annotations/outages/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=outages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as OutagesAPI from \"./outages.mjs\";\nimport { Outages, } from \"./outages.mjs\";\nexport class Annotations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.outages = new OutagesAPI.Outages(this._client);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/annotations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nAnnotations.Outages = Outages;\n//# sourceMappingURL=annotations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Summary extends APIResource {\n    dnssec(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssec({}, query);\n        }\n        return this._client.get('/radar/as112/summary/dnssec', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    edns(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.edns({}, query);\n        }\n        return this._client.get('/radar/as112/summary/edns', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/as112/summary/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    protocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.protocol({}, query);\n        }\n        return this._client.get('/radar/as112/summary/protocol', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    queryType(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.queryType({}, query);\n        }\n        return this._client.get('/radar/as112/summary/query_type', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    responseCodes(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.responseCodes({}, query);\n        }\n        return this._client.get('/radar/as112/summary/response_codes', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    dnssec(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssec({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries_groups/dnssec', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    edns(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.edns({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries_groups/edns', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries_groups/ip_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    protocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.protocol({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries_groups/protocol', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    queryType(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.queryType({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries_groups/query_type', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    responseCodes(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.responseCodes({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries_groups/response_codes', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Top extends APIResource {\n    dnssec(dnssec, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssec(dnssec, {}, query);\n        }\n        return this._client.get(`/radar/as112/top/locations/dnssec/${dnssec}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    edns(edns, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.edns(edns, {}, query);\n        }\n        return this._client.get(`/radar/as112/top/locations/edns/${edns}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(ipVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion(ipVersion, {}, query);\n        }\n        return this._client.get(`/radar/as112/top/locations/ip_version/${ipVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    locations(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.locations({}, query);\n        }\n        return this._client.get('/radar/as112/top/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as TopAPI from \"./top.mjs\";\nimport { Top, } from \"./top.mjs\";\nexport class AS112 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n        this.top = new TopAPI.Top(this._client);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/as112/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nAS112.Summary = Summary;\nAS112.TimeseriesGroups = TimeseriesGroups;\nAS112.Top = Top;\n//# sourceMappingURL=as112.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Summary extends APIResource {\n    bitrate(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.bitrate({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/bitrate', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    duration(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.duration({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/duration', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    industry(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.industry({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/industry', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    protocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.protocol({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/protocol', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    vector(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vector({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/vector', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    vertical(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vertical({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/summary/vertical', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    bitrate(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.bitrate({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/bitrate', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    duration(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.duration({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/duration', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    industry(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.industry({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/industry', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/ip_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    protocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.protocol({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/protocol', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    vector(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vector({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/vector', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    vertical(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vertical({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries_groups/vertical', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../core.mjs\";\nexport class Locations extends APIResource {\n    origin(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.origin({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/top/locations/origin', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    target(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.target({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/top/locations/target', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=locations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../core.mjs\";\nimport * as LocationsAPI from \"./locations.mjs\";\nimport { Locations, } from \"./locations.mjs\";\nexport class Top extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.locations = new LocationsAPI.Locations(this._client);\n    }\n    attacks(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.attacks({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/top/attacks', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    industry(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.industry({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/top/industry', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    vertical(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vertical({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/top/vertical', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nTop.Locations = Locations;\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as TopAPI from \"./top/top.mjs\";\nimport { Top, } from \"./top/top.mjs\";\nexport class Layer3 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n        this.top = new TopAPI.Top(this._client);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/attacks/layer3/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nLayer3.Summary = Summary;\nLayer3.TimeseriesGroups = TimeseriesGroups;\nLayer3.Top = Top;\n//# sourceMappingURL=layer3.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Summary extends APIResource {\n    httpMethod(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpMethod({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/http_method', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    httpVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpVersion({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/http_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    industry(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.industry({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/industry', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    managedRules(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.managedRules({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/managed_rules', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    mitigationProduct(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.mitigationProduct({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/mitigation_product', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    vertical(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vertical({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/summary/vertical', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    httpMethod(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpMethod({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/http_method', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    httpVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpVersion({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/http_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    industry(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.industry({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/industry', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/ip_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    managedRules(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.managedRules({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/managed_rules', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    mitigationProduct(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.mitigationProduct({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/mitigation_product', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    vertical(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vertical({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries_groups/vertical', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../core.mjs\";\nexport class Ases extends APIResource {\n    origin(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.origin({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/top/ases/origin', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ases.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../core.mjs\";\nexport class Locations extends APIResource {\n    origin(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.origin({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/top/locations/origin', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    target(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.target({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/top/locations/target', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=locations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../core.mjs\";\nimport * as AsesAPI from \"./ases.mjs\";\nimport { Ases } from \"./ases.mjs\";\nimport * as LocationsAPI from \"./locations.mjs\";\nimport { Locations, } from \"./locations.mjs\";\nexport class Top extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.locations = new LocationsAPI.Locations(this._client);\n        this.ases = new AsesAPI.Ases(this._client);\n    }\n    attacks(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.attacks({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/top/attacks', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    industry(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.industry({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/top/industry', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    vertical(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.vertical({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/top/vertical', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nTop.Locations = Locations;\nTop.Ases = Ases;\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as TopAPI from \"./top/top.mjs\";\nimport { Top, } from \"./top/top.mjs\";\nexport class Layer7 extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n        this.top = new TopAPI.Top(this._client);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/attacks/layer7/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nLayer7.Summary = Summary;\nLayer7.TimeseriesGroups = TimeseriesGroups;\nLayer7.Top = Top;\n//# sourceMappingURL=layer7.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Layer3API from \"./layer3/layer3.mjs\";\nimport { Layer3 } from \"./layer3/layer3.mjs\";\nimport * as Layer7API from \"./layer7/layer7.mjs\";\nimport { Layer7 } from \"./layer7/layer7.mjs\";\nexport class Attacks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.layer3 = new Layer3API.Layer3(this._client);\n        this.layer7 = new Layer7API.Layer7(this._client);\n    }\n}\nAttacks.Layer3 = Layer3;\nAttacks.Layer7 = Layer7;\n//# sourceMappingURL=attacks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class IPs extends APIResource {\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/bgp/ips/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ips.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Routes extends APIResource {\n    ases(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ases({}, query);\n        }\n        return this._client.get('/radar/bgp/routes/ases', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    moas(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.moas({}, query);\n        }\n        return this._client.get('/radar/bgp/routes/moas', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    pfx2as(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.pfx2as({}, query);\n        }\n        return this._client.get('/radar/bgp/routes/pfx2as', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    realtime(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.realtime({}, query);\n        }\n        return this._client.get('/radar/bgp/routes/realtime', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    stats(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.stats({}, query);\n        }\n        return this._client.get('/radar/bgp/routes/stats', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=routes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport { V4PagePagination } from \"../../../../pagination.mjs\";\nexport class Events extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/radar/bgp/hijacks/events', EventListResponsesV4PagePagination, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class EventListResponsesV4PagePagination extends V4PagePagination {\n}\nEvents.EventListResponsesV4PagePagination = EventListResponsesV4PagePagination;\n//# sourceMappingURL=events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as EventsAPI from \"./events.mjs\";\nimport { EventListResponsesV4PagePagination, Events } from \"./events.mjs\";\nexport class Hijacks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.events = new EventsAPI.Events(this._client);\n    }\n}\nHijacks.Events = Events;\nHijacks.EventListResponsesV4PagePagination = EventListResponsesV4PagePagination;\n//# sourceMappingURL=hijacks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport { V4PagePagination } from \"../../../../pagination.mjs\";\nexport class Events extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/radar/bgp/leaks/events', EventListResponsesV4PagePagination, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class EventListResponsesV4PagePagination extends V4PagePagination {\n}\nEvents.EventListResponsesV4PagePagination = EventListResponsesV4PagePagination;\n//# sourceMappingURL=events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as EventsAPI from \"./events.mjs\";\nimport { EventListResponsesV4PagePagination, Events } from \"./events.mjs\";\nexport class Leaks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.events = new EventsAPI.Events(this._client);\n    }\n}\nLeaks.Events = Events;\nLeaks.EventListResponsesV4PagePagination = EventListResponsesV4PagePagination;\n//# sourceMappingURL=leaks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Ases extends APIResource {\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/bgp/top/ases', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    prefixes(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.prefixes({}, query);\n        }\n        return this._client.get('/radar/bgp/top/ases/prefixes', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ases.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as AsesAPI from \"./ases.mjs\";\nimport { Ases } from \"./ases.mjs\";\nexport class Top extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.ases = new AsesAPI.Ases(this._client);\n    }\n    prefixes(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.prefixes({}, query);\n        }\n        return this._client.get('/radar/bgp/top/prefixes', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nTop.Ases = Ases;\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as IPsAPI from \"./ips.mjs\";\nimport { IPs } from \"./ips.mjs\";\nimport * as RoutesAPI from \"./routes.mjs\";\nimport { Routes, } from \"./routes.mjs\";\nimport * as HijacksAPI from \"./hijacks/hijacks.mjs\";\nimport { Hijacks } from \"./hijacks/hijacks.mjs\";\nimport * as LeaksAPI from \"./leaks/leaks.mjs\";\nimport { Leaks } from \"./leaks/leaks.mjs\";\nimport * as TopAPI from \"./top/top.mjs\";\nimport { Top } from \"./top/top.mjs\";\nexport class BGP extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.leaks = new LeaksAPI.Leaks(this._client);\n        this.top = new TopAPI.Top(this._client);\n        this.hijacks = new HijacksAPI.Hijacks(this._client);\n        this.routes = new RoutesAPI.Routes(this._client);\n        this.ips = new IPsAPI.IPs(this._client);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/bgp/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nBGP.Leaks = Leaks;\nBGP.Top = Top;\nBGP.Hijacks = Hijacks;\nBGP.Routes = Routes;\nBGP.IPs = IPs;\n//# sourceMappingURL=bgp.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class WebCrawlers extends APIResource {\n    summary(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary(dimension, {}, query);\n        }\n        return this._client.get(`/radar/bots/crawlers/summary/${dimension}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    timeseriesGroups(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups(dimension, {}, query);\n        }\n        return this._client.get(`/radar/bots/crawlers/timeseries_groups/${dimension}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=web-crawlers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as WebCrawlersAPI from \"./web-crawlers.mjs\";\nimport { WebCrawlers, } from \"./web-crawlers.mjs\";\nexport class Bots extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.webCrawlers = new WebCrawlersAPI.WebCrawlers(this._client);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/bots', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    get(botSlug, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(botSlug, {}, query);\n        }\n        return this._client.get(`/radar/bots/${botSlug}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    summary(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary(dimension, {}, query);\n        }\n        return this._client.get(`/radar/bots/summary/${dimension}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/bots/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseriesGroups(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups(dimension, {}, query);\n        }\n        return this._client.get(`/radar/bots/timeseries_groups/${dimension}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nBots.WebCrawlers = WebCrawlers;\n//# sourceMappingURL=bots.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Authorities extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/ct/authorities', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    get(caSlug, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(caSlug, {}, query);\n        }\n        return this._client.get(`/radar/ct/authorities/${caSlug}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=authorities.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Logs extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/ct/logs', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    get(logSlug, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(logSlug, {}, query);\n        }\n        return this._client.get(`/radar/ct/logs/${logSlug}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as AuthoritiesAPI from \"./authorities.mjs\";\nimport { Authorities, } from \"./authorities.mjs\";\nimport * as LogsAPI from \"./logs.mjs\";\nimport { Logs } from \"./logs.mjs\";\nexport class Ct extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.authorities = new AuthoritiesAPI.Authorities(this._client);\n        this.logs = new LogsAPI.Logs(this._client);\n    }\n    summary(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary(dimension, {}, query);\n        }\n        return this._client.get(`/radar/ct/summary/${dimension}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/ct/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseriesGroups(dimension, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups(dimension, {}, query);\n        }\n        return this._client.get(`/radar/ct/timeseries_groups/${dimension}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nCt.Authorities = Authorities;\nCt.Logs = Logs;\n//# sourceMappingURL=ct.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Summary extends APIResource {\n    cacheHit(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.cacheHit({}, query);\n        }\n        return this._client.get('/radar/dns/summary/cache_hit', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dnssec(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssec({}, query);\n        }\n        return this._client.get('/radar/dns/summary/dnssec', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dnssecAware(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssecAware({}, query);\n        }\n        return this._client.get('/radar/dns/summary/dnssec_aware', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dnssecE2E(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssecE2E({}, query);\n        }\n        return this._client.get('/radar/dns/summary/dnssec_e2e', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/dns/summary/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    matchingAnswer(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.matchingAnswer({}, query);\n        }\n        return this._client.get('/radar/dns/summary/matching_answer', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    protocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.protocol({}, query);\n        }\n        return this._client.get('/radar/dns/summary/protocol', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    queryType(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.queryType({}, query);\n        }\n        return this._client.get('/radar/dns/summary/query_type', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    responseCode(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.responseCode({}, query);\n        }\n        return this._client.get('/radar/dns/summary/response_code', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    responseTTL(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.responseTTL({}, query);\n        }\n        return this._client.get('/radar/dns/summary/response_ttl', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    cacheHit(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.cacheHit({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/cache_hit', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dnssec(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssec({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/dnssec', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dnssecAware(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssecAware({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/dnssec_aware', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    dnssecE2E(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dnssecE2E({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/dnssec_e2e', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    matchingAnswer(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.matchingAnswer({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/matching_answer', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    protocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.protocol({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/protocol', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    queryType(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.queryType({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/query_type', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    responseCode(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.responseCode({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/response_code', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    responseTTL(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.responseTTL({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries_groups/response_ttl', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Top extends APIResource {\n    ases(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ases({}, query);\n        }\n        return this._client.get('/radar/dns/top/ases', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    locations(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.locations({}, query);\n        }\n        return this._client.get('/radar/dns/top/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as TopAPI from \"./top.mjs\";\nimport { Top } from \"./top.mjs\";\nexport class DNS extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.top = new TopAPI.Top(this._client);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/dns/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nDNS.Top = Top;\nDNS.Summary = Summary;\nDNS.TimeseriesGroups = TimeseriesGroups;\n//# sourceMappingURL=dns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Summary extends APIResource {\n    arc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.arc({}, query);\n        }\n        return this._client.get('/radar/email/routing/summary/arc', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dkim(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dkim({}, query);\n        }\n        return this._client.get('/radar/email/routing/summary/dkim', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dmarc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dmarc({}, query);\n        }\n        return this._client.get('/radar/email/routing/summary/dmarc', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    encrypted(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.encrypted({}, query);\n        }\n        return this._client.get('/radar/email/routing/summary/encrypted', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/email/routing/summary/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    spf(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spf({}, query);\n        }\n        return this._client.get('/radar/email/routing/summary/spf', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    arc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.arc({}, query);\n        }\n        return this._client.get('/radar/email/routing/timeseries_groups/arc', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    dkim(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dkim({}, query);\n        }\n        return this._client.get('/radar/email/routing/timeseries_groups/dkim', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    dmarc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dmarc({}, query);\n        }\n        return this._client.get('/radar/email/routing/timeseries_groups/dmarc', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    encrypted(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.encrypted({}, query);\n        }\n        return this._client.get('/radar/email/routing/timeseries_groups/encrypted', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/email/routing/timeseries_groups/ip_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    spf(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spf({}, query);\n        }\n        return this._client.get('/radar/email/routing/timeseries_groups/spf', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nexport class Routing extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n    }\n}\nRouting.Summary = Summary;\nRouting.TimeseriesGroups = TimeseriesGroups;\n//# sourceMappingURL=routing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Summary extends APIResource {\n    arc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.arc({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/arc', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dkim(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dkim({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/dkim', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    dmarc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dmarc({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/dmarc', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    malicious(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.malicious({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/malicious', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    spam(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spam({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/spam', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    spf(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spf({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/spf', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    spoof(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spoof({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/spoof', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    threatCategory(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.threatCategory({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/threat_category', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    tlsVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.tlsVersion({}, query);\n        }\n        return this._client.get('/radar/email/security/summary/tls_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    arc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.arc({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/arc', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    dkim(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dkim({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/dkim', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    dmarc(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.dmarc({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/dmarc', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    malicious(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.malicious({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/malicious', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    spam(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spam({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/spam', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    spf(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spf({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/spf', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    spoof(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.spoof({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/spoof', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    threatCategory(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.threatCategory({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/threat_category', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    tlsVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.tlsVersion({}, query);\n        }\n        return this._client.get('/radar/email/security/timeseries_groups/tls_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../../core.mjs\";\nexport class Malicious extends APIResource {\n    get(malicious, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(malicious, {}, query);\n        }\n        return this._client.get(`/radar/email/security/top/tlds/malicious/${malicious}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=malicious.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../../core.mjs\";\nexport class Spam extends APIResource {\n    get(spam, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(spam, {}, query);\n        }\n        return this._client.get(`/radar/email/security/top/tlds/spam/${spam}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=spam.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../../core.mjs\";\nexport class Spoof extends APIResource {\n    get(spoof, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(spoof, {}, query);\n        }\n        return this._client.get(`/radar/email/security/top/tlds/spoof/${spoof}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=spoof.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../../../core.mjs\";\nimport * as MaliciousAPI from \"./malicious.mjs\";\nimport { Malicious } from \"./malicious.mjs\";\nimport * as SpamAPI from \"./spam.mjs\";\nimport { Spam } from \"./spam.mjs\";\nimport * as SpoofAPI from \"./spoof.mjs\";\nimport { Spoof } from \"./spoof.mjs\";\nexport class Tlds extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.malicious = new MaliciousAPI.Malicious(this._client);\n        this.spam = new SpamAPI.Spam(this._client);\n        this.spoof = new SpoofAPI.Spoof(this._client);\n    }\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/email/security/top/tlds', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nTlds.Malicious = Malicious;\nTlds.Spam = Spam;\nTlds.Spoof = Spoof;\n//# sourceMappingURL=tlds.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../../resource.mjs\";\nimport * as TldsAPI from \"./tlds/tlds.mjs\";\nimport { Tlds } from \"./tlds/tlds.mjs\";\nexport class Top extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.tlds = new TldsAPI.Tlds(this._client);\n    }\n}\nTop.Tlds = Tlds;\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as TopAPI from \"./top/top.mjs\";\nimport { Top } from \"./top/top.mjs\";\nexport class Security extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.top = new TopAPI.Top(this._client);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n    }\n}\nSecurity.Top = Top;\nSecurity.Summary = Summary;\nSecurity.TimeseriesGroups = TimeseriesGroups;\n//# sourceMappingURL=security.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as RoutingAPI from \"./routing/routing.mjs\";\nimport { Routing } from \"./routing/routing.mjs\";\nimport * as SecurityAPI from \"./security/security.mjs\";\nimport { Security } from \"./security/security.mjs\";\nexport class Email extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.routing = new RoutingAPI.Routing(this._client);\n        this.security = new SecurityAPI.Security(this._client);\n    }\n}\nEmail.Routing = Routing;\nEmail.Security = Security;\n//# sourceMappingURL=email.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class ASNs extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/entities/asns', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    get(asn, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(asn, {}, query);\n        }\n        return this._client.get(`/radar/entities/asns/${asn}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves the requested autonomous system information based on IP address.\n     * Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).\n     *\n     * @example\n     * ```ts\n     * const response = await client.radar.entities.asns.ip({\n     *   ip: '8.8.8.8',\n     * });\n     * ```\n     */\n    ip(query, options) {\n        return this._client.get('/radar/entities/asns/ip', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    rel(asn, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.rel(asn, {}, query);\n        }\n        return this._client.get(`/radar/entities/asns/${asn}/rel`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=asns.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Locations extends APIResource {\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.get('/radar/entities/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    get(location, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(location, {}, query);\n        }\n        return this._client.get(`/radar/entities/locations/${location}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=locations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ASNsAPI from \"./asns.mjs\";\nimport { ASNs, } from \"./asns.mjs\";\nimport * as LocationsAPI from \"./locations.mjs\";\nimport { Locations, } from \"./locations.mjs\";\nexport class Entities extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.asns = new ASNsAPI.ASNs(this._client);\n        this.locations = new LocationsAPI.Locations(this._client);\n    }\n    /**\n     * Retrieves IP address information.\n     *\n     * @example\n     * ```ts\n     * const entity = await client.radar.entities.get({\n     *   ip: '8.8.8.8',\n     * });\n     * ```\n     */\n    get(query, options) {\n        return this._client.get('/radar/entities/ip', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nEntities.ASNs = ASNs;\nEntities.Locations = Locations;\n//# sourceMappingURL=entities.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Summary extends APIResource {\n    botClass(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.botClass({}, query);\n        }\n        return this._client.get('/radar/http/summary/bot_class', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    deviceType(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.deviceType({}, query);\n        }\n        return this._client.get('/radar/http/summary/device_type', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    httpProtocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpProtocol({}, query);\n        }\n        return this._client.get('/radar/http/summary/http_protocol', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    httpVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpVersion({}, query);\n        }\n        return this._client.get('/radar/http/summary/http_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/http/summary/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    os(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.os({}, query);\n        }\n        return this._client.get('/radar/http/summary/os', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    postQuantum(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.postQuantum({}, query);\n        }\n        return this._client.get('/radar/http/summary/post_quantum', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    tlsVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.tlsVersion({}, query);\n        }\n        return this._client.get('/radar/http/summary/tls_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    botClass(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.botClass({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/bot_class', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    browser(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.browser({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/browser', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    browserFamily(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.browserFamily({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/browser_family', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    deviceType(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.deviceType({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/device_type', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    httpProtocol(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpProtocol({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/http_protocol', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    httpVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.httpVersion({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/http_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    ipVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ipVersion({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/ip_version', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    os(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.os({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/os', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    postQuantum(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.postQuantum({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/post_quantum', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    tlsVersion(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.tlsVersion({}, query);\n        }\n        return this._client.get('/radar/http/timeseries_groups/tls_version', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Top extends APIResource {\n    browser(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.browser({}, query);\n        }\n        return this._client.get('/radar/http/top/browser', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    browserFamily(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.browserFamily({}, query);\n        }\n        return this._client.get('/radar/http/top/browser_family', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class BotClass extends APIResource {\n    get(botClass, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(botClass, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/bot_class/${botClass}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bot-class.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class BrowserFamily extends APIResource {\n    get(browserFamily, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(browserFamily, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/browser_family/${browserFamily}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=browser-family.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class DeviceType extends APIResource {\n    get(deviceType, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(deviceType, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/device_type/${deviceType}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=device-type.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class HTTPMethod extends APIResource {\n    get(httpVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(httpVersion, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/http_version/${httpVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=http-method.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class HTTPProtocol extends APIResource {\n    get(httpProtocol, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(httpProtocol, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/http_protocol/${httpProtocol}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=http-protocol.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class IPVersion extends APIResource {\n    get(ipVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(ipVersion, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/ip_version/${ipVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ip-version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class OS extends APIResource {\n    get(os, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(os, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/os/${os}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=os.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class TLSVersion extends APIResource {\n    get(tlsVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(tlsVersion, {}, query);\n        }\n        return this._client.get(`/radar/http/top/ases/tls_version/${tlsVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=tls-version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as BotClassAPI from \"./bot-class.mjs\";\nimport { BotClass } from \"./bot-class.mjs\";\nimport * as BrowserFamilyAPI from \"./browser-family.mjs\";\nimport { BrowserFamily } from \"./browser-family.mjs\";\nimport * as DeviceTypeAPI from \"./device-type.mjs\";\nimport { DeviceType } from \"./device-type.mjs\";\nimport * as HTTPMethodAPI from \"./http-method.mjs\";\nimport { HTTPMethod } from \"./http-method.mjs\";\nimport * as HTTPProtocolAPI from \"./http-protocol.mjs\";\nimport { HTTPProtocol } from \"./http-protocol.mjs\";\nimport * as IPVersionAPI from \"./ip-version.mjs\";\nimport { IPVersion } from \"./ip-version.mjs\";\nimport * as OSAPI from \"./os.mjs\";\nimport { OS } from \"./os.mjs\";\nimport * as TLSVersionAPI from \"./tls-version.mjs\";\nimport { TLSVersion } from \"./tls-version.mjs\";\nexport class Ases extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.botClass = new BotClassAPI.BotClass(this._client);\n        this.deviceType = new DeviceTypeAPI.DeviceType(this._client);\n        this.httpProtocol = new HTTPProtocolAPI.HTTPProtocol(this._client);\n        this.httpMethod = new HTTPMethodAPI.HTTPMethod(this._client);\n        this.ipVersion = new IPVersionAPI.IPVersion(this._client);\n        this.os = new OSAPI.OS(this._client);\n        this.tlsVersion = new TLSVersionAPI.TLSVersion(this._client);\n        this.browserFamily = new BrowserFamilyAPI.BrowserFamily(this._client);\n    }\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/http/top/ases', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nAses.BotClass = BotClass;\nAses.DeviceType = DeviceType;\nAses.HTTPProtocol = HTTPProtocol;\nAses.HTTPMethod = HTTPMethod;\nAses.IPVersion = IPVersion;\nAses.OS = OS;\nAses.TLSVersion = TLSVersion;\nAses.BrowserFamily = BrowserFamily;\n//# sourceMappingURL=ases.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class BotClass extends APIResource {\n    get(botClass, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(botClass, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/bot_class/${botClass}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bot-class.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class BrowserFamily extends APIResource {\n    get(browserFamily, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(browserFamily, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/browser_family/${browserFamily}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=browser-family.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class DeviceType extends APIResource {\n    get(deviceType, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(deviceType, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/device_type/${deviceType}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=device-type.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class HTTPMethod extends APIResource {\n    get(httpVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(httpVersion, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/http_version/${httpVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=http-method.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class HTTPProtocol extends APIResource {\n    get(httpProtocol, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(httpProtocol, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/http_protocol/${httpProtocol}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=http-protocol.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class IPVersion extends APIResource {\n    get(ipVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(ipVersion, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/ip_version/${ipVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=ip-version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class OS extends APIResource {\n    get(os, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(os, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/os/${os}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=os.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class TLSVersion extends APIResource {\n    get(tlsVersion, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(tlsVersion, {}, query);\n        }\n        return this._client.get(`/radar/http/top/locations/tls_version/${tlsVersion}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=tls-version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as BotClassAPI from \"./bot-class.mjs\";\nimport { BotClass } from \"./bot-class.mjs\";\nimport * as BrowserFamilyAPI from \"./browser-family.mjs\";\nimport { BrowserFamily } from \"./browser-family.mjs\";\nimport * as DeviceTypeAPI from \"./device-type.mjs\";\nimport { DeviceType } from \"./device-type.mjs\";\nimport * as HTTPMethodAPI from \"./http-method.mjs\";\nimport { HTTPMethod } from \"./http-method.mjs\";\nimport * as HTTPProtocolAPI from \"./http-protocol.mjs\";\nimport { HTTPProtocol } from \"./http-protocol.mjs\";\nimport * as IPVersionAPI from \"./ip-version.mjs\";\nimport { IPVersion } from \"./ip-version.mjs\";\nimport * as OSAPI from \"./os.mjs\";\nimport { OS } from \"./os.mjs\";\nimport * as TLSVersionAPI from \"./tls-version.mjs\";\nimport { TLSVersion } from \"./tls-version.mjs\";\nexport class Locations extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.botClass = new BotClassAPI.BotClass(this._client);\n        this.deviceType = new DeviceTypeAPI.DeviceType(this._client);\n        this.httpProtocol = new HTTPProtocolAPI.HTTPProtocol(this._client);\n        this.httpMethod = new HTTPMethodAPI.HTTPMethod(this._client);\n        this.ipVersion = new IPVersionAPI.IPVersion(this._client);\n        this.os = new OSAPI.OS(this._client);\n        this.tlsVersion = new TLSVersionAPI.TLSVersion(this._client);\n        this.browserFamily = new BrowserFamilyAPI.BrowserFamily(this._client);\n    }\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/http/top/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nLocations.BotClass = BotClass;\nLocations.DeviceType = DeviceType;\nLocations.HTTPProtocol = HTTPProtocol;\nLocations.HTTPMethod = HTTPMethod;\nLocations.IPVersion = IPVersion;\nLocations.OS = OS;\nLocations.TLSVersion = TLSVersion;\nLocations.BrowserFamily = BrowserFamily;\n//# sourceMappingURL=locations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nimport * as TopAPI from \"./top.mjs\";\nimport { Top, } from \"./top.mjs\";\nimport * as AsesAPI from \"./ases/ases.mjs\";\nimport { Ases } from \"./ases/ases.mjs\";\nimport * as LocationsAPI from \"./locations/locations.mjs\";\nimport { Locations } from \"./locations/locations.mjs\";\nexport class HTTP extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.locations = new LocationsAPI.Locations(this._client);\n        this.ases = new AsesAPI.Ases(this._client);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n        this.top = new TopAPI.Top(this._client);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/http/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nHTTP.Locations = Locations;\nHTTP.Ases = Ases;\nHTTP.Summary = Summary;\nHTTP.TimeseriesGroups = TimeseriesGroups;\nHTTP.Top = Top;\n//# sourceMappingURL=http.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Summary extends APIResource {\n    botClass(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.botClass({}, query);\n        }\n        return this._client.get('/radar/leaked_credential_checks/summary/bot_class', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    compromised(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.compromised({}, query);\n        }\n        return this._client.get('/radar/leaked_credential_checks/summary/compromised', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=summary.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class TimeseriesGroups extends APIResource {\n    botClass(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.botClass({}, query);\n        }\n        return this._client.get('/radar/leaked_credential_checks/timeseries_groups/bot_class', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    compromised(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.compromised({}, query);\n        }\n        return this._client.get('/radar/leaked_credential_checks/timeseries_groups/compromised', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=timeseries-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SummaryAPI from \"./summary.mjs\";\nimport { Summary, } from \"./summary.mjs\";\nimport * as TimeseriesGroupsAPI from \"./timeseries-groups.mjs\";\nimport { TimeseriesGroups, } from \"./timeseries-groups.mjs\";\nexport class LeakedCredentials extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.summary = new SummaryAPI.Summary(this._client);\n        this.timeseriesGroups = new TimeseriesGroupsAPI.TimeseriesGroups(this._client);\n    }\n}\nLeakedCredentials.Summary = Summary;\nLeakedCredentials.TimeseriesGroups = TimeseriesGroups;\n//# sourceMappingURL=leaked-credentials.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Top extends APIResource {\n    ases(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ases({}, query);\n        }\n        return this._client.get('/radar/netflows/top/ases', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    locations(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.locations({}, query);\n        }\n        return this._client.get('/radar/netflows/top/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as TopAPI from \"./top.mjs\";\nimport { Top } from \"./top.mjs\";\nexport class Netflows extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.top = new TopAPI.Top(this._client);\n    }\n    summary(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary({}, query);\n        }\n        return this._client.get('/radar/netflows/summary', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    timeseries(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseries({}, query);\n        }\n        return this._client.get('/radar/netflows/timeseries', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nNetflows.Top = Top;\n//# sourceMappingURL=netflows.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class IQI extends APIResource {\n    /**\n     * Retrieves a summary (percentiles) of bandwidth, latency, or DNS response time\n     * from the Radar Internet Quality Index (IQI).\n     *\n     * @example\n     * ```ts\n     * const response = await client.radar.quality.iqi.summary({\n     *   metric: 'BANDWIDTH',\n     * });\n     * ```\n     */\n    summary(query, options) {\n        return this._client.get('/radar/quality/iqi/summary', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves a time series (percentiles) of bandwidth, latency, or DNS response\n     * time from the Radar Internet Quality Index (IQI).\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.radar.quality.iqi.timeseriesGroups({\n     *     metric: 'BANDWIDTH',\n     *   });\n     * ```\n     */\n    timeseriesGroups(query, options) {\n        return this._client.get('/radar/quality/iqi/timeseries_groups', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=iqi.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class Top extends APIResource {\n    ases(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.ases({}, query);\n        }\n        return this._client.get('/radar/quality/speed/top/ases', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    locations(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.locations({}, query);\n        }\n        return this._client.get('/radar/quality/speed/top/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as TopAPI from \"./top.mjs\";\nimport { Top } from \"./top.mjs\";\nexport class Speed extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.top = new TopAPI.Top(this._client);\n    }\n    histogram(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.histogram({}, query);\n        }\n        return this._client.get('/radar/quality/speed/histogram', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    summary(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.summary({}, query);\n        }\n        return this._client.get('/radar/quality/speed/summary', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nSpeed.Top = Top;\n//# sourceMappingURL=speed.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as IQIAPI from \"./iqi.mjs\";\nimport { IQI, } from \"./iqi.mjs\";\nimport * as SpeedAPI from \"./speed/speed.mjs\";\nimport { Speed, } from \"./speed/speed.mjs\";\nexport class Quality extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.iqi = new IQIAPI.IQI(this._client);\n        this.speed = new SpeedAPI.Speed(this._client);\n    }\n}\nQuality.IQI = IQI;\nQuality.Speed = Speed;\n//# sourceMappingURL=quality.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Domain extends APIResource {\n    get(domain, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get(domain, {}, query);\n        }\n        return this._client.get(`/radar/ranking/domain/${domain}`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=domain.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class InternetServices extends APIResource {\n    categories(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.categories({}, query);\n        }\n        return this._client.get('/radar/ranking/internet_services/categories', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    timeseriesGroups(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups({}, query);\n        }\n        return this._client.get('/radar/ranking/internet_services/timeseries_groups', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    top(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.top({}, query);\n        }\n        return this._client.get('/radar/ranking/internet_services/top', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=internet-services.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as DomainAPI from \"./domain.mjs\";\nimport { Domain } from \"./domain.mjs\";\nimport * as InternetServicesAPI from \"./internet-services.mjs\";\nimport { InternetServices, } from \"./internet-services.mjs\";\nexport class Ranking extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.domain = new DomainAPI.Domain(this._client);\n        this.internetServices = new InternetServicesAPI.InternetServices(this._client);\n    }\n    timeseriesGroups(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.timeseriesGroups({}, query);\n        }\n        return this._client.get('/radar/ranking/timeseries_groups', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    top(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.top({}, query);\n        }\n        return this._client.get('/radar/ranking/top', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nRanking.Domain = Domain;\nRanking.InternetServices = InternetServices;\n//# sourceMappingURL=ranking.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nexport class UserAgents extends APIResource {\n    directive(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.directive({}, query);\n        }\n        return this._client.get('/radar/robots_txt/top/user_agents/directive', {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=user-agents.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../../core.mjs\";\nimport * as UserAgentsAPI from \"./user-agents.mjs\";\nimport { UserAgents } from \"./user-agents.mjs\";\nexport class Top extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.userAgents = new UserAgentsAPI.UserAgents(this._client);\n    }\n    domainCategories(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.domainCategories({}, query);\n        }\n        return this._client.get('/radar/robots_txt/top/domain_categories', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nTop.UserAgents = UserAgents;\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TopAPI from \"./top/top.mjs\";\nimport { Top } from \"./top/top.mjs\";\nexport class RobotsTXT extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.top = new TopAPI.Top(this._client);\n    }\n}\nRobotsTXT.Top = Top;\n//# sourceMappingURL=robots-txt.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Locations extends APIResource {\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/traffic_anomalies/locations', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=locations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as LocationsAPI from \"./locations.mjs\";\nimport { Locations as LocationsAPILocations } from \"./locations.mjs\";\nexport class TrafficAnomalies extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.locations = new LocationsAPI.Locations(this._client);\n    }\n    get(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.get({}, query);\n        }\n        return this._client.get('/radar/traffic_anomalies', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\nTrafficAnomalies.Locations = LocationsAPILocations;\n//# sourceMappingURL=traffic-anomalies.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nexport class Top extends APIResource {\n    bots(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.bots({}, query);\n        }\n        return this._client.get('/radar/verified_bots/top/bots', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    categories(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.categories({}, query);\n        }\n        return this._client.get('/radar/verified_bots/top/categories', { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=top.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TopAPI from \"./top.mjs\";\nimport { Top } from \"./top.mjs\";\nexport class VerifiedBots extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.top = new TopAPI.Top(this._client);\n    }\n}\nVerifiedBots.Top = Top;\n//# sourceMappingURL=verified-bots.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DatasetsAPI from \"./datasets.mjs\";\nimport { Datasets, } from \"./datasets.mjs\";\nimport * as SearchAPI from \"./search.mjs\";\nimport { Search } from \"./search.mjs\";\nimport * as TCPResetsTimeoutsAPI from \"./tcp-resets-timeouts.mjs\";\nimport { TCPResetsTimeouts, } from \"./tcp-resets-timeouts.mjs\";\nimport * as AIAPI from \"./ai/ai.mjs\";\nimport { AI } from \"./ai/ai.mjs\";\nimport * as AnnotationsAPI from \"./annotations/annotations.mjs\";\nimport { Annotations } from \"./annotations/annotations.mjs\";\nimport * as AS112API from \"./as112/as112.mjs\";\nimport { AS112 } from \"./as112/as112.mjs\";\nimport * as AttacksAPI from \"./attacks/attacks.mjs\";\nimport { Attacks } from \"./attacks/attacks.mjs\";\nimport * as BGPAPI from \"./bgp/bgp.mjs\";\nimport { BGP } from \"./bgp/bgp.mjs\";\nimport * as BotsAPI from \"./bots/bots.mjs\";\nimport { Bots, } from \"./bots/bots.mjs\";\nimport * as CtAPI from \"./ct/ct.mjs\";\nimport { Ct, } from \"./ct/ct.mjs\";\nimport * as DNSAPI from \"./dns/dns.mjs\";\nimport { DNS } from \"./dns/dns.mjs\";\nimport * as EmailAPI from \"./email/email.mjs\";\nimport { Email } from \"./email/email.mjs\";\nimport * as EntitiesAPI from \"./entities/entities.mjs\";\nimport { Entities } from \"./entities/entities.mjs\";\nimport * as HTTPAPI from \"./http/http.mjs\";\nimport { HTTP } from \"./http/http.mjs\";\nimport * as LeakedCredentialsAPI from \"./leaked-credentials/leaked-credentials.mjs\";\nimport { LeakedCredentials } from \"./leaked-credentials/leaked-credentials.mjs\";\nimport * as NetflowsAPI from \"./netflows/netflows.mjs\";\nimport { Netflows, } from \"./netflows/netflows.mjs\";\nimport * as QualityAPI from \"./quality/quality.mjs\";\nimport { Quality } from \"./quality/quality.mjs\";\nimport * as RankingAPI from \"./ranking/ranking.mjs\";\nimport { Ranking, } from \"./ranking/ranking.mjs\";\nimport * as RobotsTXTAPI from \"./robots-txt/robots-txt.mjs\";\nimport { RobotsTXT } from \"./robots-txt/robots-txt.mjs\";\nimport * as TrafficAnomaliesAPI from \"./traffic-anomalies/traffic-anomalies.mjs\";\nimport { TrafficAnomalies, } from \"./traffic-anomalies/traffic-anomalies.mjs\";\nimport * as VerifiedBotsAPI from \"./verified-bots/verified-bots.mjs\";\nimport { VerifiedBots } from \"./verified-bots/verified-bots.mjs\";\nexport class Radar extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.ai = new AIAPI.AI(this._client);\n        this.ct = new CtAPI.Ct(this._client);\n        this.annotations = new AnnotationsAPI.Annotations(this._client);\n        this.bgp = new BGPAPI.BGP(this._client);\n        this.bots = new BotsAPI.Bots(this._client);\n        this.datasets = new DatasetsAPI.Datasets(this._client);\n        this.dns = new DNSAPI.DNS(this._client);\n        this.netflows = new NetflowsAPI.Netflows(this._client);\n        this.search = new SearchAPI.Search(this._client);\n        this.verifiedBots = new VerifiedBotsAPI.VerifiedBots(this._client);\n        this.as112 = new AS112API.AS112(this._client);\n        this.email = new EmailAPI.Email(this._client);\n        this.attacks = new AttacksAPI.Attacks(this._client);\n        this.entities = new EntitiesAPI.Entities(this._client);\n        this.http = new HTTPAPI.HTTP(this._client);\n        this.quality = new QualityAPI.Quality(this._client);\n        this.ranking = new RankingAPI.Ranking(this._client);\n        this.trafficAnomalies = new TrafficAnomaliesAPI.TrafficAnomalies(this._client);\n        this.tcpResetsTimeouts = new TCPResetsTimeoutsAPI.TCPResetsTimeouts(this._client);\n        this.robotsTXT = new RobotsTXTAPI.RobotsTXT(this._client);\n        this.leakedCredentials = new LeakedCredentialsAPI.LeakedCredentials(this._client);\n    }\n}\nRadar.AI = AI;\nRadar.Ct = Ct;\nRadar.Annotations = Annotations;\nRadar.BGP = BGP;\nRadar.Bots = Bots;\nRadar.Datasets = Datasets;\nRadar.DNS = DNS;\nRadar.Netflows = Netflows;\nRadar.Search = Search;\nRadar.VerifiedBots = VerifiedBots;\nRadar.AS112 = AS112;\nRadar.Email = Email;\nRadar.Attacks = Attacks;\nRadar.Entities = Entities;\nRadar.HTTP = HTTP;\nRadar.Quality = Quality;\nRadar.Ranking = Ranking;\nRadar.TrafficAnomalies = TrafficAnomalies;\nRadar.TCPResetsTimeouts = TCPResetsTimeouts;\nRadar.RobotsTXT = RobotsTXT;\nRadar.LeakedCredentials = LeakedCredentials;\n//# sourceMappingURL=radar.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class BotManagement extends APIResource {\n    /**\n     * Updates the Bot Management configuration for a zone.\n     *\n     * This API is used to update:\n     *\n     * - **Bot Fight Mode**\n     * - **Super Bot Fight Mode**\n     * - **Bot Management for Enterprise**\n     *\n     * See [Bot Plans](https://developers.cloudflare.com/bots/plans/) for more\n     * information on the different plans \\\n     * If you recently upgraded or downgraded your plan, refer to the following examples\n     * to clean up old configurations. Copy and paste the example body to remove old zone\n     * configurations based on your current plan.\n     *\n     * #### Clean up configuration for Bot Fight Mode plan\n     *\n     * ```json\n     * {\n     *   \"sbfm_likely_automated\": \"allow\",\n     *   \"sbfm_definitely_automated\": \"allow\",\n     *   \"sbfm_verified_bots\": \"allow\",\n     *   \"sbfm_static_resource_protection\": false,\n     *   \"optimize_wordpress\": false,\n     *   \"suppress_session_score\": false\n     * }\n     * ```\n     *\n     * #### Clean up configuration for SBFM Pro plan\n     *\n     * ```json\n     * {\n     *   \"sbfm_likely_automated\": \"allow\",\n     *   \"fight_mode\": false\n     * }\n     * ```\n     *\n     * #### Clean up configuration for SBFM Biz plan\n     *\n     * ```json\n     * {\n     *   \"fight_mode\": false\n     * }\n     * ```\n     *\n     * #### Clean up configuration for BM Enterprise Subscription plan\n     *\n     * It is strongly recommended that you ensure you have\n     * [custom rules](https://developers.cloudflare.com/waf/custom-rules/) in place to\n     * protect your zone before disabling the SBFM rules. Without these protections,\n     * your zone is vulnerable to attacks.\n     *\n     * ```json\n     * {\n     *   \"sbfm_likely_automated\": \"allow\",\n     *   \"sbfm_definitely_automated\": \"allow\",\n     *   \"sbfm_verified_bots\": \"allow\",\n     *   \"sbfm_static_resource_protection\": false,\n     *   \"optimize_wordpress\": false,\n     *   \"fight_mode\": false\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * const botManagement = await client.botManagement.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   ai_bots_protection: 'disabled',\n     *   crawler_protection: 'disabled',\n     *   enable_js: true,\n     *   fight_mode: true,\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/bot_management`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieve a zone's Bot Management Config\n     *\n     * @example\n     * ```ts\n     * const botManagement = await client.botManagement.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/bot_management`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=bot-management.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class OriginPostQuantumEncryption extends APIResource {\n    /**\n     * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when\n     * connecting to your origin. Preferred instructs Cloudflare to opportunistically\n     * send a Post-Quantum keyshare in the first message to the origin (for fastest\n     * connections when the origin supports and prefers PQ), supported means that PQ\n     * algorithms are advertised but only used when requested by the origin, and off\n     * means that PQ algorithms are not advertised.\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/cache/origin_post_quantum_encryption`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when\n     * connecting to your origin. Preferred instructs Cloudflare to opportunistically\n     * send a Post-Quantum keyshare in the first message to the origin (for fastest\n     * connections when the origin supports and prefers PQ), supported means that PQ\n     * algorithms are advertised but only used when requested by the origin, and off\n     * means that PQ algorithms are not advertised.\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/cache/origin_post_quantum_encryption`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=origin-post-quantum-encryption.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Config extends APIResource {\n    /**\n     * Updates Zaraz configuration for a zone.\n     *\n     * @example\n     * ```ts\n     * const configuration = await client.zaraz.config.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   dataLayer: true,\n     *   debugKey: 'debugKey',\n     *   settings: { autoInjectScript: true },\n     *   tools: {\n     *     foo: { ... },\n     *   },\n     *   triggers: {\n     *     foo: { ... },\n     *   },\n     *   variables: {\n     *     foo: { ... },\n     *   },\n     *   zarazVersion: 0,\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/settings/zaraz/config`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets latest Zaraz configuration for a zone. It can be preview or published\n     * configuration, whichever was the last updated. Secret variables values will not\n     * be included.\n     *\n     * @example\n     * ```ts\n     * const configuration = await client.zaraz.config.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/settings/zaraz/config`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=config.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Default extends APIResource {\n    /**\n     * Gets default Zaraz configuration for a zone.\n     *\n     * @example\n     * ```ts\n     * const configuration = await client.zaraz.default.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/settings/zaraz/default`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=default.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Export extends APIResource {\n    /**\n     * Exports full current published Zaraz configuration for a zone, secret variables\n     * included.\n     *\n     * @example\n     * ```ts\n     * const configuration = await client.zaraz.export.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/settings/zaraz/export`, options);\n    }\n}\n//# sourceMappingURL=export.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Publish extends APIResource {\n    /**\n     * Publish current Zaraz preview configuration for a zone.\n     *\n     * @example\n     * ```ts\n     * const publish = await client.zaraz.publish.create({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, body } = params ?? {};\n        return this._client.post(`/zones/${zone_id}/settings/zaraz/publish`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=publish.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class WorkflowResource extends APIResource {\n    /**\n     * Gets Zaraz workflow for a zone.\n     *\n     * @example\n     * ```ts\n     * const workflow = await client.zaraz.workflow.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/settings/zaraz/workflow`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=workflow.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Configs extends APIResource {\n    /**\n     * Gets a history of published Zaraz configurations by ID(s) for a zone.\n     *\n     * @example\n     * ```ts\n     * const config = await client.zaraz.history.configs.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   ids: [0],\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/settings/zaraz/history/configs`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=configs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ConfigsAPI from \"./configs.mjs\";\nimport { Configs } from \"./configs.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class History extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.configs = new ConfigsAPI.Configs(this._client);\n    }\n    /**\n     * Restores a historical published Zaraz configuration by ID for a zone.\n     *\n     * @example\n     * ```ts\n     * const configuration = await client.zaraz.history.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   body: 12345,\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, body } = params;\n        return this._client.put(`/zones/${zone_id}/settings/zaraz/history`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists a history of published Zaraz configuration records for a zone.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const historyListResponse of client.zaraz.history.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/settings/zaraz/history`, HistoryListResponsesSinglePage, { query, ...options });\n    }\n}\nexport class HistoryListResponsesSinglePage extends SinglePage {\n}\nHistory.HistoryListResponsesSinglePage = HistoryListResponsesSinglePage;\nHistory.Configs = Configs;\n//# sourceMappingURL=history.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ConfigAPI from \"./config.mjs\";\nimport { Config } from \"./config.mjs\";\nimport * as DefaultAPI from \"./default.mjs\";\nimport { Default } from \"./default.mjs\";\nimport * as ExportAPI from \"./export.mjs\";\nimport { Export } from \"./export.mjs\";\nimport * as PublishAPI from \"./publish.mjs\";\nimport { Publish } from \"./publish.mjs\";\nimport * as WorkflowAPI from \"./workflow.mjs\";\nimport { WorkflowResource } from \"./workflow.mjs\";\nimport * as HistoryAPI from \"./history/history.mjs\";\nimport { History, HistoryListResponsesSinglePage, } from \"./history/history.mjs\";\nexport class Zaraz extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.config = new ConfigAPI.Config(this._client);\n        this.default = new DefaultAPI.Default(this._client);\n        this.export = new ExportAPI.Export(this._client);\n        this.history = new HistoryAPI.History(this._client);\n        this.publish = new PublishAPI.Publish(this._client);\n        this.workflow = new WorkflowAPI.WorkflowResource(this._client);\n    }\n    /**\n     * Updates Zaraz workflow for a zone.\n     *\n     * @example\n     * ```ts\n     * const workflow = await client.zaraz.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   workflow: 'realtime',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, workflow } = params;\n        return this._client.put(`/zones/${zone_id}/settings/zaraz/workflow`, {\n            body: workflow,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nZaraz.Config = Config;\nZaraz.Default = Default;\nZaraz.Export = Export;\nZaraz.History = History;\nZaraz.HistoryListResponsesSinglePage = HistoryListResponsesSinglePage;\nZaraz.Publish = Publish;\nZaraz.WorkflowResource = WorkflowResource;\n//# sourceMappingURL=zaraz.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Availabilities extends APIResource {\n    /**\n     * Retrieves quota for all plans, as well as the current zone quota.\n     *\n     * @example\n     * ```ts\n     * const availability = await client.speed.availabilities.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/speed_api/availabilities`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=availabilities.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class ScheduleResource extends APIResource {\n    /**\n     * Creates a scheduled test for a page.\n     *\n     * @example\n     * ```ts\n     * const schedule = await client.speed.schedule.create(\n     *   'example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    create(url, params, options) {\n        const { zone_id, region } = params;\n        return this._client.post(`/zones/${zone_id}/speed_api/schedule/${url}`, {\n            query: { region },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes a scheduled test for a page.\n     *\n     * @example\n     * ```ts\n     * const schedule = await client.speed.schedule.delete(\n     *   'example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(url, params, options) {\n        const { zone_id, region } = params;\n        return this._client.delete(`/zones/${zone_id}/speed_api/schedule/${url}`, {\n            query: { region },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves the test schedule for a page in a specific region.\n     *\n     * @example\n     * ```ts\n     * const schedule = await client.speed.schedule.get(\n     *   'example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(url, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/speed_api/schedule/${url}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=schedule.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Tests extends APIResource {\n    /**\n     * Starts a test for a specific webpage, in a specific region.\n     *\n     * @example\n     * ```ts\n     * const test = await client.speed.pages.tests.create(\n     *   'example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    create(url, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/speed_api/pages/${url}/tests`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Test history (list of tests) for a specific webpage.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const test of client.speed.pages.tests.list(\n     *   'example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(url, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/speed_api/pages/${url}/tests`, TestsV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes all tests for a specific webpage from a specific region. Deleted tests\n     * are still counted as part of the quota.\n     *\n     * @example\n     * ```ts\n     * const test = await client.speed.pages.tests.delete(\n     *   'example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(url, params, options) {\n        const { zone_id, region } = params;\n        return this._client.delete(`/zones/${zone_id}/speed_api/pages/${url}/tests`, {\n            query: { region },\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves the result of a specific test.\n     *\n     * @example\n     * ```ts\n     * const test = await client.speed.pages.tests.get(\n     *   'example.com',\n     *   'test_id',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(url, testId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/speed_api/pages/${url}/tests/${testId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TestsV4PagePaginationArray extends V4PagePaginationArray {\n}\nTests.TestsV4PagePaginationArray = TestsV4PagePaginationArray;\n//# sourceMappingURL=tests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TestsAPI from \"./tests.mjs\";\nimport { Tests, TestsV4PagePaginationArray, } from \"./tests.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Pages extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.tests = new TestsAPI.Tests(this._client);\n    }\n    /**\n     * Lists all webpages which have been tested.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const pageListResponse of client.speed.pages.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/speed_api/pages`, PageListResponsesSinglePage, options);\n    }\n    /**\n     * Lists the core web vital metrics trend over time for a specific page.\n     *\n     * @example\n     * ```ts\n     * const trend = await client.speed.pages.trend(\n     *   'example.com',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     deviceType: 'DESKTOP',\n     *     metrics: 'performanceScore,ttfb,fcp,si,lcp,tti,tbt,cls',\n     *     region: 'us-central1',\n     *     start: '2014-01-01T05:20:00.12345Z',\n     *     tz: 'tz',\n     *   },\n     * );\n     * ```\n     */\n    trend(url, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/speed_api/pages/${url}/trend`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class PageListResponsesSinglePage extends SinglePage {\n}\nPages.PageListResponsesSinglePage = PageListResponsesSinglePage;\nPages.Tests = Tests;\nPages.TestsV4PagePaginationArray = TestsV4PagePaginationArray;\n//# sourceMappingURL=pages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AvailabilitiesAPI from \"./availabilities.mjs\";\nimport { Availabilities } from \"./availabilities.mjs\";\nimport * as ScheduleAPI from \"./schedule.mjs\";\nimport { ScheduleResource, } from \"./schedule.mjs\";\nimport * as PagesAPI from \"./pages/pages.mjs\";\nimport { PageListResponsesSinglePage, Pages, } from \"./pages/pages.mjs\";\nexport class Speed extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.schedule = new ScheduleAPI.ScheduleResource(this._client);\n        this.availabilities = new AvailabilitiesAPI.Availabilities(this._client);\n        this.pages = new PagesAPI.Pages(this._client);\n    }\n}\nSpeed.ScheduleResource = ScheduleResource;\nSpeed.Availabilities = Availabilities;\nSpeed.Pages = Pages;\nSpeed.PageListResponsesSinglePage = PageListResponsesSinglePage;\n//# sourceMappingURL=speed.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class DCVDelegation extends APIResource {\n    /**\n     * Retrieve the account and zone specific unique identifier used as part of the\n     * CNAME target for DCV Delegation.\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/dcv_delegation/uuid`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=dcv-delegation.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class TLS extends APIResource {\n    /**\n     * Update the tls setting value for the hostname.\n     *\n     * @example\n     * ```ts\n     * const setting = await client.hostnames.settings.tls.update(\n     *   'ciphers',\n     *   'app.example.com',\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     value: [\n     *       'ECDHE-RSA-AES128-GCM-SHA256',\n     *       'AES128-GCM-SHA256',\n     *     ],\n     *   },\n     * );\n     * ```\n     */\n    update(settingId, hostname, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/hostnames/settings/${settingId}/${hostname}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete the tls setting value for the hostname.\n     *\n     * @example\n     * ```ts\n     * const tls = await client.hostnames.settings.tls.delete(\n     *   'ciphers',\n     *   'app.example.com',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(settingId, hostname, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/hostnames/settings/${settingId}/${hostname}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List the requested TLS setting for the hostnames under this zone.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const tlsGetResponse of client.hostnames.settings.tls.get(\n     *   'ciphers',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(settingId, params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/hostnames/settings/${settingId}`, TLSGetResponsesSinglePage, options);\n    }\n}\nexport class TLSGetResponsesSinglePage extends SinglePage {\n}\nTLS.TLSGetResponsesSinglePage = TLSGetResponsesSinglePage;\n//# sourceMappingURL=tls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as TLSAPI from \"./tls.mjs\";\nimport { TLS, TLSGetResponsesSinglePage, } from \"./tls.mjs\";\nexport class Settings extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.tls = new TLSAPI.TLS(this._client);\n    }\n}\nSettings.TLS = TLS;\nSettings.TLSGetResponsesSinglePage = TLSGetResponsesSinglePage;\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as SettingsAPI from \"./settings/settings.mjs\";\nimport { Settings } from \"./settings/settings.mjs\";\nexport class Hostnames extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n}\nHostnames.Settings = Settings;\n//# sourceMappingURL=hostnames.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Content extends APIResource {\n    /**\n     * Fetches the content of a snippet belonging to the zone.\n     */\n    get(snippetName, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/snippets/${snippetName}/content`, {\n            ...options,\n            headers: { Accept: 'multipart/form-data', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=content.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Updates all snippet rules belonging to the zone.\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/snippets/snippet_rules`, RuleUpdateResponsesSinglePage, { body, method: 'put', ...options });\n    }\n    /**\n     * Fetches all snippet rules belonging to the zone.\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/snippets/snippet_rules`, RuleListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes all snippet rules belonging to the zone.\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/snippets/snippet_rules`, RuleDeleteResponsesSinglePage, { method: 'delete', ...options });\n    }\n}\nexport class RuleUpdateResponsesSinglePage extends SinglePage {\n}\nexport class RuleListResponsesSinglePage extends SinglePage {\n}\nexport class RuleDeleteResponsesSinglePage extends SinglePage {\n}\nRules.RuleUpdateResponsesSinglePage = RuleUpdateResponsesSinglePage;\nRules.RuleListResponsesSinglePage = RuleListResponsesSinglePage;\nRules.RuleDeleteResponsesSinglePage = RuleDeleteResponsesSinglePage;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nimport * as ContentAPI from \"./content.mjs\";\nimport { Content } from \"./content.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { RuleDeleteResponsesSinglePage, RuleListResponsesSinglePage, RuleUpdateResponsesSinglePage, Rules, } from \"./rules.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Snippets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.content = new ContentAPI.Content(this._client);\n        this.rules = new RulesAPI.Rules(this._client);\n    }\n    /**\n     * Creates or updates a snippet belonging to the zone.\n     */\n    update(snippetName, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/snippets/${snippetName}`, Core.multipartFormRequestOptions({ body, ...options }))._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches all snippets belonging to the zone.\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/snippets`, SnippetListResponsesV4PagePaginationArray, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Deletes a snippet belonging to the zone.\n     */\n    delete(snippetName, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/snippets/${snippetName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches a snippet belonging to the zone.\n     */\n    get(snippetName, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/snippets/${snippetName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SnippetListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nSnippets.SnippetListResponsesV4PagePaginationArray = SnippetListResponsesV4PagePaginationArray;\nSnippets.Content = Content;\nSnippets.Rules = Rules;\nSnippets.RuleUpdateResponsesSinglePage = RuleUpdateResponsesSinglePage;\nSnippets.RuleListResponsesSinglePage = RuleListResponsesSinglePage;\nSnippets.RuleDeleteResponsesSinglePage = RuleDeleteResponsesSinglePage;\n//# sourceMappingURL=snippets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class SFU extends APIResource {\n    /**\n     * Creates a new Cloudflare calls app. An app is an unique enviroment where each\n     * Session can access all Tracks within the app.\n     *\n     * @example\n     * ```ts\n     * const sfu = await client.calls.sfu.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/calls/apps`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit details for a single app.\n     *\n     * @example\n     * ```ts\n     * const sfu = await client.calls.sfu.update(\n     *   '2a95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(appId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/calls/apps/${appId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all apps in the Cloudflare account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const sfuListResponse of client.calls.sfu.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * })) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/calls/apps`, SFUListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes an app from Cloudflare Calls\n     *\n     * @example\n     * ```ts\n     * const sfu = await client.calls.sfu.delete(\n     *   '2a95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(appId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/calls/apps/${appId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches details for a single Calls app.\n     *\n     * @example\n     * ```ts\n     * const sfu = await client.calls.sfu.get(\n     *   '2a95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(appId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/calls/apps/${appId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SFUListResponsesSinglePage extends SinglePage {\n}\nSFU.SFUListResponsesSinglePage = SFUListResponsesSinglePage;\n//# sourceMappingURL=sfu.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class TURN extends APIResource {\n    /**\n     * Creates a new Cloudflare Calls TURN key.\n     *\n     * @example\n     * ```ts\n     * const turn = await client.calls.turn.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/calls/turn_keys`, { body, ...options });\n    }\n    /**\n     * Edit details for a single TURN key.\n     *\n     * @example\n     * ```ts\n     * const turn = await client.calls.turn.update(\n     *   '2a95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(keyId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/calls/turn_keys/${keyId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all TURN keys in the Cloudflare account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const turnListResponse of client.calls.turn.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/calls/turn_keys`, TURNListResponsesSinglePage, options);\n    }\n    /**\n     * Deletes a TURN key from Cloudflare Calls\n     *\n     * @example\n     * ```ts\n     * const turn = await client.calls.turn.delete(\n     *   '2a95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(keyId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/calls/turn_keys/${keyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches details for a single TURN key.\n     *\n     * @example\n     * ```ts\n     * const turn = await client.calls.turn.get(\n     *   '2a95132c15732412d22c1476fa83f27a',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(keyId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/calls/turn_keys/${keyId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class TURNListResponsesSinglePage extends SinglePage {\n}\nTURN.TURNListResponsesSinglePage = TURNListResponsesSinglePage;\n//# sourceMappingURL=turn.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as SFUAPI from \"./sfu.mjs\";\nimport { SFU, SFUListResponsesSinglePage, } from \"./sfu.mjs\";\nimport * as TURNAPI from \"./turn.mjs\";\nimport { TURN, TURNListResponsesSinglePage, } from \"./turn.mjs\";\nexport class Calls extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.sfu = new SFUAPI.SFU(this._client);\n        this.turn = new TURNAPI.TURN(this._client);\n    }\n}\nCalls.SFU = SFU;\nCalls.SFUListResponsesSinglePage = SFUListResponsesSinglePage;\nCalls.TURN = TURN;\nCalls.TURNListResponsesSinglePage = TURNListResponsesSinglePage;\n//# sourceMappingURL=calls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nexport class BinaryStorage extends APIResource {\n    /**\n     * Posts a file to Binary Storage\n     *\n     * @example\n     * ```ts\n     * const binaryStorage =\n     *   await client.cloudforceOne.binaryStorage.create({\n     *     account_id: 'account_id',\n     *     file: fs.createReadStream('path/to/file'),\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/binary`, Core.multipartFormRequestOptions({ body, ...options }));\n    }\n    /**\n     * Retrieves a file from Binary Storage\n     *\n     * @example\n     * ```ts\n     * await client.cloudforceOne.binaryStorage.get('hash', {\n     *   account_id: 'account_id',\n     * });\n     * ```\n     */\n    get(hash, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/binary/${hash}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n}\n//# sourceMappingURL=binary-storage.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Assets extends APIResource {\n    /**\n     * List Request Assets\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const assetCreateResponse of client.cloudforceOne.requests.assets.create(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     page: 0,\n     *     per_page: 10,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(requestId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/asset`, AssetCreateResponsesSinglePage, { body, method: 'post', ...options });\n    }\n    /**\n     * Update a Request Asset\n     *\n     * @example\n     * ```ts\n     * const asset =\n     *   await client.cloudforceOne.requests.assets.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(requestId, assetId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/asset/${assetId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a Request Asset\n     *\n     * @example\n     * ```ts\n     * const asset =\n     *   await client.cloudforceOne.requests.assets.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(requestId, assetId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/asset/${assetId}`, options);\n    }\n    /**\n     * Get a Request Asset\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const assetGetResponse of client.cloudforceOne.requests.assets.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(requestId, assetId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/asset/${assetId}`, AssetGetResponsesSinglePage, options);\n    }\n}\nexport class AssetCreateResponsesSinglePage extends SinglePage {\n}\nexport class AssetGetResponsesSinglePage extends SinglePage {\n}\nAssets.AssetCreateResponsesSinglePage = AssetCreateResponsesSinglePage;\nAssets.AssetGetResponsesSinglePage = AssetGetResponsesSinglePage;\n//# sourceMappingURL=assets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class MessageResource extends APIResource {\n    /**\n     * Create a New Request Message\n     *\n     * @example\n     * ```ts\n     * const message =\n     *   await client.cloudforceOne.requests.message.create(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(requestId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/message/new`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Request Message\n     *\n     * @example\n     * ```ts\n     * const message =\n     *   await client.cloudforceOne.requests.message.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     0,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(requestId, messageId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/message/${messageId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a Request Message\n     *\n     * @example\n     * ```ts\n     * const message =\n     *   await client.cloudforceOne.requests.message.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     0,\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(requestId, messageId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/message/${messageId}`, options);\n    }\n    /**\n     * List Request Messages\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const message of client.cloudforceOne.requests.message.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     page: 0,\n     *     per_page: 10,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    get(requestId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cloudforce-one/requests/${requestId}/message`, MessagesSinglePage, { body, method: 'post', ...options });\n    }\n}\nexport class MessagesSinglePage extends SinglePage {\n}\nMessageResource.MessagesSinglePage = MessagesSinglePage;\n//# sourceMappingURL=message.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class PriorityResource extends APIResource {\n    /**\n     * Create a New Priority Intelligence Requirement\n     *\n     * @example\n     * ```ts\n     * const priority =\n     *   await client.cloudforceOne.requests.priority.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     labels: ['DoS', 'CVE'],\n     *     priority: 1,\n     *     requirement: 'DoS attacks carried out by CVEs',\n     *     tlp: 'clear',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/requests/priority/new`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Priority Intelligence Requirement\n     *\n     * @example\n     * ```ts\n     * const item =\n     *   await client.cloudforceOne.requests.priority.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       labels: ['DoS', 'CVE'],\n     *       priority: 1,\n     *       requirement: 'DoS attacks carried out by CVEs',\n     *       tlp: 'clear',\n     *     },\n     *   );\n     * ```\n     */\n    update(priorityId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cloudforce-one/requests/priority/${priorityId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Delete a Priority Intelligence Requirement\n     *\n     * @example\n     * ```ts\n     * const priority =\n     *   await client.cloudforceOne.requests.priority.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(priorityId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/requests/priority/${priorityId}`, options);\n    }\n    /**\n     * Get a Priority Intelligence Requirement\n     *\n     * @example\n     * ```ts\n     * const item =\n     *   await client.cloudforceOne.requests.priority.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(priorityId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/requests/priority/${priorityId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Priority Intelligence Requirement Quota\n     *\n     * @example\n     * ```ts\n     * const quota =\n     *   await client.cloudforceOne.requests.priority.quota({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    quota(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/requests/priority/quota`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=priority.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AssetsAPI from \"./assets.mjs\";\nimport { AssetCreateResponsesSinglePage, AssetGetResponsesSinglePage, Assets, } from \"./assets.mjs\";\nimport * as MessageAPI from \"./message.mjs\";\nimport { MessageResource, MessagesSinglePage, } from \"./message.mjs\";\nimport * as PriorityAPI from \"./priority.mjs\";\nimport { PriorityResource, } from \"./priority.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Requests extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.message = new MessageAPI.MessageResource(this._client);\n        this.priority = new PriorityAPI.PriorityResource(this._client);\n        this.assets = new AssetsAPI.Assets(this._client);\n    }\n    /**\n     * Creating a request adds the request into the Cloudforce One queue for analysis.\n     * In addition to the content, a short title, type, priority, and releasability\n     * should be provided. If one is not provided, a default will be assigned.\n     *\n     * @example\n     * ```ts\n     * const item = await client.cloudforceOne.requests.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/requests/new`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updating a request alters the request in the Cloudforce One queue. This API may\n     * be used to update any attributes of the request after the initial submission.\n     * Only fields that you choose to update need to be add to the request body.\n     *\n     * @example\n     * ```ts\n     * const item = await client.cloudforceOne.requests.update(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(requestId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/cloudforce-one/requests/${requestId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Requests\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const listItem of client.cloudforceOne.requests.list(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     page: 0,\n     *     per_page: 10,\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cloudforce-one/requests`, ListItemsSinglePage, {\n            body,\n            method: 'post',\n            ...options,\n        });\n    }\n    /**\n     * Delete a Request\n     *\n     * @example\n     * ```ts\n     * const request = await client.cloudforceOne.requests.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(requestId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/requests/${requestId}`, options);\n    }\n    /**\n     * Get Request Priority, Status, and TLP constants\n     *\n     * @example\n     * ```ts\n     * const requestConstants =\n     *   await client.cloudforceOne.requests.constants({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    constants(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/requests/constants`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get a Request\n     *\n     * @example\n     * ```ts\n     * const item = await client.cloudforceOne.requests.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(requestId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/requests/${requestId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Request Quota\n     *\n     * @example\n     * ```ts\n     * const quota = await client.cloudforceOne.requests.quota({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    quota(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/requests/quota`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Request Types\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const requestTypesResponse of client.cloudforceOne.requests.types(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    types(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cloudforce-one/requests/types`, RequestTypesResponsesSinglePage, options);\n    }\n}\nexport class ListItemsSinglePage extends SinglePage {\n}\nexport class RequestTypesResponsesSinglePage extends SinglePage {\n}\nRequests.ListItemsSinglePage = ListItemsSinglePage;\nRequests.RequestTypesResponsesSinglePage = RequestTypesResponsesSinglePage;\nRequests.MessageResource = MessageResource;\nRequests.MessagesSinglePage = MessagesSinglePage;\nRequests.PriorityResource = PriorityResource;\nRequests.Assets = Assets;\nRequests.AssetCreateResponsesSinglePage = AssetCreateResponsesSinglePage;\nRequests.AssetGetResponsesSinglePage = AssetGetResponsesSinglePage;\n//# sourceMappingURL=requests.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Config extends APIResource {\n    /**\n     * Create a new Scan Config\n     *\n     * @example\n     * ```ts\n     * const config =\n     *   await client.cloudforceOne.scans.config.create({\n     *     account_id: 'account_id',\n     *     ips: ['1.1.1.1', '2606:4700:4700::1111'],\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/scans/config`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Scan Configs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const configListResponse of client.cloudforceOne.scans.config.list(\n     *   { account_id: 'account_id' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/cloudforce-one/scans/config`, ConfigListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Scan Config\n     *\n     * @example\n     * ```ts\n     * const config =\n     *   await client.cloudforceOne.scans.config.delete(\n     *     'config_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(configId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/scans/config/${configId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing Scan Config\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.scans.config.edit(\n     *     'config_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    edit(configId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/cloudforce-one/scans/config/${configId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ConfigListResponsesSinglePage extends SinglePage {\n}\nConfig.ConfigListResponsesSinglePage = ConfigListResponsesSinglePage;\n//# sourceMappingURL=config.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Results extends APIResource {\n    /**\n     * Get the Latest Scan Result\n     *\n     * @example\n     * ```ts\n     * const result = await client.cloudforceOne.scans.results.get(\n     *   'config_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(configId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/scans/results/${configId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=results.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ConfigAPI from \"./config.mjs\";\nimport { Config, ConfigListResponsesSinglePage, } from \"./config.mjs\";\nimport * as ResultsAPI from \"./results.mjs\";\nimport { Results } from \"./results.mjs\";\nexport class Scans extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.results = new ResultsAPI.Results(this._client);\n        this.config = new ConfigAPI.Config(this._client);\n    }\n}\nScans.Results = Results;\nScans.Config = Config;\nScans.ConfigListResponsesSinglePage = ConfigListResponsesSinglePage;\n//# sourceMappingURL=scans.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Attackers extends APIResource {\n    /**\n     * Lists attackers\n     *\n     * @example\n     * ```ts\n     * const attackers =\n     *   await client.cloudforceOne.threatEvents.attackers.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/attackers`, options);\n    }\n}\n//# sourceMappingURL=attackers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Categories extends APIResource {\n    /**\n     * Creates a new category\n     *\n     * @example\n     * ```ts\n     * const category =\n     *   await client.cloudforceOne.threatEvents.categories.create(\n     *     {\n     *       account_id: 'account_id',\n     *       killChain: 0,\n     *       name: 'name',\n     *     },\n     *   );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/events/categories/create`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Lists categories\n     *\n     * @example\n     * ```ts\n     * const categories =\n     *   await client.cloudforceOne.threatEvents.categories.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/categories`, options);\n    }\n    /**\n     * Deletes a category\n     *\n     * @example\n     * ```ts\n     * const category =\n     *   await client.cloudforceOne.threatEvents.categories.delete(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(categoryId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/events/categories/${categoryId}`, options);\n    }\n    /**\n     * Updates a category\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.categories.edit(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    edit(categoryId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/cloudforce-one/events/categories/${categoryId}`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Reads a category\n     *\n     * @example\n     * ```ts\n     * const category =\n     *   await client.cloudforceOne.threatEvents.categories.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(categoryId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/categories/${categoryId}`, options);\n    }\n}\n//# sourceMappingURL=categories.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Countries extends APIResource {\n    /**\n     * Retrieves countries information for all countries\n     *\n     * @example\n     * ```ts\n     * const countries =\n     *   await client.cloudforceOne.threatEvents.countries.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/countries`, options);\n    }\n}\n//# sourceMappingURL=countries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Crons extends APIResource {\n    /**\n     * Reads the last cron update time\n     *\n     * @example\n     * ```ts\n     * const crons =\n     *   await client.cloudforceOne.threatEvents.crons.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/cron`, options);\n    }\n    /**\n     * Reads the last cron update time\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.crons.edit({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { account_id } = params;\n        return this._client.patch(`/accounts/${account_id}/cloudforce-one/events/cron`, options);\n    }\n}\n//# sourceMappingURL=crons.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class EventTags extends APIResource {\n    /**\n     * Adds a tag to an event\n     *\n     * @example\n     * ```ts\n     * const eventTag =\n     *   await client.cloudforceOne.threatEvents.eventTags.create(\n     *     'event_id',\n     *     { account_id: 'account_id', tags: ['botnet'] },\n     *   );\n     * ```\n     */\n    create(eventId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/events/event_tag/${eventId}/create`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Removes a tag from an event\n     *\n     * @example\n     * ```ts\n     * const eventTag =\n     *   await client.cloudforceOne.threatEvents.eventTags.delete(\n     *     'event_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(eventId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/events/event_tag/${eventId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=event-tags.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class IndicatorTypes extends APIResource {\n    /**\n     * Lists all indicator types\n     *\n     * @example\n     * ```ts\n     * const indicatorTypes =\n     *   await client.cloudforceOne.threatEvents.indicatorTypes.list(\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/indicatorTypes`, options);\n    }\n}\n//# sourceMappingURL=indicator-types.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Insights extends APIResource {\n}\n//# sourceMappingURL=insights.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Raw extends APIResource {\n    /**\n     * Updates a raw event\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.raw.edit(\n     *     'event_id',\n     *     'raw_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    edit(eventId, rawId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/cloudforce-one/events/${eventId}/raw/${rawId}`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Reads data for a raw event\n     *\n     * @example\n     * ```ts\n     * const raw = await client.cloudforceOne.threatEvents.raw.get(\n     *   'event_id',\n     *   'raw_id',\n     *   { account_id: 'account_id' },\n     * );\n     * ```\n     */\n    get(eventId, rawId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/${eventId}/raw/${rawId}`, options);\n    }\n}\n//# sourceMappingURL=raw.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Relate extends APIResource {\n    /**\n     * Removes an event reference\n     *\n     * @example\n     * ```ts\n     * const relate =\n     *   await client.cloudforceOne.threatEvents.relate.delete(\n     *     'event_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(eventId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/events/relate/${eventId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=relate.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Tags extends APIResource {\n    /**\n     * Creates a new tag\n     *\n     * @example\n     * ```ts\n     * const tag =\n     *   await client.cloudforceOne.threatEvents.tags.create({\n     *     account_id: 'account_id',\n     *     name: 'name',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/events/tags/create`, {\n            body,\n            ...options,\n        });\n    }\n}\n//# sourceMappingURL=tags.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class TargetIndustries extends APIResource {\n    /**\n     * Lists all target industries\n     *\n     * @example\n     * ```ts\n     * const targetIndustries =\n     *   await client.cloudforceOne.threatEvents.targetIndustries.list(\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/targetIndustries`, options);\n    }\n}\n//# sourceMappingURL=target-industries.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nexport class Health extends APIResource {\n    /**\n     * Benchmark Durable Object warmup\n     *\n     * @example\n     * ```ts\n     * const health =\n     *   await client.cloudforceOne.threatEvents.datasets.health.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(datasetId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/dataset/${datasetId}/health`, options);\n    }\n}\n//# sourceMappingURL=health.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../resource.mjs\";\nimport * as HealthAPI from \"./health.mjs\";\nimport { Health } from \"./health.mjs\";\nexport class Datasets extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.health = new HealthAPI.Health(this._client);\n    }\n    /**\n     * Creates a dataset\n     *\n     * @example\n     * ```ts\n     * const dataset =\n     *   await client.cloudforceOne.threatEvents.datasets.create({\n     *     account_id: 'account_id',\n     *     isPublic: true,\n     *     name: 'x',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/events/dataset/create`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Lists all datasets in an account\n     *\n     * @example\n     * ```ts\n     * const datasets =\n     *   await client.cloudforceOne.threatEvents.datasets.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/dataset`, options);\n    }\n    /**\n     * Updates an existing dataset\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.datasets.edit(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id', isPublic: true, name: 'x' },\n     *   );\n     * ```\n     */\n    edit(datasetId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/cloudforce-one/events/dataset/${datasetId}`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Reads a dataset\n     *\n     * @example\n     * ```ts\n     * const dataset =\n     *   await client.cloudforceOne.threatEvents.datasets.get(\n     *     '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    get(datasetId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/dataset/${datasetId}`, options);\n    }\n    /**\n     * Reads data for a raw event\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.datasets.raw(\n     *     'dataset_id',\n     *     'event_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    raw(datasetId, eventId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/raw/${datasetId}/${eventId}`, options);\n    }\n}\nDatasets.Health = Health;\n//# sourceMappingURL=datasets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AttackersAPI from \"./attackers.mjs\";\nimport { Attackers } from \"./attackers.mjs\";\nimport * as CategoriesAPI from \"./categories.mjs\";\nimport { Categories, } from \"./categories.mjs\";\nimport * as CountriesAPI from \"./countries.mjs\";\nimport { Countries } from \"./countries.mjs\";\nimport * as CronsAPI from \"./crons.mjs\";\nimport { Crons } from \"./crons.mjs\";\nimport * as EventTagsAPI from \"./event-tags.mjs\";\nimport { EventTags, } from \"./event-tags.mjs\";\nimport * as IndicatorTypesAPI from \"./indicator-types.mjs\";\nimport { IndicatorTypes } from \"./indicator-types.mjs\";\nimport * as InsightsAPI from \"./insights.mjs\";\nimport { Insights } from \"./insights.mjs\";\nimport * as RawAPI from \"./raw.mjs\";\nimport { Raw as RawAPIRaw } from \"./raw.mjs\";\nimport * as RelateAPI from \"./relate.mjs\";\nimport { Relate } from \"./relate.mjs\";\nimport * as TagsAPI from \"./tags.mjs\";\nimport { Tags } from \"./tags.mjs\";\nimport * as TargetIndustriesAPI from \"./target-industries.mjs\";\nimport { TargetIndustries } from \"./target-industries.mjs\";\nimport * as DatasetsAPI from \"./datasets/datasets.mjs\";\nimport { Datasets, } from \"./datasets/datasets.mjs\";\nexport class ThreatEvents extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.attackers = new AttackersAPI.Attackers(this._client);\n        this.categories = new CategoriesAPI.Categories(this._client);\n        this.countries = new CountriesAPI.Countries(this._client);\n        this.crons = new CronsAPI.Crons(this._client);\n        this.datasets = new DatasetsAPI.Datasets(this._client);\n        this.indicatorTypes = new IndicatorTypesAPI.IndicatorTypes(this._client);\n        this.raw = new RawAPI.Raw(this._client);\n        this.relate = new RelateAPI.Relate(this._client);\n        this.tags = new TagsAPI.Tags(this._client);\n        this.eventTags = new EventTagsAPI.EventTags(this._client);\n        this.targetIndustries = new TargetIndustriesAPI.TargetIndustries(this._client);\n        this.insights = new InsightsAPI.Insights(this._client);\n    }\n    /**\n     * To create a dataset, see the\n     * [`Create Dataset`](https://developers.cloudflare.com/api/resources/cloudforce_one/subresources/threat_events/subresources/datasets/methods/create/)\n     * endpoint. When `datasetId` parameter is unspecified, it will be created in a\n     * default dataset named `Cloudforce One Threat Events`.\n     *\n     * @example\n     * ```ts\n     * const threatEvent =\n     *   await client.cloudforceOne.threatEvents.create({\n     *     account_id: 'account_id',\n     *     category: 'Domain Resolution',\n     *     date: '2022-04-01T00:00:00Z',\n     *     event: 'An attacker registered the domain domain.com',\n     *     raw: { data: { foo: 'bar' } },\n     *     tlp: 'amber',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/events/create`, { body, ...options });\n    }\n    /**\n     * When `datasetId` is unspecified, events will be listed from the\n     * `Cloudforce One Threat Events` dataset. To list existing datasets (and their\n     * IDs), use the\n     * [`List Datasets`](https://developers.cloudflare.com/api/resources/cloudforce_one/subresources/threat_events/subresources/datasets/methods/list/)\n     * endpoint). Also, must provide query parameters.\n     *\n     * @example\n     * ```ts\n     * const threatEvents =\n     *   await client.cloudforceOne.threatEvents.list({\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events`, { query, ...options });\n    }\n    /**\n     * The `datasetId` parameter must be defined. To list existing datasets (and their\n     * IDs) in your account, use the\n     * [`List Datasets`](https://developers.cloudflare.com/api/resources/cloudforce_one/subresources/threat_events/subresources/datasets/methods/list/)\n     * endpoint.\n     *\n     * @example\n     * ```ts\n     * const threatEvent =\n     *   await client.cloudforceOne.threatEvents.delete(\n     *     'event_id',\n     *     { account_id: 'account_id' },\n     *   );\n     * ```\n     */\n    delete(eventId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/cloudforce-one/events/${eventId}`, options);\n    }\n    /**\n     * The `datasetId` parameter must be defined. To list existing datasets (and their\n     * IDs) in your account, use the\n     * [`List Datasets`](https://developers.cloudflare.com/api/resources/cloudforce_one/subresources/threat_events/subresources/datasets/methods/list/)\n     * endpoint.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.bulkCreate({\n     *     account_id: 'account_id',\n     *     data: [\n     *       {\n     *         category: 'Domain Resolution',\n     *         date: '2022-04-01T00:00:00Z',\n     *         event:\n     *           'An attacker registered the domain domain.com',\n     *         raw: { data: { foo: 'bar' } },\n     *         tlp: 'amber',\n     *       },\n     *     ],\n     *     datasetId: 'durableObjectName',\n     *   });\n     * ```\n     */\n    bulkCreate(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/cloudforce-one/events/create/bulk`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Updates an event\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.cloudforceOne.threatEvents.edit('event_id', {\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    edit(eventId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/cloudforce-one/events/${eventId}`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * Reads an event\n     *\n     * @example\n     * ```ts\n     * const threatEvent =\n     *   await client.cloudforceOne.threatEvents.get('event_id', {\n     *     account_id: 'account_id',\n     *   });\n     * ```\n     */\n    get(eventId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/cloudforce-one/events/${eventId}`, options);\n    }\n}\nThreatEvents.Attackers = Attackers;\nThreatEvents.Categories = Categories;\nThreatEvents.Countries = Countries;\nThreatEvents.Crons = Crons;\nThreatEvents.Datasets = Datasets;\nThreatEvents.IndicatorTypes = IndicatorTypes;\nThreatEvents.Raw = RawAPIRaw;\nThreatEvents.Relate = Relate;\nThreatEvents.Tags = Tags;\nThreatEvents.EventTags = EventTags;\nThreatEvents.TargetIndustries = TargetIndustries;\nThreatEvents.Insights = Insights;\n//# sourceMappingURL=threat-events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as BinaryStorageAPI from \"./binary-storage.mjs\";\nimport { BinaryStorage, } from \"./binary-storage.mjs\";\nimport * as RequestsAPI from \"./requests/requests.mjs\";\nimport { ListItemsSinglePage, RequestTypesResponsesSinglePage, Requests, } from \"./requests/requests.mjs\";\nimport * as ScansAPI from \"./scans/scans.mjs\";\nimport { Scans } from \"./scans/scans.mjs\";\nimport * as ThreatEventsAPI from \"./threat-events/threat-events.mjs\";\nimport { ThreatEvents, } from \"./threat-events/threat-events.mjs\";\nexport class CloudforceOne extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.scans = new ScansAPI.Scans(this._client);\n        this.binaryStorage = new BinaryStorageAPI.BinaryStorage(this._client);\n        this.requests = new RequestsAPI.Requests(this._client);\n        this.threatEvents = new ThreatEventsAPI.ThreatEvents(this._client);\n    }\n}\nCloudforceOne.Scans = Scans;\nCloudforceOne.BinaryStorage = BinaryStorage;\nCloudforceOne.Requests = Requests;\nCloudforceOne.ListItemsSinglePage = ListItemsSinglePage;\nCloudforceOne.RequestTypesResponsesSinglePage = RequestTypesResponsesSinglePage;\nCloudforceOne.ThreatEvents = ThreatEvents;\n//# sourceMappingURL=cloudforce-one.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Datasets extends APIResource {\n    /**\n     * Create a new Dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.aiGateway.datasets.create(\n     *   'my-gateway',\n     *   {\n     *     account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0',\n     *     enable: true,\n     *     filters: [\n     *       {\n     *         key: 'created_at',\n     *         operator: 'eq',\n     *         value: ['string'],\n     *       },\n     *     ],\n     *     name: 'name',\n     *   },\n     * );\n     * ```\n     */\n    create(gatewayId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/datasets`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.aiGateway.datasets.update(\n     *   'my-gateway',\n     *   'id',\n     *   {\n     *     account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0',\n     *     enable: true,\n     *     filters: [\n     *       {\n     *         key: 'created_at',\n     *         operator: 'eq',\n     *         value: ['string'],\n     *       },\n     *     ],\n     *     name: 'name',\n     *   },\n     * );\n     * ```\n     */\n    update(gatewayId, id, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/datasets/${id}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Datasets\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const datasetListResponse of client.aiGateway.datasets.list(\n     *   'my-gateway',\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(gatewayId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/datasets`, DatasetListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a Dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.aiGateway.datasets.delete(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * );\n     * ```\n     */\n    delete(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/datasets/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a Dataset\n     *\n     * @example\n     * ```ts\n     * const dataset = await client.aiGateway.datasets.get(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * );\n     * ```\n     */\n    get(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/datasets/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DatasetListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nDatasets.DatasetListResponsesV4PagePaginationArray = DatasetListResponsesV4PagePaginationArray;\n//# sourceMappingURL=datasets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class EvaluationTypes extends APIResource {\n    /**\n     * List Evaluators\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const evaluationTypeListResponse of client.aiGateway.evaluationTypes.list(\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai-gateway/evaluation-types`, EvaluationTypeListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class EvaluationTypeListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nEvaluationTypes.EvaluationTypeListResponsesV4PagePaginationArray =\n    EvaluationTypeListResponsesV4PagePaginationArray;\n//# sourceMappingURL=evaluation-types.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Evaluations extends APIResource {\n    /**\n     * Create a new Evaluation\n     *\n     * @example\n     * ```ts\n     * const evaluation =\n     *   await client.aiGateway.evaluations.create('my-gateway', {\n     *     account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0',\n     *     dataset_ids: ['string'],\n     *     evaluation_type_ids: ['string'],\n     *     name: 'name',\n     *   });\n     * ```\n     */\n    create(gatewayId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/evaluations`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Evaluations\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const evaluationListResponse of client.aiGateway.evaluations.list(\n     *   'my-gateway',\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(gatewayId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/evaluations`, EvaluationListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a Evaluation\n     *\n     * @example\n     * ```ts\n     * const evaluation =\n     *   await client.aiGateway.evaluations.delete(\n     *     'my-gateway',\n     *     'id',\n     *     { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     *   );\n     * ```\n     */\n    delete(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/evaluations/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a Evaluation\n     *\n     * @example\n     * ```ts\n     * const evaluation = await client.aiGateway.evaluations.get(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * );\n     * ```\n     */\n    get(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/evaluations/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class EvaluationListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nEvaluations.EvaluationListResponsesV4PagePaginationArray = EvaluationListResponsesV4PagePaginationArray;\n//# sourceMappingURL=evaluations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Logs extends APIResource {\n    /**\n     * List Gateway Logs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const logListResponse of client.aiGateway.logs.list(\n     *   'my-gateway',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(gatewayId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/logs`, LogListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete Gateway Logs\n     *\n     * @example\n     * ```ts\n     * const log = await client.aiGateway.logs.delete(\n     *   'my-gateway',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * );\n     * ```\n     */\n    delete(gatewayId, params, options) {\n        const { account_id, filters, limit, order_by, order_by_direction } = params;\n        return this._client.delete(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/logs`, {\n            query: { filters, limit, order_by, order_by_direction },\n            ...options,\n        });\n    }\n    /**\n     * Patch Gateway Log\n     *\n     * @example\n     * ```ts\n     * const response = await client.aiGateway.logs.edit(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * );\n     * ```\n     */\n    edit(gatewayId, id, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/logs/${id}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Gateway Log Detail\n     *\n     * @example\n     * ```ts\n     * const log = await client.aiGateway.logs.get(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * );\n     * ```\n     */\n    get(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/logs/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Gateway Log Request\n     *\n     * @example\n     * ```ts\n     * const response = await client.aiGateway.logs.request(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * );\n     * ```\n     */\n    request(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/logs/${id}/request`, options);\n    }\n    /**\n     * Get Gateway Log Response\n     *\n     * @example\n     * ```ts\n     * const response = await client.aiGateway.logs.response(\n     *   'my-gateway',\n     *   'id',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * );\n     * ```\n     */\n    response(gatewayId, id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/logs/${id}/response`, options);\n    }\n}\nexport class LogListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nLogs.LogListResponsesV4PagePaginationArray = LogListResponsesV4PagePaginationArray;\n//# sourceMappingURL=logs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class URLs extends APIResource {\n    /**\n     * Get Gateway URL\n     *\n     * @example\n     * ```ts\n     * const url = await client.aiGateway.urls.get(\n     *   'my-gateway',\n     *   'workers-ai',\n     *   { account_id: '0d37909e38d3e99c29fa2cd343ac421a' },\n     * );\n     * ```\n     */\n    get(gatewayId, provider, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${gatewayId}/url/${provider}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=urls.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DatasetsAPI from \"./datasets.mjs\";\nimport { DatasetListResponsesV4PagePaginationArray, Datasets, } from \"./datasets.mjs\";\nimport * as EvaluationTypesAPI from \"./evaluation-types.mjs\";\nimport { EvaluationTypeListResponsesV4PagePaginationArray, EvaluationTypes, } from \"./evaluation-types.mjs\";\nimport * as EvaluationsAPI from \"./evaluations.mjs\";\nimport { EvaluationListResponsesV4PagePaginationArray, Evaluations, } from \"./evaluations.mjs\";\nimport * as LogsAPI from \"./logs.mjs\";\nimport { LogListResponsesV4PagePaginationArray, Logs, } from \"./logs.mjs\";\nimport * as URLsAPI from \"./urls.mjs\";\nimport { URLs } from \"./urls.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class AIGateway extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.evaluationTypes = new EvaluationTypesAPI.EvaluationTypes(this._client);\n        this.logs = new LogsAPI.Logs(this._client);\n        this.datasets = new DatasetsAPI.Datasets(this._client);\n        this.evaluations = new EvaluationsAPI.Evaluations(this._client);\n        this.urls = new URLsAPI.URLs(this._client);\n    }\n    /**\n     * Create a new Gateway\n     *\n     * @example\n     * ```ts\n     * const aiGateway = await client.aiGateway.create({\n     *   account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0',\n     *   id: 'my-gateway',\n     *   cache_invalidate_on_update: true,\n     *   cache_ttl: 0,\n     *   collect_logs: true,\n     *   rate_limiting_interval: 0,\n     *   rate_limiting_limit: 0,\n     *   rate_limiting_technique: 'fixed',\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/ai-gateway/gateways`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update a Gateway\n     *\n     * @example\n     * ```ts\n     * const aiGateway = await client.aiGateway.update(\n     *   'my-gateway',\n     *   {\n     *     account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0',\n     *     cache_invalidate_on_update: true,\n     *     cache_ttl: 0,\n     *     collect_logs: true,\n     *     rate_limiting_interval: 0,\n     *     rate_limiting_limit: 0,\n     *     rate_limiting_technique: 'fixed',\n     *   },\n     * );\n     * ```\n     */\n    update(id, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/ai-gateway/gateways/${id}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Gateways\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const aiGatewayListResponse of client.aiGateway.list(\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai-gateway/gateways`, AIGatewayListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a Gateway\n     *\n     * @example\n     * ```ts\n     * const aiGateway = await client.aiGateway.delete(\n     *   'my-gateway',\n     *   { account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0' },\n     * );\n     * ```\n     */\n    delete(id, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/ai-gateway/gateways/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetch a Gateway\n     *\n     * @example\n     * ```ts\n     * const aiGateway = await client.aiGateway.get('my-gateway', {\n     *   account_id: '3ebbcb006d4d46d7bb6a8c7f14676cb0',\n     * });\n     * ```\n     */\n    get(id, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai-gateway/gateways/${id}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class AIGatewayListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nAIGateway.AIGatewayListResponsesV4PagePaginationArray = AIGatewayListResponsesV4PagePaginationArray;\nAIGateway.EvaluationTypes = EvaluationTypes;\nAIGateway.EvaluationTypeListResponsesV4PagePaginationArray = EvaluationTypeListResponsesV4PagePaginationArray;\nAIGateway.Logs = Logs;\nAIGateway.LogListResponsesV4PagePaginationArray = LogListResponsesV4PagePaginationArray;\nAIGateway.Datasets = Datasets;\nAIGateway.DatasetListResponsesV4PagePaginationArray = DatasetListResponsesV4PagePaginationArray;\nAIGateway.Evaluations = Evaluations;\nAIGateway.EvaluationListResponsesV4PagePaginationArray = EvaluationListResponsesV4PagePaginationArray;\nAIGateway.URLs = URLs;\n//# sourceMappingURL=ai-gateway.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class PermissionGroups extends APIResource {\n    /**\n     * List all the permissions groups for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const permissionGroupListResponse of client.iam.permissionGroups.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/iam/permission_groups`, PermissionGroupListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Get information about a specific permission group in an account.\n     *\n     * @example\n     * ```ts\n     * const permissionGroup =\n     *   await client.iam.permissionGroups.get(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(permissionGroupId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/iam/permission_groups/${permissionGroupId}`, options);\n    }\n}\nexport class PermissionGroupListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nPermissionGroups.PermissionGroupListResponsesV4PagePaginationArray =\n    PermissionGroupListResponsesV4PagePaginationArray;\n//# sourceMappingURL=permission-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class ResourceGroups extends APIResource {\n    /**\n     * Create a new Resource Group under the specified account.\n     *\n     * @example\n     * ```ts\n     * const resourceGroup =\n     *   await client.iam.resourceGroups.create({\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'NewResourceGroup',\n     *     scope: {\n     *       key: 'com.cloudflare.api.account.eb78d65290b24279ba6f44721b3ea3c4',\n     *       objects: [\n     *         {\n     *           key: 'com.cloudflare.api.account.zone.23f8d65290b24279ba6f44721b3eaad5',\n     *         },\n     *       ],\n     *     },\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/iam/resource_groups`, { body, ...options });\n    }\n    /**\n     * Modify an existing resource group.\n     *\n     * @example\n     * ```ts\n     * const resourceGroup =\n     *   await client.iam.resourceGroups.update(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(resourceGroupId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/iam/resource_groups/${resourceGroupId}`, {\n            body,\n            ...options,\n        });\n    }\n    /**\n     * List all the resource groups for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const resourceGroupListResponse of client.iam.resourceGroups.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/iam/resource_groups`, ResourceGroupListResponsesSinglePage, { query, ...options });\n    }\n    /**\n     * Remove a resource group from an account.\n     *\n     * @example\n     * ```ts\n     * const resourceGroup =\n     *   await client.iam.resourceGroups.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(resourceGroupId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/iam/resource_groups/${resourceGroupId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a specific resource group in an account.\n     *\n     * @example\n     * ```ts\n     * const resourceGroup = await client.iam.resourceGroups.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(resourceGroupId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/iam/resource_groups/${resourceGroupId}`, options);\n    }\n}\nexport class ResourceGroupListResponsesSinglePage extends SinglePage {\n}\nResourceGroups.ResourceGroupListResponsesSinglePage = ResourceGroupListResponsesSinglePage;\n//# sourceMappingURL=resource-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Members extends APIResource {\n    /**\n     * Add members to a User Group.\n     *\n     * @example\n     * ```ts\n     * const member = await client.iam.userGroups.members.create(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ id: '023e105f4ecef8ad9ca31a8372d0c353' }],\n     *   },\n     * );\n     * ```\n     */\n    create(userGroupId, params, options) {\n        const { account_id, body } = params;\n        return this._client.post(`/accounts/${account_id}/iam/user_groups/${userGroupId}/members`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Replace the set of members attached to a User Group.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const memberUpdateResponse of client.iam.userGroups.members.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ id: '023e105f4ecef8ad9ca31a8372d0c353' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    update(userGroupId, params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/iam/user_groups/${userGroupId}/members`, MemberUpdateResponsesSinglePage, { body: body, method: 'put', ...options });\n    }\n    /**\n     * List all the members attached to a user group.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const memberListResponse of client.iam.userGroups.members.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(userGroupId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/iam/user_groups/${userGroupId}/members`, MemberListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Remove a member from User Group\n     *\n     * @example\n     * ```ts\n     * const member = await client.iam.userGroups.members.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(userGroupId, memberId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/iam/user_groups/${userGroupId}/members/${memberId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class MemberUpdateResponsesSinglePage extends SinglePage {\n}\nexport class MemberListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nMembers.MemberUpdateResponsesSinglePage = MemberUpdateResponsesSinglePage;\nMembers.MemberListResponsesV4PagePaginationArray = MemberListResponsesV4PagePaginationArray;\n//# sourceMappingURL=members.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as MembersAPI from \"./members.mjs\";\nimport { MemberListResponsesV4PagePaginationArray, MemberUpdateResponsesSinglePage, Members, } from \"./members.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class UserGroups extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.members = new MembersAPI.Members(this._client);\n    }\n    /**\n     * Create a new user group under the specified account.\n     *\n     * @example\n     * ```ts\n     * const userGroup = await client.iam.userGroups.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   name: 'My New User Group',\n     *   policies: [\n     *     {\n     *       access: 'allow',\n     *       permission_groups: [\n     *         { id: 'c8fed203ed3043cba015a93ad1616f1f' },\n     *         { id: '82e64a83756745bbbb1c9c2701bf816b' },\n     *       ],\n     *       resource_groups: [\n     *         { id: '6d7f2f5f5b1d4a0e9081fdc98d432fd1' },\n     *       ],\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/iam/user_groups`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Modify an existing user group.\n     *\n     * @example\n     * ```ts\n     * const userGroup = await client.iam.userGroups.update(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    update(userGroupId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/iam/user_groups/${userGroupId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all the user groups for an account.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const userGroupListResponse of client.iam.userGroups.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/iam/user_groups`, UserGroupListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Remove a user group from an account.\n     *\n     * @example\n     * ```ts\n     * const userGroup = await client.iam.userGroups.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(userGroupId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/iam/user_groups/${userGroupId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get information about a specific user group in an account.\n     *\n     * @example\n     * ```ts\n     * const userGroup = await client.iam.userGroups.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(userGroupId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/iam/user_groups/${userGroupId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class UserGroupListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nUserGroups.UserGroupListResponsesV4PagePaginationArray = UserGroupListResponsesV4PagePaginationArray;\nUserGroups.Members = Members;\nUserGroups.MemberUpdateResponsesSinglePage = MemberUpdateResponsesSinglePage;\nUserGroups.MemberListResponsesV4PagePaginationArray = MemberListResponsesV4PagePaginationArray;\n//# sourceMappingURL=user-groups.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as PermissionGroupsAPI from \"./permission-groups.mjs\";\nimport { PermissionGroupListResponsesV4PagePaginationArray, PermissionGroups, } from \"./permission-groups.mjs\";\nimport * as ResourceGroupsAPI from \"./resource-groups.mjs\";\nimport { ResourceGroupListResponsesSinglePage, ResourceGroups, } from \"./resource-groups.mjs\";\nimport * as UserGroupsAPI from \"./user-groups/user-groups.mjs\";\nimport { UserGroupListResponsesV4PagePaginationArray, UserGroups, } from \"./user-groups/user-groups.mjs\";\nexport class IAM extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.permissionGroups = new PermissionGroupsAPI.PermissionGroups(this._client);\n        this.resourceGroups = new ResourceGroupsAPI.ResourceGroups(this._client);\n        this.userGroups = new UserGroupsAPI.UserGroups(this._client);\n    }\n}\nIAM.PermissionGroups = PermissionGroups;\nIAM.PermissionGroupListResponsesV4PagePaginationArray = PermissionGroupListResponsesV4PagePaginationArray;\nIAM.ResourceGroups = ResourceGroups;\nIAM.ResourceGroupListResponsesSinglePage = ResourceGroupListResponsesSinglePage;\nIAM.UserGroups = UserGroups;\nIAM.UserGroupListResponsesV4PagePaginationArray = UserGroupListResponsesV4PagePaginationArray;\n//# sourceMappingURL=iam.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Rules extends APIResource {\n    /**\n     * Put Rules\n     */\n    update(params, options) {\n        const { zone_id, rules } = params ?? {};\n        return this._client.getAPIList(`/zones/${zone_id}/cloud_connector/rules`, RuleUpdateResponsesSinglePage, {\n            body: rules,\n            method: 'put',\n            ...options,\n        });\n    }\n    /**\n     * Rules\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/cloud_connector/rules`, RuleListResponsesSinglePage, options);\n    }\n}\nexport class RuleUpdateResponsesSinglePage extends SinglePage {\n}\nexport class RuleListResponsesSinglePage extends SinglePage {\n}\nRules.RuleUpdateResponsesSinglePage = RuleUpdateResponsesSinglePage;\nRules.RuleListResponsesSinglePage = RuleListResponsesSinglePage;\n//# sourceMappingURL=rules.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as RulesAPI from \"./rules.mjs\";\nimport { RuleListResponsesSinglePage, RuleUpdateResponsesSinglePage, Rules, } from \"./rules.mjs\";\nexport class CloudConnector extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.rules = new RulesAPI.Rules(this._client);\n    }\n}\nCloudConnector.Rules = Rules;\nCloudConnector.RuleUpdateResponsesSinglePage = RuleUpdateResponsesSinglePage;\nCloudConnector.RuleListResponsesSinglePage = RuleListResponsesSinglePage;\n//# sourceMappingURL=cloud-connector.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class ASN extends APIResource {\n    /**\n     * Gets all the data the botnet tracking database has for a given ASN registered to\n     * user account for given date. If no date is given, it will return results for the\n     * previous day.\n     */\n    dayReport(asnId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/botnet_feed/asn/${asnId}/day_report`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets all the data the botnet threat feed tracking database has for a given ASN\n     * registered to user account.\n     */\n    fullReport(asnId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/botnet_feed/asn/${asnId}/full_report`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=asn.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class ASN extends APIResource {\n    /**\n     * Delete an ASN from botnet threat feed for a given user.\n     */\n    delete(asnId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/botnet_feed/configs/asn/${asnId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Gets a list of all ASNs registered for a user for the DDoS Botnet Feed API.\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/botnet_feed/configs/asn`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=asn.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as ASNAPI from \"./asn.mjs\";\nimport { ASN } from \"./asn.mjs\";\nexport class Configs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.asn = new ASNAPI.ASN(this._client);\n    }\n}\nConfigs.ASN = ASN;\n//# sourceMappingURL=configs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ASNAPI from \"./asn.mjs\";\nimport { ASN, } from \"./asn.mjs\";\nimport * as ConfigsAPI from \"./configs/configs.mjs\";\nimport { Configs } from \"./configs/configs.mjs\";\nexport class BotnetFeed extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.asn = new ASNAPI.ASN(this._client);\n        this.configs = new ConfigsAPI.Configs(this._client);\n    }\n}\nBotnetFeed.ASN = ASN;\nBotnetFeed.Configs = Configs;\n//# sourceMappingURL=botnet-feed.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class SecurityTXT extends APIResource {\n    /**\n     * Update security.txt\n     *\n     * @example\n     * ```ts\n     * const securityTXT = await client.securityTXT.update({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/security-center/securitytxt`, { body, ...options });\n    }\n    /**\n     * Delete security.txt\n     *\n     * @example\n     * ```ts\n     * const securityTXT = await client.securityTXT.delete({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/security-center/securitytxt`, options);\n    }\n    /**\n     * Get security.txt\n     *\n     * @example\n     * ```ts\n     * const securityTXT = await client.securityTXT.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/security-center/securitytxt`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=security-txt.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Versions extends APIResource {\n    /**\n     * List deployed Workflow versions\n     */\n    list(workflowName, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workflows/${workflowName}/versions`, VersionListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Get Workflow version details\n     */\n    get(workflowName, versionId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workflows/${workflowName}/versions/${versionId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class VersionListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nVersions.VersionListResponsesV4PagePaginationArray = VersionListResponsesV4PagePaginationArray;\n//# sourceMappingURL=versions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Events extends APIResource {\n    /**\n     * Send event to instance\n     */\n    create(workflowName, instanceId, eventType, params, options) {\n        const { account_id, body } = params ?? {};\n        return this._client.post(`/accounts/${account_id}/workflows/${workflowName}/instances/${instanceId}/events/${eventType}`, { body: body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=events.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Status extends APIResource {\n    /**\n     * Change status of instance\n     */\n    edit(workflowName, instanceId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/workflows/${workflowName}/instances/${instanceId}/status`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=status.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as EventsAPI from \"./events.mjs\";\nimport { Events } from \"./events.mjs\";\nimport * as StatusAPI from \"./status.mjs\";\nimport { Status } from \"./status.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Instances extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.status = new StatusAPI.Status(this._client);\n        this.events = new EventsAPI.Events(this._client);\n    }\n    /**\n     * Create a new workflow instance\n     */\n    create(workflowName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/workflows/${workflowName}/instances`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List of workflow instances\n     */\n    list(workflowName, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workflows/${workflowName}/instances`, InstanceListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Batch create new Workflow instances\n     */\n    bulk(workflowName, params, options) {\n        const { account_id, body } = params ?? {};\n        return this._client.getAPIList(`/accounts/${account_id}/workflows/${workflowName}/instances/batch`, InstanceBulkResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n    /**\n     * Get logs and status from instance\n     */\n    get(workflowName, instanceId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workflows/${workflowName}/instances/${instanceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class InstanceListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class InstanceBulkResponsesSinglePage extends SinglePage {\n}\nInstances.InstanceListResponsesV4PagePaginationArray = InstanceListResponsesV4PagePaginationArray;\nInstances.InstanceBulkResponsesSinglePage = InstanceBulkResponsesSinglePage;\nInstances.Status = Status;\nInstances.Events = Events;\n//# sourceMappingURL=instances.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as VersionsAPI from \"./versions.mjs\";\nimport { VersionListResponsesV4PagePaginationArray, Versions, } from \"./versions.mjs\";\nimport * as InstancesAPI from \"./instances/instances.mjs\";\nimport { InstanceBulkResponsesSinglePage, InstanceListResponsesV4PagePaginationArray, Instances as InstancesAPIInstances, } from \"./instances/instances.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Workflows extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.instances = new InstancesAPI.Instances(this._client);\n        this.versions = new VersionsAPI.Versions(this._client);\n    }\n    /**\n     * Create/modify Workflow\n     */\n    update(workflowName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/workflows/${workflowName}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all Workflows\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/workflows`, WorkflowListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a Workflow. This only deletes the Workflow and does not delete or modify\n     * any Worker associated to this Workflow or bounded to it.\n     */\n    delete(workflowName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/workflows/${workflowName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get Workflow details\n     */\n    get(workflowName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/workflows/${workflowName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class WorkflowListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nWorkflows.WorkflowListResponsesV4PagePaginationArray = WorkflowListResponsesV4PagePaginationArray;\nWorkflows.Instances = InstancesAPIInstances;\nWorkflows.InstanceListResponsesV4PagePaginationArray = InstanceListResponsesV4PagePaginationArray;\nWorkflows.InstanceBulkResponsesSinglePage = InstanceBulkResponsesSinglePage;\nWorkflows.Versions = Versions;\nWorkflows.VersionListResponsesV4PagePaginationArray = VersionListResponsesV4PagePaginationArray;\n//# sourceMappingURL=workflows.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Recipients extends APIResource {\n    /**\n     * Create a new share recipient\n     *\n     * @example\n     * ```ts\n     * const recipient =\n     *   await client.resourceSharing.recipients.create(\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     { path_account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    create(shareId, params, options) {\n        const { path_account_id, ...body } = params;\n        return this._client.post(`/accounts/${path_account_id}/shares/${shareId}/recipients`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List share recipients by share ID.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const recipientListResponse of client.resourceSharing.recipients.list(\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(shareId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/shares/${shareId}/recipients`, RecipientListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletion is not immediate, an updated share recipient object with a new status\n     * will be returned.\n     *\n     * @example\n     * ```ts\n     * const recipient =\n     *   await client.resourceSharing.recipients.delete(\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(shareId, recipientId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/shares/${shareId}/recipients/${recipientId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get share recipient by ID.\n     *\n     * @example\n     * ```ts\n     * const recipient =\n     *   await client.resourceSharing.recipients.get(\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(shareId, recipientId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/shares/${shareId}/recipients/${recipientId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class RecipientListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nRecipients.RecipientListResponsesV4PagePaginationArray = RecipientListResponsesV4PagePaginationArray;\n//# sourceMappingURL=recipients.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Resources extends APIResource {\n    /**\n     * Create a new share resource\n     *\n     * @example\n     * ```ts\n     * const resource =\n     *   await client.resourceSharing.resources.create(\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       meta: {},\n     *       resource_account_id:\n     *         '023e105f4ecef8ad9ca31a8372d0c353',\n     *       resource_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       resource_type: 'custom-ruleset',\n     *     },\n     *   );\n     * ```\n     */\n    create(shareId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/shares/${shareId}/resources`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update is not immediate, an updated share resource object with a new status will\n     * be returned.\n     *\n     * @example\n     * ```ts\n     * const resource =\n     *   await client.resourceSharing.resources.update(\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     {\n     *       account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       meta: {},\n     *     },\n     *   );\n     * ```\n     */\n    update(shareId, resourceId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/shares/${shareId}/resources/${resourceId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List share resources by share ID.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const resourceListResponse of client.resourceSharing.resources.list(\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(shareId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/shares/${shareId}/resources`, ResourceListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletion is not immediate, an updated share resource object with a new status\n     * will be returned.\n     *\n     * @example\n     * ```ts\n     * const resource =\n     *   await client.resourceSharing.resources.delete(\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(shareId, resourceId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/shares/${shareId}/resources/${resourceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get share resource by ID.\n     *\n     * @example\n     * ```ts\n     * const resource = await client.resourceSharing.resources.get(\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(shareId, resourceId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/shares/${shareId}/resources/${resourceId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ResourceListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nResources.ResourceListResponsesV4PagePaginationArray = ResourceListResponsesV4PagePaginationArray;\n//# sourceMappingURL=resources.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as RecipientsAPI from \"./recipients.mjs\";\nimport { RecipientListResponsesV4PagePaginationArray, Recipients, } from \"./recipients.mjs\";\nimport * as ResourcesAPI from \"./resources.mjs\";\nimport { ResourceListResponsesV4PagePaginationArray, Resources, } from \"./resources.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class ResourceSharing extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.recipients = new RecipientsAPI.Recipients(this._client);\n        this.resources = new ResourcesAPI.Resources(this._client);\n    }\n    /**\n     * Create a new share\n     *\n     * @example\n     * ```ts\n     * const resourceSharing = await client.resourceSharing.create(\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'My Shared WAF Managed Rule',\n     *     recipients: [{}],\n     *     resources: [\n     *       {\n     *         meta: {},\n     *         resource_account_id:\n     *           '023e105f4ecef8ad9ca31a8372d0c353',\n     *         resource_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *         resource_type: 'custom-ruleset',\n     *       },\n     *     ],\n     *   },\n     * );\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/shares`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updating is not immediate, an updated share object with a new status will be\n     * returned.\n     *\n     * @example\n     * ```ts\n     * const resourceSharing = await client.resourceSharing.update(\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     name: 'My Shared WAF Managed Rule',\n     *   },\n     * );\n     * ```\n     */\n    update(shareId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/shares/${shareId}`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Lists all account shares.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const resourceSharingListResponse of client.resourceSharing.list(\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/shares`, ResourceSharingListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletion is not immediate, an updated share object with a new status will be\n     * returned.\n     *\n     * @example\n     * ```ts\n     * const resourceSharing = await client.resourceSharing.delete(\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(shareId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/shares/${shareId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Fetches share by ID.\n     *\n     * @example\n     * ```ts\n     * const resourceSharing = await client.resourceSharing.get(\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(shareId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/shares/${shareId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class ResourceSharingListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nResourceSharing.ResourceSharingListResponsesV4PagePaginationArray =\n    ResourceSharingListResponsesV4PagePaginationArray;\nResourceSharing.Recipients = Recipients;\nResourceSharing.RecipientListResponsesV4PagePaginationArray = RecipientListResponsesV4PagePaginationArray;\nResourceSharing.Resources = Resources;\nResourceSharing.ResourceListResponsesV4PagePaginationArray = ResourceListResponsesV4PagePaginationArray;\n//# sourceMappingURL=resource-sharing.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Detections extends APIResource {\n    /**\n     * Create user-defined detection pattern for Leaked Credential Checks.\n     *\n     * @example\n     * ```ts\n     * const detection =\n     *   await client.leakedCredentialChecks.detections.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/leaked-credential-checks/detections`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update user-defined detection pattern for Leaked Credential Checks.\n     *\n     * @example\n     * ```ts\n     * const detection =\n     *   await client.leakedCredentialChecks.detections.update(\n     *     '18a14bafaa8eb1df04ce683ec18c765e',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    update(detectionId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/leaked-credential-checks/detections/${detectionId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List user-defined detection patterns for Leaked Credential Checks.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const detectionListResponse of client.leakedCredentialChecks.detections.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/leaked-credential-checks/detections`, DetectionListResponsesSinglePage, options);\n    }\n    /**\n     * Remove user-defined detection pattern for Leaked Credential Checks.\n     *\n     * @example\n     * ```ts\n     * const detection =\n     *   await client.leakedCredentialChecks.detections.delete(\n     *     '18a14bafaa8eb1df04ce683ec18c765e',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(detectionId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/leaked-credential-checks/detections/${detectionId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class DetectionListResponsesSinglePage extends SinglePage {\n}\nDetections.DetectionListResponsesSinglePage = DetectionListResponsesSinglePage;\n//# sourceMappingURL=detections.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as DetectionsAPI from \"./detections.mjs\";\nimport { DetectionListResponsesSinglePage, Detections, } from \"./detections.mjs\";\nexport class LeakedCredentialChecks extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.detections = new DetectionsAPI.Detections(this._client);\n    }\n    /**\n     * Updates the current status of Leaked Credential Checks.\n     *\n     * @example\n     * ```ts\n     * const leakedCredentialCheck =\n     *   await client.leakedCredentialChecks.create({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/leaked-credential-checks`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Retrieves the current status of Leaked Credential Checks.\n     *\n     * @example\n     * ```ts\n     * const leakedCredentialCheck =\n     *   await client.leakedCredentialChecks.get({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/leaked-credential-checks`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nLeakedCredentialChecks.Detections = Detections;\nLeakedCredentialChecks.DetectionListResponsesSinglePage = DetectionListResponsesSinglePage;\n//# sourceMappingURL=leaked-credential-checks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Payloads extends APIResource {\n    /**\n     * Add custom scan expressions for Content Scanning.\n     */\n    create(params, options) {\n        const { zone_id, body } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/content-upload-scan/payloads`, PayloadCreateResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n    /**\n     * Get a list of existing custom scan expressions for Content Scanning.\n     */\n    list(params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/content-upload-scan/payloads`, PayloadListResponsesSinglePage, options);\n    }\n    /**\n     * Delete a Content Scan Custom Expression.\n     */\n    delete(expressionId, params, options) {\n        const { zone_id } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/content-upload-scan/payloads/${expressionId}`, PayloadDeleteResponsesSinglePage, { method: 'delete', ...options });\n    }\n}\nexport class PayloadCreateResponsesSinglePage extends SinglePage {\n}\nexport class PayloadListResponsesSinglePage extends SinglePage {\n}\nexport class PayloadDeleteResponsesSinglePage extends SinglePage {\n}\nPayloads.PayloadCreateResponsesSinglePage = PayloadCreateResponsesSinglePage;\nPayloads.PayloadListResponsesSinglePage = PayloadListResponsesSinglePage;\nPayloads.PayloadDeleteResponsesSinglePage = PayloadDeleteResponsesSinglePage;\n//# sourceMappingURL=payloads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Settings extends APIResource {\n    /**\n     * Retrieve the current status of Content Scanning.\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/content-upload-scan/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as PayloadsAPI from \"./payloads.mjs\";\nimport { PayloadCreateResponsesSinglePage, PayloadDeleteResponsesSinglePage, PayloadListResponsesSinglePage, Payloads, } from \"./payloads.mjs\";\nimport * as SettingsAPI from \"./settings.mjs\";\nimport { Settings } from \"./settings.mjs\";\nexport class ContentScanning extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.payloads = new PayloadsAPI.Payloads(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n    /**\n     * Disable Content Scanning.\n     */\n    disable(params, options) {\n        const { zone_id } = params;\n        return this._client.post(`/zones/${zone_id}/content-upload-scan/disable`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Enable Content Scanning.\n     */\n    enable(params, options) {\n        const { zone_id } = params;\n        return this._client.post(`/zones/${zone_id}/content-upload-scan/enable`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nContentScanning.Payloads = Payloads;\nContentScanning.PayloadCreateResponsesSinglePage = PayloadCreateResponsesSinglePage;\nContentScanning.PayloadListResponsesSinglePage = PayloadListResponsesSinglePage;\nContentScanning.PayloadDeleteResponsesSinglePage = PayloadDeleteResponsesSinglePage;\nContentScanning.Settings = Settings;\n//# sourceMappingURL=content-scanning.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class AbuseReports extends APIResource {\n    /**\n     * Submit the Abuse Report of a particular type\n     */\n    create(reportType, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/abuse-reports/${reportType}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=abuse-reports.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Authors extends APIResource {\n    /**\n     * Author Search\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai/authors/search`, AuthorListResponsesSinglePage, options);\n    }\n}\nexport class AuthorListResponsesSinglePage extends SinglePage {\n}\nAuthors.AuthorListResponsesSinglePage = AuthorListResponsesSinglePage;\n//# sourceMappingURL=authors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { SinglePage } from \"../../pagination.mjs\";\nexport class Tasks extends APIResource {\n    /**\n     * Task Search\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai/tasks/search`, TaskListResponsesSinglePage, options);\n    }\n}\nexport class TaskListResponsesSinglePage extends SinglePage {\n}\nTasks.TaskListResponsesSinglePage = TaskListResponsesSinglePage;\n//# sourceMappingURL=tasks.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as Core from \"../../../core.mjs\";\nexport class Assets extends APIResource {\n    /**\n     * Upload a Finetune Asset\n     */\n    create(finetuneId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/ai/finetunes/${finetuneId}/finetune-assets`, Core.multipartFormRequestOptions({ body, ...options }));\n    }\n}\n//# sourceMappingURL=assets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage } from \"../../../pagination.mjs\";\nexport class Public extends APIResource {\n    /**\n     * List Public Finetunes\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai/finetunes/public`, PublicListResponsesSinglePage, { query, ...options });\n    }\n}\nexport class PublicListResponsesSinglePage extends SinglePage {\n}\nPublic.PublicListResponsesSinglePage = PublicListResponsesSinglePage;\n//# sourceMappingURL=public.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as AssetsAPI from \"./assets.mjs\";\nimport { Assets } from \"./assets.mjs\";\nimport * as PublicAPI from \"./public.mjs\";\nimport { Public, PublicListResponsesSinglePage } from \"./public.mjs\";\nexport class Finetunes extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.assets = new AssetsAPI.Assets(this._client);\n        this.public = new PublicAPI.Public(this._client);\n    }\n    /**\n     * Create a new Finetune\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/ai/finetunes`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List Finetunes\n     */\n    list(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/ai/finetunes`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nFinetunes.Assets = Assets;\nFinetunes.Public = Public;\nFinetunes.PublicListResponsesSinglePage = PublicListResponsesSinglePage;\n//# sourceMappingURL=finetunes.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nexport class Schema extends APIResource {\n    /**\n     * Get Model Schema\n     */\n    get(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/ai/models/schema`, { query, ...options })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=schema.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SchemaAPI from \"./schema.mjs\";\nimport { Schema } from \"./schema.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Models extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.schema = new SchemaAPI.Schema(this._client);\n    }\n    /**\n     * Model Search\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/ai/models/search`, ModelListResponsesV4PagePaginationArray, { query, ...options });\n    }\n}\nexport class ModelListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nModels.ModelListResponsesV4PagePaginationArray = ModelListResponsesV4PagePaginationArray;\nModels.Schema = Schema;\n//# sourceMappingURL=models.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as AuthorsAPI from \"./authors.mjs\";\nimport { AuthorListResponsesSinglePage, Authors } from \"./authors.mjs\";\nimport * as TasksAPI from \"./tasks.mjs\";\nimport { TaskListResponsesSinglePage, Tasks } from \"./tasks.mjs\";\nimport * as FinetunesAPI from \"./finetunes/finetunes.mjs\";\nimport { Finetunes, } from \"./finetunes/finetunes.mjs\";\nimport * as ModelsAPI from \"./models/models.mjs\";\nimport { ModelListResponsesV4PagePaginationArray, Models, } from \"./models/models.mjs\";\nexport class AI extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.finetunes = new FinetunesAPI.Finetunes(this._client);\n        this.authors = new AuthorsAPI.Authors(this._client);\n        this.tasks = new TasksAPI.Tasks(this._client);\n        this.models = new ModelsAPI.Models(this._client);\n    }\n    /**\n     * This endpoint provides users with the capability to run specific AI models\n     * on-demand.\n     *\n     * By submitting the required input data, users can receive real-time predictions\n     * or results generated by the chosen AI model. The endpoint supports various AI\n     * model types, ensuring flexibility and adaptability for diverse use cases.\n     *\n     * Model specific inputs available in\n     * [Cloudflare Docs](https://developers.cloudflare.com/workers-ai/models/).\n     */\n    run(modelName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/ai/run/${modelName}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nAI.Finetunes = Finetunes;\nAI.Authors = Authors;\nAI.AuthorListResponsesSinglePage = AuthorListResponsesSinglePage;\nAI.Tasks = Tasks;\nAI.TaskListResponsesSinglePage = TaskListResponsesSinglePage;\nAI.Models = Models;\nAI.ModelListResponsesV4PagePaginationArray = ModelListResponsesV4PagePaginationArray;\n//# sourceMappingURL=ai.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Class extends APIResource {\n    get(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/security-center/insights/class`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=class.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Severity extends APIResource {\n    get(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/security-center/insights/severity`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=severity.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nexport class Type extends APIResource {\n    get(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/security-center/insights/type`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=type.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport * as ClassAPI from \"./class.mjs\";\nimport { Class } from \"./class.mjs\";\nimport * as SeverityAPI from \"./severity.mjs\";\nimport { Severity } from \"./severity.mjs\";\nimport * as TypeAPI from \"./type.mjs\";\nimport { Type } from \"./type.mjs\";\nimport { CloudflareError } from \"../../../error.mjs\";\nimport { V4PagePagination } from \"../../../pagination.mjs\";\nexport class Insights extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.class = new ClassAPI.Class(this._client);\n        this.severity = new SeverityAPI.Severity(this._client);\n        this.type = new TypeAPI.Type(this._client);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id, ...query } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/security-center/insights`, InsightListResponsesV4PagePagination, { query, ...options });\n    }\n    /**\n     * Archive Security Center Insight\n     */\n    dismiss(issueId, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/security-center/insights/${issueId}/dismiss`, { body, ...options });\n    }\n}\nexport class InsightListResponsesV4PagePagination extends V4PagePagination {\n}\nInsights.InsightListResponsesV4PagePagination = InsightListResponsesV4PagePagination;\nInsights.Class = Class;\nInsights.Severity = Severity;\nInsights.Type = Type;\n//# sourceMappingURL=insights.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as InsightsAPI from \"./insights/insights.mjs\";\nimport { InsightListResponsesV4PagePagination, Insights, } from \"./insights/insights.mjs\";\nexport class SecurityCenter extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.insights = new InsightsAPI.Insights(this._client);\n    }\n}\nSecurityCenter.Insights = Insights;\nSecurityCenter.InsightListResponsesV4PagePagination = InsightListResponsesV4PagePagination;\n//# sourceMappingURL=security-center.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Content extends APIResource {\n    /**\n     * Fetches rendered HTML content from provided URL or HTML. Check available options\n     * like `gotoOptions` and `waitFor*` to control page load behaviour.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/content`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=content.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Json extends APIResource {\n    /**\n     * Gets json from a webpage from a provided URL or HTML. Pass `prompt` or `schema`\n     * in the body. Control page loading with `gotoOptions` and `waitFor*` options.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/json`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=json.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Links extends APIResource {\n    /**\n     * Get links from a web page.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/links`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=links.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Markdown extends APIResource {\n    /**\n     * Gets markdown of a webpage from provided URL or HTML. Control page loading with\n     * `gotoOptions` and `waitFor*` options.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/markdown`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=markdown.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class PDF extends APIResource {\n    /**\n     * Fetches rendered PDF from provided URL or HTML. Check available options like\n     * `gotoOptions` and `waitFor*` to control page load behaviour.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/pdf`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n            headers: { Accept: 'application/pdf', ...options?.headers },\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=pdf.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Scrape extends APIResource {\n    /**\n     * Get meta attributes like height, width, text and others of selected elements.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/scrape`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=scrape.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Screenshot extends APIResource {\n    /**\n     * Takes a screenshot of a webpage from provided URL or HTML. Control page loading\n     * with `gotoOptions` and `waitFor*` options. Customize screenshots with\n     * `viewport`, `fullPage`, `clip` and others.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/screenshot`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        });\n    }\n}\n//# sourceMappingURL=screenshot.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Snapshot extends APIResource {\n    /**\n     * Returns the page's HTML content and screenshot. Control page loading with\n     * `gotoOptions` and `waitFor*` options. Customize screenshots with `viewport`,\n     * `fullPage`, `clip` and others.\n     */\n    create(params, options) {\n        const { account_id, cacheTTL, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/browser-rendering/snapshot`, {\n            query: { cacheTTL },\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=snapshot.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as ContentAPI from \"./content.mjs\";\nimport { Content } from \"./content.mjs\";\nimport * as JsonAPI from \"./json.mjs\";\nimport { Json } from \"./json.mjs\";\nimport * as LinksAPI from \"./links.mjs\";\nimport { Links } from \"./links.mjs\";\nimport * as MarkdownAPI from \"./markdown.mjs\";\nimport { Markdown } from \"./markdown.mjs\";\nimport * as PDFAPI from \"./pdf.mjs\";\nimport { PDF } from \"./pdf.mjs\";\nimport * as ScrapeAPI from \"./scrape.mjs\";\nimport { Scrape } from \"./scrape.mjs\";\nimport * as ScreenshotAPI from \"./screenshot.mjs\";\nimport { Screenshot } from \"./screenshot.mjs\";\nimport * as SnapshotAPI from \"./snapshot.mjs\";\nimport { Snapshot } from \"./snapshot.mjs\";\nexport class BrowserRendering extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.content = new ContentAPI.Content(this._client);\n        this.pdf = new PDFAPI.PDF(this._client);\n        this.scrape = new ScrapeAPI.Scrape(this._client);\n        this.screenshot = new ScreenshotAPI.Screenshot(this._client);\n        this.snapshot = new SnapshotAPI.Snapshot(this._client);\n        this.json = new JsonAPI.Json(this._client);\n        this.links = new LinksAPI.Links(this._client);\n        this.markdown = new MarkdownAPI.Markdown(this._client);\n    }\n}\nBrowserRendering.Content = Content;\nBrowserRendering.PDF = PDF;\nBrowserRendering.Scrape = Scrape;\nBrowserRendering.Screenshot = Screenshot;\nBrowserRendering.Snapshot = Snapshot;\nBrowserRendering.Json = Json;\nBrowserRendering.Links = Links;\nBrowserRendering.Markdown = Markdown;\n//# sourceMappingURL=browser-rendering.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nimport { isRequestOptions } from \"../core.mjs\";\nimport { CloudflareError } from \"../error.mjs\";\nimport { SinglePage } from \"../pagination.mjs\";\nexport class CustomPages extends APIResource {\n    /**\n     * Updates the configuration of an existing custom page.\n     *\n     * @example\n     * ```ts\n     * const customPage = await client.customPages.update(\n     *   'ratelimit_block',\n     *   {\n     *     state: 'default',\n     *     url: 'http://www.example.com',\n     *     account_id: 'account_id',\n     *   },\n     * );\n     * ```\n     */\n    update(identifier, params, options) {\n        const { account_id, zone_id, ...body } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.put(`/${accountOrZone}/${accountOrZoneId}/custom_pages/${identifier}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    list(params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.list({}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.getAPIList(`/${accountOrZone}/${accountOrZoneId}/custom_pages`, CustomPageListResponsesSinglePage, options);\n    }\n    get(identifier, params = {}, options) {\n        if (isRequestOptions(params)) {\n            return this.get(identifier, {}, params);\n        }\n        const { account_id, zone_id } = params;\n        if (!account_id && !zone_id) {\n            throw new CloudflareError('You must provide either account_id or zone_id.');\n        }\n        if (account_id && zone_id) {\n            throw new CloudflareError('You cannot provide both account_id and zone_id.');\n        }\n        const { accountOrZone, accountOrZoneId } = account_id ?\n            {\n                accountOrZone: 'accounts',\n                accountOrZoneId: account_id,\n            }\n            : {\n                accountOrZone: 'zones',\n                accountOrZoneId: zone_id,\n            };\n        return this._client.get(`/${accountOrZone}/${accountOrZoneId}/custom_pages/${identifier}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class CustomPageListResponsesSinglePage extends SinglePage {\n}\nCustomPages.CustomPageListResponsesSinglePage = CustomPageListResponsesSinglePage;\n//# sourceMappingURL=custom-pages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Quota extends APIResource {\n    /**\n     * Lists the number of secrets used in the account.\n     *\n     * @example\n     * ```ts\n     * const quota = await client.secretsStore.quota.get({\n     *   account_id: '985e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/secrets_store/quota`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=quota.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Secrets extends APIResource {\n    /**\n     * Creates a secret in the account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const secretCreateResponse of client.secretsStore.stores.secrets.create(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   {\n     *     account_id: '985e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [\n     *       {\n     *         name: 'MY_API_KEY',\n     *         scopes: ['workers', 'ai_gateway'],\n     *         value: 'api-token-secret-123',\n     *       },\n     *     ],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(storeId, params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets`, SecretCreateResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n    /**\n     * Lists all store secrets\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const secretListResponse of client.secretsStore.stores.secrets.list(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(storeId, params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets`, SecretListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a single secret\n     *\n     * @example\n     * ```ts\n     * const secret =\n     *   await client.secretsStore.stores.secrets.delete(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(storeId, secretId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets/${secretId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Deletes one or more secrets\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const secretBulkDeleteResponse of client.secretsStore.stores.secrets.bulkDelete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    bulkDelete(storeId, params, options) {\n        const { account_id } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets`, SecretBulkDeleteResponsesSinglePage, { method: 'delete', ...options });\n    }\n    /**\n     * Duplicates the secret, keeping the value\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.secretsStore.stores.secrets.duplicate(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     {\n     *       account_id: '985e105f4ecef8ad9ca31a8372d0c353',\n     *       name: 'MY_API_KEY',\n     *       scopes: ['workers', 'ai_gateway'],\n     *     },\n     *   );\n     * ```\n     */\n    duplicate(storeId, secretId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets/${secretId}/duplicate`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Updates a single secret\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.secretsStore.stores.secrets.edit(\n     *     '023e105f4ecef8ad9ca31a8372d0c353',\n     *     '3fd85f74b32742f1bff64a85009dda07',\n     *     { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    edit(storeId, secretId, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.patch(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets/${secretId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Returns details of a single secret\n     *\n     * @example\n     * ```ts\n     * const secret = await client.secretsStore.stores.secrets.get(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   '3fd85f74b32742f1bff64a85009dda07',\n     *   { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(storeId, secretId, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/secrets_store/stores/${storeId}/secrets/${secretId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SecretCreateResponsesSinglePage extends SinglePage {\n}\nexport class SecretListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nexport class SecretBulkDeleteResponsesSinglePage extends SinglePage {\n}\nSecrets.SecretCreateResponsesSinglePage = SecretCreateResponsesSinglePage;\nSecrets.SecretListResponsesV4PagePaginationArray = SecretListResponsesV4PagePaginationArray;\nSecrets.SecretBulkDeleteResponsesSinglePage = SecretBulkDeleteResponsesSinglePage;\n//# sourceMappingURL=secrets.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as SecretsAPI from \"./secrets.mjs\";\nimport { SecretBulkDeleteResponsesSinglePage, SecretCreateResponsesSinglePage, SecretListResponsesV4PagePaginationArray, Secrets, } from \"./secrets.mjs\";\nimport { SinglePage, V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Stores extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.secrets = new SecretsAPI.Secrets(this._client);\n    }\n    /**\n     * Creates a store in the account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const storeCreateResponse of client.secretsStore.stores.create(\n     *   {\n     *     account_id: '985e105f4ecef8ad9ca31a8372d0c353',\n     *     body: [{ name: 'service_x_keys' }],\n     *   },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(params, options) {\n        const { account_id, body } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secrets_store/stores`, StoreCreateResponsesSinglePage, { body: body, method: 'post', ...options });\n    }\n    /**\n     * Lists all the stores in an account\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const storeListResponse of client.secretsStore.stores.list(\n     *   { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.getAPIList(`/accounts/${account_id}/secrets_store/stores`, StoreListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Deletes a single store\n     *\n     * @example\n     * ```ts\n     * const store = await client.secretsStore.stores.delete(\n     *   '023e105f4ecef8ad9ca31a8372d0c353',\n     *   { account_id: '985e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(storeId, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/secrets_store/stores/${storeId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class StoreCreateResponsesSinglePage extends SinglePage {\n}\nexport class StoreListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nStores.StoreCreateResponsesSinglePage = StoreCreateResponsesSinglePage;\nStores.StoreListResponsesV4PagePaginationArray = StoreListResponsesV4PagePaginationArray;\nStores.Secrets = Secrets;\nStores.SecretCreateResponsesSinglePage = SecretCreateResponsesSinglePage;\nStores.SecretListResponsesV4PagePaginationArray = SecretListResponsesV4PagePaginationArray;\nStores.SecretBulkDeleteResponsesSinglePage = SecretBulkDeleteResponsesSinglePage;\n//# sourceMappingURL=stores.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as QuotaAPI from \"./quota.mjs\";\nimport { Quota } from \"./quota.mjs\";\nimport * as StoresAPI from \"./stores/stores.mjs\";\nimport { StoreCreateResponsesSinglePage, StoreListResponsesV4PagePaginationArray, Stores, } from \"./stores/stores.mjs\";\nexport class SecretsStore extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.stores = new StoresAPI.Stores(this._client);\n        this.quota = new QuotaAPI.Quota(this._client);\n    }\n}\nSecretsStore.Stores = Stores;\nSecretsStore.StoreCreateResponsesSinglePage = StoreCreateResponsesSinglePage;\nSecretsStore.StoreListResponsesV4PagePaginationArray = StoreListResponsesV4PagePaginationArray;\nSecretsStore.Quota = Quota;\n//# sourceMappingURL=secrets-store.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class Pipelines extends APIResource {\n    /**\n     * Create a new pipeline.\n     *\n     * @example\n     * ```ts\n     * const pipeline = await client.pipelines.create({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   destination: {\n     *     batch: {},\n     *     compression: {},\n     *     credentials: {\n     *       access_key_id: '<access key id>',\n     *       endpoint:\n     *         'https://123f8a8258064ed892a347f173372359.r2.cloudflarestorage.com',\n     *       secret_access_key: '<secret key>',\n     *     },\n     *     format: 'json',\n     *     path: { bucket: 'bucket' },\n     *     type: 'r2',\n     *   },\n     *   name: 'sample_pipeline',\n     *   source: [{ format: 'json', type: 'type' }],\n     * });\n     * ```\n     */\n    create(params, options) {\n        const { account_id, ...body } = params;\n        return this._client.post(`/accounts/${account_id}/pipelines`, { body, ...options })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Update an existing pipeline.\n     *\n     * @example\n     * ```ts\n     * const pipeline = await client.pipelines.update(\n     *   'sample_pipeline',\n     *   {\n     *     account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     destination: {\n     *       batch: {},\n     *       compression: {},\n     *       format: 'json',\n     *       path: { bucket: 'bucket' },\n     *       type: 'r2',\n     *     },\n     *     name: 'sample_pipeline',\n     *     source: [{ format: 'json', type: 'type' }],\n     *   },\n     * );\n     * ```\n     */\n    update(pipelineName, params, options) {\n        const { account_id, ...body } = params;\n        return this._client.put(`/accounts/${account_id}/pipelines/${pipelineName}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List, filter, and paginate pipelines in an account.\n     *\n     * @example\n     * ```ts\n     * const pipelines = await client.pipelines.list({\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    list(params, options) {\n        const { account_id, ...query } = params;\n        return this._client.get(`/accounts/${account_id}/pipelines`, { query, ...options });\n    }\n    /**\n     * Delete a pipeline.\n     *\n     * @example\n     * ```ts\n     * await client.pipelines.delete('sample_pipeline', {\n     *   account_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    delete(pipelineName, params, options) {\n        const { account_id } = params;\n        return this._client.delete(`/accounts/${account_id}/pipelines/${pipelineName}`, {\n            ...options,\n            headers: { Accept: '*/*', ...options?.headers },\n        });\n    }\n    /**\n     * Get configuration of a pipeline.\n     *\n     * @example\n     * ```ts\n     * const pipeline = await client.pipelines.get(\n     *   'sample_pipeline',\n     *   { account_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(pipelineName, params, options) {\n        const { account_id } = params;\n        return this._client.get(`/accounts/${account_id}/pipelines/${pipelineName}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\n//# sourceMappingURL=pipelines.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../pagination.mjs\";\nexport class Schemas extends APIResource {\n    /**\n     * Upload a schema\n     *\n     * @example\n     * ```ts\n     * const schema = await client.schemaValidation.schemas.create(\n     *   {\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     kind: 'openapi_v3',\n     *     name: 'petstore schema',\n     *     source: '<schema file contents>',\n     *     validation_enabled: true,\n     *   },\n     * );\n     * ```\n     */\n    create(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.post(`/zones/${zone_id}/schema_validation/schemas`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List all uploaded schemas\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const schemaListResponse of client.schemaValidation.schemas.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/schema_validation/schemas`, SchemaListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete a schema\n     *\n     * @example\n     * ```ts\n     * const schema = await client.schemaValidation.schemas.delete(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    delete(schemaId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/schema_validation/schemas/${schemaId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit details of a schema to enable validation\n     *\n     * @example\n     * ```ts\n     * const response = await client.schemaValidation.schemas.edit(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    edit(schemaId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/schema_validation/schemas/${schemaId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get details of a schema\n     *\n     * @example\n     * ```ts\n     * const schema = await client.schemaValidation.schemas.get(\n     *   'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * );\n     * ```\n     */\n    get(schemaId, params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.get(`/zones/${zone_id}/schema_validation/schemas/${schemaId}`, {\n            query,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class SchemaListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nSchemas.SchemaListResponsesV4PagePaginationArray = SchemaListResponsesV4PagePaginationArray;\n//# sourceMappingURL=schemas.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { V4PagePaginationArray } from \"../../../pagination.mjs\";\nexport class Operations extends APIResource {\n    /**\n     * Update per-operation schema validation setting\n     *\n     * @example\n     * ```ts\n     * const operation =\n     *   await client.schemaValidation.settings.operations.update(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       mitigation_action: 'block',\n     *     },\n     *   );\n     * ```\n     */\n    update(operationId, params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/schema_validation/settings/operations/${operationId}`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * List per-operation schema validation settings\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const operationListResponse of client.schemaValidation.settings.operations.list(\n     *   { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params, options) {\n        const { zone_id, ...query } = params;\n        return this._client.getAPIList(`/zones/${zone_id}/schema_validation/settings/operations`, OperationListResponsesV4PagePaginationArray, { query, ...options });\n    }\n    /**\n     * Delete per-operation schema validation setting\n     *\n     * @example\n     * ```ts\n     * const operation =\n     *   await client.schemaValidation.settings.operations.delete(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    delete(operationId, params, options) {\n        const { zone_id } = params;\n        return this._client.delete(`/zones/${zone_id}/schema_validation/settings/operations/${operationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Bulk edit per-operation schema validation settings\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.schemaValidation.settings.operations.bulkEdit(\n     *     {\n     *       zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *       body: {\n     *         '3818d821-5901-4147-a474-f5f5aec1d54e': {},\n     *         'b17c8043-99a0-4202-b7d9-8f7cdbee02cd': {},\n     *       },\n     *     },\n     *   );\n     * ```\n     */\n    bulkEdit(params, options) {\n        const { zone_id, body } = params;\n        return this._client.patch(`/zones/${zone_id}/schema_validation/settings/operations`, {\n            body: body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get per-operation schema validation setting\n     *\n     * @example\n     * ```ts\n     * const operation =\n     *   await client.schemaValidation.settings.operations.get(\n     *     'f174e90a-fafe-4643-bbbc-4a0ed4fc8415',\n     *     { zone_id: '023e105f4ecef8ad9ca31a8372d0c353' },\n     *   );\n     * ```\n     */\n    get(operationId, params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/schema_validation/settings/operations/${operationId}`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nexport class OperationListResponsesV4PagePaginationArray extends V4PagePaginationArray {\n}\nOperations.OperationListResponsesV4PagePaginationArray = OperationListResponsesV4PagePaginationArray;\n//# sourceMappingURL=operations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport * as OperationsAPI from \"./operations.mjs\";\nimport { OperationListResponsesV4PagePaginationArray, Operations, } from \"./operations.mjs\";\nexport class Settings extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.operations = new OperationsAPI.Operations(this._client);\n    }\n    /**\n     * Update global schema validation settings\n     *\n     * @example\n     * ```ts\n     * const setting =\n     *   await client.schemaValidation.settings.update({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *     validation_default_mitigation_action: 'block',\n     *   });\n     * ```\n     */\n    update(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.put(`/zones/${zone_id}/schema_validation/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Edit global schema validation settings\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.schemaValidation.settings.edit({\n     *     zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     *   });\n     * ```\n     */\n    edit(params, options) {\n        const { zone_id, ...body } = params;\n        return this._client.patch(`/zones/${zone_id}/schema_validation/settings`, {\n            body,\n            ...options,\n        })._thenUnwrap((obj) => obj.result);\n    }\n    /**\n     * Get global schema validation settings\n     *\n     * @example\n     * ```ts\n     * const setting = await client.schemaValidation.settings.get({\n     *   zone_id: '023e105f4ecef8ad9ca31a8372d0c353',\n     * });\n     * ```\n     */\n    get(params, options) {\n        const { zone_id } = params;\n        return this._client.get(`/zones/${zone_id}/schema_validation/settings`, options)._thenUnwrap((obj) => obj.result);\n    }\n}\nSettings.Operations = Operations;\nSettings.OperationListResponsesV4PagePaginationArray = OperationListResponsesV4PagePaginationArray;\n//# sourceMappingURL=settings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as SchemasAPI from \"./schemas.mjs\";\nimport { SchemaListResponsesV4PagePaginationArray, Schemas, } from \"./schemas.mjs\";\nimport * as SettingsAPI from \"./settings/settings.mjs\";\nimport { Settings, } from \"./settings/settings.mjs\";\nexport class SchemaValidation extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.schemas = new SchemasAPI.Schemas(this._client);\n        this.settings = new SettingsAPI.Settings(this._client);\n    }\n}\nSchemaValidation.Schemas = Schemas;\nSchemaValidation.SchemaListResponsesV4PagePaginationArray = SchemaListResponsesV4PagePaginationArray;\nSchemaValidation.Settings = Settings;\n//# sourceMappingURL=schema-validation.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _Cloudflare_instances, _a, _Cloudflare_baseURLOverridden;\nimport * as qs from \"./internal/qs/index.mjs\";\nimport * as Core from \"./core.mjs\";\nimport * as Errors from \"./error.mjs\";\nimport * as Pagination from \"./pagination.mjs\";\nimport * as Uploads from \"./uploads.mjs\";\nimport * as API from \"./resources/index.mjs\";\nimport { AbuseReports } from \"./resources/abuse-reports.mjs\";\nimport { AuditLogs } from \"./resources/audit-logs.mjs\";\nimport { BotManagement } from \"./resources/bot-management.mjs\";\nimport { ClientCertificates } from \"./resources/client-certificates.mjs\";\nimport { CustomNameservers } from \"./resources/custom-nameservers.mjs\";\nimport { CustomPages } from \"./resources/custom-pages.mjs\";\nimport { DCVDelegation } from \"./resources/dcv-delegation.mjs\";\nimport { Filters } from \"./resources/filters.mjs\";\nimport { IPs } from \"./resources/ips.mjs\";\nimport { KeylessCertificates } from \"./resources/keyless-certificates.mjs\";\nimport { ManagedTransforms } from \"./resources/managed-transforms.mjs\";\nimport { Memberships } from \"./resources/memberships.mjs\";\nimport { OriginCACertificates } from \"./resources/origin-ca-certificates.mjs\";\nimport { OriginPostQuantumEncryption } from \"./resources/origin-post-quantum-encryption.mjs\";\nimport { PageRules } from \"./resources/page-rules.mjs\";\nimport { Pipelines } from \"./resources/pipelines.mjs\";\nimport { RateLimits } from \"./resources/rate-limits.mjs\";\nimport { SecurityTXT } from \"./resources/security-txt.mjs\";\nimport { URLNormalization } from \"./resources/url-normalization.mjs\";\nimport { Accounts } from \"./resources/accounts/accounts.mjs\";\nimport { ACM } from \"./resources/acm/acm.mjs\";\nimport { Addressing } from \"./resources/addressing/addressing.mjs\";\nimport { AIGateway } from \"./resources/ai-gateway/ai-gateway.mjs\";\nimport { AI } from \"./resources/ai/ai.mjs\";\nimport { Alerting } from \"./resources/alerting/alerting.mjs\";\nimport { APIGateway } from \"./resources/api-gateway/api-gateway.mjs\";\nimport { Argo } from \"./resources/argo/argo.mjs\";\nimport { Billing } from \"./resources/billing/billing.mjs\";\nimport { BotnetFeed } from \"./resources/botnet-feed/botnet-feed.mjs\";\nimport { BrandProtection } from \"./resources/brand-protection/brand-protection.mjs\";\nimport { BrowserRendering } from \"./resources/browser-rendering/browser-rendering.mjs\";\nimport { Cache } from \"./resources/cache/cache.mjs\";\nimport { Calls } from \"./resources/calls/calls.mjs\";\nimport { CertificateAuthorities } from \"./resources/certificate-authorities/certificate-authorities.mjs\";\nimport { CloudConnector } from \"./resources/cloud-connector/cloud-connector.mjs\";\nimport { CloudforceOne } from \"./resources/cloudforce-one/cloudforce-one.mjs\";\nimport { ContentScanning } from \"./resources/content-scanning/content-scanning.mjs\";\nimport { CustomCertificates } from \"./resources/custom-certificates/custom-certificates.mjs\";\nimport { CustomHostnames } from \"./resources/custom-hostnames/custom-hostnames.mjs\";\nimport { D1Resource } from \"./resources/d1/d1.mjs\";\nimport { Diagnostics } from \"./resources/diagnostics/diagnostics.mjs\";\nimport { DNSFirewall } from \"./resources/dns-firewall/dns-firewall.mjs\";\nimport { DNS } from \"./resources/dns/dns.mjs\";\nimport { DurableObjects } from \"./resources/durable-objects/durable-objects.mjs\";\nimport { EmailRouting } from \"./resources/email-routing/email-routing.mjs\";\nimport { EmailSecurity } from \"./resources/email-security/email-security.mjs\";\nimport { Firewall } from \"./resources/firewall/firewall.mjs\";\nimport { Healthchecks } from \"./resources/healthchecks/healthchecks.mjs\";\nimport { Hostnames } from \"./resources/hostnames/hostnames.mjs\";\nimport { HyperdriveResource } from \"./resources/hyperdrive/hyperdrive.mjs\";\nimport { IAM } from \"./resources/iam/iam.mjs\";\nimport { Images } from \"./resources/images/images.mjs\";\nimport { Intel } from \"./resources/intel/intel.mjs\";\nimport { KV } from \"./resources/kv/kv.mjs\";\nimport { LeakedCredentialChecks } from \"./resources/leaked-credential-checks/leaked-credential-checks.mjs\";\nimport { LoadBalancers } from \"./resources/load-balancers/load-balancers.mjs\";\nimport { Logpush } from \"./resources/logpush/logpush.mjs\";\nimport { Logs } from \"./resources/logs/logs.mjs\";\nimport { MagicCloudNetworking } from \"./resources/magic-cloud-networking/magic-cloud-networking.mjs\";\nimport { MagicNetworkMonitoring } from \"./resources/magic-network-monitoring/magic-network-monitoring.mjs\";\nimport { MagicTransit } from \"./resources/magic-transit/magic-transit.mjs\";\nimport { MTLSCertificates } from \"./resources/mtls-certificates/mtls-certificates.mjs\";\nimport { NetworkInterconnects } from \"./resources/network-interconnects/network-interconnects.mjs\";\nimport { OriginTLSClientAuth } from \"./resources/origin-tls-client-auth/origin-tls-client-auth.mjs\";\nimport { PageShield } from \"./resources/page-shield/page-shield.mjs\";\nimport { Pages } from \"./resources/pages/pages.mjs\";\nimport { Queues } from \"./resources/queues/queues.mjs\";\nimport { R2 } from \"./resources/r2/r2.mjs\";\nimport { Radar } from \"./resources/radar/radar.mjs\";\nimport { Registrar } from \"./resources/registrar/registrar.mjs\";\nimport { RequestTracers } from \"./resources/request-tracers/request-tracers.mjs\";\nimport { ResourceSharing } from \"./resources/resource-sharing/resource-sharing.mjs\";\nimport { Rules } from \"./resources/rules/rules.mjs\";\nimport { Rulesets } from \"./resources/rulesets/rulesets.mjs\";\nimport { RUM } from \"./resources/rum/rum.mjs\";\nimport { SchemaValidation } from \"./resources/schema-validation/schema-validation.mjs\";\nimport { SecretsStore } from \"./resources/secrets-store/secrets-store.mjs\";\nimport { SecurityCenter } from \"./resources/security-center/security-center.mjs\";\nimport { Snippets } from \"./resources/snippets/snippets.mjs\";\nimport { Spectrum } from \"./resources/spectrum/spectrum.mjs\";\nimport { Speed } from \"./resources/speed/speed.mjs\";\nimport { SSL } from \"./resources/ssl/ssl.mjs\";\nimport { Stream } from \"./resources/stream/stream.mjs\";\nimport { Turnstile } from \"./resources/turnstile/turnstile.mjs\";\nimport { URLScanner } from \"./resources/url-scanner/url-scanner.mjs\";\nimport { User } from \"./resources/user/user.mjs\";\nimport { Vectorize } from \"./resources/vectorize/vectorize.mjs\";\nimport { WaitingRooms } from \"./resources/waiting-rooms/waiting-rooms.mjs\";\nimport { Web3 } from \"./resources/web3/web3.mjs\";\nimport { WorkersForPlatforms } from \"./resources/workers-for-platforms/workers-for-platforms.mjs\";\nimport { Workers } from \"./resources/workers/workers.mjs\";\nimport { Workflows } from \"./resources/workflows/workflows.mjs\";\nimport { Zaraz } from \"./resources/zaraz/zaraz.mjs\";\nimport { ZeroTrust } from \"./resources/zero-trust/zero-trust.mjs\";\nimport { Zones } from \"./resources/zones/zones.mjs\";\n/**\n * API Client for interfacing with the Cloudflare API.\n */\nexport class Cloudflare extends Core.APIClient {\n    /**\n     * API Client for interfacing with the Cloudflare API.\n     *\n     * @param {string | null | undefined} [opts.apiToken=process.env['CLOUDFLARE_API_TOKEN'] ?? null]\n     * @param {string | null | undefined} [opts.apiKey=process.env['CLOUDFLARE_API_KEY'] ?? null]\n     * @param {string | null | undefined} [opts.apiEmail=process.env['CLOUDFLARE_EMAIL'] ?? null]\n     * @param {string | null | undefined} [opts.userServiceKey=process.env['CLOUDFLARE_API_USER_SERVICE_KEY'] ?? null]\n     * @param {string} [opts.baseURL=process.env['CLOUDFLARE_BASE_URL'] ?? https://api.cloudflare.com/client/v4] - Override the default base URL for the API.\n     * @param {string | null} [opts.apiVersion] - Define the version to target for the API.\n     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     */\n    constructor({ baseURL = Core.readEnv('CLOUDFLARE_BASE_URL'), apiVersion = null, apiToken = Core.readEnv('CLOUDFLARE_API_TOKEN') ?? null, apiKey = Core.readEnv('CLOUDFLARE_API_KEY') ?? null, apiEmail = Core.readEnv('CLOUDFLARE_EMAIL') ?? null, userServiceKey = Core.readEnv('CLOUDFLARE_API_USER_SERVICE_KEY') ?? null, ...opts } = {}) {\n        const options = {\n            apiToken,\n            apiKey,\n            apiEmail,\n            userServiceKey,\n            ...opts,\n            baseURL: baseURL || `https://api.cloudflare.com/client/v4`,\n            apiVersion: apiVersion || new Date().toISOString().slice(0, 10),\n        };\n        super({\n            baseURL: options.baseURL,\n            apiVersion: options.apiVersion,\n            baseURLOverridden: baseURL ? baseURL !== 'https://api.cloudflare.com/client/v4' : false,\n            timeout: options.timeout ?? 60000 /* 1 minute */,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch,\n        });\n        _Cloudflare_instances.add(this);\n        this.accounts = new API.Accounts(this);\n        this.originCACertificates = new API.OriginCACertificates(this);\n        this.ips = new API.IPs(this);\n        this.memberships = new API.Memberships(this);\n        this.user = new API.User(this);\n        this.zones = new API.Zones(this);\n        this.loadBalancers = new API.LoadBalancers(this);\n        this.cache = new API.Cache(this);\n        this.ssl = new API.SSL(this);\n        this.acm = new API.ACM(this);\n        this.argo = new API.Argo(this);\n        this.certificateAuthorities = new API.CertificateAuthorities(this);\n        this.clientCertificates = new API.ClientCertificates(this);\n        this.customCertificates = new API.CustomCertificates(this);\n        this.customHostnames = new API.CustomHostnames(this);\n        this.customNameservers = new API.CustomNameservers(this);\n        this.dnsFirewall = new API.DNSFirewall(this);\n        this.dns = new API.DNS(this);\n        this.emailSecurity = new API.EmailSecurity(this);\n        this.emailRouting = new API.EmailRouting(this);\n        this.filters = new API.Filters(this);\n        this.firewall = new API.Firewall(this);\n        this.healthchecks = new API.Healthchecks(this);\n        this.keylessCertificates = new API.KeylessCertificates(this);\n        this.logpush = new API.Logpush(this);\n        this.logs = new API.Logs(this);\n        this.originTLSClientAuth = new API.OriginTLSClientAuth(this);\n        this.pageRules = new API.PageRules(this);\n        this.rateLimits = new API.RateLimits(this);\n        this.waitingRooms = new API.WaitingRooms(this);\n        this.web3 = new API.Web3(this);\n        this.workers = new API.Workers(this);\n        this.kv = new API.KV(this);\n        this.durableObjects = new API.DurableObjects(this);\n        this.queues = new API.Queues(this);\n        this.apiGateway = new API.APIGateway(this);\n        this.managedTransforms = new API.ManagedTransforms(this);\n        this.pageShield = new API.PageShield(this);\n        this.rulesets = new API.Rulesets(this);\n        this.urlNormalization = new API.URLNormalization(this);\n        this.spectrum = new API.Spectrum(this);\n        this.addressing = new API.Addressing(this);\n        this.auditLogs = new API.AuditLogs(this);\n        this.billing = new API.Billing(this);\n        this.brandProtection = new API.BrandProtection(this);\n        this.diagnostics = new API.Diagnostics(this);\n        this.images = new API.Images(this);\n        this.intel = new API.Intel(this);\n        this.magicTransit = new API.MagicTransit(this);\n        this.magicNetworkMonitoring = new API.MagicNetworkMonitoring(this);\n        this.magicCloudNetworking = new API.MagicCloudNetworking(this);\n        this.networkInterconnects = new API.NetworkInterconnects(this);\n        this.mtlsCertificates = new API.MTLSCertificates(this);\n        this.pages = new API.Pages(this);\n        this.registrar = new API.Registrar(this);\n        this.requestTracers = new API.RequestTracers(this);\n        this.rules = new API.Rules(this);\n        this.stream = new API.Stream(this);\n        this.alerting = new API.Alerting(this);\n        this.d1 = new API.D1Resource(this);\n        this.r2 = new API.R2(this);\n        this.workersForPlatforms = new API.WorkersForPlatforms(this);\n        this.zeroTrust = new API.ZeroTrust(this);\n        this.turnstile = new API.Turnstile(this);\n        this.hyperdrive = new API.HyperdriveResource(this);\n        this.rum = new API.RUM(this);\n        this.vectorize = new API.Vectorize(this);\n        this.urlScanner = new API.URLScanner(this);\n        this.radar = new API.Radar(this);\n        this.botManagement = new API.BotManagement(this);\n        this.originPostQuantumEncryption = new API.OriginPostQuantumEncryption(this);\n        this.zaraz = new API.Zaraz(this);\n        this.speed = new API.Speed(this);\n        this.dcvDelegation = new API.DCVDelegation(this);\n        this.hostnames = new API.Hostnames(this);\n        this.snippets = new API.Snippets(this);\n        this.calls = new API.Calls(this);\n        this.cloudforceOne = new API.CloudforceOne(this);\n        this.aiGateway = new API.AIGateway(this);\n        this.iam = new API.IAM(this);\n        this.cloudConnector = new API.CloudConnector(this);\n        this.botnetFeed = new API.BotnetFeed(this);\n        this.securityTXT = new API.SecurityTXT(this);\n        this.workflows = new API.Workflows(this);\n        this.resourceSharing = new API.ResourceSharing(this);\n        this.leakedCredentialChecks = new API.LeakedCredentialChecks(this);\n        this.contentScanning = new API.ContentScanning(this);\n        this.abuseReports = new API.AbuseReports(this);\n        this.ai = new API.AI(this);\n        this.securityCenter = new API.SecurityCenter(this);\n        this.browserRendering = new API.BrowserRendering(this);\n        this.customPages = new API.CustomPages(this);\n        this.secretsStore = new API.SecretsStore(this);\n        this.pipelines = new API.Pipelines(this);\n        this.schemaValidation = new API.SchemaValidation(this);\n        this._options = options;\n        this.apiToken = apiToken;\n        this.apiKey = apiKey;\n        this.apiEmail = apiEmail;\n        this.userServiceKey = userServiceKey;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            'X-Auth-Key': this.apiKey,\n            'X-Auth-Email': this.apiEmail,\n            ...this._options.defaultHeaders,\n        };\n    }\n    validateHeaders(headers, customHeaders, usingCustomFetch) {\n        if (this.apiEmail && headers['x-auth-email']) {\n            return;\n        }\n        if (customHeaders['x-auth-email'] === null) {\n            return;\n        }\n        if (this.apiKey && headers['x-auth-key']) {\n            return;\n        }\n        if (customHeaders['x-auth-key'] === null) {\n            return;\n        }\n        if (this.apiToken && headers['authorization']) {\n            return;\n        }\n        if (customHeaders['authorization'] === null) {\n            return;\n        }\n        if (this.userServiceKey && headers['x-auth-user-service-key']) {\n            return;\n        }\n        if (customHeaders['x-auth-user-service-key'] === null) {\n            return;\n        }\n        // we can't check for the presence of the headers with a custom fetch implementation, so we shouldn't throw an error\n        if (usingCustomFetch) {\n            return;\n        }\n        throw new Error('Could not resolve authentication method. Expected one of apiEmail, apiKey, apiToken or userServiceKey to be set. Or for one of the \"X-Auth-Email\", \"X-Auth-Key\", \"Authorization\" or \"X-Auth-User-Service-Key\" headers to be explicitly omitted');\n    }\n    authHeaders(opts) {\n        const apiEmailAuth = this.apiEmailAuth(opts);\n        const apiKeyAuth = this.apiKeyAuth(opts);\n        const apiTokenAuth = this.apiTokenAuth(opts);\n        const userServiceKeyAuth = this.userServiceKeyAuth(opts);\n        if (apiEmailAuth != null &&\n            !Core.isEmptyObj(apiEmailAuth) &&\n            apiKeyAuth != null &&\n            !Core.isEmptyObj(apiKeyAuth)) {\n            return { ...apiEmailAuth, ...apiKeyAuth };\n        }\n        if (apiTokenAuth != null && !Core.isEmptyObj(apiTokenAuth)) {\n            return apiTokenAuth;\n        }\n        if (userServiceKeyAuth != null && !Core.isEmptyObj(userServiceKeyAuth)) {\n            return userServiceKeyAuth;\n        }\n        return {};\n    }\n    apiEmailAuth(opts) {\n        if (this.apiEmail == null) {\n            return {};\n        }\n        return { 'X-Auth-Email': this.apiEmail };\n    }\n    apiKeyAuth(opts) {\n        if (this.apiKey == null) {\n            return {};\n        }\n        return { 'X-Auth-Key': this.apiKey };\n    }\n    apiTokenAuth(opts) {\n        if (this.apiToken == null) {\n            return {};\n        }\n        return { Authorization: `Bearer ${this.apiToken}` };\n    }\n    userServiceKeyAuth(opts) {\n        if (this.userServiceKey == null) {\n            return {};\n        }\n        return { 'X-Auth-User-Service-Key': this.userServiceKey };\n    }\n    stringifyQuery(query) {\n        return qs.stringify(query, { allowDots: true, arrayFormat: 'repeat' });\n    }\n}\n_a = Cloudflare, _Cloudflare_instances = new WeakSet(), _Cloudflare_baseURLOverridden = function _Cloudflare_baseURLOverridden() {\n    return this.baseURL !== 'https://api.cloudflare.com/client/v4';\n};\nCloudflare.Cloudflare = _a;\nCloudflare.DEFAULT_TIMEOUT = 60000; // 1 minute\nCloudflare.CloudflareError = Errors.CloudflareError;\nCloudflare.APIError = Errors.APIError;\nCloudflare.APIConnectionError = Errors.APIConnectionError;\nCloudflare.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\nCloudflare.APIUserAbortError = Errors.APIUserAbortError;\nCloudflare.NotFoundError = Errors.NotFoundError;\nCloudflare.ConflictError = Errors.ConflictError;\nCloudflare.RateLimitError = Errors.RateLimitError;\nCloudflare.BadRequestError = Errors.BadRequestError;\nCloudflare.AuthenticationError = Errors.AuthenticationError;\nCloudflare.InternalServerError = Errors.InternalServerError;\nCloudflare.PermissionDeniedError = Errors.PermissionDeniedError;\nCloudflare.UnprocessableEntityError = Errors.UnprocessableEntityError;\nCloudflare.toFile = Uploads.toFile;\nCloudflare.fileFromPath = Uploads.fileFromPath;\nCloudflare.Accounts = Accounts;\nCloudflare.OriginCACertificates = OriginCACertificates;\nCloudflare.IPs = IPs;\nCloudflare.Memberships = Memberships;\nCloudflare.User = User;\nCloudflare.Zones = Zones;\nCloudflare.LoadBalancers = LoadBalancers;\nCloudflare.Cache = Cache;\nCloudflare.SSL = SSL;\nCloudflare.ACM = ACM;\nCloudflare.Argo = Argo;\nCloudflare.CertificateAuthorities = CertificateAuthorities;\nCloudflare.ClientCertificates = ClientCertificates;\nCloudflare.CustomCertificates = CustomCertificates;\nCloudflare.CustomHostnames = CustomHostnames;\nCloudflare.CustomNameservers = CustomNameservers;\nCloudflare.DNSFirewall = DNSFirewall;\nCloudflare.DNS = DNS;\nCloudflare.EmailSecurity = EmailSecurity;\nCloudflare.EmailRouting = EmailRouting;\nCloudflare.Filters = Filters;\nCloudflare.Firewall = Firewall;\nCloudflare.Healthchecks = Healthchecks;\nCloudflare.KeylessCertificates = KeylessCertificates;\nCloudflare.Logpush = Logpush;\nCloudflare.Logs = Logs;\nCloudflare.OriginTLSClientAuth = OriginTLSClientAuth;\nCloudflare.PageRules = PageRules;\nCloudflare.RateLimits = RateLimits;\nCloudflare.WaitingRooms = WaitingRooms;\nCloudflare.Web3 = Web3;\nCloudflare.Workers = Workers;\nCloudflare.KV = KV;\nCloudflare.DurableObjects = DurableObjects;\nCloudflare.Queues = Queues;\nCloudflare.APIGateway = APIGateway;\nCloudflare.ManagedTransforms = ManagedTransforms;\nCloudflare.PageShield = PageShield;\nCloudflare.Rulesets = Rulesets;\nCloudflare.URLNormalization = URLNormalization;\nCloudflare.Spectrum = Spectrum;\nCloudflare.Addressing = Addressing;\nCloudflare.AuditLogs = AuditLogs;\nCloudflare.Billing = Billing;\nCloudflare.BrandProtection = BrandProtection;\nCloudflare.Diagnostics = Diagnostics;\nCloudflare.Images = Images;\nCloudflare.Intel = Intel;\nCloudflare.MagicTransit = MagicTransit;\nCloudflare.MagicNetworkMonitoring = MagicNetworkMonitoring;\nCloudflare.MagicCloudNetworking = MagicCloudNetworking;\nCloudflare.NetworkInterconnects = NetworkInterconnects;\nCloudflare.MTLSCertificates = MTLSCertificates;\nCloudflare.Pages = Pages;\nCloudflare.Registrar = Registrar;\nCloudflare.RequestTracers = RequestTracers;\nCloudflare.Rules = Rules;\nCloudflare.Stream = Stream;\nCloudflare.Alerting = Alerting;\nCloudflare.D1Resource = D1Resource;\nCloudflare.R2 = R2;\nCloudflare.WorkersForPlatforms = WorkersForPlatforms;\nCloudflare.ZeroTrust = ZeroTrust;\nCloudflare.Turnstile = Turnstile;\nCloudflare.HyperdriveResource = HyperdriveResource;\nCloudflare.RUM = RUM;\nCloudflare.Vectorize = Vectorize;\nCloudflare.URLScanner = URLScanner;\nCloudflare.Radar = Radar;\nCloudflare.BotManagement = BotManagement;\nCloudflare.OriginPostQuantumEncryption = OriginPostQuantumEncryption;\nCloudflare.Zaraz = Zaraz;\nCloudflare.Speed = Speed;\nCloudflare.DCVDelegation = DCVDelegation;\nCloudflare.Hostnames = Hostnames;\nCloudflare.Snippets = Snippets;\nCloudflare.Calls = Calls;\nCloudflare.CloudforceOne = CloudforceOne;\nCloudflare.AIGateway = AIGateway;\nCloudflare.IAM = IAM;\nCloudflare.CloudConnector = CloudConnector;\nCloudflare.BotnetFeed = BotnetFeed;\nCloudflare.SecurityTXT = SecurityTXT;\nCloudflare.Workflows = Workflows;\nCloudflare.ResourceSharing = ResourceSharing;\nCloudflare.LeakedCredentialChecks = LeakedCredentialChecks;\nCloudflare.ContentScanning = ContentScanning;\nCloudflare.AbuseReports = AbuseReports;\nCloudflare.AI = AI;\nCloudflare.SecurityCenter = SecurityCenter;\nCloudflare.BrowserRendering = BrowserRendering;\nCloudflare.CustomPages = CustomPages;\nCloudflare.SecretsStore = SecretsStore;\nCloudflare.Pipelines = Pipelines;\nCloudflare.SchemaValidation = SchemaValidation;\nexport { toFile, fileFromPath } from \"./uploads.mjs\";\nexport { CloudflareError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from \"./error.mjs\";\nexport default Cloudflare;\n//# sourceMappingURL=index.mjs.map","'use strict'\n\nimport core from '@actions/core'\nimport Cloudflare from 'cloudflare'\n\nexport default async function getDeploymentUrl(\n  token,\n  accountId,\n  accountEmail,\n  projectId,\n  repo,\n  branch,\n  environment,\n  commitHash\n) {\n  if (commitHash) {\n    core.info(`Fetching deployments for commit ${commitHash}`)\n  } else {\n    core.info(`Fetching deployments for project ${projectId}`)\n  }\n\n  const cf = new Cloudflare({\n    apiToken: accountEmail ? undefined : token,\n    apiKey: accountEmail ? token : undefined,\n    apiEmail: accountEmail\n  })\n\n  try {\n    const response = await cf.pages.projects.deployments.list({\n      account_id: accountId,\n      project_name: projectId\n    })\n\n    if (!response.result || response.result.length <= 0) {\n      core.error('No deployments found')\n      core.setFailed('no deployments found')\n      throw new Error('no deployments found')\n    }\n\n    const result = response.result\n\n    core.info(`Found ${result.length} deployments`)\n    core.debug(`Looking for matching deployments ${repo}/${branch}`)\n\n    const builds = result\n      .filter(\n        (d) =>\n          d && d.source && d.source.config && d.source.config.repo_name === repo\n      )\n      .filter(\n        (d) =>\n          d &&\n          d.deployment_trigger &&\n          d.deployment_trigger.metadata.branch === branch\n      )\n      .filter((d) => {\n        if (environment && environment.length > 0) {\n          return d.environment === environment\n        } else {\n          return true\n        }\n      })\n      .filter(\n        (d) =>\n          !commitHash ||\n          (d.deployment_trigger.metadata !== null &&\n            d.deployment_trigger.metadata.commit_hash === commitHash)\n      )\n\n    core.info(`Found ${builds.length} matching builds`)\n    if (!builds || builds.length <= 0) {\n      core.error(JSON.stringify(builds))\n      core.info(\n        'If you run this as a pull request check, make sure to include the branch in the trigger (see #Usage in README.md)'\n      )\n      core.setFailed('no matching builds found')\n      throw new Error('no matching builds found')\n    }\n\n    const build = builds[0]\n    core.info(\n      `Preview URL: ${build.url} (${build.latest_stage.name} - ${build.latest_stage.status})`\n    )\n\n    return build\n  } catch (error) {\n    core.error('Error fetching deployments from Cloudflare API')\n    core.error(error.message)\n    core.setFailed('error fetching deployments')\n    throw new Error('error fetching deployments')\n  }\n}\n","'use strict'\n\nimport core from '@actions/core'\nimport Cloudflare from 'cloudflare'\n\nexport default async function waitForDeployment(\n  token,\n  accountId,\n  accountEmail,\n  projectId,\n  deploymentId\n) {\n  core.info(`Checking deployment status for ID: ${deploymentId} ...`)\n\n  const cf = new Cloudflare({\n    apiToken: accountEmail ? undefined : token,\n    apiKey: accountEmail ? token : undefined,\n    apiEmail: accountEmail\n  })\n\n  try {\n    const response = await cf.pages.projects.deployments.list({\n      account_id: accountId,\n      project_name: projectId\n    })\n\n    core.debug('Deployment status response:')\n    core.debug(JSON.stringify(response))\n\n    if (!response.result) {\n      core.error('Invalid API response: missing result')\n      core.error(JSON.stringify(response))\n      core.setFailed('API response does not contain expected data structure')\n      throw new Error('Invalid API response. Abort.')\n    }\n\n    const build = response.result.filter((d) => d.id === deploymentId)[0]\n\n    core.info(\n      `Deployment status (#${build.short_id}) ${build.latest_stage.name}: ${build.latest_stage.status}`\n    )\n\n    if (!build) {\n      core.error(response.result)\n      core.setFailed('no build with this ID found.')\n      throw new Error('No build id. Abort.')\n    }\n\n    if (build.latest_stage.status === 'failure') {\n      core.setFailed(`${build.latest_stage.name}: ${build.latest_stage.status}`)\n      throw new Error('Build failed. Abort.')\n    }\n\n    return (\n      build.latest_stage.name === 'deploy' &&\n      build.latest_stage.status === 'success'\n    )\n  } catch (error) {\n    core.error('Error fetching deployment status from Cloudflare API')\n    core.error(error.message)\n    core.setFailed('Failed to fetch deployment status')\n    throw new Error(`Failed to fetch deployment status: ${error.message}`)\n  }\n}\n","'use strict'\n\nimport core from '@actions/core'\nimport getDeploymentUrl from './cloudflare.js'\nimport checkDeploymentStatus from './cloudflare-statuscheck.js'\n\nasync function delay(ms) {\n  return await new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nasync function run() {\n  try {\n    const cloudflareToken = process.env.CLOUDFLARE_API_TOKEN\n    const githubRef =\n      core.getInput('branch', { required: false }) || process.env.GITHUB_REF\n    const githubProject = process.env.GITHUB_REPOSITORY\n    const githubBranch = githubRef.replace('refs/heads/', '')\n    const githubRepo = githubProject.split('/')[1]\n    const accountId = process.env.CLOUDFLARE_ACCOUNT_ID\n    const accountEmail = process.env.CLOUDFLARE_ACCOUNT_EMAIL\n    const projectId = core.getInput('cloudflare_project_id')\n    const waitForDeploymentReady = core.getInput('wait_until_ready')\n    const environment = core.getInput('environment', { required: false })\n    const inputHash = core.getInput('commit_hash', { required: false })\n    const commitHash = inputHash === '' || inputHash === null ? null : inputHash\n\n    core.info(\n      `Retrieving deployment preview for ${githubRepo}/${githubBranch} ...`\n    )\n\n    const { id, url } = await getDeploymentUrl(\n      cloudflareToken,\n      accountId,\n      accountEmail,\n      projectId,\n      githubRepo,\n      githubBranch,\n      environment,\n      commitHash\n    )\n\n    if (waitForDeploymentReady === 'true') {\n      let deploymentReady = false\n\n      while (!deploymentReady) {\n        deploymentReady = await checkDeploymentStatus(\n          cloudflareToken,\n          accountId,\n          accountEmail,\n          projectId,\n          id\n        )\n\n        if (!deploymentReady) {\n          await delay(2000)\n        }\n      }\n    }\n\n    core.setOutput('preview_url', url)\n  } catch (error) {\n    core.setFailed(error.message)\n  }\n}\n\nrun()\n"],"names":[],"sourceRoot":""}